
Self_Drive_Car_ver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  08007018  08007018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e48  08007e48  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e48  08007e48  00008e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e50  08007e50  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e50  08007e50  00008e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e54  08007e54  00008e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08007e58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  2000007c  08007ed4  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  08007ed4  0000989c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011342  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000291d  00000000  00000000  0001a3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001cd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1b  00000000  00000000  0001dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e42  00000000  00000000  0001eafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b97  00000000  00000000  0002293d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009261f  00000000  00000000  000364d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c0  00000000  00000000  000c8b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000cdbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007000 	.word	0x08007000

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08007000 	.word	0x08007000

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96a 	b.w	8000b88 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	460c      	mov	r4, r1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d14e      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008d8:	4694      	mov	ip, r2
 80008da:	458c      	cmp	ip, r1
 80008dc:	4686      	mov	lr, r0
 80008de:	fab2 f282 	clz	r2, r2
 80008e2:	d962      	bls.n	80009aa <__udivmoddi4+0xde>
 80008e4:	b14a      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e6:	f1c2 0320 	rsb	r3, r2, #32
 80008ea:	4091      	lsls	r1, r2
 80008ec:	fa20 f303 	lsr.w	r3, r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	4319      	orrs	r1, r3
 80008f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f f68c 	uxth.w	r6, ip
 8000902:	fbb1 f4f7 	udiv	r4, r1, r7
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb07 1114 	mls	r1, r7, r4, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb04 f106 	mul.w	r1, r4, r6
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000922:	f080 8112 	bcs.w	8000b4a <__udivmoddi4+0x27e>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 810f 	bls.w	8000b4a <__udivmoddi4+0x27e>
 800092c:	3c02      	subs	r4, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a59      	subs	r1, r3, r1
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb1 f0f7 	udiv	r0, r1, r7
 800093a:	fb07 1110 	mls	r1, r7, r0, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb00 f606 	mul.w	r6, r0, r6
 8000946:	429e      	cmp	r6, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x94>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000952:	f080 80fc 	bcs.w	8000b4e <__udivmoddi4+0x282>
 8000956:	429e      	cmp	r6, r3
 8000958:	f240 80f9 	bls.w	8000b4e <__udivmoddi4+0x282>
 800095c:	4463      	add	r3, ip
 800095e:	3802      	subs	r0, #2
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000966:	2100      	movs	r1, #0
 8000968:	b11d      	cbz	r5, 8000972 <__udivmoddi4+0xa6>
 800096a:	40d3      	lsrs	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	e9c5 3200 	strd	r3, r2, [r5]
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d905      	bls.n	8000986 <__udivmoddi4+0xba>
 800097a:	b10d      	cbz	r5, 8000980 <__udivmoddi4+0xb4>
 800097c:	e9c5 0100 	strd	r0, r1, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	4608      	mov	r0, r1
 8000984:	e7f5      	b.n	8000972 <__udivmoddi4+0xa6>
 8000986:	fab3 f183 	clz	r1, r3
 800098a:	2900      	cmp	r1, #0
 800098c:	d146      	bne.n	8000a1c <__udivmoddi4+0x150>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xcc>
 8000992:	4290      	cmp	r0, r2
 8000994:	f0c0 80f0 	bcc.w	8000b78 <__udivmoddi4+0x2ac>
 8000998:	1a86      	subs	r6, r0, r2
 800099a:	eb64 0303 	sbc.w	r3, r4, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e6      	beq.n	8000972 <__udivmoddi4+0xa6>
 80009a4:	e9c5 6300 	strd	r6, r3, [r5]
 80009a8:	e7e3      	b.n	8000972 <__udivmoddi4+0xa6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8090 	bne.w	8000ad0 <__udivmoddi4+0x204>
 80009b0:	eba1 040c 	sub.w	r4, r1, ip
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	fa1f f78c 	uxth.w	r7, ip
 80009bc:	2101      	movs	r1, #1
 80009be:	fbb4 f6f8 	udiv	r6, r4, r8
 80009c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009c6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ce:	fb07 f006 	mul.w	r0, r7, r6
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x11c>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f106 34ff 	add.w	r4, r6, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x11a>
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f200 80cd 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009e6:	4626      	mov	r6, r4
 80009e8:	1a1c      	subs	r4, r3, r0
 80009ea:	fa1f f38e 	uxth.w	r3, lr
 80009ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80009f2:	fb08 4410 	mls	r4, r8, r0, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb00 f707 	mul.w	r7, r0, r7
 80009fe:	429f      	cmp	r7, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x148>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x146>
 8000a0c:	429f      	cmp	r7, r3
 8000a0e:	f200 80b0 	bhi.w	8000b72 <__udivmoddi4+0x2a6>
 8000a12:	4620      	mov	r0, r4
 8000a14:	1bdb      	subs	r3, r3, r7
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	e7a5      	b.n	8000968 <__udivmoddi4+0x9c>
 8000a1c:	f1c1 0620 	rsb	r6, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 f706 	lsr.w	r7, r2, r6
 8000a26:	431f      	orrs	r7, r3
 8000a28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a30:	ea43 030c 	orr.w	r3, r3, ip
 8000a34:	40f4      	lsrs	r4, r6
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	0c38      	lsrs	r0, r7, #16
 8000a3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a40:	fbb4 fef0 	udiv	lr, r4, r0
 8000a44:	fa1f fc87 	uxth.w	ip, r7
 8000a48:	fb00 441e 	mls	r4, r0, lr, r4
 8000a4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a50:	fb0e f90c 	mul.w	r9, lr, ip
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x1a6>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a62:	f080 8084 	bcs.w	8000b6e <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8081 	bls.w	8000b6e <__udivmoddi4+0x2a2>
 8000a6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	eba4 0409 	sub.w	r4, r4, r9
 8000a76:	fa1f f983 	uxth.w	r9, r3
 8000a7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x1d2>
 8000a8e:	193c      	adds	r4, r7, r4
 8000a90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a94:	d267      	bcs.n	8000b66 <__udivmoddi4+0x29a>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0x29a>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000aa2:	fba0 9302 	umull	r9, r3, r0, r2
 8000aa6:	eba4 040c 	sub.w	r4, r4, ip
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	46ce      	mov	lr, r9
 8000aae:	469c      	mov	ip, r3
 8000ab0:	d351      	bcc.n	8000b56 <__udivmoddi4+0x28a>
 8000ab2:	d04e      	beq.n	8000b52 <__udivmoddi4+0x286>
 8000ab4:	b155      	cbz	r5, 8000acc <__udivmoddi4+0x200>
 8000ab6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aba:	eb64 040c 	sbc.w	r4, r4, ip
 8000abe:	fa04 f606 	lsl.w	r6, r4, r6
 8000ac2:	40cb      	lsrs	r3, r1
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	40cc      	lsrs	r4, r1
 8000ac8:	e9c5 6400 	strd	r6, r4, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	e750      	b.n	8000972 <__udivmoddi4+0xa6>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	430c      	orrs	r4, r1
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aec:	fa1f f78c 	uxth.w	r7, ip
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3110 	mls	r1, r8, r0, r3
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb00 f107 	mul.w	r1, r0, r7
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x24c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b0e:	d22c      	bcs.n	8000b6a <__udivmoddi4+0x29e>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	d92a      	bls.n	8000b6a <__udivmoddi4+0x29e>
 8000b14:	3802      	subs	r0, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b20:	fb08 3311 	mls	r3, r8, r1, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x276>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b38:	d213      	bcs.n	8000b62 <__udivmoddi4+0x296>
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	d911      	bls.n	8000b62 <__udivmoddi4+0x296>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4464      	add	r4, ip
 8000b42:	1ae4      	subs	r4, r4, r3
 8000b44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b48:	e739      	b.n	80009be <__udivmoddi4+0xf2>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	e6f0      	b.n	8000930 <__udivmoddi4+0x64>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0x94>
 8000b52:	45c8      	cmp	r8, r9
 8000b54:	d2ae      	bcs.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7a8      	b.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b62:	4631      	mov	r1, r6
 8000b64:	e7ed      	b.n	8000b42 <__udivmoddi4+0x276>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e799      	b.n	8000a9e <__udivmoddi4+0x1d2>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e7d4      	b.n	8000b18 <__udivmoddi4+0x24c>
 8000b6e:	46d6      	mov	lr, sl
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1a6>
 8000b72:	4463      	add	r3, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	e74d      	b.n	8000a14 <__udivmoddi4+0x148>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e70f      	b.n	80009a0 <__udivmoddi4+0xd4>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	e730      	b.n	80009e8 <__udivmoddi4+0x11c>
 8000b86:	bf00      	nop

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <SSD1306_WRITECOMMAND>:
/* SSD1306 data buffer */
static char SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];


void SSD1306_WRITECOMMAND(char command)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	OLED_CommMode();
 8000b96:	f000 fb0d 	bl	80011b4 <OLED_CommMode>
	OLED_Select();
 8000b9a:	f000 fae1 	bl	8001160 <OLED_Select>
	OLED_SPI_Write(&command,1);
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 faa6 	bl	80010f4 <OLED_SPI_Write>
	OLED_Deselect();
 8000ba8:	f000 fae8 	bl	800117c <OLED_Deselect>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <SSD1306_Write_Multi_Data>:
	OLED_SPI_Write(&command,1);
	OLED_Deselect();
}

void SSD1306_Write_Multi_Data(char * data, uint16_t length)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]
	OLED_DataMode();
 8000bc0:	f000 faea 	bl	8001198 <OLED_DataMode>
	OLED_Select();
 8000bc4:	f000 facc 	bl	8001160 <OLED_Select>
	OLED_SPI_Write((char*)data,length);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 fa91 	bl	80010f4 <OLED_SPI_Write>
	OLED_Deselect();
 8000bd2:	f000 fad3 	bl	800117c <OLED_Deselect>

}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <SSD1306_Init>:




uint8_t SSD1306_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
	 OLED_SPI_Pins_Init();
 8000be6:	f000 f9db 	bl	8000fa0 <OLED_SPI_Pins_Init>

	 OLED_SPI_Configure();
 8000bea:	f000 fa43 	bl	8001074 <OLED_SPI_Configure>
	/* A little delay */
	uint32_t p = 2500;
 8000bee:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000bf2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bf4:	e002      	b.n	8000bfc <SSD1306_Init+0x1c>
		p--;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f9      	bne.n	8000bf6 <SSD1306_Init+0x16>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000c02:	20ae      	movs	r0, #174	@ 0xae
 8000c04:	f7ff ffc2 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c08:	2020      	movs	r0, #32
 8000c0a:	f7ff ffbf 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c0e:	2010      	movs	r0, #16
 8000c10:	f7ff ffbc 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c14:	20b0      	movs	r0, #176	@ 0xb0
 8000c16:	f7ff ffb9 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c1a:	20c8      	movs	r0, #200	@ 0xc8
 8000c1c:	f7ff ffb6 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff ffb3 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c26:	2010      	movs	r0, #16
 8000c28:	f7ff ffb0 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c2c:	2040      	movs	r0, #64	@ 0x40
 8000c2e:	f7ff ffad 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c32:	2081      	movs	r0, #129	@ 0x81
 8000c34:	f7ff ffaa 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xFF);
 8000c38:	20ff      	movs	r0, #255	@ 0xff
 8000c3a:	f7ff ffa7 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c3e:	20a1      	movs	r0, #161	@ 0xa1
 8000c40:	f7ff ffa4 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c44:	20a6      	movs	r0, #166	@ 0xa6
 8000c46:	f7ff ffa1 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c4a:	20a8      	movs	r0, #168	@ 0xa8
 8000c4c:	f7ff ff9e 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c50:	203f      	movs	r0, #63	@ 0x3f
 8000c52:	f7ff ff9b 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c56:	20a4      	movs	r0, #164	@ 0xa4
 8000c58:	f7ff ff98 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c5c:	20d3      	movs	r0, #211	@ 0xd3
 8000c5e:	f7ff ff95 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ff92 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c68:	20d5      	movs	r0, #213	@ 0xd5
 8000c6a:	f7ff ff8f 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c6e:	20f0      	movs	r0, #240	@ 0xf0
 8000c70:	f7ff ff8c 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c74:	20d9      	movs	r0, #217	@ 0xd9
 8000c76:	f7ff ff89 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x22); //
 8000c7a:	2022      	movs	r0, #34	@ 0x22
 8000c7c:	f7ff ff86 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c80:	20da      	movs	r0, #218	@ 0xda
 8000c82:	f7ff ff83 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x12);
 8000c86:	2012      	movs	r0, #18
 8000c88:	f7ff ff80 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c8c:	20db      	movs	r0, #219	@ 0xdb
 8000c8e:	f7ff ff7d 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c92:	2020      	movs	r0, #32
 8000c94:	f7ff ff7a 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000c98:	208d      	movs	r0, #141	@ 0x8d
 8000c9a:	f7ff ff77 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x14); //
 8000c9e:	2014      	movs	r0, #20
 8000ca0:	f7ff ff74 	bl	8000b8c <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ca4:	20af      	movs	r0, #175	@ 0xaf
 8000ca6:	f7ff ff71 	bl	8000b8c <SSD1306_WRITECOMMAND>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000caa:	202e      	movs	r0, #46	@ 0x2e
 8000cac:	f7ff ff6e 	bl	8000b8c <SSD1306_WRITECOMMAND>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 f83b 	bl	8000d2c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000cb6:	f000 f811 	bl	8000cdc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <SSD1306_Init+0xf8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <SSD1306_Init+0xf8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <SSD1306_Init+0xf8>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000ccc:	2301      	movs	r3, #1
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000498 	.word	0x20000498

08000cdc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	e016      	b.n	8000d16 <SSD1306_UpdateScreen+0x3a>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	3b50      	subs	r3, #80	@ 0x50
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff4c 	bl	8000b8c <SSD1306_WRITECOMMAND>
		SSD1306_WRITECOMMAND(0x00);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff ff49 	bl	8000b8c <SSD1306_WRITECOMMAND>
		SSD1306_WRITECOMMAND(0x10);
 8000cfa:	2010      	movs	r0, #16
 8000cfc:	f7ff ff46 	bl	8000b8c <SSD1306_WRITECOMMAND>
		
		/* Write multi data */

		SSD1306_Write_Multi_Data(&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	01db      	lsls	r3, r3, #7
 8000d04:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <SSD1306_UpdateScreen+0x4c>)
 8000d06:	4413      	add	r3, r2
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff52 	bl	8000bb4 <SSD1306_Write_Multi_Data>
	for (m = 0; m < 8; m++) {
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	3301      	adds	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b07      	cmp	r3, #7
 8000d1a:	d9e5      	bls.n	8000ce8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000098 	.word	0x20000098

08000d2c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <SSD1306_Fill+0x14>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e000      	b.n	8000d42 <SSD1306_Fill+0x16>
 8000d40:	23ff      	movs	r3, #255	@ 0xff
 8000d42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d46:	4619      	mov	r1, r3
 8000d48:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <SSD1306_Fill+0x2c>)
 8000d4a:	f005 fa0d 	bl	8006168 <memset>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000098 	.word	0x20000098

08000d5c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
 8000d66:	460b      	mov	r3, r1
 8000d68:	80bb      	strh	r3, [r7, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	70fb      	strb	r3, [r7, #3]
	if (
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d72:	d848      	bhi.n	8000e06 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d74:	88bb      	ldrh	r3, [r7, #4]
 8000d76:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d78:	d845      	bhi.n	8000e06 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d7a:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <SSD1306_DrawPixel+0xb8>)
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d006      	beq.n	8000d90 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	bf0c      	ite	eq
 8000d88:	2301      	moveq	r3, #1
 8000d8a:	2300      	movne	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11a      	bne.n	8000dcc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d96:	88fa      	ldrh	r2, [r7, #6]
 8000d98:	88bb      	ldrh	r3, [r7, #4]
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	b298      	uxth	r0, r3
 8000d9e:	4603      	mov	r3, r0
 8000da0:	01db      	lsls	r3, r3, #7
 8000da2:	4413      	add	r3, r2
 8000da4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e18 <SSD1306_DrawPixel+0xbc>)
 8000da6:	5cd3      	ldrb	r3, [r2, r3]
 8000da8:	b25a      	sxtb	r2, r3
 8000daa:	88bb      	ldrh	r3, [r7, #4]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b259      	sxtb	r1, r3
 8000dbc:	88fa      	ldrh	r2, [r7, #6]
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	01db      	lsls	r3, r3, #7
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b2c9      	uxtb	r1, r1
 8000dc6:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <SSD1306_DrawPixel+0xbc>)
 8000dc8:	54d1      	strb	r1, [r2, r3]
 8000dca:	e01d      	b.n	8000e08 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dcc:	88fa      	ldrh	r2, [r7, #6]
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	08db      	lsrs	r3, r3, #3
 8000dd2:	b298      	uxth	r0, r3
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	01db      	lsls	r3, r3, #7
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a0f      	ldr	r2, [pc, #60]	@ (8000e18 <SSD1306_DrawPixel+0xbc>)
 8000ddc:	5cd3      	ldrb	r3, [r2, r3]
 8000dde:	b25a      	sxtb	r2, r3
 8000de0:	88bb      	ldrh	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	2101      	movs	r1, #1
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	4013      	ands	r3, r2
 8000df4:	b259      	sxtb	r1, r3
 8000df6:	88fa      	ldrh	r2, [r7, #6]
 8000df8:	4603      	mov	r3, r0
 8000dfa:	01db      	lsls	r3, r3, #7
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b2c9      	uxtb	r1, r1
 8000e00:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <SSD1306_DrawPixel+0xbc>)
 8000e02:	54d1      	strb	r1, [r2, r3]
 8000e04:	e000      	b.n	8000e08 <SSD1306_DrawPixel+0xac>
		return;
 8000e06:	bf00      	nop
	}
}
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000498 	.word	0x20000498
 8000e18:	20000098 	.word	0x20000098

08000e1c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	460a      	mov	r2, r1
 8000e26:	80fb      	strh	r3, [r7, #6]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <SSD1306_GotoXY+0x28>)
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <SSD1306_GotoXY+0x28>)
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	8053      	strh	r3, [r2, #2]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	20000498 	.word	0x20000498

08000e48 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e58:	4b39      	ldr	r3, [pc, #228]	@ (8000f40 <SSD1306_Putc+0xf8>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
	if (
 8000e64:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e66:	dc07      	bgt.n	8000e78 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e68:	4b35      	ldr	r3, [pc, #212]	@ (8000f40 <SSD1306_Putc+0xf8>)
 8000e6a:	885b      	ldrh	r3, [r3, #2]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	785b      	ldrb	r3, [r3, #1]
 8000e72:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e74:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e76:	dd01      	ble.n	8000e7c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e05d      	b.n	8000f38 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	e04b      	b.n	8000f1a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	3b20      	subs	r3, #32
 8000e8a:	6839      	ldr	r1, [r7, #0]
 8000e8c:	7849      	ldrb	r1, [r1, #1]
 8000e8e:	fb01 f303 	mul.w	r3, r1, r3
 8000e92:	4619      	mov	r1, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	440b      	add	r3, r1
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	e030      	b.n	8000f08 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d010      	beq.n	8000ed8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000eb6:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <SSD1306_Putc+0xf8>)
 8000eb8:	881a      	ldrh	r2, [r3, #0]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b298      	uxth	r0, r3
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <SSD1306_Putc+0xf8>)
 8000ec4:	885a      	ldrh	r2, [r3, #2]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	4413      	add	r3, r2
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	79ba      	ldrb	r2, [r7, #6]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff ff43 	bl	8000d5c <SSD1306_DrawPixel>
 8000ed6:	e014      	b.n	8000f02 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <SSD1306_Putc+0xf8>)
 8000eda:	881a      	ldrh	r2, [r3, #0]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b298      	uxth	r0, r3
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <SSD1306_Putc+0xf8>)
 8000ee6:	885a      	ldrh	r2, [r3, #2]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bf0c      	ite	eq
 8000ef6:	2301      	moveq	r3, #1
 8000ef8:	2300      	movne	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	f7ff ff2d 	bl	8000d5c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	3301      	adds	r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d3c8      	bcc.n	8000ea6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	785b      	ldrb	r3, [r3, #1]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d3ad      	bcc.n	8000e82 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <SSD1306_Putc+0xf8>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <SSD1306_Putc+0xf8>)
 8000f34:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000498 	.word	0x20000498

08000f44 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f52:	e012      	b.n	8000f7a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	79fa      	ldrb	r2, [r7, #7]
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff73 	bl	8000e48 <SSD1306_Putc>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d002      	beq.n	8000f74 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	e008      	b.n	8000f86 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1e8      	bne.n	8000f54 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	781b      	ldrb	r3, [r3, #0]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff feca 	bl	8000d2c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000f98:	f7ff fea0 	bl	8000cdc <SSD1306_UpdateScreen>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <OLED_SPI_Pins_Init>:

#include "stm32f4xx.h"


void OLED_SPI_Pins_Init()
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA, GPIOB, and GPIOC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <OLED_SPI_Pins_Init+0xc4>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8001064 <OLED_SPI_Pins_Init+0xc4>)
 8000faa:	f043 0307 	orr.w	r3, r3, #7
 8000fae:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PC7 to alternate function mode (SPI2_SCK)
    GPIOC->MODER &= ~(GPIO_MODER_MODE7);  // Clear MODER bits for PC7
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8000fb6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fba:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= GPIO_MODER_MODE7_1;   // Set PC7 to alternate function mode (10)
 8000fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a29      	ldr	r2, [pc, #164]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8000fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fc6:	6013      	str	r3, [r2, #0]

    // Set PC3 to alternate function mode (SPI2_MOSI)
    GPIOC->MODER &= ~(GPIO_MODER_MODE3);  // Clear MODER bits for PC3
 8000fc8:	4b27      	ldr	r3, [pc, #156]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a26      	ldr	r2, [pc, #152]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8000fce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000fd2:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= GPIO_MODER_MODE3_1;   // Set PC3 to alternate function mode (10)
 8000fd4:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a23      	ldr	r2, [pc, #140]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8000fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fde:	6013      	str	r3, [r2, #0]

    // Set PA12 as output (RST)
    GPIOA->MODER &= ~(GPIO_MODER_MODE12); // Clear MODER bits for PA12
 8000fe0:	4b22      	ldr	r3, [pc, #136]	@ (800106c <OLED_SPI_Pins_Init+0xcc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a21      	ldr	r2, [pc, #132]	@ (800106c <OLED_SPI_Pins_Init+0xcc>)
 8000fe6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000fea:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODE12_0;  // Set PA12 to output mode (01)
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <OLED_SPI_Pins_Init+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800106c <OLED_SPI_Pins_Init+0xcc>)
 8000ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ff6:	6013      	str	r3, [r2, #0]

    // Set PB8 as output (CS)
    GPIOB->MODER &= ~(GPIO_MODER_MODE8);  // Clear MODER bits for PB8
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <OLED_SPI_Pins_Init+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <OLED_SPI_Pins_Init+0xd0>)
 8000ffe:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001002:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE8_0;   // Set PB8 to output mode (01)
 8001004:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <OLED_SPI_Pins_Init+0xd0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a19      	ldr	r2, [pc, #100]	@ (8001070 <OLED_SPI_Pins_Init+0xd0>)
 800100a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100e:	6013      	str	r3, [r2, #0]

    // Set PB9 as output (DC)
    GPIOB->MODER &= ~(GPIO_MODER_MODE9);  // Clear MODER bits for PB9
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <OLED_SPI_Pins_Init+0xd0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a16      	ldr	r2, [pc, #88]	@ (8001070 <OLED_SPI_Pins_Init+0xd0>)
 8001016:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800101a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE9_0;   // Set PB9 to output mode (01)
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <OLED_SPI_Pins_Init+0xd0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a13      	ldr	r2, [pc, #76]	@ (8001070 <OLED_SPI_Pins_Init+0xd0>)
 8001022:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001026:	6013      	str	r3, [r2, #0]

    // Select AF5 (SPI2) for PC7 and PC3
    GPIOC->AFR[1] &= ~(0xF << 4);          // Clear AFR bits for PC7
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 800102a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102c:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 800102e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001032:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOC->AFR[1] |= (0x5 << 4);           // Set PC7 to AF5 (SPI2_SCK)
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 800103a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800103e:	6253      	str	r3, [r2, #36]	@ 0x24

    GPIOC->AFR[0] &= ~(0xF << 12);         // Clear AFR bits for PC3
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8001046:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800104a:	6213      	str	r3, [r2, #32]
    GPIOC->AFR[0] |= (0x5 << 12);          // Set PC3 to AF5 (SPI2_MOSI)
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <OLED_SPI_Pins_Init+0xc8>)
 8001052:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8001056:	6213      	str	r3, [r2, #32]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40020800 	.word	0x40020800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400

08001074 <OLED_SPI_Configure>:

void OLED_SPI_Configure()
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
    // Enable clock access to SPI2 module
    RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001078:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <OLED_SPI_Configure+0x78>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <OLED_SPI_Configure+0x78>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001082:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set clock to fPCLK/2
    SPI2->CR1 &= ~(SPI_CR1_BR);
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 800108a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800108e:	6013      	str	r3, [r2, #0]
    SPI2->CR1 |= (0 << 3); // BR[2:0] = 000 (fPCLK/2)
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 8001092:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6013      	str	r3, [r2, #0]

    // Enable full duplex
    SPI2->CR1 &= ~(SPI_CR1_RXONLY);
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 800109e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010a2:	6013      	str	r3, [r2, #0]

    // Set MSB first
    SPI2->CR1 &= ~(SPI_CR1_LSBFIRST);
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a11      	ldr	r2, [pc, #68]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 80010aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010ae:	6013      	str	r3, [r2, #0]

    // Set mode to MASTER
    SPI2->CR1 |= (SPI_CR1_MSTR);
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0e      	ldr	r2, [pc, #56]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6013      	str	r3, [r2, #0]

    // Set 8-bit data mode
    SPI2->CR1 &= ~(SPI_CR1_DFF);
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0b      	ldr	r2, [pc, #44]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 80010c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80010c6:	6013      	str	r3, [r2, #0]

    // Select software slave management by setting SSM=1 and SSI=1
    SPI2->CR1 |= (SPI_CR1_SSM | SPI_CR1_SSI);
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 80010ce:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80010d2:	6013      	str	r3, [r2, #0]

    // Enable SPI module
    SPI2->CR1 |= (SPI_CR1_SPE);
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <OLED_SPI_Configure+0x7c>)
 80010da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40003800 	.word	0x40003800

080010f4 <OLED_SPI_Write>:

void OLED_SPI_Write(char *data, uint32_t size)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]

    while (i < size)
 8001102:	e00f      	b.n	8001124 <OLED_SPI_Write+0x30>
    {
        // Wait until TXE is set
        while (!(SPI2->SR & SPI_SR_TXE)) {}
 8001104:	bf00      	nop
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <OLED_SPI_Write+0x68>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f9      	beq.n	8001106 <OLED_SPI_Write+0x12>

        // Write the data to the data register
        SPI2->DR = (uint8_t)data[i];
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <OLED_SPI_Write+0x68>)
 800111c:	60da      	str	r2, [r3, #12]
        i++;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
    while (i < size)
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d3eb      	bcc.n	8001104 <OLED_SPI_Write+0x10>
    }
    // Wait until TXE is set
    while (!(SPI2->SR & SPI_SR_TXE)) {}
 800112c:	bf00      	nop
 800112e:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <OLED_SPI_Write+0x68>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f9      	beq.n	800112e <OLED_SPI_Write+0x3a>

    // Wait for BUSY flag to reset
    while ((SPI2->SR & SPI_SR_BSY)) {}
 800113a:	bf00      	nop
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <OLED_SPI_Write+0x68>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f9      	bne.n	800113c <OLED_SPI_Write+0x48>

    // Clear OVR flag
    (void)SPI2->DR;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <OLED_SPI_Write+0x68>)
 800114a:	68db      	ldr	r3, [r3, #12]
    (void)SPI2->SR;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <OLED_SPI_Write+0x68>)
 800114e:	689b      	ldr	r3, [r3, #8]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40003800 	.word	0x40003800

08001160 <OLED_Select>:

void OLED_Select(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR8; // Set PB8 low (Select)
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <OLED_Select+0x18>)
 8001166:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800116a:	619a      	str	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40020400 	.word	0x40020400

0800117c <OLED_Deselect>:

void OLED_Deselect(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS8; // Set PB8 high (Deselect)
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <OLED_Deselect+0x18>)
 8001182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001186:	619a      	str	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40020400 	.word	0x40020400

08001198 <OLED_DataMode>:

void OLED_DataMode()
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS9;
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <OLED_DataMode+0x18>)
 800119e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011a2:	619a      	str	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40020400 	.word	0x40020400

080011b4 <OLED_CommMode>:

void OLED_CommMode()
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR9;
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <OLED_CommMode+0x18>)
 80011ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011be:	619a      	str	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40020400 	.word	0x40020400

080011d0 <HAL_UART_RxCpltCallback>:
int cnt = 0;

unsigned int handle_flag = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
   if(huart == &huart1)  // BT input
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a81      	ldr	r2, [pc, #516]	@ (80013e0 <HAL_UART_RxCpltCallback+0x210>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	f040 80fb 	bne.w	80013d8 <HAL_UART_RxCpltCallback+0x208>
   {

		if(strncmp(buf1,"A0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 80011e2:	2202      	movs	r2, #2
 80011e4:	497f      	ldr	r1, [pc, #508]	@ (80013e4 <HAL_UART_RxCpltCallback+0x214>)
 80011e6:	4880      	ldr	r0, [pc, #512]	@ (80013e8 <HAL_UART_RxCpltCallback+0x218>)
 80011e8:	f004 ffc6 	bl	8006178 <strncmp>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10a      	bne.n	8001208 <HAL_UART_RxCpltCallback+0x38>
		{
			handle_flag = 1;
 80011f2:	4b7e      	ldr	r3, [pc, #504]	@ (80013ec <HAL_UART_RxCpltCallback+0x21c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
			htim1.Instance->CCR2 = 0;
 80011f8:	4b7d      	ldr	r3, [pc, #500]	@ (80013f0 <HAL_UART_RxCpltCallback+0x220>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	639a      	str	r2, [r3, #56]	@ 0x38
			htim3.Instance->CCR1 = 0;
 8001200:	4b7c      	ldr	r3, [pc, #496]	@ (80013f4 <HAL_UART_RxCpltCallback+0x224>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	@ 0x34

		}
		if(strncmp(buf1,"P0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8001208:	2202      	movs	r2, #2
 800120a:	497b      	ldr	r1, [pc, #492]	@ (80013f8 <HAL_UART_RxCpltCallback+0x228>)
 800120c:	4876      	ldr	r0, [pc, #472]	@ (80013e8 <HAL_UART_RxCpltCallback+0x218>)
 800120e:	f004 ffb3 	bl	8006178 <strncmp>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <HAL_UART_RxCpltCallback+0x4e>
		{
			handle_flag = 0;
 8001218:	4b74      	ldr	r3, [pc, #464]	@ (80013ec <HAL_UART_RxCpltCallback+0x21c>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
		}
		if(handle_flag == 1)
 800121e:	4b73      	ldr	r3, [pc, #460]	@ (80013ec <HAL_UART_RxCpltCallback+0x21c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d173      	bne.n	800130e <HAL_UART_RxCpltCallback+0x13e>
		{
			if(strncmp(buf1,"F0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8001226:	2202      	movs	r2, #2
 8001228:	4974      	ldr	r1, [pc, #464]	@ (80013fc <HAL_UART_RxCpltCallback+0x22c>)
 800122a:	486f      	ldr	r0, [pc, #444]	@ (80013e8 <HAL_UART_RxCpltCallback+0x218>)
 800122c:	f004 ffa4 	bl	8006178 <strncmp>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d120      	bne.n	8001278 <HAL_UART_RxCpltCallback+0xa8>
					{
					  // forward
					  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800123c:	4870      	ldr	r0, [pc, #448]	@ (8001400 <HAL_UART_RxCpltCallback+0x230>)
 800123e:	f001 ffef 	bl	8003220 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8001242:	2201      	movs	r2, #1
 8001244:	2108      	movs	r1, #8
 8001246:	486f      	ldr	r0, [pc, #444]	@ (8001404 <HAL_UART_RxCpltCallback+0x234>)
 8001248:	f001 ffea 	bl	8003220 <HAL_GPIO_WritePin>

					  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001252:	486c      	ldr	r0, [pc, #432]	@ (8001404 <HAL_UART_RxCpltCallback+0x234>)
 8001254:	f001 ffe4 	bl	8003220 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800125e:	4868      	ldr	r0, [pc, #416]	@ (8001400 <HAL_UART_RxCpltCallback+0x230>)
 8001260:	f001 ffde 	bl	8003220 <HAL_GPIO_WritePin>
					  htim1.Instance->CCR2 = speed;
 8001264:	4b68      	ldr	r3, [pc, #416]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b61      	ldr	r3, [pc, #388]	@ (80013f0 <HAL_UART_RxCpltCallback+0x220>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	639a      	str	r2, [r3, #56]	@ 0x38
					  htim3.Instance->CCR1 = speed;
 800126e:	4b66      	ldr	r3, [pc, #408]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b60      	ldr	r3, [pc, #384]	@ (80013f4 <HAL_UART_RxCpltCallback+0x224>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	635a      	str	r2, [r3, #52]	@ 0x34

					}
					if(strncmp(buf1,"B0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8001278:	2202      	movs	r2, #2
 800127a:	4964      	ldr	r1, [pc, #400]	@ (800140c <HAL_UART_RxCpltCallback+0x23c>)
 800127c:	485a      	ldr	r0, [pc, #360]	@ (80013e8 <HAL_UART_RxCpltCallback+0x218>)
 800127e:	f004 ff7b 	bl	8006178 <strncmp>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d120      	bne.n	80012ca <HAL_UART_RxCpltCallback+0xfa>
					{
					  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800128e:	485c      	ldr	r0, [pc, #368]	@ (8001400 <HAL_UART_RxCpltCallback+0x230>)
 8001290:	f001 ffc6 	bl	8003220 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2108      	movs	r1, #8
 8001298:	485a      	ldr	r0, [pc, #360]	@ (8001404 <HAL_UART_RxCpltCallback+0x234>)
 800129a:	f001 ffc1 	bl	8003220 <HAL_GPIO_WritePin>

					  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012a4:	4857      	ldr	r0, [pc, #348]	@ (8001404 <HAL_UART_RxCpltCallback+0x234>)
 80012a6:	f001 ffbb 	bl	8003220 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012b0:	4853      	ldr	r0, [pc, #332]	@ (8001400 <HAL_UART_RxCpltCallback+0x230>)
 80012b2:	f001 ffb5 	bl	8003220 <HAL_GPIO_WritePin>

					  htim1.Instance->CCR2 = speed;
 80012b6:	4b54      	ldr	r3, [pc, #336]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b4d      	ldr	r3, [pc, #308]	@ (80013f0 <HAL_UART_RxCpltCallback+0x220>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	639a      	str	r2, [r3, #56]	@ 0x38
					  htim3.Instance->CCR1 = speed;
 80012c0:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b4b      	ldr	r3, [pc, #300]	@ (80013f4 <HAL_UART_RxCpltCallback+0x224>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	635a      	str	r2, [r3, #52]	@ 0x34

					}
					if(strncmp(buf1,"L0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 80012ca:	2202      	movs	r2, #2
 80012cc:	4950      	ldr	r1, [pc, #320]	@ (8001410 <HAL_UART_RxCpltCallback+0x240>)
 80012ce:	4846      	ldr	r0, [pc, #280]	@ (80013e8 <HAL_UART_RxCpltCallback+0x218>)
 80012d0:	f004 ff52 	bl	8006178 <strncmp>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d108      	bne.n	80012ec <HAL_UART_RxCpltCallback+0x11c>
					{
						  htim1.Instance->CCR2 = 0;
 80012da:	4b45      	ldr	r3, [pc, #276]	@ (80013f0 <HAL_UART_RxCpltCallback+0x220>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	639a      	str	r2, [r3, #56]	@ 0x38
						  htim3.Instance->CCR1 = speed;
 80012e2:	4b49      	ldr	r3, [pc, #292]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b43      	ldr	r3, [pc, #268]	@ (80013f4 <HAL_UART_RxCpltCallback+0x224>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	635a      	str	r2, [r3, #52]	@ 0x34


					}
					if(strncmp(buf1,"R0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 80012ec:	2202      	movs	r2, #2
 80012ee:	4949      	ldr	r1, [pc, #292]	@ (8001414 <HAL_UART_RxCpltCallback+0x244>)
 80012f0:	483d      	ldr	r0, [pc, #244]	@ (80013e8 <HAL_UART_RxCpltCallback+0x218>)
 80012f2:	f004 ff41 	bl	8006178 <strncmp>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d108      	bne.n	800130e <HAL_UART_RxCpltCallback+0x13e>
					{

						  htim1.Instance->CCR2 = speed;
 80012fc:	4b42      	ldr	r3, [pc, #264]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b3b      	ldr	r3, [pc, #236]	@ (80013f0 <HAL_UART_RxCpltCallback+0x220>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	639a      	str	r2, [r3, #56]	@ 0x38
						  htim3.Instance->CCR1 = 0;
 8001306:	4b3b      	ldr	r3, [pc, #236]	@ (80013f4 <HAL_UART_RxCpltCallback+0x224>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	635a      	str	r2, [r3, #52]	@ 0x34
					}
		}

		if(strncmp(buf1,"T0",2) == 0)
 800130e:	2202      	movs	r2, #2
 8001310:	4941      	ldr	r1, [pc, #260]	@ (8001418 <HAL_UART_RxCpltCallback+0x248>)
 8001312:	4835      	ldr	r0, [pc, #212]	@ (80013e8 <HAL_UART_RxCpltCallback+0x218>)
 8001314:	f004 ff30 	bl	8006178 <strncmp>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d124      	bne.n	8001368 <HAL_UART_RxCpltCallback+0x198>
		{
		   if(speed == MaxSpeed) speed = MaxSpeed;
 800131e:	4b3a      	ldr	r3, [pc, #232]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <HAL_UART_RxCpltCallback+0x24c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d104      	bne.n	8001334 <HAL_UART_RxCpltCallback+0x164>
 800132a:	4b3c      	ldr	r3, [pc, #240]	@ (800141c <HAL_UART_RxCpltCallback+0x24c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a36      	ldr	r2, [pc, #216]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e005      	b.n	8001340 <HAL_UART_RxCpltCallback+0x170>
		   else speed += 1000;
 8001334:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800133c:	4a32      	ldr	r2, [pc, #200]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 800133e:	6013      	str	r3, [r2, #0]
		   SSD1306_Clear();
 8001340:	f7ff fe25 	bl	8000f8e <SSD1306_Clear>
		   SSD1306_GotoXY(65,30);
 8001344:	211e      	movs	r1, #30
 8001346:	2041      	movs	r0, #65	@ 0x41
 8001348:	f7ff fd68 	bl	8000e1c <SSD1306_GotoXY>
		   sprintf(dum, "%d", speed);
 800134c:	4b2e      	ldr	r3, [pc, #184]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4933      	ldr	r1, [pc, #204]	@ (8001420 <HAL_UART_RxCpltCallback+0x250>)
 8001354:	4833      	ldr	r0, [pc, #204]	@ (8001424 <HAL_UART_RxCpltCallback+0x254>)
 8001356:	f004 fe0f 	bl	8005f78 <siprintf>
		   SSD1306_Puts(dum, &Font_11x18, 1);
 800135a:	2201      	movs	r2, #1
 800135c:	4932      	ldr	r1, [pc, #200]	@ (8001428 <HAL_UART_RxCpltCallback+0x258>)
 800135e:	4831      	ldr	r0, [pc, #196]	@ (8001424 <HAL_UART_RxCpltCallback+0x254>)
 8001360:	f7ff fdf0 	bl	8000f44 <SSD1306_Puts>
		   SSD1306_UpdateScreen();
 8001364:	f7ff fcba 	bl	8000cdc <SSD1306_UpdateScreen>
		}
		if(strncmp(buf1,"X0",2) == 0)
 8001368:	2202      	movs	r2, #2
 800136a:	4930      	ldr	r1, [pc, #192]	@ (800142c <HAL_UART_RxCpltCallback+0x25c>)
 800136c:	481e      	ldr	r0, [pc, #120]	@ (80013e8 <HAL_UART_RxCpltCallback+0x218>)
 800136e:	f004 ff03 	bl	8006178 <strncmp>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d121      	bne.n	80013bc <HAL_UART_RxCpltCallback+0x1ec>
		{
		   if(speed == 0) speed = 0;
 8001378:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <HAL_UART_RxCpltCallback+0x1b8>
 8001380:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e005      	b.n	8001394 <HAL_UART_RxCpltCallback+0x1c4>
		   else speed -= 1000;
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001390:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 8001392:	6013      	str	r3, [r2, #0]
		   //SSD1306_Clear();
		   SSD1306_Clear();
 8001394:	f7ff fdfb 	bl	8000f8e <SSD1306_Clear>

		   SSD1306_GotoXY(65,30);
 8001398:	211e      	movs	r1, #30
 800139a:	2041      	movs	r0, #65	@ 0x41
 800139c:	f7ff fd3e 	bl	8000e1c <SSD1306_GotoXY>
		   sprintf(dum, "%d", speed);
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_UART_RxCpltCallback+0x238>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	491e      	ldr	r1, [pc, #120]	@ (8001420 <HAL_UART_RxCpltCallback+0x250>)
 80013a8:	481e      	ldr	r0, [pc, #120]	@ (8001424 <HAL_UART_RxCpltCallback+0x254>)
 80013aa:	f004 fde5 	bl	8005f78 <siprintf>
		   SSD1306_Puts(dum, &Font_11x18, 1);
 80013ae:	2201      	movs	r2, #1
 80013b0:	491d      	ldr	r1, [pc, #116]	@ (8001428 <HAL_UART_RxCpltCallback+0x258>)
 80013b2:	481c      	ldr	r0, [pc, #112]	@ (8001424 <HAL_UART_RxCpltCallback+0x254>)
 80013b4:	f7ff fdc6 	bl	8000f44 <SSD1306_Puts>
		   SSD1306_UpdateScreen();
 80013b8:	f7ff fc90 	bl	8000cdc <SSD1306_UpdateScreen>
}

      buf1[idx1++] = dum1;
 80013bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <HAL_UART_RxCpltCallback+0x260>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	491b      	ldr	r1, [pc, #108]	@ (8001430 <HAL_UART_RxCpltCallback+0x260>)
 80013c4:	600a      	str	r2, [r1, #0]
 80013c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001434 <HAL_UART_RxCpltCallback+0x264>)
 80013c8:	7811      	ldrb	r1, [r2, #0]
 80013ca:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <HAL_UART_RxCpltCallback+0x218>)
 80013cc:	54d1      	strb	r1, [r2, r3]
      HAL_UART_Receive_IT(&huart1, &dum1, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	4918      	ldr	r1, [pc, #96]	@ (8001434 <HAL_UART_RxCpltCallback+0x264>)
 80013d2:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <HAL_UART_RxCpltCallback+0x210>)
 80013d4:	f003 fd23 	bl	8004e1e <HAL_UART_Receive_IT>

   }
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000618 	.word	0x20000618
 80013e4:	08007018 	.word	0x08007018
 80013e8:	200006a8 	.word	0x200006a8
 80013ec:	20000744 	.word	0x20000744
 80013f0:	200004f8 	.word	0x200004f8
 80013f4:	20000588 	.word	0x20000588
 80013f8:	0800701c 	.word	0x0800701c
 80013fc:	08007020 	.word	0x08007020
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400
 8001408:	2000073c 	.word	0x2000073c
 800140c:	08007024 	.word	0x08007024
 8001410:	08007028 	.word	0x08007028
 8001414:	0800702c 	.word	0x0800702c
 8001418:	08007030 	.word	0x08007030
 800141c:	20000010 	.word	0x20000010
 8001420:	08007034 	.word	0x08007034
 8001424:	20000714 	.word	0x20000714
 8001428:	20000000 	.word	0x20000000
 800142c:	08007038 	.word	0x08007038
 8001430:	20000710 	.word	0x20000710
 8001434:	2000070c 	.word	0x2000070c

08001438 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

	if(idx1)
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00b      	beq.n	8001460 <HAL_TIM_PeriodElapsedCallback+0x28>
	   {
		  buf1[idx1] = 0;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800144e:	2100      	movs	r1, #0
 8001450:	54d1      	strb	r1, [r2, r3]
		  printf("UART1>%s\r\n",buf1);
 8001452:	4906      	ldr	r1, [pc, #24]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001454:	4806      	ldr	r0, [pc, #24]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001456:	f004 fd1f 	bl	8005e98 <iprintf>
		  idx1 = 0;
 800145a:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
	   }

}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000710 	.word	0x20000710
 800146c:	200006a8 	.word	0x200006a8
 8001470:	0800703c 	.word	0x0800703c

08001474 <SelfDrive_Mode>:

void SelfDrive_Mode()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	num1 = usDist1() * 100;
 8001478:	f000 fe1a 	bl	80020b0 <usDist1>
 800147c:	ec51 0b10 	vmov	r0, r1, d0
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b93      	ldr	r3, [pc, #588]	@ (80016d4 <SelfDrive_Mode+0x260>)
 8001486:	f7fe fefb 	bl	8000280 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff f9db 	bl	800084c <__aeabi_d2iz>
 8001496:	4603      	mov	r3, r0
 8001498:	4a8f      	ldr	r2, [pc, #572]	@ (80016d8 <SelfDrive_Mode+0x264>)
 800149a:	6013      	str	r3, [r2, #0]
	num2 = usDist2() * 100;
 800149c:	f000 fe6c 	bl	8002178 <usDist2>
 80014a0:	ec51 0b10 	vmov	r0, r1, d0
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b8a      	ldr	r3, [pc, #552]	@ (80016d4 <SelfDrive_Mode+0x260>)
 80014aa:	f7fe fee9 	bl	8000280 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff f9c9 	bl	800084c <__aeabi_d2iz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a87      	ldr	r2, [pc, #540]	@ (80016dc <SelfDrive_Mode+0x268>)
 80014be:	6013      	str	r3, [r2, #0]
	num3 = usDist3() * 100;
 80014c0:	f000 feba 	bl	8002238 <usDist3>
 80014c4:	ec51 0b10 	vmov	r0, r1, d0
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b81      	ldr	r3, [pc, #516]	@ (80016d4 <SelfDrive_Mode+0x260>)
 80014ce:	f7fe fed7 	bl	8000280 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff f9b7 	bl	800084c <__aeabi_d2iz>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a7f      	ldr	r2, [pc, #508]	@ (80016e0 <SelfDrive_Mode+0x26c>)
 80014e2:	6013      	str	r3, [r2, #0]
	num4 = usDist4() * 100;
 80014e4:	f000 ff04 	bl	80022f0 <usDist4>
 80014e8:	ec51 0b10 	vmov	r0, r1, d0
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b78      	ldr	r3, [pc, #480]	@ (80016d4 <SelfDrive_Mode+0x260>)
 80014f2:	f7fe fec5 	bl	8000280 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff f9a5 	bl	800084c <__aeabi_d2iz>
 8001502:	4603      	mov	r3, r0
 8001504:	4a77      	ldr	r2, [pc, #476]	@ (80016e4 <SelfDrive_Mode+0x270>)
 8001506:	6013      	str	r3, [r2, #0]
	num5 = usDist5() * 100;
 8001508:	f000 ff56 	bl	80023b8 <usDist5>
 800150c:	ec51 0b10 	vmov	r0, r1, d0
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b6f      	ldr	r3, [pc, #444]	@ (80016d4 <SelfDrive_Mode+0x260>)
 8001516:	f7fe feb3 	bl	8000280 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff f993 	bl	800084c <__aeabi_d2iz>
 8001526:	4603      	mov	r3, r0
 8001528:	4a6f      	ldr	r2, [pc, #444]	@ (80016e8 <SelfDrive_Mode+0x274>)
 800152a:	6013      	str	r3, [r2, #0]

	while(num1 <= 0) num1 = usDist1() * 100;
 800152c:	e011      	b.n	8001552 <SelfDrive_Mode+0xde>
 800152e:	f000 fdbf 	bl	80020b0 <usDist1>
 8001532:	ec51 0b10 	vmov	r0, r1, d0
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	4b66      	ldr	r3, [pc, #408]	@ (80016d4 <SelfDrive_Mode+0x260>)
 800153c:	f7fe fea0 	bl	8000280 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff f980 	bl	800084c <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	4a62      	ldr	r2, [pc, #392]	@ (80016d8 <SelfDrive_Mode+0x264>)
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b61      	ldr	r3, [pc, #388]	@ (80016d8 <SelfDrive_Mode+0x264>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	dde9      	ble.n	800152e <SelfDrive_Mode+0xba>
	while(num2 <= 0) num2 = usDist2() * 100;
 800155a:	e011      	b.n	8001580 <SelfDrive_Mode+0x10c>
 800155c:	f000 fe0c 	bl	8002178 <usDist2>
 8001560:	ec51 0b10 	vmov	r0, r1, d0
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b5a      	ldr	r3, [pc, #360]	@ (80016d4 <SelfDrive_Mode+0x260>)
 800156a:	f7fe fe89 	bl	8000280 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff f969 	bl	800084c <__aeabi_d2iz>
 800157a:	4603      	mov	r3, r0
 800157c:	4a57      	ldr	r2, [pc, #348]	@ (80016dc <SelfDrive_Mode+0x268>)
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b56      	ldr	r3, [pc, #344]	@ (80016dc <SelfDrive_Mode+0x268>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	dde9      	ble.n	800155c <SelfDrive_Mode+0xe8>
	while(num3 <= 0) num3 = usDist3() * 100;
 8001588:	e011      	b.n	80015ae <SelfDrive_Mode+0x13a>
 800158a:	f000 fe55 	bl	8002238 <usDist3>
 800158e:	ec51 0b10 	vmov	r0, r1, d0
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4b4f      	ldr	r3, [pc, #316]	@ (80016d4 <SelfDrive_Mode+0x260>)
 8001598:	f7fe fe72 	bl	8000280 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff f952 	bl	800084c <__aeabi_d2iz>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a4d      	ldr	r2, [pc, #308]	@ (80016e0 <SelfDrive_Mode+0x26c>)
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b4c      	ldr	r3, [pc, #304]	@ (80016e0 <SelfDrive_Mode+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	dde9      	ble.n	800158a <SelfDrive_Mode+0x116>
	while(num4 <= 0) num4 = usDist4() * 100;
 80015b6:	e011      	b.n	80015dc <SelfDrive_Mode+0x168>
 80015b8:	f000 fe9a 	bl	80022f0 <usDist4>
 80015bc:	ec51 0b10 	vmov	r0, r1, d0
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	4b43      	ldr	r3, [pc, #268]	@ (80016d4 <SelfDrive_Mode+0x260>)
 80015c6:	f7fe fe5b 	bl	8000280 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff f93b 	bl	800084c <__aeabi_d2iz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a42      	ldr	r2, [pc, #264]	@ (80016e4 <SelfDrive_Mode+0x270>)
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b41      	ldr	r3, [pc, #260]	@ (80016e4 <SelfDrive_Mode+0x270>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	dde9      	ble.n	80015b8 <SelfDrive_Mode+0x144>
	while(num5 <= 0) num5 = usDist5() * 100;
 80015e4:	e011      	b.n	800160a <SelfDrive_Mode+0x196>
 80015e6:	f000 fee7 	bl	80023b8 <usDist5>
 80015ea:	ec51 0b10 	vmov	r0, r1, d0
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b38      	ldr	r3, [pc, #224]	@ (80016d4 <SelfDrive_Mode+0x260>)
 80015f4:	f7fe fe44 	bl	8000280 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff f924 	bl	800084c <__aeabi_d2iz>
 8001604:	4603      	mov	r3, r0
 8001606:	4a38      	ldr	r2, [pc, #224]	@ (80016e8 <SelfDrive_Mode+0x274>)
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b37      	ldr	r3, [pc, #220]	@ (80016e8 <SelfDrive_Mode+0x274>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	dde9      	ble.n	80015e6 <SelfDrive_Mode+0x172>
	//printf("num1 : %d  num2 : %d  num3 : %d  num4 : %d  num5 : %d\r\n", num1, num2, num3, num4, num5);
	//printf("%d	%d\r\n", abs(num4-num5), abs(num2-num3));

	if(num1 >= Front_Dist)
 8001612:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <SelfDrive_Mode+0x264>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b35      	ldr	r3, [pc, #212]	@ (80016ec <SelfDrive_Mode+0x278>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	db74      	blt.n	8001708 <SelfDrive_Mode+0x294>
	{

		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001624:	4832      	ldr	r0, [pc, #200]	@ (80016f0 <SelfDrive_Mode+0x27c>)
 8001626:	f001 fdfb 	bl	8003220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800162a:	2201      	movs	r2, #1
 800162c:	2108      	movs	r1, #8
 800162e:	4831      	ldr	r0, [pc, #196]	@ (80016f4 <SelfDrive_Mode+0x280>)
 8001630:	f001 fdf6 	bl	8003220 <HAL_GPIO_WritePin>
		//LEFT FRONT
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800163a:	482e      	ldr	r0, [pc, #184]	@ (80016f4 <SelfDrive_Mode+0x280>)
 800163c:	f001 fdf0 	bl	8003220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001646:	482a      	ldr	r0, [pc, #168]	@ (80016f0 <SelfDrive_Mode+0x27c>)
 8001648:	f001 fdea 	bl	8003220 <HAL_GPIO_WritePin>

		if(num2 > Digonal_Dist && num3 > Digonal_Dist)
 800164c:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <SelfDrive_Mode+0x268>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <SelfDrive_Mode+0x284>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	dd10      	ble.n	800167a <SelfDrive_Mode+0x206>
 8001658:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <SelfDrive_Mode+0x26c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b26      	ldr	r3, [pc, #152]	@ (80016f8 <SelfDrive_Mode+0x284>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	dd0a      	ble.n	800167a <SelfDrive_Mode+0x206>
		{
			htim1.Instance->CCR2 = speed;
 8001664:	4b25      	ldr	r3, [pc, #148]	@ (80016fc <SelfDrive_Mode+0x288>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <SelfDrive_Mode+0x28c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	639a      	str	r2, [r3, #56]	@ 0x38
			htim3.Instance->CCR1 = speed;
 800166e:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <SelfDrive_Mode+0x288>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <SelfDrive_Mode+0x290>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	635a      	str	r2, [r3, #52]	@ 0x34
 8001678:	e09c      	b.n	80017b4 <SelfDrive_Mode+0x340>
		}
		else if(num2 <= Digonal_Dist && num3 > Digonal_Dist)
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <SelfDrive_Mode+0x268>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <SelfDrive_Mode+0x284>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	dc0f      	bgt.n	80016a6 <SelfDrive_Mode+0x232>
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <SelfDrive_Mode+0x26c>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <SelfDrive_Mode+0x284>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	dd09      	ble.n	80016a6 <SelfDrive_Mode+0x232>
		{
			htim1.Instance->CCR2 = speed;
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <SelfDrive_Mode+0x288>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <SelfDrive_Mode+0x28c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	639a      	str	r2, [r3, #56]	@ 0x38
			htim3.Instance->CCR1 = 0;
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <SelfDrive_Mode+0x290>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80016a4:	e086      	b.n	80017b4 <SelfDrive_Mode+0x340>
		}
		else if(num3 <= Digonal_Dist && num2 > Digonal_Dist)
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <SelfDrive_Mode+0x26c>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <SelfDrive_Mode+0x284>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	f300 8080 	bgt.w	80017b4 <SelfDrive_Mode+0x340>
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <SelfDrive_Mode+0x268>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <SelfDrive_Mode+0x284>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dd79      	ble.n	80017b4 <SelfDrive_Mode+0x340>
		{
			htim1.Instance->CCR2 = 0;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <SelfDrive_Mode+0x28c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2200      	movs	r2, #0
 80016c6:	639a      	str	r2, [r3, #56]	@ 0x38
			htim3.Instance->CCR1 = speed;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <SelfDrive_Mode+0x288>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <SelfDrive_Mode+0x290>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(1500);
		}
	}


}
 80016d2:	e06f      	b.n	80017b4 <SelfDrive_Mode+0x340>
 80016d4:	40590000 	.word	0x40590000
 80016d8:	20000728 	.word	0x20000728
 80016dc:	2000072c 	.word	0x2000072c
 80016e0:	20000730 	.word	0x20000730
 80016e4:	20000734 	.word	0x20000734
 80016e8:	20000738 	.word	0x20000738
 80016ec:	20000008 	.word	0x20000008
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	2000073c 	.word	0x2000073c
 8001700:	200004f8 	.word	0x200004f8
 8001704:	20000588 	.word	0x20000588
	else if(num1 < Front_Dist)
 8001708:	4b2b      	ldr	r3, [pc, #172]	@ (80017b8 <SelfDrive_Mode+0x344>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <SelfDrive_Mode+0x348>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	da4f      	bge.n	80017b4 <SelfDrive_Mode+0x340>
		cnt++;
 8001714:	4b2a      	ldr	r3, [pc, #168]	@ (80017c0 <SelfDrive_Mode+0x34c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	4a29      	ldr	r2, [pc, #164]	@ (80017c0 <SelfDrive_Mode+0x34c>)
 800171c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001724:	4827      	ldr	r0, [pc, #156]	@ (80017c4 <SelfDrive_Mode+0x350>)
 8001726:	f001 fd7b 	bl	8003220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2108      	movs	r1, #8
 800172e:	4826      	ldr	r0, [pc, #152]	@ (80017c8 <SelfDrive_Mode+0x354>)
 8001730:	f001 fd76 	bl	8003220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800173a:	4823      	ldr	r0, [pc, #140]	@ (80017c8 <SelfDrive_Mode+0x354>)
 800173c:	f001 fd70 	bl	8003220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001746:	481f      	ldr	r0, [pc, #124]	@ (80017c4 <SelfDrive_Mode+0x350>)
 8001748:	f001 fd6a 	bl	8003220 <HAL_GPIO_WritePin>
		htim1.Instance->CCR2 = speed;
 800174c:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <SelfDrive_Mode+0x358>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <SelfDrive_Mode+0x35c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance->CCR1 = speed;
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <SelfDrive_Mode+0x358>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <SelfDrive_Mode+0x360>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(100);
 8001760:	2064      	movs	r0, #100	@ 0x64
 8001762:	f001 f9f9 	bl	8002b58 <HAL_Delay>
			cnt = 0;
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <SelfDrive_Mode+0x34c>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
			if(num4 > num5)
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <SelfDrive_Mode+0x364>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <SelfDrive_Mode+0x368>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	dd09      	ble.n	800178c <SelfDrive_Mode+0x318>
				htim1.Instance->CCR2 = speed;
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <SelfDrive_Mode+0x358>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <SelfDrive_Mode+0x35c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	639a      	str	r2, [r3, #56]	@ 0x38
				htim3.Instance->CCR1 = 0;
 8001782:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <SelfDrive_Mode+0x360>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
 800178a:	e00e      	b.n	80017aa <SelfDrive_Mode+0x336>
			else if(num5 > num4)
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <SelfDrive_Mode+0x368>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <SelfDrive_Mode+0x364>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	dd08      	ble.n	80017aa <SelfDrive_Mode+0x336>
				htim1.Instance->CCR2 = 0;
 8001798:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <SelfDrive_Mode+0x35c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	639a      	str	r2, [r3, #56]	@ 0x38
				htim3.Instance->CCR1 = speed;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <SelfDrive_Mode+0x358>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <SelfDrive_Mode+0x360>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(1500);
 80017aa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80017ae:	f001 f9d3 	bl	8002b58 <HAL_Delay>
}
 80017b2:	e7ff      	b.n	80017b4 <SelfDrive_Mode+0x340>
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000728 	.word	0x20000728
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000740 	.word	0x20000740
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400
 80017cc:	2000073c 	.word	0x2000073c
 80017d0:	200004f8 	.word	0x200004f8
 80017d4:	20000588 	.word	0x20000588
 80017d8:	20000734 	.word	0x20000734
 80017dc:	20000738 	.word	0x20000738

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e4:	f001 f946 	bl	8002a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e8:	f000 f8a0 	bl	800192c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ec:	f000 fb44 	bl	8001e78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017f0:	f000 fb18 	bl	8001e24 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80017f4:	f000 f9dc 	bl	8001bb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017f8:	f000 fa26 	bl	8001c48 <MX_TIM3_Init>
  MX_TIM1_Init();
 80017fc:	f000 f938 	bl	8001a70 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001800:	f000 fa98 	bl	8001d34 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001804:	f000 fae4 	bl	8001dd0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001808:	f000 f8fa 	bl	8001a00 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart();
 800180c:	f000 fc00 	bl	8002010 <ProgramStart>

  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001816:	4838      	ldr	r0, [pc, #224]	@ (80018f8 <main+0x118>)
 8001818:	f001 fd02 	bl	8003220 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001822:	4835      	ldr	r0, [pc, #212]	@ (80018f8 <main+0x118>)
 8001824:	f001 fcfc 	bl	8003220 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim2);
 8001828:	4834      	ldr	r0, [pc, #208]	@ (80018fc <main+0x11c>)
 800182a:	f002 fb97 	bl	8003f5c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800182e:	2104      	movs	r1, #4
 8001830:	4833      	ldr	r0, [pc, #204]	@ (8001900 <main+0x120>)
 8001832:	f002 fc47 	bl	80040c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001836:	2100      	movs	r1, #0
 8001838:	4832      	ldr	r0, [pc, #200]	@ (8001904 <main+0x124>)
 800183a:	f002 fc43 	bl	80040c4 <HAL_TIM_PWM_Start>

  HAL_UART_RxCpltCallback(&huart1);
 800183e:	4832      	ldr	r0, [pc, #200]	@ (8001908 <main+0x128>)
 8001840:	f7ff fcc6 	bl	80011d0 <HAL_UART_RxCpltCallback>
  HAL_TIM_PeriodElapsedCallback(&htim2);
 8001844:	482d      	ldr	r0, [pc, #180]	@ (80018fc <main+0x11c>)
 8001846:	f7ff fdf7 	bl	8001438 <HAL_TIM_PeriodElapsedCallback>

  SSD1306_Init();
 800184a:	f7ff f9c9 	bl	8000be0 <SSD1306_Init>
  SSD1306_Clear();
 800184e:	f7ff fb9e 	bl	8000f8e <SSD1306_Clear>

  SSD1306_GotoXY(65,30);
 8001852:	211e      	movs	r1, #30
 8001854:	2041      	movs	r0, #65	@ 0x41
 8001856:	f7ff fae1 	bl	8000e1c <SSD1306_GotoXY>
  sprintf(dum, "%d", speed);
 800185a:	4b2c      	ldr	r3, [pc, #176]	@ (800190c <main+0x12c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	492b      	ldr	r1, [pc, #172]	@ (8001910 <main+0x130>)
 8001862:	482c      	ldr	r0, [pc, #176]	@ (8001914 <main+0x134>)
 8001864:	f004 fb88 	bl	8005f78 <siprintf>
  SSD1306_Puts(dum, &Font_11x18, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	492b      	ldr	r1, [pc, #172]	@ (8001918 <main+0x138>)
 800186c:	4829      	ldr	r0, [pc, #164]	@ (8001914 <main+0x134>)
 800186e:	f7ff fb69 	bl	8000f44 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001872:	f7ff fa33 	bl	8000cdc <SSD1306_UpdateScreen>

  //Left Motor Forward
  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800187c:	481e      	ldr	r0, [pc, #120]	@ (80018f8 <main+0x118>)
 800187e:	f001 fccf 	bl	8003220 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8001882:	2201      	movs	r2, #1
 8001884:	2108      	movs	r1, #8
 8001886:	4825      	ldr	r0, [pc, #148]	@ (800191c <main+0x13c>)
 8001888:	f001 fcca 	bl	8003220 <HAL_GPIO_WritePin>
  //Right Motor Forward
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001892:	4822      	ldr	r0, [pc, #136]	@ (800191c <main+0x13c>)
 8001894:	f001 fcc4 	bl	8003220 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800189e:	4816      	ldr	r0, [pc, #88]	@ (80018f8 <main+0x118>)
 80018a0:	f001 fcbe 	bl	8003220 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_RxCpltCallback(&huart1);
 80018a4:	4818      	ldr	r0, [pc, #96]	@ (8001908 <main+0x128>)
 80018a6:	f7ff fc93 	bl	80011d0 <HAL_UART_RxCpltCallback>
	  HAL_TIM_PeriodElapsedCallback(&htim2);
 80018aa:	4814      	ldr	r0, [pc, #80]	@ (80018fc <main+0x11c>)
 80018ac:	f7ff fdc4 	bl	8001438 <HAL_TIM_PeriodElapsedCallback>

	  if(handle_flag == 0)
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <main+0x140>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <main+0xf4>
	  {
		  SelfDrive_Mode();
 80018b8:	f7ff fddc 	bl	8001474 <SelfDrive_Mode>
		  SSD1306_GotoXY(5,10);
 80018bc:	210a      	movs	r1, #10
 80018be:	2005      	movs	r0, #5
 80018c0:	f7ff faac 	bl	8000e1c <SSD1306_GotoXY>
		  SSD1306_Puts("AUTO: ", &Font_11x18, 1);
 80018c4:	2201      	movs	r2, #1
 80018c6:	4914      	ldr	r1, [pc, #80]	@ (8001918 <main+0x138>)
 80018c8:	4816      	ldr	r0, [pc, #88]	@ (8001924 <main+0x144>)
 80018ca:	f7ff fb3b 	bl	8000f44 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80018ce:	f7ff fa05 	bl	8000cdc <SSD1306_UpdateScreen>
 80018d2:	e7e7      	b.n	80018a4 <main+0xc4>
	  }
	  else
	  {
		  SSD1306_GotoXY(1,10);
 80018d4:	210a      	movs	r1, #10
 80018d6:	2001      	movs	r0, #1
 80018d8:	f7ff faa0 	bl	8000e1c <SSD1306_GotoXY>
		  SSD1306_Puts("MANUAL: ", &Font_11x18, 1);
 80018dc:	2201      	movs	r2, #1
 80018de:	490e      	ldr	r1, [pc, #56]	@ (8001918 <main+0x138>)
 80018e0:	4811      	ldr	r0, [pc, #68]	@ (8001928 <main+0x148>)
 80018e2:	f7ff fb2f 	bl	8000f44 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80018e6:	f7ff f9f9 	bl	8000cdc <SSD1306_UpdateScreen>
		  HAL_UART_RxCpltCallback(&huart1);
 80018ea:	4807      	ldr	r0, [pc, #28]	@ (8001908 <main+0x128>)
 80018ec:	f7ff fc70 	bl	80011d0 <HAL_UART_RxCpltCallback>
		  HAL_TIM_PeriodElapsedCallback(&htim2);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <main+0x11c>)
 80018f2:	f7ff fda1 	bl	8001438 <HAL_TIM_PeriodElapsedCallback>
	  HAL_UART_RxCpltCallback(&huart1);
 80018f6:	e7d5      	b.n	80018a4 <main+0xc4>
 80018f8:	40020000 	.word	0x40020000
 80018fc:	20000540 	.word	0x20000540
 8001900:	200004f8 	.word	0x200004f8
 8001904:	20000588 	.word	0x20000588
 8001908:	20000618 	.word	0x20000618
 800190c:	2000073c 	.word	0x2000073c
 8001910:	08007034 	.word	0x08007034
 8001914:	20000714 	.word	0x20000714
 8001918:	20000000 	.word	0x20000000
 800191c:	40020400 	.word	0x40020400
 8001920:	20000744 	.word	0x20000744
 8001924:	08007048 	.word	0x08007048
 8001928:	08007050 	.word	0x08007050

0800192c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b094      	sub	sp, #80	@ 0x50
 8001930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001932:	f107 0320 	add.w	r3, r7, #32
 8001936:	2230      	movs	r2, #48	@ 0x30
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f004 fc14 	bl	8006168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <SystemClock_Config+0xcc>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	4a27      	ldr	r2, [pc, #156]	@ (80019f8 <SystemClock_Config+0xcc>)
 800195a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800195e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001960:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <SystemClock_Config+0xcc>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <SystemClock_Config+0xd0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a21      	ldr	r2, [pc, #132]	@ (80019fc <SystemClock_Config+0xd0>)
 8001976:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <SystemClock_Config+0xd0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001988:	2302      	movs	r3, #2
 800198a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198c:	2301      	movs	r3, #1
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001990:	2310      	movs	r3, #16
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001994:	2302      	movs	r3, #2
 8001996:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001998:	2300      	movs	r3, #0
 800199a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800199c:	2310      	movs	r3, #16
 800199e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019a6:	2304      	movs	r3, #4
 80019a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019aa:	2304      	movs	r3, #4
 80019ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ae:	f107 0320 	add.w	r3, r7, #32
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fc4e 	bl	8003254 <HAL_RCC_OscConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019be:	f000 fb0f 	bl	8001fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c2:	230f      	movs	r3, #15
 80019c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c6:	2302      	movs	r3, #2
 80019c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2102      	movs	r1, #2
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 feb0 	bl	8003744 <HAL_RCC_ClockConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019ea:	f000 faf9 	bl	8001fe0 <Error_Handler>
  }
}
 80019ee:	bf00      	nop
 80019f0:	3750      	adds	r7, #80	@ 0x50
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40007000 	.word	0x40007000

08001a00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a04:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a06:	4a19      	ldr	r2, [pc, #100]	@ (8001a6c <MX_SPI2_Init+0x6c>)
 8001a08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a18:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a32:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a4e:	220a      	movs	r2, #10
 8001a50:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <MX_SPI2_Init+0x68>)
 8001a54:	f002 f896 	bl	8003b84 <HAL_SPI_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001a5e:	f000 fabf 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200004a0 	.word	0x200004a0
 8001a6c:	40003800 	.word	0x40003800

08001a70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b096      	sub	sp, #88	@ 0x58
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	615a      	str	r2, [r3, #20]
 8001aa0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fb5d 	bl	8006168 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001ab0:	4a3e      	ldr	r2, [pc, #248]	@ (8001bac <MX_TIM1_Init+0x13c>)
 8001ab2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001ab6:	2253      	movs	r2, #83	@ 0x53
 8001ab8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8001ac0:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001ac2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001ac6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac8:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad4:	4b34      	ldr	r3, [pc, #208]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ada:	4833      	ldr	r0, [pc, #204]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001adc:	f002 f9ee 	bl	8003ebc <HAL_TIM_Base_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ae6:	f000 fa7b 	bl	8001fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001af0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001af4:	4619      	mov	r1, r3
 8001af6:	482c      	ldr	r0, [pc, #176]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001af8:	f002 fc56 	bl	80043a8 <HAL_TIM_ConfigClockSource>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b02:	f000 fa6d 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b06:	4828      	ldr	r0, [pc, #160]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001b08:	f002 fa82 	bl	8004010 <HAL_TIM_PWM_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b12:	f000 fa65 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b1e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b22:	4619      	mov	r1, r3
 8001b24:	4820      	ldr	r0, [pc, #128]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001b26:	f002 ffdf 	bl	8004ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b30:	f000 fa56 	bl	8001fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b34:	2360      	movs	r3, #96	@ 0x60
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b54:	2204      	movs	r2, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4813      	ldr	r0, [pc, #76]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001b5a:	f002 fb63 	bl	8004224 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b64:	f000 fa3c 	bl	8001fe0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4807      	ldr	r0, [pc, #28]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001b8c:	f003 f81a 	bl	8004bc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001b96:	f000 fa23 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b9a:	4803      	ldr	r0, [pc, #12]	@ (8001ba8 <MX_TIM1_Init+0x138>)
 8001b9c:	f000 fd42 	bl	8002624 <HAL_TIM_MspPostInit>

}
 8001ba0:	bf00      	nop
 8001ba2:	3758      	adds	r7, #88	@ 0x58
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200004f8 	.word	0x200004f8
 8001bac:	40010000 	.word	0x40010000

08001bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <MX_TIM2_Init+0x94>)
 8001bce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <MX_TIM2_Init+0x94>)
 8001bd6:	2253      	movs	r2, #83	@ 0x53
 8001bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <MX_TIM2_Init+0x94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001be0:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <MX_TIM2_Init+0x94>)
 8001be2:	f04f 32ff 	mov.w	r2, #4294967295
 8001be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be8:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <MX_TIM2_Init+0x94>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <MX_TIM2_Init+0x94>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bf4:	4813      	ldr	r0, [pc, #76]	@ (8001c44 <MX_TIM2_Init+0x94>)
 8001bf6:	f002 f961 	bl	8003ebc <HAL_TIM_Base_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c00:	f000 f9ee 	bl	8001fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <MX_TIM2_Init+0x94>)
 8001c12:	f002 fbc9 	bl	80043a8 <HAL_TIM_ConfigClockSource>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c1c:	f000 f9e0 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c28:	463b      	mov	r3, r7
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <MX_TIM2_Init+0x94>)
 8001c2e:	f002 ff5b 	bl	8004ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c38:	f000 f9d2 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000540 	.word	0x20000540

08001c48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08e      	sub	sp, #56	@ 0x38
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	f107 0320 	add.w	r3, r7, #32
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
 8001c74:	615a      	str	r2, [r3, #20]
 8001c76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c78:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d30 <MX_TIM3_Init+0xe8>)
 8001c7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001c80:	2253      	movs	r2, #83	@ 0x53
 8001c82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c84:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 8001c8a:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001c8c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001c90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c98:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c9e:	4823      	ldr	r0, [pc, #140]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001ca0:	f002 f90c 	bl	8003ebc <HAL_TIM_Base_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001caa:	f000 f999 	bl	8001fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cb8:	4619      	mov	r1, r3
 8001cba:	481c      	ldr	r0, [pc, #112]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001cbc:	f002 fb74 	bl	80043a8 <HAL_TIM_ConfigClockSource>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001cc6:	f000 f98b 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cca:	4818      	ldr	r0, [pc, #96]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001ccc:	f002 f9a0 	bl	8004010 <HAL_TIM_PWM_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001cd6:	f000 f983 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ce2:	f107 0320 	add.w	r3, r7, #32
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4810      	ldr	r0, [pc, #64]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001cea:	f002 fefd 	bl	8004ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001cf4:	f000 f974 	bl	8001fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf8:	2360      	movs	r3, #96	@ 0x60
 8001cfa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4807      	ldr	r0, [pc, #28]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001d10:	f002 fa88 	bl	8004224 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d1a:	f000 f961 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d1e:	4803      	ldr	r0, [pc, #12]	@ (8001d2c <MX_TIM3_Init+0xe4>)
 8001d20:	f000 fc80 	bl	8002624 <HAL_TIM_MspPostInit>

}
 8001d24:	bf00      	nop
 8001d26:	3738      	adds	r7, #56	@ 0x38
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000588 	.word	0x20000588
 8001d30:	40000400 	.word	0x40000400

08001d34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <MX_TIM5_Init+0x94>)
 8001d52:	4a1e      	ldr	r2, [pc, #120]	@ (8001dcc <MX_TIM5_Init+0x98>)
 8001d54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <MX_TIM5_Init+0x94>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <MX_TIM5_Init+0x94>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <MX_TIM5_Init+0x94>)
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	@ (8001dc8 <MX_TIM5_Init+0x94>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <MX_TIM5_Init+0x94>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d76:	4814      	ldr	r0, [pc, #80]	@ (8001dc8 <MX_TIM5_Init+0x94>)
 8001d78:	f002 f8a0 	bl	8003ebc <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001d82:	f000 f92d 	bl	8001fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	4619      	mov	r1, r3
 8001d92:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <MX_TIM5_Init+0x94>)
 8001d94:	f002 fb08 	bl	80043a8 <HAL_TIM_ConfigClockSource>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001d9e:	f000 f91f 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001daa:	463b      	mov	r3, r7
 8001dac:	4619      	mov	r1, r3
 8001dae:	4806      	ldr	r0, [pc, #24]	@ (8001dc8 <MX_TIM5_Init+0x94>)
 8001db0:	f002 fe9a 	bl	8004ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001dba:	f000 f911 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200005d0 	.word	0x200005d0
 8001dcc:	40000c00 	.word	0x40000c00

08001dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	@ (8001e20 <MX_USART1_UART_Init+0x50>)
 8001dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001ddc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df4:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001df6:	220c      	movs	r2, #12
 8001df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001e08:	f002 ff2e 	bl	8004c68 <HAL_UART_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e12:	f000 f8e5 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000618 	.word	0x20000618
 8001e20:	40011000 	.word	0x40011000

08001e24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	@ (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	f002 ff04 	bl	8004c68 <HAL_UART_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e66:	f000 f8bb 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000660 	.word	0x20000660
 8001e74:	40004400 	.word	0x40004400

08001e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	@ 0x28
 8001e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a4e      	ldr	r2, [pc, #312]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b48      	ldr	r3, [pc, #288]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a47      	ldr	r2, [pc, #284]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b45      	ldr	r3, [pc, #276]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b41      	ldr	r3, [pc, #260]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4a40      	ldr	r2, [pc, #256]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	4a39      	ldr	r2, [pc, #228]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef2:	4b37      	ldr	r3, [pc, #220]	@ (8001fd0 <MX_GPIO_Init+0x158>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|TRIG5_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2141      	movs	r1, #65	@ 0x41
 8001f02:	4834      	ldr	r0, [pc, #208]	@ (8001fd4 <MX_GPIO_Init+0x15c>)
 8001f04:	f001 f98c 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin|TRIG4_Pin
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f44f 51e9 	mov.w	r1, #7456	@ 0x1d20
 8001f0e:	4832      	ldr	r0, [pc, #200]	@ (8001fd8 <MX_GPIO_Init+0x160>)
 8001f10:	f001 f986 	bl	8003220 <HAL_GPIO_WritePin>
                          |RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG3_Pin|D6_Pin|TRIG1_Pin|TRIG2_Pin
 8001f14:	2200      	movs	r2, #0
 8001f16:	f24a 413c 	movw	r1, #42044	@ 0xa43c
 8001f1a:	4830      	ldr	r0, [pc, #192]	@ (8001fdc <MX_GPIO_Init+0x164>)
 8001f1c:	f001 f980 	bl	8003220 <HAL_GPIO_WritePin>
                          |D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f26:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4619      	mov	r1, r3
 8001f36:	4827      	ldr	r0, [pc, #156]	@ (8001fd4 <MX_GPIO_Init+0x15c>)
 8001f38:	f000 ffd6 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin TRIG5_Pin */
  GPIO_InitStruct.Pin = A0_Pin|TRIG5_Pin;
 8001f3c:	2341      	movs	r3, #65	@ 0x41
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	4820      	ldr	r0, [pc, #128]	@ (8001fd4 <MX_GPIO_Init+0x15c>)
 8001f54:	f000 ffc8 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin TRIG4_Pin
                           RST_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin|TRIG4_Pin
 8001f58:	f44f 53e9 	mov.w	r3, #7456	@ 0x1d20
 8001f5c:	617b      	str	r3, [r7, #20]
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4819      	ldr	r0, [pc, #100]	@ (8001fd8 <MX_GPIO_Init+0x160>)
 8001f72:	f000 ffb9 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO1_Pin ECHO5_Pin */
  GPIO_InitStruct.Pin = ECHO1_Pin|ECHO5_Pin;
 8001f76:	2330      	movs	r3, #48	@ 0x30
 8001f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4812      	ldr	r0, [pc, #72]	@ (8001fd4 <MX_GPIO_Init+0x15c>)
 8001f8a:	f000 ffad 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO3_Pin ECHO4_Pin ECHO2_Pin */
  GPIO_InitStruct.Pin = ECHO3_Pin|ECHO4_Pin|ECHO2_Pin;
 8001f8e:	f245 0302 	movw	r3, #20482	@ 0x5002
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480e      	ldr	r0, [pc, #56]	@ (8001fdc <MX_GPIO_Init+0x164>)
 8001fa4:	f000 ffa0 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG3_Pin D6_Pin TRIG1_Pin TRIG2_Pin
                           D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = TRIG3_Pin|D6_Pin|TRIG1_Pin|TRIG2_Pin
 8001fa8:	f24a 433c 	movw	r3, #42044	@ 0xa43c
 8001fac:	617b      	str	r3, [r7, #20]
                          |D3_Pin|D5_Pin|D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <MX_GPIO_Init+0x164>)
 8001fc2:	f000 ff91 	bl	8002ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fc6:	bf00      	nop
 8001fc8:	3728      	adds	r7, #40	@ 0x28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe4:	b672      	cpsid	i
}
 8001fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <Error_Handler+0x8>

08001fec <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim2;

int __io_putchar(int ch)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8001ff4:	1d39      	adds	r1, r7, #4
 8001ff6:	230a      	movs	r3, #10
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4804      	ldr	r0, [pc, #16]	@ (800200c <__io_putchar+0x20>)
 8001ffc:	f002 fe84 	bl	8004d08 <HAL_UART_Transmit>
   return ch;
 8002000:	687b      	ldr	r3, [r7, #4]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000660 	.word	0x20000660

08002010 <ProgramStart>:
{

   while(*s) (*s != '\r') ? __io_putchar(*s++) : (__io_putchar(*s++), __io_putchar('\n'));         //enable Enter key
}

void ProgramStart(){
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
   printf("\033[2J");   // screen clear
 8002014:	4808      	ldr	r0, [pc, #32]	@ (8002038 <ProgramStart+0x28>)
 8002016:	f003 ff3f 	bl	8005e98 <iprintf>
   printf("\033[1;1H");   // Move cursor pos to (1,1)
 800201a:	4808      	ldr	r0, [pc, #32]	@ (800203c <ProgramStart+0x2c>)
 800201c:	f003 ff3c 	bl	8005e98 <iprintf>
   printf("Program Started ");
 8002020:	4807      	ldr	r0, [pc, #28]	@ (8002040 <ProgramStart+0x30>)
 8002022:	f003 ff39 	bl	8005e98 <iprintf>
   Wait(1);
 8002026:	2001      	movs	r0, #1
 8002028:	f000 f80c 	bl	8002044 <Wait>
   printf("\033[2J");   // screen clear
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <ProgramStart+0x28>)
 800202e:	f003 ff33 	bl	8005e98 <iprintf>
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	0800705c 	.word	0x0800705c
 800203c:	08007064 	.word	0x08007064
 8002040:	0800706c 	.word	0x0800706c

08002044 <Wait>:

void Wait(int o)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	   printf("Press Blue button to continue\r\n");
 800204c:	4808      	ldr	r0, [pc, #32]	@ (8002070 <Wait+0x2c>)
 800204e:	f003 ff8b 	bl	8005f68 <puts>
	   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 8002052:	bf00      	nop
 8002054:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002058:	4806      	ldr	r0, [pc, #24]	@ (8002074 <Wait+0x30>)
 800205a:	f001 f8c9 	bl	80031f0 <HAL_GPIO_ReadPin>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f7      	bne.n	8002054 <Wait+0x10>

}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	08007080 	.word	0x08007080
 8002074:	40020800 	.word	0x40020800

08002078 <usDelay>:


void usDelay(int us) // micro-second based Delay
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	volatile uint32_t t1 = htim2.Instance->CNT;
 8002080:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <usDelay+0x30>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	60fb      	str	r3, [r7, #12]
	while((htim2.Instance->CNT -t1) < us);
 8002088:	bf00      	nop
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <usDelay+0x30>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad2      	subs	r2, r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3f7      	bcc.n	800208a <usDelay+0x12>
}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	20000540 	.word	0x20000540
 80020ac:	00000000 	.word	0x00000000

080020b0 <usDist1>:

double usDist1()
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020bc:	482a      	ldr	r0, [pc, #168]	@ (8002168 <usDist1+0xb8>)
 80020be:	f001 f8af 	bl	8003220 <HAL_GPIO_WritePin>
	usDelay(10);
 80020c2:	200a      	movs	r0, #10
 80020c4:	f7ff ffd8 	bl	8002078 <usDelay>
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 1);
 80020c8:	2201      	movs	r2, #1
 80020ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020ce:	4826      	ldr	r0, [pc, #152]	@ (8002168 <usDist1+0xb8>)
 80020d0:	f001 f8a6 	bl	8003220 <HAL_GPIO_WritePin>
	usDelay(10);
 80020d4:	200a      	movs	r0, #10
 80020d6:	f7ff ffcf 	bl	8002078 <usDelay>
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020e0:	4821      	ldr	r0, [pc, #132]	@ (8002168 <usDist1+0xb8>)
 80020e2:	f001 f89d 	bl	8003220 <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 80020e6:	20c8      	movs	r0, #200	@ 0xc8
 80020e8:	f7ff ffc6 	bl	8002078 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) != 1);
 80020ec:	bf00      	nop
 80020ee:	2110      	movs	r1, #16
 80020f0:	481e      	ldr	r0, [pc, #120]	@ (800216c <usDist1+0xbc>)
 80020f2:	f001 f87d 	bl	80031f0 <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d1f8      	bne.n	80020ee <usDist1+0x3e>
	volatile uint32_t t1 = htim2.Instance->CNT;
 80020fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <usDist1+0xc0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) != 0);
 8002104:	bf00      	nop
 8002106:	2110      	movs	r1, #16
 8002108:	4818      	ldr	r0, [pc, #96]	@ (800216c <usDist1+0xbc>)
 800210a:	f001 f871 	bl	80031f0 <HAL_GPIO_ReadPin>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f8      	bne.n	8002106 <usDist1+0x56>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8002114:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <usDist1+0xc0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8002124:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8002128:	f7ff ffa6 	bl	8002078 <usDelay>

	double Dist = 0.0001715 * dt;
 800212c:	6978      	ldr	r0, [r7, #20]
 800212e:	f7fe fb23 	bl	8000778 <__aeabi_i2d>
 8002132:	a30b      	add	r3, pc, #44	@ (adr r3, 8002160 <usDist1+0xb0>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe f8a2 	bl	8000280 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8002144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002148:	ec43 2b17 	vmov	d7, r2, r3
}
 800214c:	eeb0 0a47 	vmov.f32	s0, s14
 8002150:	eef0 0a67 	vmov.f32	s1, s15
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	f3af 8000 	nop.w
 8002160:	c853c148 	.word	0xc853c148
 8002164:	3f267a95 	.word	0x3f267a95
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	20000540 	.word	0x20000540
 8002174:	00000000 	.word	0x00000000

08002178 <usDist2>:

double usDist2()
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002184:	482a      	ldr	r0, [pc, #168]	@ (8002230 <usDist2+0xb8>)
 8002186:	f001 f84b 	bl	8003220 <HAL_GPIO_WritePin>
	usDelay(10);
 800218a:	200a      	movs	r0, #10
 800218c:	f7ff ff74 	bl	8002078 <usDelay>
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 1);
 8002190:	2201      	movs	r2, #1
 8002192:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002196:	4826      	ldr	r0, [pc, #152]	@ (8002230 <usDist2+0xb8>)
 8002198:	f001 f842 	bl	8003220 <HAL_GPIO_WritePin>
	usDelay(10);
 800219c:	200a      	movs	r0, #10
 800219e:	f7ff ff6b 	bl	8002078 <usDelay>
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021a8:	4821      	ldr	r0, [pc, #132]	@ (8002230 <usDist2+0xb8>)
 80021aa:	f001 f839 	bl	8003220 <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 80021ae:	20c8      	movs	r0, #200	@ 0xc8
 80021b0:	f7ff ff62 	bl	8002078 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin) != 1);
 80021b4:	bf00      	nop
 80021b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021ba:	481d      	ldr	r0, [pc, #116]	@ (8002230 <usDist2+0xb8>)
 80021bc:	f001 f818 	bl	80031f0 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d1f7      	bne.n	80021b6 <usDist2+0x3e>
	volatile uint32_t t1 = htim2.Instance->CNT;
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <usDist2+0xbc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin) != 0);
 80021ce:	bf00      	nop
 80021d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021d4:	4816      	ldr	r0, [pc, #88]	@ (8002230 <usDist2+0xb8>)
 80021d6:	f001 f80b 	bl	80031f0 <HAL_GPIO_ReadPin>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f7      	bne.n	80021d0 <usDist2+0x58>
	volatile uint32_t t2 = htim2.Instance->CNT;
 80021e0:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <usDist2+0xbc>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 80021f0:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80021f4:	f7ff ff40 	bl	8002078 <usDelay>

	double Dist = 0.0001715 * dt;
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f7fe fabd 	bl	8000778 <__aeabi_i2d>
 80021fe:	a30a      	add	r3, pc, #40	@ (adr r3, 8002228 <usDist2+0xb0>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	f7fe f83c 	bl	8000280 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8002210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002214:	ec43 2b17 	vmov	d7, r2, r3
}
 8002218:	eeb0 0a47 	vmov.f32	s0, s14
 800221c:	eef0 0a67 	vmov.f32	s1, s15
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	c853c148 	.word	0xc853c148
 800222c:	3f267a95 	.word	0x3f267a95
 8002230:	40020400 	.word	0x40020400
 8002234:	20000540 	.word	0x20000540

08002238 <usDist3>:

double usDist3()
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2104      	movs	r1, #4
 8002242:	4829      	ldr	r0, [pc, #164]	@ (80022e8 <usDist3+0xb0>)
 8002244:	f000 ffec 	bl	8003220 <HAL_GPIO_WritePin>
	usDelay(10);
 8002248:	200a      	movs	r0, #10
 800224a:	f7ff ff15 	bl	8002078 <usDelay>
	HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 1);
 800224e:	2201      	movs	r2, #1
 8002250:	2104      	movs	r1, #4
 8002252:	4825      	ldr	r0, [pc, #148]	@ (80022e8 <usDist3+0xb0>)
 8002254:	f000 ffe4 	bl	8003220 <HAL_GPIO_WritePin>
	usDelay(10);
 8002258:	200a      	movs	r0, #10
 800225a:	f7ff ff0d 	bl	8002078 <usDelay>
	HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2104      	movs	r1, #4
 8002262:	4821      	ldr	r0, [pc, #132]	@ (80022e8 <usDist3+0xb0>)
 8002264:	f000 ffdc 	bl	8003220 <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8002268:	20c8      	movs	r0, #200	@ 0xc8
 800226a:	f7ff ff05 	bl	8002078 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO3_GPIO_Port, ECHO3_Pin) != 1);
 800226e:	bf00      	nop
 8002270:	2102      	movs	r1, #2
 8002272:	481d      	ldr	r0, [pc, #116]	@ (80022e8 <usDist3+0xb0>)
 8002274:	f000 ffbc 	bl	80031f0 <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b01      	cmp	r3, #1
 800227c:	d1f8      	bne.n	8002270 <usDist3+0x38>
	volatile uint32_t t1 = htim2.Instance->CNT;
 800227e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <usDist3+0xb4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO3_GPIO_Port, ECHO3_Pin) != 0);
 8002286:	bf00      	nop
 8002288:	2102      	movs	r1, #2
 800228a:	4817      	ldr	r0, [pc, #92]	@ (80022e8 <usDist3+0xb0>)
 800228c:	f000 ffb0 	bl	80031f0 <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f8      	bne.n	8002288 <usDist3+0x50>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8002296:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <usDist3+0xb4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 80022a6:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80022aa:	f7ff fee5 	bl	8002078 <usDelay>
	double Dist = 0.0001715 * dt;
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f7fe fa62 	bl	8000778 <__aeabi_i2d>
 80022b4:	a30a      	add	r3, pc, #40	@ (adr r3, 80022e0 <usDist3+0xa8>)
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	f7fd ffe1 	bl	8000280 <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 80022c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80022ce:	eeb0 0a47 	vmov.f32	s0, s14
 80022d2:	eef0 0a67 	vmov.f32	s1, s15
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	f3af 8000 	nop.w
 80022e0:	c853c148 	.word	0xc853c148
 80022e4:	3f267a95 	.word	0x3f267a95
 80022e8:	40020400 	.word	0x40020400
 80022ec:	20000540 	.word	0x20000540

080022f0 <usDist4>:

double usDist4()
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG4_GPIO_Port, TRIG4_Pin, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022fc:	482a      	ldr	r0, [pc, #168]	@ (80023a8 <usDist4+0xb8>)
 80022fe:	f000 ff8f 	bl	8003220 <HAL_GPIO_WritePin>
	usDelay(10);
 8002302:	200a      	movs	r0, #10
 8002304:	f7ff feb8 	bl	8002078 <usDelay>
	HAL_GPIO_WritePin(TRIG4_GPIO_Port, TRIG4_Pin, 1);
 8002308:	2201      	movs	r2, #1
 800230a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800230e:	4826      	ldr	r0, [pc, #152]	@ (80023a8 <usDist4+0xb8>)
 8002310:	f000 ff86 	bl	8003220 <HAL_GPIO_WritePin>
	usDelay(10);
 8002314:	200a      	movs	r0, #10
 8002316:	f7ff feaf 	bl	8002078 <usDelay>
	HAL_GPIO_WritePin(TRIG4_GPIO_Port, TRIG4_Pin, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002320:	4821      	ldr	r0, [pc, #132]	@ (80023a8 <usDist4+0xb8>)
 8002322:	f000 ff7d 	bl	8003220 <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8002326:	20c8      	movs	r0, #200	@ 0xc8
 8002328:	f7ff fea6 	bl	8002078 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO4_GPIO_Port, ECHO4_Pin) != 1);
 800232c:	bf00      	nop
 800232e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002332:	481e      	ldr	r0, [pc, #120]	@ (80023ac <usDist4+0xbc>)
 8002334:	f000 ff5c 	bl	80031f0 <HAL_GPIO_ReadPin>
 8002338:	4603      	mov	r3, r0
 800233a:	2b01      	cmp	r3, #1
 800233c:	d1f7      	bne.n	800232e <usDist4+0x3e>
	volatile uint32_t t1 = htim2.Instance->CNT;
 800233e:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <usDist4+0xc0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO4_GPIO_Port, ECHO4_Pin) != 0);
 8002346:	bf00      	nop
 8002348:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800234c:	4817      	ldr	r0, [pc, #92]	@ (80023ac <usDist4+0xbc>)
 800234e:	f000 ff4f 	bl	80031f0 <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f7      	bne.n	8002348 <usDist4+0x58>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8002358:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <usDist4+0xc0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8002368:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800236c:	f7ff fe84 	bl	8002078 <usDelay>
	double Dist = 0.0001715 * dt;
 8002370:	6978      	ldr	r0, [r7, #20]
 8002372:	f7fe fa01 	bl	8000778 <__aeabi_i2d>
 8002376:	a30a      	add	r3, pc, #40	@ (adr r3, 80023a0 <usDist4+0xb0>)
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	f7fd ff80 	bl	8000280 <__aeabi_dmul>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8002388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800238c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002390:	eeb0 0a47 	vmov.f32	s0, s14
 8002394:	eef0 0a67 	vmov.f32	s1, s15
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	c853c148 	.word	0xc853c148
 80023a4:	3f267a95 	.word	0x3f267a95
 80023a8:	40020000 	.word	0x40020000
 80023ac:	40020400 	.word	0x40020400
 80023b0:	20000540 	.word	0x20000540
 80023b4:	00000000 	.word	0x00000000

080023b8 <usDist5>:

double usDist5()
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG5_GPIO_Port, TRIG5_Pin, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2140      	movs	r1, #64	@ 0x40
 80023c2:	4829      	ldr	r0, [pc, #164]	@ (8002468 <usDist5+0xb0>)
 80023c4:	f000 ff2c 	bl	8003220 <HAL_GPIO_WritePin>
	usDelay(10);
 80023c8:	200a      	movs	r0, #10
 80023ca:	f7ff fe55 	bl	8002078 <usDelay>
	HAL_GPIO_WritePin(TRIG5_GPIO_Port, TRIG5_Pin, 1);
 80023ce:	2201      	movs	r2, #1
 80023d0:	2140      	movs	r1, #64	@ 0x40
 80023d2:	4825      	ldr	r0, [pc, #148]	@ (8002468 <usDist5+0xb0>)
 80023d4:	f000 ff24 	bl	8003220 <HAL_GPIO_WritePin>
	usDelay(10);
 80023d8:	200a      	movs	r0, #10
 80023da:	f7ff fe4d 	bl	8002078 <usDelay>
	HAL_GPIO_WritePin(TRIG5_GPIO_Port, TRIG5_Pin, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2140      	movs	r1, #64	@ 0x40
 80023e2:	4821      	ldr	r0, [pc, #132]	@ (8002468 <usDist5+0xb0>)
 80023e4:	f000 ff1c 	bl	8003220 <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 80023e8:	20c8      	movs	r0, #200	@ 0xc8
 80023ea:	f7ff fe45 	bl	8002078 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO5_GPIO_Port, ECHO5_Pin) != 1);
 80023ee:	bf00      	nop
 80023f0:	2120      	movs	r1, #32
 80023f2:	481d      	ldr	r0, [pc, #116]	@ (8002468 <usDist5+0xb0>)
 80023f4:	f000 fefc 	bl	80031f0 <HAL_GPIO_ReadPin>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d1f8      	bne.n	80023f0 <usDist5+0x38>
	volatile uint32_t t1 = htim2.Instance->CNT;
 80023fe:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <usDist5+0xb4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO5_GPIO_Port, ECHO5_Pin) != 0);
 8002406:	bf00      	nop
 8002408:	2120      	movs	r1, #32
 800240a:	4817      	ldr	r0, [pc, #92]	@ (8002468 <usDist5+0xb0>)
 800240c:	f000 fef0 	bl	80031f0 <HAL_GPIO_ReadPin>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f8      	bne.n	8002408 <usDist5+0x50>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <usDist5+0xb4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8002426:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800242a:	f7ff fe25 	bl	8002078 <usDelay>
	double Dist = 0.0001715 * dt;
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7fe f9a2 	bl	8000778 <__aeabi_i2d>
 8002434:	a30a      	add	r3, pc, #40	@ (adr r3, 8002460 <usDist5+0xa8>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f7fd ff21 	bl	8000280 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8002446:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800244a:	ec43 2b17 	vmov	d7, r2, r3
}
 800244e:	eeb0 0a47 	vmov.f32	s0, s14
 8002452:	eef0 0a67 	vmov.f32	s1, s15
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	f3af 8000 	nop.w
 8002460:	c853c148 	.word	0xc853c148
 8002464:	3f267a95 	.word	0x3f267a95
 8002468:	40020800 	.word	0x40020800
 800246c:	20000540 	.word	0x20000540

08002470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <HAL_MspInit+0x4c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	4a0f      	ldr	r2, [pc, #60]	@ (80024bc <HAL_MspInit+0x4c>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002484:	6453      	str	r3, [r2, #68]	@ 0x44
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <HAL_MspInit+0x4c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <HAL_MspInit+0x4c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <HAL_MspInit+0x4c>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a2:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <HAL_MspInit+0x4c>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024ae:	2007      	movs	r0, #7
 80024b0:	f000 fc46 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <HAL_SPI_MspInit+0x94>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d133      	bne.n	800254a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <HAL_SPI_MspInit+0x98>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002558 <HAL_SPI_MspInit+0x98>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f2:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_SPI_MspInit+0x98>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <HAL_SPI_MspInit+0x98>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a14      	ldr	r2, [pc, #80]	@ (8002558 <HAL_SPI_MspInit+0x98>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_SPI_MspInit+0x98>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC7     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 800251a:	2384      	movs	r3, #132	@ 0x84
 800251c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800252a:	2305      	movs	r3, #5
 800252c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4809      	ldr	r0, [pc, #36]	@ (800255c <HAL_SPI_MspInit+0x9c>)
 8002536:	f000 fcd7 	bl	8002ee8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2024      	movs	r0, #36	@ 0x24
 8002540:	f000 fc09 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002544:	2024      	movs	r0, #36	@ 0x24
 8002546:	f000 fc22 	bl	8002d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	@ 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40003800 	.word	0x40003800
 8002558:	40023800 	.word	0x40023800
 800255c:	40020800 	.word	0x40020800

08002560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a29      	ldr	r2, [pc, #164]	@ (8002614 <HAL_TIM_Base_MspInit+0xb4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10e      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	4b28      	ldr	r3, [pc, #160]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a27      	ldr	r2, [pc, #156]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b25      	ldr	r3, [pc, #148]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800258e:	e03a      	b.n	8002606 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
}
 80025b6:	e026      	b.n	8002606 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a17      	ldr	r2, [pc, #92]	@ (800261c <HAL_TIM_Base_MspInit+0xbc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10e      	bne.n	80025e0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
}
 80025de:	e012      	b.n	8002606 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002620 <HAL_TIM_Base_MspInit+0xc0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10d      	bne.n	8002606 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	4a09      	ldr	r2, [pc, #36]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 80025f4:	f043 0308 	orr.w	r3, r3, #8
 80025f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <HAL_TIM_Base_MspInit+0xb8>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40010000 	.word	0x40010000
 8002618:	40023800 	.word	0x40023800
 800261c:	40000400 	.word	0x40000400
 8002620:	40000c00 	.word	0x40000c00

08002624 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a24      	ldr	r2, [pc, #144]	@ (80026d4 <HAL_TIM_MspPostInit+0xb0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d11f      	bne.n	8002686 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b23      	ldr	r3, [pc, #140]	@ (80026d8 <HAL_TIM_MspPostInit+0xb4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a22      	ldr	r2, [pc, #136]	@ (80026d8 <HAL_TIM_MspPostInit+0xb4>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <HAL_TIM_MspPostInit+0xb4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002662:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002674:	2301      	movs	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	4817      	ldr	r0, [pc, #92]	@ (80026dc <HAL_TIM_MspPostInit+0xb8>)
 8002680:	f000 fc32 	bl	8002ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002684:	e022      	b.n	80026cc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a15      	ldr	r2, [pc, #84]	@ (80026e0 <HAL_TIM_MspPostInit+0xbc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d11d      	bne.n	80026cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <HAL_TIM_MspPostInit+0xb4>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	4a0f      	ldr	r2, [pc, #60]	@ (80026d8 <HAL_TIM_MspPostInit+0xb4>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a0:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <HAL_TIM_MspPostInit+0xb4>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026ac:	2340      	movs	r3, #64	@ 0x40
 80026ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026bc:	2302      	movs	r3, #2
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4619      	mov	r1, r3
 80026c6:	4805      	ldr	r0, [pc, #20]	@ (80026dc <HAL_TIM_MspPostInit+0xb8>)
 80026c8:	f000 fc0e 	bl	8002ee8 <HAL_GPIO_Init>
}
 80026cc:	bf00      	nop
 80026ce:	3728      	adds	r7, #40	@ 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020000 	.word	0x40020000
 80026e0:	40000400 	.word	0x40000400

080026e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08c      	sub	sp, #48	@ 0x30
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a45      	ldr	r2, [pc, #276]	@ (8002818 <HAL_UART_MspInit+0x134>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d153      	bne.n	80027ae <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	4b44      	ldr	r3, [pc, #272]	@ (800281c <HAL_UART_MspInit+0x138>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	4a43      	ldr	r2, [pc, #268]	@ (800281c <HAL_UART_MspInit+0x138>)
 8002710:	f043 0310 	orr.w	r3, r3, #16
 8002714:	6453      	str	r3, [r2, #68]	@ 0x44
 8002716:	4b41      	ldr	r3, [pc, #260]	@ (800281c <HAL_UART_MspInit+0x138>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	4b3d      	ldr	r3, [pc, #244]	@ (800281c <HAL_UART_MspInit+0x138>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	4a3c      	ldr	r2, [pc, #240]	@ (800281c <HAL_UART_MspInit+0x138>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	@ 0x30
 8002732:	4b3a      	ldr	r3, [pc, #232]	@ (800281c <HAL_UART_MspInit+0x138>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	4b36      	ldr	r3, [pc, #216]	@ (800281c <HAL_UART_MspInit+0x138>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a35      	ldr	r2, [pc, #212]	@ (800281c <HAL_UART_MspInit+0x138>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b33      	ldr	r3, [pc, #204]	@ (800281c <HAL_UART_MspInit+0x138>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800275a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800276c:	2307      	movs	r3, #7
 800276e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	4619      	mov	r1, r3
 8002776:	482a      	ldr	r0, [pc, #168]	@ (8002820 <HAL_UART_MspInit+0x13c>)
 8002778:	f000 fbb6 	bl	8002ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800278c:	2307      	movs	r3, #7
 800278e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	4619      	mov	r1, r3
 8002796:	4823      	ldr	r0, [pc, #140]	@ (8002824 <HAL_UART_MspInit+0x140>)
 8002798:	f000 fba6 	bl	8002ee8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	2100      	movs	r1, #0
 80027a0:	2025      	movs	r0, #37	@ 0x25
 80027a2:	f000 fad8 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027a6:	2025      	movs	r0, #37	@ 0x25
 80027a8:	f000 faf1 	bl	8002d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027ac:	e030      	b.n	8002810 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <HAL_UART_MspInit+0x144>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d12b      	bne.n	8002810 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_UART_MspInit+0x138>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	4a16      	ldr	r2, [pc, #88]	@ (800281c <HAL_UART_MspInit+0x138>)
 80027c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c8:	4b14      	ldr	r3, [pc, #80]	@ (800281c <HAL_UART_MspInit+0x138>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	4b10      	ldr	r3, [pc, #64]	@ (800281c <HAL_UART_MspInit+0x138>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	4a0f      	ldr	r2, [pc, #60]	@ (800281c <HAL_UART_MspInit+0x138>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e4:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <HAL_UART_MspInit+0x138>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027f0:	230c      	movs	r3, #12
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fc:	2303      	movs	r3, #3
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002800:	2307      	movs	r3, #7
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	4805      	ldr	r0, [pc, #20]	@ (8002820 <HAL_UART_MspInit+0x13c>)
 800280c:	f000 fb6c 	bl	8002ee8 <HAL_GPIO_Init>
}
 8002810:	bf00      	nop
 8002812:	3730      	adds	r7, #48	@ 0x30
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40011000 	.word	0x40011000
 800281c:	40023800 	.word	0x40023800
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400
 8002828:	40004400 	.word	0x40004400

0800282c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <NMI_Handler+0x4>

08002834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <HardFault_Handler+0x4>

0800283c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <MemManage_Handler+0x4>

08002844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <BusFault_Handler+0x4>

0800284c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <UsageFault_Handler+0x4>

08002854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002882:	f000 f949 	bl	8002b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002890:	4802      	ldr	r0, [pc, #8]	@ (800289c <SPI2_IRQHandler+0x10>)
 8002892:	f001 fa01 	bl	8003c98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200004a0 	.word	0x200004a0

080028a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <USART1_IRQHandler+0x10>)
 80028a6:	f002 fadf 	bl	8004e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000618 	.word	0x20000618

080028b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	e00a      	b.n	80028dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028c6:	f3af 8000 	nop.w
 80028ca:	4601      	mov	r1, r0
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	60ba      	str	r2, [r7, #8]
 80028d2:	b2ca      	uxtb	r2, r1
 80028d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	dbf0      	blt.n	80028c6 <_read+0x12>
  }

  return len;
 80028e4:	687b      	ldr	r3, [r7, #4]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e009      	b.n	8002914 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	60ba      	str	r2, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fb6f 	bl	8001fec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	dbf1      	blt.n	8002900 <_write+0x12>
  }
  return len;
 800291c:	687b      	ldr	r3, [r7, #4]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_close>:

int _close(int file)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800294e:	605a      	str	r2, [r3, #4]
  return 0;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_isatty>:

int _isatty(int file)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002966:	2301      	movs	r3, #1
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002998:	4a14      	ldr	r2, [pc, #80]	@ (80029ec <_sbrk+0x5c>)
 800299a:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <_sbrk+0x60>)
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a4:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ac:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <_sbrk+0x64>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	@ (80029f8 <_sbrk+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b2:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c0:	f003 fc32 	bl	8006228 <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	220c      	movs	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	e009      	b.n	80029e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d0:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	4a05      	ldr	r2, [pc, #20]	@ (80029f4 <_sbrk+0x64>)
 80029e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20020000 	.word	0x20020000
 80029f0:	00000400 	.word	0x00000400
 80029f4:	20000748 	.word	0x20000748
 80029f8:	200008a0 	.word	0x200008a0

080029fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a00:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <SystemInit+0x20>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a06:	4a05      	ldr	r2, [pc, #20]	@ (8002a1c <SystemInit+0x20>)
 8002a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a24:	f7ff ffea 	bl	80029fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a28:	480c      	ldr	r0, [pc, #48]	@ (8002a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a2a:	490d      	ldr	r1, [pc, #52]	@ (8002a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a30:	e002      	b.n	8002a38 <LoopCopyDataInit>

08002a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a36:	3304      	adds	r3, #4

08002a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a3c:	d3f9      	bcc.n	8002a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a40:	4c0a      	ldr	r4, [pc, #40]	@ (8002a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a44:	e001      	b.n	8002a4a <LoopFillZerobss>

08002a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a48:	3204      	adds	r2, #4

08002a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a4c:	d3fb      	bcc.n	8002a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a4e:	f003 fbf1 	bl	8006234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a52:	f7fe fec5 	bl	80017e0 <main>
  bx  lr    
 8002a56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a60:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002a64:	08007e58 	.word	0x08007e58
  ldr r2, =_sbss
 8002a68:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002a6c:	2000089c 	.word	0x2000089c

08002a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC_IRQHandler>
	...

08002a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a78:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <HAL_Init+0x40>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab4 <HAL_Init+0x40>)
 8002a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a84:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_Init+0x40>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <HAL_Init+0x40>)
 8002a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a90:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <HAL_Init+0x40>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <HAL_Init+0x40>)
 8002a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a9c:	2003      	movs	r0, #3
 8002a9e:	f000 f94f 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f000 f808 	bl	8002ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa8:	f7ff fce2 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023c00 	.word	0x40023c00

08002ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac0:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <HAL_InitTick+0x54>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <HAL_InitTick+0x58>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f967 	bl	8002daa <HAL_SYSTICK_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00e      	b.n	8002b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b0f      	cmp	r3, #15
 8002aea:	d80a      	bhi.n	8002b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aec:	2200      	movs	r2, #0
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f000 f92f 	bl	8002d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002af8:	4a06      	ldr	r2, [pc, #24]	@ (8002b14 <HAL_InitTick+0x5c>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000014 	.word	0x20000014
 8002b10:	2000001c 	.word	0x2000001c
 8002b14:	20000018 	.word	0x20000018

08002b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <HAL_IncTick+0x20>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <HAL_IncTick+0x24>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4413      	add	r3, r2
 8002b28:	4a04      	ldr	r2, [pc, #16]	@ (8002b3c <HAL_IncTick+0x24>)
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2000001c 	.word	0x2000001c
 8002b3c:	2000074c 	.word	0x2000074c

08002b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return uwTick;
 8002b44:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <HAL_GetTick+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	2000074c 	.word	0x2000074c

08002b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b60:	f7ff ffee 	bl	8002b40 <HAL_GetTick>
 8002b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d005      	beq.n	8002b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b72:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <HAL_Delay+0x44>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b7e:	bf00      	nop
 8002b80:	f7ff ffde 	bl	8002b40 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d8f7      	bhi.n	8002b80 <HAL_Delay+0x28>
  {
  }
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	2000001c 	.word	0x2000001c

08002ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd2:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	60d3      	str	r3, [r2, #12]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <__NVIC_GetPriorityGrouping+0x18>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	f003 0307 	and.w	r3, r3, #7
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db0b      	blt.n	8002c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	4907      	ldr	r1, [pc, #28]	@ (8002c3c <__NVIC_EnableIRQ+0x38>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2001      	movs	r0, #1
 8002c26:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000e100 	.word	0xe000e100

08002c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	db0a      	blt.n	8002c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	490c      	ldr	r1, [pc, #48]	@ (8002c8c <__NVIC_SetPriority+0x4c>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	0112      	lsls	r2, r2, #4
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	440b      	add	r3, r1
 8002c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c68:	e00a      	b.n	8002c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4908      	ldr	r1, [pc, #32]	@ (8002c90 <__NVIC_SetPriority+0x50>)
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	3b04      	subs	r3, #4
 8002c78:	0112      	lsls	r2, r2, #4
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	761a      	strb	r2, [r3, #24]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	@ 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f1c3 0307 	rsb	r3, r3, #7
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	bf28      	it	cs
 8002cb2:	2304      	movcs	r3, #4
 8002cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d902      	bls.n	8002cc4 <NVIC_EncodePriority+0x30>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3b03      	subs	r3, #3
 8002cc2:	e000      	b.n	8002cc6 <NVIC_EncodePriority+0x32>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	43d9      	mvns	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	4313      	orrs	r3, r2
         );
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3724      	adds	r7, #36	@ 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d0c:	d301      	bcc.n	8002d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00f      	b.n	8002d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d12:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <SysTick_Config+0x40>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f7ff ff8e 	bl	8002c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <SysTick_Config+0x40>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2a:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <SysTick_Config+0x40>)
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	e000e010 	.word	0xe000e010

08002d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff29 	bl	8002ba0 <__NVIC_SetPriorityGrouping>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d68:	f7ff ff3e 	bl	8002be8 <__NVIC_GetPriorityGrouping>
 8002d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	6978      	ldr	r0, [r7, #20]
 8002d74:	f7ff ff8e 	bl	8002c94 <NVIC_EncodePriority>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff5d 	bl	8002c40 <__NVIC_SetPriority>
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff31 	bl	8002c04 <__NVIC_EnableIRQ>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ffa2 	bl	8002cfc <SysTick_Config>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff feb6 	bl	8002b40 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d008      	beq.n	8002df4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e052      	b.n	8002e9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0216 	bic.w	r2, r2, #22
 8002e02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <HAL_DMA_Abort+0x62>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0208 	bic.w	r2, r2, #8
 8002e32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e44:	e013      	b.n	8002e6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e46:	f7ff fe7b 	bl	8002b40 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d90c      	bls.n	8002e6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e015      	b.n	8002e9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e4      	bne.n	8002e46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e80:	223f      	movs	r2, #63	@ 0x3f
 8002e82:	409a      	lsls	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2280      	movs	r2, #128	@ 0x80
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e00c      	b.n	8002eda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2205      	movs	r2, #5
 8002ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	@ 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e159      	b.n	80031b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	f040 8148 	bne.w	80031b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d005      	beq.n	8002f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d130      	bne.n	8002f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 0201 	and.w	r2, r3, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d017      	beq.n	8002fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d123      	bne.n	800302c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	08da      	lsrs	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3208      	adds	r2, #8
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3208      	adds	r2, #8
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a2 	beq.w	80031b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b57      	ldr	r3, [pc, #348]	@ (80031d0 <HAL_GPIO_Init+0x2e8>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	4a56      	ldr	r2, [pc, #344]	@ (80031d0 <HAL_GPIO_Init+0x2e8>)
 8003078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800307c:	6453      	str	r3, [r2, #68]	@ 0x44
 800307e:	4b54      	ldr	r3, [pc, #336]	@ (80031d0 <HAL_GPIO_Init+0x2e8>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800308a:	4a52      	ldr	r2, [pc, #328]	@ (80031d4 <HAL_GPIO_Init+0x2ec>)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a49      	ldr	r2, [pc, #292]	@ (80031d8 <HAL_GPIO_Init+0x2f0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x202>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a48      	ldr	r2, [pc, #288]	@ (80031dc <HAL_GPIO_Init+0x2f4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x1fe>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a47      	ldr	r2, [pc, #284]	@ (80031e0 <HAL_GPIO_Init+0x2f8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x1fa>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a46      	ldr	r2, [pc, #280]	@ (80031e4 <HAL_GPIO_Init+0x2fc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x1f6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a45      	ldr	r2, [pc, #276]	@ (80031e8 <HAL_GPIO_Init+0x300>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x1f2>
 80030d6:	2304      	movs	r3, #4
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030da:	2307      	movs	r3, #7
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	@ (80031d4 <HAL_GPIO_Init+0x2ec>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800310a:	4b38      	ldr	r3, [pc, #224]	@ (80031ec <HAL_GPIO_Init+0x304>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312e:	4a2f      	ldr	r2, [pc, #188]	@ (80031ec <HAL_GPIO_Init+0x304>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003134:	4b2d      	ldr	r3, [pc, #180]	@ (80031ec <HAL_GPIO_Init+0x304>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003158:	4a24      	ldr	r2, [pc, #144]	@ (80031ec <HAL_GPIO_Init+0x304>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800315e:	4b23      	ldr	r3, [pc, #140]	@ (80031ec <HAL_GPIO_Init+0x304>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003182:	4a1a      	ldr	r2, [pc, #104]	@ (80031ec <HAL_GPIO_Init+0x304>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003188:	4b18      	ldr	r3, [pc, #96]	@ (80031ec <HAL_GPIO_Init+0x304>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ac:	4a0f      	ldr	r2, [pc, #60]	@ (80031ec <HAL_GPIO_Init+0x304>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f aea2 	bls.w	8002f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	@ 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40013c00 	.word	0x40013c00

080031f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	887b      	ldrh	r3, [r7, #2]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e001      	b.n	8003212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	807b      	strh	r3, [r7, #2]
 800322c:	4613      	mov	r3, r2
 800322e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003230:	787b      	ldrb	r3, [r7, #1]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003236:	887a      	ldrh	r2, [r7, #2]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800323c:	e003      	b.n	8003246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	041a      	lsls	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	619a      	str	r2, [r3, #24]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e267      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d075      	beq.n	800335e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003272:	4b88      	ldr	r3, [pc, #544]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b04      	cmp	r3, #4
 800327c:	d00c      	beq.n	8003298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327e:	4b85      	ldr	r3, [pc, #532]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003286:	2b08      	cmp	r3, #8
 8003288:	d112      	bne.n	80032b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328a:	4b82      	ldr	r3, [pc, #520]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003292:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003296:	d10b      	bne.n	80032b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003298:	4b7e      	ldr	r3, [pc, #504]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d05b      	beq.n	800335c <HAL_RCC_OscConfig+0x108>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d157      	bne.n	800335c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e242      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b8:	d106      	bne.n	80032c8 <HAL_RCC_OscConfig+0x74>
 80032ba:	4b76      	ldr	r3, [pc, #472]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a75      	ldr	r2, [pc, #468]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80032c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e01d      	b.n	8003304 <HAL_RCC_OscConfig+0xb0>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0x98>
 80032d2:	4b70      	ldr	r3, [pc, #448]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a6f      	ldr	r2, [pc, #444]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80032d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	4b6d      	ldr	r3, [pc, #436]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6c      	ldr	r2, [pc, #432]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e00b      	b.n	8003304 <HAL_RCC_OscConfig+0xb0>
 80032ec:	4b69      	ldr	r3, [pc, #420]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a68      	ldr	r2, [pc, #416]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80032f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b66      	ldr	r3, [pc, #408]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a65      	ldr	r2, [pc, #404]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80032fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7ff fc18 	bl	8002b40 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003314:	f7ff fc14 	bl	8002b40 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	@ 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e207      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b5b      	ldr	r3, [pc, #364]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0xc0>
 8003332:	e014      	b.n	800335e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7ff fc04 	bl	8002b40 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800333c:	f7ff fc00 	bl	8002b40 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	@ 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e1f3      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	4b51      	ldr	r3, [pc, #324]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0xe8>
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d063      	beq.n	8003432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800336a:	4b4a      	ldr	r3, [pc, #296]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003376:	4b47      	ldr	r3, [pc, #284]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800337e:	2b08      	cmp	r3, #8
 8003380:	d11c      	bne.n	80033bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003382:	4b44      	ldr	r3, [pc, #272]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d116      	bne.n	80033bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	4b41      	ldr	r3, [pc, #260]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_RCC_OscConfig+0x152>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e1c7      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4937      	ldr	r1, [pc, #220]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	e03a      	b.n	8003432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c4:	4b34      	ldr	r3, [pc, #208]	@ (8003498 <HAL_RCC_OscConfig+0x244>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7ff fbb9 	bl	8002b40 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d2:	f7ff fbb5 	bl	8002b40 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e1a8      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	4b28      	ldr	r3, [pc, #160]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4925      	ldr	r1, [pc, #148]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]
 8003404:	e015      	b.n	8003432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003406:	4b24      	ldr	r3, [pc, #144]	@ (8003498 <HAL_RCC_OscConfig+0x244>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7ff fb98 	bl	8002b40 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003414:	f7ff fb94 	bl	8002b40 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e187      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d036      	beq.n	80034ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d016      	beq.n	8003474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003446:	4b15      	ldr	r3, [pc, #84]	@ (800349c <HAL_RCC_OscConfig+0x248>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7ff fb78 	bl	8002b40 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003454:	f7ff fb74 	bl	8002b40 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e167      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_RCC_OscConfig+0x240>)
 8003468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x200>
 8003472:	e01b      	b.n	80034ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003474:	4b09      	ldr	r3, [pc, #36]	@ (800349c <HAL_RCC_OscConfig+0x248>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7ff fb61 	bl	8002b40 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	e00e      	b.n	80034a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003482:	f7ff fb5d 	bl	8002b40 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d907      	bls.n	80034a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e150      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
 8003494:	40023800 	.word	0x40023800
 8003498:	42470000 	.word	0x42470000
 800349c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a0:	4b88      	ldr	r3, [pc, #544]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80034a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ea      	bne.n	8003482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8097 	beq.w	80035e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ba:	2300      	movs	r3, #0
 80034bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034be:	4b81      	ldr	r3, [pc, #516]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	4b7d      	ldr	r3, [pc, #500]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	4a7c      	ldr	r2, [pc, #496]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80034d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034da:	4b7a      	ldr	r3, [pc, #488]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	4b77      	ldr	r3, [pc, #476]	@ (80036c8 <HAL_RCC_OscConfig+0x474>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d118      	bne.n	8003528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f6:	4b74      	ldr	r3, [pc, #464]	@ (80036c8 <HAL_RCC_OscConfig+0x474>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a73      	ldr	r2, [pc, #460]	@ (80036c8 <HAL_RCC_OscConfig+0x474>)
 80034fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003502:	f7ff fb1d 	bl	8002b40 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350a:	f7ff fb19 	bl	8002b40 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e10c      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351c:	4b6a      	ldr	r3, [pc, #424]	@ (80036c8 <HAL_RCC_OscConfig+0x474>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d106      	bne.n	800353e <HAL_RCC_OscConfig+0x2ea>
 8003530:	4b64      	ldr	r3, [pc, #400]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003534:	4a63      	ldr	r2, [pc, #396]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6713      	str	r3, [r2, #112]	@ 0x70
 800353c:	e01c      	b.n	8003578 <HAL_RCC_OscConfig+0x324>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b05      	cmp	r3, #5
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0x30c>
 8003546:	4b5f      	ldr	r3, [pc, #380]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354a:	4a5e      	ldr	r2, [pc, #376]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	6713      	str	r3, [r2, #112]	@ 0x70
 8003552:	4b5c      	ldr	r3, [pc, #368]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003556:	4a5b      	ldr	r2, [pc, #364]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6713      	str	r3, [r2, #112]	@ 0x70
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0x324>
 8003560:	4b58      	ldr	r3, [pc, #352]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003564:	4a57      	ldr	r2, [pc, #348]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	6713      	str	r3, [r2, #112]	@ 0x70
 800356c:	4b55      	ldr	r3, [pc, #340]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	4a54      	ldr	r2, [pc, #336]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 8003572:	f023 0304 	bic.w	r3, r3, #4
 8003576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d015      	beq.n	80035ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7ff fade 	bl	8002b40 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003586:	e00a      	b.n	800359e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003588:	f7ff fada 	bl	8002b40 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e0cb      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359e:	4b49      	ldr	r3, [pc, #292]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0ee      	beq.n	8003588 <HAL_RCC_OscConfig+0x334>
 80035aa:	e014      	b.n	80035d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ac:	f7ff fac8 	bl	8002b40 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b4:	f7ff fac4 	bl	8002b40 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e0b5      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ca:	4b3e      	ldr	r3, [pc, #248]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1ee      	bne.n	80035b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d105      	bne.n	80035e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035dc:	4b39      	ldr	r3, [pc, #228]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	4a38      	ldr	r2, [pc, #224]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80035e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80a1 	beq.w	8003734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f2:	4b34      	ldr	r3, [pc, #208]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d05c      	beq.n	80036b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d141      	bne.n	800368a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b31      	ldr	r3, [pc, #196]	@ (80036cc <HAL_RCC_OscConfig+0x478>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7ff fa98 	bl	8002b40 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003614:	f7ff fa94 	bl	8002b40 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e087      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003626:	4b27      	ldr	r3, [pc, #156]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	019b      	lsls	r3, r3, #6
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	3b01      	subs	r3, #1
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	491b      	ldr	r1, [pc, #108]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800365c:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <HAL_RCC_OscConfig+0x478>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003662:	f7ff fa6d 	bl	8002b40 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366a:	f7ff fa69 	bl	8002b40 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e05c      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367c:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x416>
 8003688:	e054      	b.n	8003734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b10      	ldr	r3, [pc, #64]	@ (80036cc <HAL_RCC_OscConfig+0x478>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7ff fa56 	bl	8002b40 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003698:	f7ff fa52 	bl	8002b40 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e045      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <HAL_RCC_OscConfig+0x470>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x444>
 80036b6:	e03d      	b.n	8003734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d107      	bne.n	80036d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e038      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40007000 	.word	0x40007000
 80036cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003740 <HAL_RCC_OscConfig+0x4ec>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d028      	beq.n	8003730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d121      	bne.n	8003730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d11a      	bne.n	8003730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003700:	4013      	ands	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003708:	4293      	cmp	r3, r2
 800370a:	d111      	bne.n	8003730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	3b01      	subs	r3, #1
 800371a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d107      	bne.n	8003730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800

08003744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0cc      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003758:	4b68      	ldr	r3, [pc, #416]	@ (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d90c      	bls.n	8003780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b65      	ldr	r3, [pc, #404]	@ (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b63      	ldr	r3, [pc, #396]	@ (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0b8      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003798:	4b59      	ldr	r3, [pc, #356]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a58      	ldr	r2, [pc, #352]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b0:	4b53      	ldr	r3, [pc, #332]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a52      	ldr	r2, [pc, #328]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037bc:	4b50      	ldr	r3, [pc, #320]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	494d      	ldr	r1, [pc, #308]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d044      	beq.n	8003864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b47      	ldr	r3, [pc, #284]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d119      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e07f      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d003      	beq.n	8003802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003802:	4b3f      	ldr	r3, [pc, #252]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e06f      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003812:	4b3b      	ldr	r3, [pc, #236]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e067      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003822:	4b37      	ldr	r3, [pc, #220]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4934      	ldr	r1, [pc, #208]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	4313      	orrs	r3, r2
 8003832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003834:	f7ff f984 	bl	8002b40 <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	e00a      	b.n	8003852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7ff f980 	bl	8002b40 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e04f      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	4b2b      	ldr	r3, [pc, #172]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 020c 	and.w	r2, r3, #12
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	429a      	cmp	r2, r3
 8003862:	d1eb      	bne.n	800383c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003864:	4b25      	ldr	r3, [pc, #148]	@ (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d20c      	bcs.n	800388c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b22      	ldr	r3, [pc, #136]	@ (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b20      	ldr	r3, [pc, #128]	@ (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e032      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003898:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4916      	ldr	r1, [pc, #88]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b6:	4b12      	ldr	r3, [pc, #72]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	490e      	ldr	r1, [pc, #56]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ca:	f000 f821 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 80038ce:	4602      	mov	r2, r0
 80038d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	490a      	ldr	r1, [pc, #40]	@ (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	5ccb      	ldrb	r3, [r1, r3]
 80038de:	fa22 f303 	lsr.w	r3, r2, r3
 80038e2:	4a09      	ldr	r2, [pc, #36]	@ (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038e6:	4b09      	ldr	r3, [pc, #36]	@ (800390c <HAL_RCC_ClockConfig+0x1c8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f8e4 	bl	8002ab8 <HAL_InitTick>

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023c00 	.word	0x40023c00
 8003900:	40023800 	.word	0x40023800
 8003904:	08007dfc 	.word	0x08007dfc
 8003908:	20000014 	.word	0x20000014
 800390c:	20000018 	.word	0x20000018

08003910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003914:	b094      	sub	sp, #80	@ 0x50
 8003916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	647b      	str	r3, [r7, #68]	@ 0x44
 800391c:	2300      	movs	r3, #0
 800391e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003920:	2300      	movs	r3, #0
 8003922:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003928:	4b79      	ldr	r3, [pc, #484]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b08      	cmp	r3, #8
 8003932:	d00d      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x40>
 8003934:	2b08      	cmp	r3, #8
 8003936:	f200 80e1 	bhi.w	8003afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x34>
 800393e:	2b04      	cmp	r3, #4
 8003940:	d003      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0x3a>
 8003942:	e0db      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4b73      	ldr	r3, [pc, #460]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003946:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003948:	e0db      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394a:	4b73      	ldr	r3, [pc, #460]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800394c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800394e:	e0d8      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003950:	4b6f      	ldr	r3, [pc, #444]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003958:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800395a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d063      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003966:	4b6a      	ldr	r3, [pc, #424]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	099b      	lsrs	r3, r3, #6
 800396c:	2200      	movs	r2, #0
 800396e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003970:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003978:	633b      	str	r3, [r7, #48]	@ 0x30
 800397a:	2300      	movs	r3, #0
 800397c:	637b      	str	r3, [r7, #52]	@ 0x34
 800397e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003982:	4622      	mov	r2, r4
 8003984:	462b      	mov	r3, r5
 8003986:	f04f 0000 	mov.w	r0, #0
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	0159      	lsls	r1, r3, #5
 8003990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003994:	0150      	lsls	r0, r2, #5
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4621      	mov	r1, r4
 800399c:	1a51      	subs	r1, r2, r1
 800399e:	6139      	str	r1, [r7, #16]
 80039a0:	4629      	mov	r1, r5
 80039a2:	eb63 0301 	sbc.w	r3, r3, r1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039b4:	4659      	mov	r1, fp
 80039b6:	018b      	lsls	r3, r1, #6
 80039b8:	4651      	mov	r1, sl
 80039ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039be:	4651      	mov	r1, sl
 80039c0:	018a      	lsls	r2, r1, #6
 80039c2:	4651      	mov	r1, sl
 80039c4:	ebb2 0801 	subs.w	r8, r2, r1
 80039c8:	4659      	mov	r1, fp
 80039ca:	eb63 0901 	sbc.w	r9, r3, r1
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e2:	4690      	mov	r8, r2
 80039e4:	4699      	mov	r9, r3
 80039e6:	4623      	mov	r3, r4
 80039e8:	eb18 0303 	adds.w	r3, r8, r3
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	462b      	mov	r3, r5
 80039f0:	eb49 0303 	adc.w	r3, r9, r3
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a02:	4629      	mov	r1, r5
 8003a04:	024b      	lsls	r3, r1, #9
 8003a06:	4621      	mov	r1, r4
 8003a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	024a      	lsls	r2, r1, #9
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a16:	2200      	movs	r2, #0
 8003a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a20:	f7fc ff3c 	bl	800089c <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4613      	mov	r3, r2
 8003a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a2c:	e058      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2e:	4b38      	ldr	r3, [pc, #224]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	099b      	lsrs	r3, r3, #6
 8003a34:	2200      	movs	r2, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	4611      	mov	r1, r2
 8003a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	2300      	movs	r3, #0
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	f04f 0000 	mov.w	r0, #0
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	0159      	lsls	r1, r3, #5
 8003a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a5a:	0150      	lsls	r0, r2, #5
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4641      	mov	r1, r8
 8003a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a66:	4649      	mov	r1, r9
 8003a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a80:	ebb2 040a 	subs.w	r4, r2, sl
 8003a84:	eb63 050b 	sbc.w	r5, r3, fp
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	00eb      	lsls	r3, r5, #3
 8003a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a96:	00e2      	lsls	r2, r4, #3
 8003a98:	4614      	mov	r4, r2
 8003a9a:	461d      	mov	r5, r3
 8003a9c:	4643      	mov	r3, r8
 8003a9e:	18e3      	adds	r3, r4, r3
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	eb45 0303 	adc.w	r3, r5, r3
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	028b      	lsls	r3, r1, #10
 8003aba:	4621      	mov	r1, r4
 8003abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	028a      	lsls	r2, r1, #10
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aca:	2200      	movs	r2, #0
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	61fa      	str	r2, [r7, #28]
 8003ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad4:	f7fc fee2 	bl	800089c <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4613      	mov	r3, r2
 8003ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	3301      	adds	r3, #1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003afa:	e002      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3750      	adds	r7, #80	@ 0x50
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800
 8003b14:	00f42400 	.word	0x00f42400
 8003b18:	007a1200 	.word	0x007a1200

08003b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b20:	4b03      	ldr	r3, [pc, #12]	@ (8003b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000014 	.word	0x20000014

08003b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b38:	f7ff fff0 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	0a9b      	lsrs	r3, r3, #10
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4903      	ldr	r1, [pc, #12]	@ (8003b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	08007e0c 	.word	0x08007e0c

08003b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b60:	f7ff ffdc 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	0b5b      	lsrs	r3, r3, #13
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4903      	ldr	r1, [pc, #12]	@ (8003b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	08007e0c 	.word	0x08007e0c

08003b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e07b      	b.n	8003c8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ba6:	d009      	beq.n	8003bbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	61da      	str	r2, [r3, #28]
 8003bae:	e005      	b.n	8003bbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fe fc72 	bl	80024c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bf2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c40:	ea42 0103 	orr.w	r1, r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	f003 0104 	and.w	r1, r3, #4
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	f003 0210 	and.w	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
    return;
 8003cd6:	e0ce      	b.n	8003e76 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_SPI_IRQHandler+0x5e>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
    return;
 8003cf4:	e0bf      	b.n	8003e76 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <HAL_SPI_IRQHandler+0x7e>
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d105      	bne.n	8003d16 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80b0 	beq.w	8003e76 <HAL_SPI_IRQHandler+0x1de>
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80aa 	beq.w	8003e76 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d023      	beq.n	8003d74 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d011      	beq.n	8003d5c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	e00b      	b.n	8003d74 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]
        return;
 8003d72:	e080      	b.n	8003e76 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d014      	beq.n	8003da8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d82:	f043 0201 	orr.w	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00c      	beq.n	8003dcc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db6:	f043 0208 	orr.w	r2, r3, #8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d04f      	beq.n	8003e74 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003de2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <HAL_SPI_IRQHandler+0x168>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d034      	beq.n	8003e6a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0203 	bic.w	r2, r2, #3
 8003e0e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d011      	beq.n	8003e3c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1c:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <HAL_SPI_IRQHandler+0x1e4>)
 8003e1e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff f83c 	bl	8002ea2 <HAL_DMA_Abort_IT>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d016      	beq.n	8003e72 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e48:	4a0c      	ldr	r2, [pc, #48]	@ (8003e7c <HAL_SPI_IRQHandler+0x1e4>)
 8003e4a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff f826 	bl	8002ea2 <HAL_DMA_Abort_IT>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003e68:	e003      	b.n	8003e72 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f808 	bl	8003e80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e70:	e000      	b.n	8003e74 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003e72:	bf00      	nop
    return;
 8003e74:	bf00      	nop
  }
}
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	08003e95 	.word	0x08003e95

08003e80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff ffe6 	bl	8003e80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e041      	b.n	8003f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fe fb3c 	bl	8002560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f000 fb1c 	bl	8004538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e03c      	b.n	8003fee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1e      	ldr	r2, [pc, #120]	@ (8003ffc <HAL_TIM_Base_Start+0xa0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d018      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x5c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8e:	d013      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x5c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1a      	ldr	r2, [pc, #104]	@ (8004000 <HAL_TIM_Base_Start+0xa4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00e      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x5c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a19      	ldr	r2, [pc, #100]	@ (8004004 <HAL_TIM_Base_Start+0xa8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d009      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x5c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a17      	ldr	r2, [pc, #92]	@ (8004008 <HAL_TIM_Base_Start+0xac>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d004      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x5c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a16      	ldr	r2, [pc, #88]	@ (800400c <HAL_TIM_Base_Start+0xb0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d111      	bne.n	8003fdc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b06      	cmp	r3, #6
 8003fc8:	d010      	beq.n	8003fec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fda:	e007      	b.n	8003fec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40014000 	.word	0x40014000

08004010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e041      	b.n	80040a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f839 	bl	80040ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f000 fa72 	bl	8004538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_TIM_PWM_Start+0x24>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e022      	b.n	800412e <HAL_TIM_PWM_Start+0x6a>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d109      	bne.n	8004102 <HAL_TIM_PWM_Start+0x3e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	bf14      	ite	ne
 80040fa:	2301      	movne	r3, #1
 80040fc:	2300      	moveq	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	e015      	b.n	800412e <HAL_TIM_PWM_Start+0x6a>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d109      	bne.n	800411c <HAL_TIM_PWM_Start+0x58>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e008      	b.n	800412e <HAL_TIM_PWM_Start+0x6a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e068      	b.n	8004208 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d104      	bne.n	8004146 <HAL_TIM_PWM_Start+0x82>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004144:	e013      	b.n	800416e <HAL_TIM_PWM_Start+0xaa>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b04      	cmp	r3, #4
 800414a:	d104      	bne.n	8004156 <HAL_TIM_PWM_Start+0x92>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004154:	e00b      	b.n	800416e <HAL_TIM_PWM_Start+0xaa>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d104      	bne.n	8004166 <HAL_TIM_PWM_Start+0xa2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004164:	e003      	b.n	800416e <HAL_TIM_PWM_Start+0xaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2201      	movs	r2, #1
 8004174:	6839      	ldr	r1, [r7, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fc90 	bl	8004a9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a23      	ldr	r2, [pc, #140]	@ (8004210 <HAL_TIM_PWM_Start+0x14c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d107      	bne.n	8004196 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004194:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <HAL_TIM_PWM_Start+0x14c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d018      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x10e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a8:	d013      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x10e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a19      	ldr	r2, [pc, #100]	@ (8004214 <HAL_TIM_PWM_Start+0x150>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x10e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a17      	ldr	r2, [pc, #92]	@ (8004218 <HAL_TIM_PWM_Start+0x154>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x10e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	@ (800421c <HAL_TIM_PWM_Start+0x158>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x10e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a14      	ldr	r2, [pc, #80]	@ (8004220 <HAL_TIM_PWM_Start+0x15c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d111      	bne.n	80041f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b06      	cmp	r3, #6
 80041e2:	d010      	beq.n	8004206 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f4:	e007      	b.n	8004206 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40010000 	.word	0x40010000
 8004214:	40000400 	.word	0x40000400
 8004218:	40000800 	.word	0x40000800
 800421c:	40000c00 	.word	0x40000c00
 8004220:	40014000 	.word	0x40014000

08004224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800423e:	2302      	movs	r3, #2
 8004240:	e0ae      	b.n	80043a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	f200 809f 	bhi.w	8004390 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004252:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	0800428d 	.word	0x0800428d
 800425c:	08004391 	.word	0x08004391
 8004260:	08004391 	.word	0x08004391
 8004264:	08004391 	.word	0x08004391
 8004268:	080042cd 	.word	0x080042cd
 800426c:	08004391 	.word	0x08004391
 8004270:	08004391 	.word	0x08004391
 8004274:	08004391 	.word	0x08004391
 8004278:	0800430f 	.word	0x0800430f
 800427c:	08004391 	.word	0x08004391
 8004280:	08004391 	.word	0x08004391
 8004284:	08004391 	.word	0x08004391
 8004288:	0800434f 	.word	0x0800434f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f9dc 	bl	8004650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0208 	orr.w	r2, r2, #8
 80042a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0204 	bic.w	r2, r2, #4
 80042b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6999      	ldr	r1, [r3, #24]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	619a      	str	r2, [r3, #24]
      break;
 80042ca:	e064      	b.n	8004396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fa22 	bl	800471c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	021a      	lsls	r2, r3, #8
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	619a      	str	r2, [r3, #24]
      break;
 800430c:	e043      	b.n	8004396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fa6d 	bl	80047f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0208 	orr.w	r2, r2, #8
 8004328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0204 	bic.w	r2, r2, #4
 8004338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69d9      	ldr	r1, [r3, #28]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	61da      	str	r2, [r3, #28]
      break;
 800434c:	e023      	b.n	8004396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fab7 	bl	80048c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	021a      	lsls	r2, r3, #8
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	61da      	str	r2, [r3, #28]
      break;
 800438e:	e002      	b.n	8004396 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	75fb      	strb	r3, [r7, #23]
      break;
 8004394:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800439e:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIM_ConfigClockSource+0x1c>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e0b4      	b.n	800452e <HAL_TIM_ConfigClockSource+0x186>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043fc:	d03e      	beq.n	800447c <HAL_TIM_ConfigClockSource+0xd4>
 80043fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004402:	f200 8087 	bhi.w	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800440a:	f000 8086 	beq.w	800451a <HAL_TIM_ConfigClockSource+0x172>
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004412:	d87f      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004414:	2b70      	cmp	r3, #112	@ 0x70
 8004416:	d01a      	beq.n	800444e <HAL_TIM_ConfigClockSource+0xa6>
 8004418:	2b70      	cmp	r3, #112	@ 0x70
 800441a:	d87b      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 800441c:	2b60      	cmp	r3, #96	@ 0x60
 800441e:	d050      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004420:	2b60      	cmp	r3, #96	@ 0x60
 8004422:	d877      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004424:	2b50      	cmp	r3, #80	@ 0x50
 8004426:	d03c      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004428:	2b50      	cmp	r3, #80	@ 0x50
 800442a:	d873      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 800442c:	2b40      	cmp	r3, #64	@ 0x40
 800442e:	d058      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004430:	2b40      	cmp	r3, #64	@ 0x40
 8004432:	d86f      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004434:	2b30      	cmp	r3, #48	@ 0x30
 8004436:	d064      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 8004438:	2b30      	cmp	r3, #48	@ 0x30
 800443a:	d86b      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 800443c:	2b20      	cmp	r3, #32
 800443e:	d060      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 8004440:	2b20      	cmp	r3, #32
 8004442:	d867      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d05c      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 8004448:	2b10      	cmp	r3, #16
 800444a:	d05a      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 800444c:	e062      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800445e:	f000 fafd 	bl	8004a5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	609a      	str	r2, [r3, #8]
      break;
 800447a:	e04f      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800448c:	f000 fae6 	bl	8004a5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800449e:	609a      	str	r2, [r3, #8]
      break;
 80044a0:	e03c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ae:	461a      	mov	r2, r3
 80044b0:	f000 fa5a 	bl	8004968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2150      	movs	r1, #80	@ 0x50
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fab3 	bl	8004a26 <TIM_ITRx_SetConfig>
      break;
 80044c0:	e02c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ce:	461a      	mov	r2, r3
 80044d0:	f000 fa79 	bl	80049c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2160      	movs	r1, #96	@ 0x60
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 faa3 	bl	8004a26 <TIM_ITRx_SetConfig>
      break;
 80044e0:	e01c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ee:	461a      	mov	r2, r3
 80044f0:	f000 fa3a 	bl	8004968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2140      	movs	r1, #64	@ 0x40
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fa93 	bl	8004a26 <TIM_ITRx_SetConfig>
      break;
 8004500:	e00c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f000 fa8a 	bl	8004a26 <TIM_ITRx_SetConfig>
      break;
 8004512:	e003      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
      break;
 8004518:	e000      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800451a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3a      	ldr	r2, [pc, #232]	@ (8004634 <TIM_Base_SetConfig+0xfc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00f      	beq.n	8004570 <TIM_Base_SetConfig+0x38>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004556:	d00b      	beq.n	8004570 <TIM_Base_SetConfig+0x38>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a37      	ldr	r2, [pc, #220]	@ (8004638 <TIM_Base_SetConfig+0x100>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <TIM_Base_SetConfig+0x38>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a36      	ldr	r2, [pc, #216]	@ (800463c <TIM_Base_SetConfig+0x104>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0x38>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a35      	ldr	r2, [pc, #212]	@ (8004640 <TIM_Base_SetConfig+0x108>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d108      	bne.n	8004582 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2b      	ldr	r2, [pc, #172]	@ (8004634 <TIM_Base_SetConfig+0xfc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01b      	beq.n	80045c2 <TIM_Base_SetConfig+0x8a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004590:	d017      	beq.n	80045c2 <TIM_Base_SetConfig+0x8a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a28      	ldr	r2, [pc, #160]	@ (8004638 <TIM_Base_SetConfig+0x100>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <TIM_Base_SetConfig+0x8a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a27      	ldr	r2, [pc, #156]	@ (800463c <TIM_Base_SetConfig+0x104>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00f      	beq.n	80045c2 <TIM_Base_SetConfig+0x8a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a26      	ldr	r2, [pc, #152]	@ (8004640 <TIM_Base_SetConfig+0x108>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00b      	beq.n	80045c2 <TIM_Base_SetConfig+0x8a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a25      	ldr	r2, [pc, #148]	@ (8004644 <TIM_Base_SetConfig+0x10c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d007      	beq.n	80045c2 <TIM_Base_SetConfig+0x8a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a24      	ldr	r2, [pc, #144]	@ (8004648 <TIM_Base_SetConfig+0x110>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_Base_SetConfig+0x8a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a23      	ldr	r2, [pc, #140]	@ (800464c <TIM_Base_SetConfig+0x114>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d108      	bne.n	80045d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004634 <TIM_Base_SetConfig+0xfc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d103      	bne.n	8004608 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b01      	cmp	r3, #1
 8004618:	d105      	bne.n	8004626 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f023 0201 	bic.w	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	611a      	str	r2, [r3, #16]
  }
}
 8004626:	bf00      	nop
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800

08004650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f023 0201 	bic.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0303 	bic.w	r3, r3, #3
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 0302 	bic.w	r3, r3, #2
 8004698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004718 <TIM_OC1_SetConfig+0xc8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d10c      	bne.n	80046c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f023 0308 	bic.w	r3, r3, #8
 80046b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 0304 	bic.w	r3, r3, #4
 80046c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a13      	ldr	r2, [pc, #76]	@ (8004718 <TIM_OC1_SetConfig+0xc8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d111      	bne.n	80046f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40010000 	.word	0x40010000

0800471c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f023 0210 	bic.w	r2, r3, #16
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f023 0320 	bic.w	r3, r3, #32
 8004766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a1e      	ldr	r2, [pc, #120]	@ (80047f0 <TIM_OC2_SetConfig+0xd4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10d      	bne.n	8004798 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004796:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a15      	ldr	r2, [pc, #84]	@ (80047f0 <TIM_OC2_SetConfig+0xd4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d113      	bne.n	80047c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000

080047f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800483c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1d      	ldr	r2, [pc, #116]	@ (80048c4 <TIM_OC3_SetConfig+0xd0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10d      	bne.n	800486e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800486c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a14      	ldr	r2, [pc, #80]	@ (80048c4 <TIM_OC3_SetConfig+0xd0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d113      	bne.n	800489e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800487c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	621a      	str	r2, [r3, #32]
}
 80048b8:	bf00      	nop
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	40010000 	.word	0x40010000

080048c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	031b      	lsls	r3, r3, #12
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a10      	ldr	r2, [pc, #64]	@ (8004964 <TIM_OC4_SetConfig+0x9c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d109      	bne.n	800493c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800492e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	019b      	lsls	r3, r3, #6
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40010000 	.word	0x40010000

08004968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f023 0201 	bic.w	r2, r3, #1
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f023 030a 	bic.w	r3, r3, #10
 80049a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b087      	sub	sp, #28
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f023 0210 	bic.w	r2, r3, #16
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	031b      	lsls	r3, r3, #12
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	621a      	str	r2, [r3, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f043 0307 	orr.w	r3, r3, #7
 8004a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	609a      	str	r2, [r3, #8]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	021a      	lsls	r2, r3, #8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	609a      	str	r2, [r3, #8]
}
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	2201      	movs	r2, #1
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1a      	ldr	r2, [r3, #32]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	401a      	ands	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e050      	b.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d018      	beq.n	8004b76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b4c:	d013      	beq.n	8004b76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a18      	ldr	r2, [pc, #96]	@ (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a16      	ldr	r2, [pc, #88]	@ (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a15      	ldr	r2, [pc, #84]	@ (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a13      	ldr	r2, [pc, #76]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d10c      	bne.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	40014000 	.word	0x40014000

08004bc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e03d      	b.n	8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e042      	b.n	8004d00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fd fd28 	bl	80026e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	@ 0x24
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fdbd 	bl	800582c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	@ 0x28
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d175      	bne.n	8004e14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_UART_Transmit+0x2c>
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e06e      	b.n	8004e16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2221      	movs	r2, #33	@ 0x21
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d46:	f7fd fefb 	bl	8002b40 <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	88fa      	ldrh	r2, [r7, #6]
 8004d50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	88fa      	ldrh	r2, [r7, #6]
 8004d56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d60:	d108      	bne.n	8004d74 <HAL_UART_Transmit+0x6c>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d104      	bne.n	8004d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	e003      	b.n	8004d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d7c:	e02e      	b.n	8004ddc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2200      	movs	r2, #0
 8004d86:	2180      	movs	r1, #128	@ 0x80
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fb1f 	bl	80053cc <UART_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e03a      	b.n	8004e16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10b      	bne.n	8004dbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004db4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	3302      	adds	r3, #2
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	e007      	b.n	8004dce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	781a      	ldrb	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1cb      	bne.n	8004d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	2140      	movs	r1, #64	@ 0x40
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 faeb 	bl	80053cc <UART_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e006      	b.n	8004e16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	e000      	b.n	8004e16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e14:	2302      	movs	r3, #2
  }
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d112      	bne.n	8004e5e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_UART_Receive_IT+0x26>
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e00b      	b.n	8004e60 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	461a      	mov	r2, r3
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fb12 	bl	800547e <UART_Start_Receive_IT>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	e000      	b.n	8004e60 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e5e:	2302      	movs	r3, #2
  }
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <HAL_UART_IRQHandler+0x66>
 8004eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fbf2 	bl	80056b0 <UART_Receive_IT>
      return;
 8004ecc:	e25b      	b.n	8005386 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80de 	beq.w	8005094 <HAL_UART_IRQHandler+0x22c>
 8004ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80d1 	beq.w	8005094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_UART_IRQHandler+0xae>
 8004efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <HAL_UART_IRQHandler+0xd2>
 8004f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f043 0202 	orr.w	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_UART_IRQHandler+0xf6>
 8004f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f56:	f043 0204 	orr.w	r2, r3, #4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d011      	beq.n	8004f8e <HAL_UART_IRQHandler+0x126>
 8004f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d105      	bne.n	8004f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f86:	f043 0208 	orr.w	r2, r3, #8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 81f2 	beq.w	800537c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x14e>
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fb7d 	bl	80056b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc0:	2b40      	cmp	r3, #64	@ 0x40
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x17a>
 8004fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d04f      	beq.n	8005082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa85 	bl	80054f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff2:	2b40      	cmp	r3, #64	@ 0x40
 8004ff4:	d141      	bne.n	800507a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3314      	adds	r3, #20
 8004ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800500c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3314      	adds	r3, #20
 800501e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005022:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800502e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800503a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1d9      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d013      	beq.n	8005072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504e:	4a7e      	ldr	r2, [pc, #504]	@ (8005248 <HAL_UART_IRQHandler+0x3e0>)
 8005050:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd ff23 	bl	8002ea2 <HAL_DMA_Abort_IT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	e00e      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f994 	bl	80053a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005078:	e00a      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f990 	bl	80053a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005080:	e006      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f98c 	bl	80053a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800508e:	e175      	b.n	800537c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	bf00      	nop
    return;
 8005092:	e173      	b.n	800537c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 814f 	bne.w	800533c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8148 	beq.w	800533c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8141 	beq.w	800533c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050da:	2b40      	cmp	r3, #64	@ 0x40
 80050dc:	f040 80b6 	bne.w	800524c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8145 	beq.w	8005380 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050fe:	429a      	cmp	r2, r3
 8005100:	f080 813e 	bcs.w	8005380 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800510a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005116:	f000 8088 	beq.w	800522a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005130:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005146:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800514a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005152:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800515e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1d9      	bne.n	800511a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3314      	adds	r3, #20
 800516c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3314      	adds	r3, #20
 8005186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800518a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800518e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005192:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800519c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e1      	bne.n	8005166 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3314      	adds	r3, #20
 80051a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e3      	bne.n	80051a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051fa:	f023 0310 	bic.w	r3, r3, #16
 80051fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800520c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800520e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005212:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800521a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e3      	bne.n	80051e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005224:	4618      	mov	r0, r3
 8005226:	f7fd fdcc 	bl	8002dc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005238:	b29b      	uxth	r3, r3
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	b29b      	uxth	r3, r3
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f8b7 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005246:	e09b      	b.n	8005380 <HAL_UART_IRQHandler+0x518>
 8005248:	080055b9 	.word	0x080055b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005254:	b29b      	uxth	r3, r3
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 808e 	beq.w	8005384 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8089 	beq.w	8005384 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	330c      	adds	r3, #12
 8005278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005288:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005296:	647a      	str	r2, [r7, #68]	@ 0x44
 8005298:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800529c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e3      	bne.n	8005272 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3314      	adds	r3, #20
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	623b      	str	r3, [r7, #32]
   return(result);
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3314      	adds	r3, #20
 80052ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80052d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e3      	bne.n	80052aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0310 	bic.w	r3, r3, #16
 8005306:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005314:	61fa      	str	r2, [r7, #28]
 8005316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	69b9      	ldr	r1, [r7, #24]
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	617b      	str	r3, [r7, #20]
   return(result);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e3      	bne.n	80052f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800532e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f83d 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800533a:	e023      	b.n	8005384 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800533c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005344:	2b00      	cmp	r3, #0
 8005346:	d009      	beq.n	800535c <HAL_UART_IRQHandler+0x4f4>
 8005348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800534c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f943 	bl	80055e0 <UART_Transmit_IT>
    return;
 800535a:	e014      	b.n	8005386 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00e      	beq.n	8005386 <HAL_UART_IRQHandler+0x51e>
 8005368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f983 	bl	8005680 <UART_EndTransmit_IT>
    return;
 800537a:	e004      	b.n	8005386 <HAL_UART_IRQHandler+0x51e>
    return;
 800537c:	bf00      	nop
 800537e:	e002      	b.n	8005386 <HAL_UART_IRQHandler+0x51e>
      return;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <HAL_UART_IRQHandler+0x51e>
      return;
 8005384:	bf00      	nop
  }
}
 8005386:	37e8      	adds	r7, #232	@ 0xe8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053dc:	e03b      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d037      	beq.n	8005456 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e6:	f7fd fbab 	bl	8002b40 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	6a3a      	ldr	r2, [r7, #32]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d302      	bcc.n	80053fc <UART_WaitOnFlagUntilTimeout+0x30>
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e03a      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d023      	beq.n	8005456 <UART_WaitOnFlagUntilTimeout+0x8a>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b80      	cmp	r3, #128	@ 0x80
 8005412:	d020      	beq.n	8005456 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b40      	cmp	r3, #64	@ 0x40
 8005418:	d01d      	beq.n	8005456 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b08      	cmp	r3, #8
 8005426:	d116      	bne.n	8005456 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f857 	bl	80054f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2208      	movs	r2, #8
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e00f      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4013      	ands	r3, r2
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	bf0c      	ite	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	2300      	movne	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	429a      	cmp	r2, r3
 8005472:	d0b4      	beq.n	80053de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	4613      	mov	r3, r2
 800548a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	88fa      	ldrh	r2, [r7, #6]
 8005496:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	88fa      	ldrh	r2, [r7, #6]
 800549c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2222      	movs	r2, #34	@ 0x22
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054c2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695a      	ldr	r2, [r3, #20]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0220 	orr.w	r2, r2, #32
 80054e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b095      	sub	sp, #84	@ 0x54
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800551a:	643a      	str	r2, [r7, #64]	@ 0x40
 800551c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005520:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e5      	bne.n	80054fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3314      	adds	r3, #20
 8005534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	61fb      	str	r3, [r7, #28]
   return(result);
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3314      	adds	r3, #20
 800554c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800554e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005550:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e5      	bne.n	800552e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005566:	2b01      	cmp	r3, #1
 8005568:	d119      	bne.n	800559e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	60bb      	str	r3, [r7, #8]
   return(result);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f023 0310 	bic.w	r3, r3, #16
 8005580:	647b      	str	r3, [r7, #68]	@ 0x44
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	330c      	adds	r3, #12
 8005588:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800558a:	61ba      	str	r2, [r7, #24]
 800558c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6979      	ldr	r1, [r7, #20]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	613b      	str	r3, [r7, #16]
   return(result);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e5      	bne.n	800556a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055ac:	bf00      	nop
 80055ae:	3754      	adds	r7, #84	@ 0x54
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff fee4 	bl	80053a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b21      	cmp	r3, #33	@ 0x21
 80055f2:	d13e      	bne.n	8005672 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055fc:	d114      	bne.n	8005628 <UART_Transmit_IT+0x48>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d110      	bne.n	8005628 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800561a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	1c9a      	adds	r2, r3, #2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	621a      	str	r2, [r3, #32]
 8005626:	e008      	b.n	800563a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	1c59      	adds	r1, r3, #1
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6211      	str	r1, [r2, #32]
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29b      	uxth	r3, r3
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	4619      	mov	r1, r3
 8005648:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10f      	bne.n	800566e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800565c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800566c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	e000      	b.n	8005674 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
  }
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005696:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff fe73 	bl	800538c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	@ 0x30
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b22      	cmp	r3, #34	@ 0x22
 80056c2:	f040 80ae 	bne.w	8005822 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ce:	d117      	bne.n	8005700 <UART_Receive_IT+0x50>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d113      	bne.n	8005700 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	1c9a      	adds	r2, r3, #2
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80056fe:	e026      	b.n	800574e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005712:	d007      	beq.n	8005724 <UART_Receive_IT+0x74>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <UART_Receive_IT+0x82>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	b2da      	uxtb	r2, r3
 800572c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	e008      	b.n	8005744 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800573e:	b2da      	uxtb	r2, r3
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005742:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	b29b      	uxth	r3, r3
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	4619      	mov	r1, r3
 800575c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800575e:	2b00      	cmp	r3, #0
 8005760:	d15d      	bne.n	800581e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0220 	bic.w	r2, r2, #32
 8005770:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695a      	ldr	r2, [r3, #20]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d135      	bne.n	8005814 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	330c      	adds	r3, #12
 80057b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	613b      	str	r3, [r7, #16]
   return(result);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f023 0310 	bic.w	r3, r3, #16
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	330c      	adds	r3, #12
 80057cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ce:	623a      	str	r2, [r7, #32]
 80057d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	69f9      	ldr	r1, [r7, #28]
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	61bb      	str	r3, [r7, #24]
   return(result);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e5      	bne.n	80057ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d10a      	bne.n	8005806 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff fdd1 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
 8005812:	e002      	b.n	800581a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7fb fcdb 	bl	80011d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	e002      	b.n	8005824 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	e000      	b.n	8005824 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005822:	2302      	movs	r3, #2
  }
}
 8005824:	4618      	mov	r0, r3
 8005826:	3730      	adds	r7, #48	@ 0x30
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800582c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005830:	b0c0      	sub	sp, #256	@ 0x100
 8005832:	af00      	add	r7, sp, #0
 8005834:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005848:	68d9      	ldr	r1, [r3, #12]
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	ea40 0301 	orr.w	r3, r0, r1
 8005854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	431a      	orrs	r2, r3
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	431a      	orrs	r2, r3
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005884:	f021 010c 	bic.w	r1, r1, #12
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005892:	430b      	orrs	r3, r1
 8005894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a6:	6999      	ldr	r1, [r3, #24]
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	ea40 0301 	orr.w	r3, r0, r1
 80058b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b8f      	ldr	r3, [pc, #572]	@ (8005af8 <UART_SetConfig+0x2cc>)
 80058bc:	429a      	cmp	r2, r3
 80058be:	d005      	beq.n	80058cc <UART_SetConfig+0xa0>
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b8d      	ldr	r3, [pc, #564]	@ (8005afc <UART_SetConfig+0x2d0>)
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d104      	bne.n	80058d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058cc:	f7fe f946 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 80058d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058d4:	e003      	b.n	80058de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058d6:	f7fe f92d 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 80058da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058e8:	f040 810c 	bne.w	8005b04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058fe:	4622      	mov	r2, r4
 8005900:	462b      	mov	r3, r5
 8005902:	1891      	adds	r1, r2, r2
 8005904:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005906:	415b      	adcs	r3, r3
 8005908:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800590a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800590e:	4621      	mov	r1, r4
 8005910:	eb12 0801 	adds.w	r8, r2, r1
 8005914:	4629      	mov	r1, r5
 8005916:	eb43 0901 	adc.w	r9, r3, r1
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800592a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800592e:	4690      	mov	r8, r2
 8005930:	4699      	mov	r9, r3
 8005932:	4623      	mov	r3, r4
 8005934:	eb18 0303 	adds.w	r3, r8, r3
 8005938:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800593c:	462b      	mov	r3, r5
 800593e:	eb49 0303 	adc.w	r3, r9, r3
 8005942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005952:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800595a:	460b      	mov	r3, r1
 800595c:	18db      	adds	r3, r3, r3
 800595e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005960:	4613      	mov	r3, r2
 8005962:	eb42 0303 	adc.w	r3, r2, r3
 8005966:	657b      	str	r3, [r7, #84]	@ 0x54
 8005968:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800596c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005970:	f7fa ff94 	bl	800089c <__aeabi_uldivmod>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4b61      	ldr	r3, [pc, #388]	@ (8005b00 <UART_SetConfig+0x2d4>)
 800597a:	fba3 2302 	umull	r2, r3, r3, r2
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	011c      	lsls	r4, r3, #4
 8005982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005986:	2200      	movs	r2, #0
 8005988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800598c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005990:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005994:	4642      	mov	r2, r8
 8005996:	464b      	mov	r3, r9
 8005998:	1891      	adds	r1, r2, r2
 800599a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800599c:	415b      	adcs	r3, r3
 800599e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059a4:	4641      	mov	r1, r8
 80059a6:	eb12 0a01 	adds.w	sl, r2, r1
 80059aa:	4649      	mov	r1, r9
 80059ac:	eb43 0b01 	adc.w	fp, r3, r1
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059c4:	4692      	mov	sl, r2
 80059c6:	469b      	mov	fp, r3
 80059c8:	4643      	mov	r3, r8
 80059ca:	eb1a 0303 	adds.w	r3, sl, r3
 80059ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059d2:	464b      	mov	r3, r9
 80059d4:	eb4b 0303 	adc.w	r3, fp, r3
 80059d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059f0:	460b      	mov	r3, r1
 80059f2:	18db      	adds	r3, r3, r3
 80059f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80059f6:	4613      	mov	r3, r2
 80059f8:	eb42 0303 	adc.w	r3, r2, r3
 80059fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80059fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a06:	f7fa ff49 	bl	800089c <__aeabi_uldivmod>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4b3b      	ldr	r3, [pc, #236]	@ (8005b00 <UART_SetConfig+0x2d4>)
 8005a12:	fba3 2301 	umull	r2, r3, r3, r1
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2264      	movs	r2, #100	@ 0x64
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	1acb      	subs	r3, r1, r3
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a26:	4b36      	ldr	r3, [pc, #216]	@ (8005b00 <UART_SetConfig+0x2d4>)
 8005a28:	fba3 2302 	umull	r2, r3, r3, r2
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a34:	441c      	add	r4, r3
 8005a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	1891      	adds	r1, r2, r2
 8005a4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a50:	415b      	adcs	r3, r3
 8005a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a58:	4641      	mov	r1, r8
 8005a5a:	1851      	adds	r1, r2, r1
 8005a5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a5e:	4649      	mov	r1, r9
 8005a60:	414b      	adcs	r3, r1
 8005a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a70:	4659      	mov	r1, fp
 8005a72:	00cb      	lsls	r3, r1, #3
 8005a74:	4651      	mov	r1, sl
 8005a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a7a:	4651      	mov	r1, sl
 8005a7c:	00ca      	lsls	r2, r1, #3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4619      	mov	r1, r3
 8005a82:	4603      	mov	r3, r0
 8005a84:	4642      	mov	r2, r8
 8005a86:	189b      	adds	r3, r3, r2
 8005a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	460a      	mov	r2, r1
 8005a90:	eb42 0303 	adc.w	r3, r2, r3
 8005a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005aac:	460b      	mov	r3, r1
 8005aae:	18db      	adds	r3, r3, r3
 8005ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	eb42 0303 	adc.w	r3, r2, r3
 8005ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005abe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ac2:	f7fa feeb 	bl	800089c <__aeabi_uldivmod>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4b0d      	ldr	r3, [pc, #52]	@ (8005b00 <UART_SetConfig+0x2d4>)
 8005acc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	2164      	movs	r1, #100	@ 0x64
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	3332      	adds	r3, #50	@ 0x32
 8005ade:	4a08      	ldr	r2, [pc, #32]	@ (8005b00 <UART_SetConfig+0x2d4>)
 8005ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	f003 0207 	and.w	r2, r3, #7
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4422      	add	r2, r4
 8005af2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005af4:	e106      	b.n	8005d04 <UART_SetConfig+0x4d8>
 8005af6:	bf00      	nop
 8005af8:	40011000 	.word	0x40011000
 8005afc:	40011400 	.word	0x40011400
 8005b00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b16:	4642      	mov	r2, r8
 8005b18:	464b      	mov	r3, r9
 8005b1a:	1891      	adds	r1, r2, r2
 8005b1c:	6239      	str	r1, [r7, #32]
 8005b1e:	415b      	adcs	r3, r3
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b26:	4641      	mov	r1, r8
 8005b28:	1854      	adds	r4, r2, r1
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	eb43 0501 	adc.w	r5, r3, r1
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	00eb      	lsls	r3, r5, #3
 8005b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b3e:	00e2      	lsls	r2, r4, #3
 8005b40:	4614      	mov	r4, r2
 8005b42:	461d      	mov	r5, r3
 8005b44:	4643      	mov	r3, r8
 8005b46:	18e3      	adds	r3, r4, r3
 8005b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	eb45 0303 	adc.w	r3, r5, r3
 8005b52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b72:	4629      	mov	r1, r5
 8005b74:	008b      	lsls	r3, r1, #2
 8005b76:	4621      	mov	r1, r4
 8005b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	008a      	lsls	r2, r1, #2
 8005b80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b84:	f7fa fe8a 	bl	800089c <__aeabi_uldivmod>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4b60      	ldr	r3, [pc, #384]	@ (8005d10 <UART_SetConfig+0x4e4>)
 8005b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	011c      	lsls	r4, r3, #4
 8005b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ba0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ba4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ba8:	4642      	mov	r2, r8
 8005baa:	464b      	mov	r3, r9
 8005bac:	1891      	adds	r1, r2, r2
 8005bae:	61b9      	str	r1, [r7, #24]
 8005bb0:	415b      	adcs	r3, r3
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb8:	4641      	mov	r1, r8
 8005bba:	1851      	adds	r1, r2, r1
 8005bbc:	6139      	str	r1, [r7, #16]
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	414b      	adcs	r3, r1
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bd0:	4659      	mov	r1, fp
 8005bd2:	00cb      	lsls	r3, r1, #3
 8005bd4:	4651      	mov	r1, sl
 8005bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bda:	4651      	mov	r1, sl
 8005bdc:	00ca      	lsls	r2, r1, #3
 8005bde:	4610      	mov	r0, r2
 8005be0:	4619      	mov	r1, r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	4642      	mov	r2, r8
 8005be6:	189b      	adds	r3, r3, r2
 8005be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bec:	464b      	mov	r3, r9
 8005bee:	460a      	mov	r2, r1
 8005bf0:	eb42 0303 	adc.w	r3, r2, r3
 8005bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c10:	4649      	mov	r1, r9
 8005c12:	008b      	lsls	r3, r1, #2
 8005c14:	4641      	mov	r1, r8
 8005c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c1a:	4641      	mov	r1, r8
 8005c1c:	008a      	lsls	r2, r1, #2
 8005c1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c22:	f7fa fe3b 	bl	800089c <__aeabi_uldivmod>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	4b38      	ldr	r3, [pc, #224]	@ (8005d10 <UART_SetConfig+0x4e4>)
 8005c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	2264      	movs	r2, #100	@ 0x64
 8005c36:	fb02 f303 	mul.w	r3, r2, r3
 8005c3a:	1acb      	subs	r3, r1, r3
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	3332      	adds	r3, #50	@ 0x32
 8005c40:	4a33      	ldr	r2, [pc, #204]	@ (8005d10 <UART_SetConfig+0x4e4>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c4c:	441c      	add	r4, r3
 8005c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c52:	2200      	movs	r2, #0
 8005c54:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c56:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	464b      	mov	r3, r9
 8005c60:	1891      	adds	r1, r2, r2
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	415b      	adcs	r3, r3
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	1851      	adds	r1, r2, r1
 8005c70:	6039      	str	r1, [r7, #0]
 8005c72:	4649      	mov	r1, r9
 8005c74:	414b      	adcs	r3, r1
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c84:	4659      	mov	r1, fp
 8005c86:	00cb      	lsls	r3, r1, #3
 8005c88:	4651      	mov	r1, sl
 8005c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c8e:	4651      	mov	r1, sl
 8005c90:	00ca      	lsls	r2, r1, #3
 8005c92:	4610      	mov	r0, r2
 8005c94:	4619      	mov	r1, r3
 8005c96:	4603      	mov	r3, r0
 8005c98:	4642      	mov	r2, r8
 8005c9a:	189b      	adds	r3, r3, r2
 8005c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	460a      	mov	r2, r1
 8005ca2:	eb42 0303 	adc.w	r3, r2, r3
 8005ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	008b      	lsls	r3, r1, #2
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cca:	4641      	mov	r1, r8
 8005ccc:	008a      	lsls	r2, r1, #2
 8005cce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cd2:	f7fa fde3 	bl	800089c <__aeabi_uldivmod>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <UART_SetConfig+0x4e4>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	@ 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	3332      	adds	r3, #50	@ 0x32
 8005cee:	4a08      	ldr	r2, [pc, #32]	@ (8005d10 <UART_SetConfig+0x4e4>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 020f 	and.w	r2, r3, #15
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4422      	add	r2, r4
 8005d02:	609a      	str	r2, [r3, #8]
}
 8005d04:	bf00      	nop
 8005d06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d10:	51eb851f 	.word	0x51eb851f

08005d14 <std>:
 8005d14:	2300      	movs	r3, #0
 8005d16:	b510      	push	{r4, lr}
 8005d18:	4604      	mov	r4, r0
 8005d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d22:	6083      	str	r3, [r0, #8]
 8005d24:	8181      	strh	r1, [r0, #12]
 8005d26:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d28:	81c2      	strh	r2, [r0, #14]
 8005d2a:	6183      	str	r3, [r0, #24]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	2208      	movs	r2, #8
 8005d30:	305c      	adds	r0, #92	@ 0x5c
 8005d32:	f000 fa19 	bl	8006168 <memset>
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <std+0x58>)
 8005d38:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d70 <std+0x5c>)
 8005d3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d74 <std+0x60>)
 8005d40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d42:	4b0d      	ldr	r3, [pc, #52]	@ (8005d78 <std+0x64>)
 8005d44:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d46:	4b0d      	ldr	r3, [pc, #52]	@ (8005d7c <std+0x68>)
 8005d48:	6224      	str	r4, [r4, #32]
 8005d4a:	429c      	cmp	r4, r3
 8005d4c:	d006      	beq.n	8005d5c <std+0x48>
 8005d4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d52:	4294      	cmp	r4, r2
 8005d54:	d002      	beq.n	8005d5c <std+0x48>
 8005d56:	33d0      	adds	r3, #208	@ 0xd0
 8005d58:	429c      	cmp	r4, r3
 8005d5a:	d105      	bne.n	8005d68 <std+0x54>
 8005d5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d64:	f000 ba8a 	b.w	800627c <__retarget_lock_init_recursive>
 8005d68:	bd10      	pop	{r4, pc}
 8005d6a:	bf00      	nop
 8005d6c:	08005fb9 	.word	0x08005fb9
 8005d70:	08005fdb 	.word	0x08005fdb
 8005d74:	08006013 	.word	0x08006013
 8005d78:	08006037 	.word	0x08006037
 8005d7c:	20000750 	.word	0x20000750

08005d80 <stdio_exit_handler>:
 8005d80:	4a02      	ldr	r2, [pc, #8]	@ (8005d8c <stdio_exit_handler+0xc>)
 8005d82:	4903      	ldr	r1, [pc, #12]	@ (8005d90 <stdio_exit_handler+0x10>)
 8005d84:	4803      	ldr	r0, [pc, #12]	@ (8005d94 <stdio_exit_handler+0x14>)
 8005d86:	f000 b869 	b.w	8005e5c <_fwalk_sglue>
 8005d8a:	bf00      	nop
 8005d8c:	20000020 	.word	0x20000020
 8005d90:	08006dcd 	.word	0x08006dcd
 8005d94:	20000030 	.word	0x20000030

08005d98 <cleanup_stdio>:
 8005d98:	6841      	ldr	r1, [r0, #4]
 8005d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dcc <cleanup_stdio+0x34>)
 8005d9c:	4299      	cmp	r1, r3
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	4604      	mov	r4, r0
 8005da2:	d001      	beq.n	8005da8 <cleanup_stdio+0x10>
 8005da4:	f001 f812 	bl	8006dcc <_fflush_r>
 8005da8:	68a1      	ldr	r1, [r4, #8]
 8005daa:	4b09      	ldr	r3, [pc, #36]	@ (8005dd0 <cleanup_stdio+0x38>)
 8005dac:	4299      	cmp	r1, r3
 8005dae:	d002      	beq.n	8005db6 <cleanup_stdio+0x1e>
 8005db0:	4620      	mov	r0, r4
 8005db2:	f001 f80b 	bl	8006dcc <_fflush_r>
 8005db6:	68e1      	ldr	r1, [r4, #12]
 8005db8:	4b06      	ldr	r3, [pc, #24]	@ (8005dd4 <cleanup_stdio+0x3c>)
 8005dba:	4299      	cmp	r1, r3
 8005dbc:	d004      	beq.n	8005dc8 <cleanup_stdio+0x30>
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc4:	f001 b802 	b.w	8006dcc <_fflush_r>
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000750 	.word	0x20000750
 8005dd0:	200007b8 	.word	0x200007b8
 8005dd4:	20000820 	.word	0x20000820

08005dd8 <global_stdio_init.part.0>:
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	4b0b      	ldr	r3, [pc, #44]	@ (8005e08 <global_stdio_init.part.0+0x30>)
 8005ddc:	4c0b      	ldr	r4, [pc, #44]	@ (8005e0c <global_stdio_init.part.0+0x34>)
 8005dde:	4a0c      	ldr	r2, [pc, #48]	@ (8005e10 <global_stdio_init.part.0+0x38>)
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	4620      	mov	r0, r4
 8005de4:	2200      	movs	r2, #0
 8005de6:	2104      	movs	r1, #4
 8005de8:	f7ff ff94 	bl	8005d14 <std>
 8005dec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005df0:	2201      	movs	r2, #1
 8005df2:	2109      	movs	r1, #9
 8005df4:	f7ff ff8e 	bl	8005d14 <std>
 8005df8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e02:	2112      	movs	r1, #18
 8005e04:	f7ff bf86 	b.w	8005d14 <std>
 8005e08:	20000888 	.word	0x20000888
 8005e0c:	20000750 	.word	0x20000750
 8005e10:	08005d81 	.word	0x08005d81

08005e14 <__sfp_lock_acquire>:
 8005e14:	4801      	ldr	r0, [pc, #4]	@ (8005e1c <__sfp_lock_acquire+0x8>)
 8005e16:	f000 ba32 	b.w	800627e <__retarget_lock_acquire_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	20000891 	.word	0x20000891

08005e20 <__sfp_lock_release>:
 8005e20:	4801      	ldr	r0, [pc, #4]	@ (8005e28 <__sfp_lock_release+0x8>)
 8005e22:	f000 ba2d 	b.w	8006280 <__retarget_lock_release_recursive>
 8005e26:	bf00      	nop
 8005e28:	20000891 	.word	0x20000891

08005e2c <__sinit>:
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	4604      	mov	r4, r0
 8005e30:	f7ff fff0 	bl	8005e14 <__sfp_lock_acquire>
 8005e34:	6a23      	ldr	r3, [r4, #32]
 8005e36:	b11b      	cbz	r3, 8005e40 <__sinit+0x14>
 8005e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e3c:	f7ff bff0 	b.w	8005e20 <__sfp_lock_release>
 8005e40:	4b04      	ldr	r3, [pc, #16]	@ (8005e54 <__sinit+0x28>)
 8005e42:	6223      	str	r3, [r4, #32]
 8005e44:	4b04      	ldr	r3, [pc, #16]	@ (8005e58 <__sinit+0x2c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f5      	bne.n	8005e38 <__sinit+0xc>
 8005e4c:	f7ff ffc4 	bl	8005dd8 <global_stdio_init.part.0>
 8005e50:	e7f2      	b.n	8005e38 <__sinit+0xc>
 8005e52:	bf00      	nop
 8005e54:	08005d99 	.word	0x08005d99
 8005e58:	20000888 	.word	0x20000888

08005e5c <_fwalk_sglue>:
 8005e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e60:	4607      	mov	r7, r0
 8005e62:	4688      	mov	r8, r1
 8005e64:	4614      	mov	r4, r2
 8005e66:	2600      	movs	r6, #0
 8005e68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e6c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e70:	d505      	bpl.n	8005e7e <_fwalk_sglue+0x22>
 8005e72:	6824      	ldr	r4, [r4, #0]
 8005e74:	2c00      	cmp	r4, #0
 8005e76:	d1f7      	bne.n	8005e68 <_fwalk_sglue+0xc>
 8005e78:	4630      	mov	r0, r6
 8005e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7e:	89ab      	ldrh	r3, [r5, #12]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d907      	bls.n	8005e94 <_fwalk_sglue+0x38>
 8005e84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	d003      	beq.n	8005e94 <_fwalk_sglue+0x38>
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	4638      	mov	r0, r7
 8005e90:	47c0      	blx	r8
 8005e92:	4306      	orrs	r6, r0
 8005e94:	3568      	adds	r5, #104	@ 0x68
 8005e96:	e7e9      	b.n	8005e6c <_fwalk_sglue+0x10>

08005e98 <iprintf>:
 8005e98:	b40f      	push	{r0, r1, r2, r3}
 8005e9a:	b507      	push	{r0, r1, r2, lr}
 8005e9c:	4906      	ldr	r1, [pc, #24]	@ (8005eb8 <iprintf+0x20>)
 8005e9e:	ab04      	add	r3, sp, #16
 8005ea0:	6808      	ldr	r0, [r1, #0]
 8005ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea6:	6881      	ldr	r1, [r0, #8]
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	f000 fc65 	bl	8006778 <_vfiprintf_r>
 8005eae:	b003      	add	sp, #12
 8005eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eb4:	b004      	add	sp, #16
 8005eb6:	4770      	bx	lr
 8005eb8:	2000002c 	.word	0x2000002c

08005ebc <_puts_r>:
 8005ebc:	6a03      	ldr	r3, [r0, #32]
 8005ebe:	b570      	push	{r4, r5, r6, lr}
 8005ec0:	6884      	ldr	r4, [r0, #8]
 8005ec2:	4605      	mov	r5, r0
 8005ec4:	460e      	mov	r6, r1
 8005ec6:	b90b      	cbnz	r3, 8005ecc <_puts_r+0x10>
 8005ec8:	f7ff ffb0 	bl	8005e2c <__sinit>
 8005ecc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ece:	07db      	lsls	r3, r3, #31
 8005ed0:	d405      	bmi.n	8005ede <_puts_r+0x22>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	0598      	lsls	r0, r3, #22
 8005ed6:	d402      	bmi.n	8005ede <_puts_r+0x22>
 8005ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eda:	f000 f9d0 	bl	800627e <__retarget_lock_acquire_recursive>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	0719      	lsls	r1, r3, #28
 8005ee2:	d502      	bpl.n	8005eea <_puts_r+0x2e>
 8005ee4:	6923      	ldr	r3, [r4, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d135      	bne.n	8005f56 <_puts_r+0x9a>
 8005eea:	4621      	mov	r1, r4
 8005eec:	4628      	mov	r0, r5
 8005eee:	f000 f8e5 	bl	80060bc <__swsetup_r>
 8005ef2:	b380      	cbz	r0, 8005f56 <_puts_r+0x9a>
 8005ef4:	f04f 35ff 	mov.w	r5, #4294967295
 8005ef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005efa:	07da      	lsls	r2, r3, #31
 8005efc:	d405      	bmi.n	8005f0a <_puts_r+0x4e>
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	059b      	lsls	r3, r3, #22
 8005f02:	d402      	bmi.n	8005f0a <_puts_r+0x4e>
 8005f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f06:	f000 f9bb 	bl	8006280 <__retarget_lock_release_recursive>
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	bd70      	pop	{r4, r5, r6, pc}
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da04      	bge.n	8005f1c <_puts_r+0x60>
 8005f12:	69a2      	ldr	r2, [r4, #24]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	dc17      	bgt.n	8005f48 <_puts_r+0x8c>
 8005f18:	290a      	cmp	r1, #10
 8005f1a:	d015      	beq.n	8005f48 <_puts_r+0x8c>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	6022      	str	r2, [r4, #0]
 8005f22:	7019      	strb	r1, [r3, #0]
 8005f24:	68a3      	ldr	r3, [r4, #8]
 8005f26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	60a3      	str	r3, [r4, #8]
 8005f2e:	2900      	cmp	r1, #0
 8005f30:	d1ed      	bne.n	8005f0e <_puts_r+0x52>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	da11      	bge.n	8005f5a <_puts_r+0x9e>
 8005f36:	4622      	mov	r2, r4
 8005f38:	210a      	movs	r1, #10
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 f87f 	bl	800603e <__swbuf_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d0d7      	beq.n	8005ef4 <_puts_r+0x38>
 8005f44:	250a      	movs	r5, #10
 8005f46:	e7d7      	b.n	8005ef8 <_puts_r+0x3c>
 8005f48:	4622      	mov	r2, r4
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f000 f877 	bl	800603e <__swbuf_r>
 8005f50:	3001      	adds	r0, #1
 8005f52:	d1e7      	bne.n	8005f24 <_puts_r+0x68>
 8005f54:	e7ce      	b.n	8005ef4 <_puts_r+0x38>
 8005f56:	3e01      	subs	r6, #1
 8005f58:	e7e4      	b.n	8005f24 <_puts_r+0x68>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	6022      	str	r2, [r4, #0]
 8005f60:	220a      	movs	r2, #10
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	e7ee      	b.n	8005f44 <_puts_r+0x88>
	...

08005f68 <puts>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	@ (8005f74 <puts+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f7ff bfa5 	b.w	8005ebc <_puts_r>
 8005f72:	bf00      	nop
 8005f74:	2000002c 	.word	0x2000002c

08005f78 <siprintf>:
 8005f78:	b40e      	push	{r1, r2, r3}
 8005f7a:	b500      	push	{lr}
 8005f7c:	b09c      	sub	sp, #112	@ 0x70
 8005f7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005f80:	9002      	str	r0, [sp, #8]
 8005f82:	9006      	str	r0, [sp, #24]
 8005f84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f88:	4809      	ldr	r0, [pc, #36]	@ (8005fb0 <siprintf+0x38>)
 8005f8a:	9107      	str	r1, [sp, #28]
 8005f8c:	9104      	str	r1, [sp, #16]
 8005f8e:	4909      	ldr	r1, [pc, #36]	@ (8005fb4 <siprintf+0x3c>)
 8005f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f94:	9105      	str	r1, [sp, #20]
 8005f96:	6800      	ldr	r0, [r0, #0]
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	a902      	add	r1, sp, #8
 8005f9c:	f000 fac6 	bl	800652c <_svfiprintf_r>
 8005fa0:	9b02      	ldr	r3, [sp, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	b01c      	add	sp, #112	@ 0x70
 8005fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fac:	b003      	add	sp, #12
 8005fae:	4770      	bx	lr
 8005fb0:	2000002c 	.word	0x2000002c
 8005fb4:	ffff0208 	.word	0xffff0208

08005fb8 <__sread>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	460c      	mov	r4, r1
 8005fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc0:	f000 f90e 	bl	80061e0 <_read_r>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	bfab      	itete	ge
 8005fc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005fca:	89a3      	ldrhlt	r3, [r4, #12]
 8005fcc:	181b      	addge	r3, r3, r0
 8005fce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fd2:	bfac      	ite	ge
 8005fd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fd6:	81a3      	strhlt	r3, [r4, #12]
 8005fd8:	bd10      	pop	{r4, pc}

08005fda <__swrite>:
 8005fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	461f      	mov	r7, r3
 8005fe0:	898b      	ldrh	r3, [r1, #12]
 8005fe2:	05db      	lsls	r3, r3, #23
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	4616      	mov	r6, r2
 8005fea:	d505      	bpl.n	8005ff8 <__swrite+0x1e>
 8005fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f000 f8e2 	bl	80061bc <_lseek_r>
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006002:	81a3      	strh	r3, [r4, #12]
 8006004:	4632      	mov	r2, r6
 8006006:	463b      	mov	r3, r7
 8006008:	4628      	mov	r0, r5
 800600a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800600e:	f000 b8f9 	b.w	8006204 <_write_r>

08006012 <__sseek>:
 8006012:	b510      	push	{r4, lr}
 8006014:	460c      	mov	r4, r1
 8006016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601a:	f000 f8cf 	bl	80061bc <_lseek_r>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	bf15      	itete	ne
 8006024:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800602a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800602e:	81a3      	strheq	r3, [r4, #12]
 8006030:	bf18      	it	ne
 8006032:	81a3      	strhne	r3, [r4, #12]
 8006034:	bd10      	pop	{r4, pc}

08006036 <__sclose>:
 8006036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603a:	f000 b8af 	b.w	800619c <_close_r>

0800603e <__swbuf_r>:
 800603e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006040:	460e      	mov	r6, r1
 8006042:	4614      	mov	r4, r2
 8006044:	4605      	mov	r5, r0
 8006046:	b118      	cbz	r0, 8006050 <__swbuf_r+0x12>
 8006048:	6a03      	ldr	r3, [r0, #32]
 800604a:	b90b      	cbnz	r3, 8006050 <__swbuf_r+0x12>
 800604c:	f7ff feee 	bl	8005e2c <__sinit>
 8006050:	69a3      	ldr	r3, [r4, #24]
 8006052:	60a3      	str	r3, [r4, #8]
 8006054:	89a3      	ldrh	r3, [r4, #12]
 8006056:	071a      	lsls	r2, r3, #28
 8006058:	d501      	bpl.n	800605e <__swbuf_r+0x20>
 800605a:	6923      	ldr	r3, [r4, #16]
 800605c:	b943      	cbnz	r3, 8006070 <__swbuf_r+0x32>
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f000 f82b 	bl	80060bc <__swsetup_r>
 8006066:	b118      	cbz	r0, 8006070 <__swbuf_r+0x32>
 8006068:	f04f 37ff 	mov.w	r7, #4294967295
 800606c:	4638      	mov	r0, r7
 800606e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	6922      	ldr	r2, [r4, #16]
 8006074:	1a98      	subs	r0, r3, r2
 8006076:	6963      	ldr	r3, [r4, #20]
 8006078:	b2f6      	uxtb	r6, r6
 800607a:	4283      	cmp	r3, r0
 800607c:	4637      	mov	r7, r6
 800607e:	dc05      	bgt.n	800608c <__swbuf_r+0x4e>
 8006080:	4621      	mov	r1, r4
 8006082:	4628      	mov	r0, r5
 8006084:	f000 fea2 	bl	8006dcc <_fflush_r>
 8006088:	2800      	cmp	r0, #0
 800608a:	d1ed      	bne.n	8006068 <__swbuf_r+0x2a>
 800608c:	68a3      	ldr	r3, [r4, #8]
 800608e:	3b01      	subs	r3, #1
 8006090:	60a3      	str	r3, [r4, #8]
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	6022      	str	r2, [r4, #0]
 8006098:	701e      	strb	r6, [r3, #0]
 800609a:	6962      	ldr	r2, [r4, #20]
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	429a      	cmp	r2, r3
 80060a0:	d004      	beq.n	80060ac <__swbuf_r+0x6e>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	07db      	lsls	r3, r3, #31
 80060a6:	d5e1      	bpl.n	800606c <__swbuf_r+0x2e>
 80060a8:	2e0a      	cmp	r6, #10
 80060aa:	d1df      	bne.n	800606c <__swbuf_r+0x2e>
 80060ac:	4621      	mov	r1, r4
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 fe8c 	bl	8006dcc <_fflush_r>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d0d9      	beq.n	800606c <__swbuf_r+0x2e>
 80060b8:	e7d6      	b.n	8006068 <__swbuf_r+0x2a>
	...

080060bc <__swsetup_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4b29      	ldr	r3, [pc, #164]	@ (8006164 <__swsetup_r+0xa8>)
 80060c0:	4605      	mov	r5, r0
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	460c      	mov	r4, r1
 80060c6:	b118      	cbz	r0, 80060d0 <__swsetup_r+0x14>
 80060c8:	6a03      	ldr	r3, [r0, #32]
 80060ca:	b90b      	cbnz	r3, 80060d0 <__swsetup_r+0x14>
 80060cc:	f7ff feae 	bl	8005e2c <__sinit>
 80060d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d4:	0719      	lsls	r1, r3, #28
 80060d6:	d422      	bmi.n	800611e <__swsetup_r+0x62>
 80060d8:	06da      	lsls	r2, r3, #27
 80060da:	d407      	bmi.n	80060ec <__swsetup_r+0x30>
 80060dc:	2209      	movs	r2, #9
 80060de:	602a      	str	r2, [r5, #0]
 80060e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ea:	e033      	b.n	8006154 <__swsetup_r+0x98>
 80060ec:	0758      	lsls	r0, r3, #29
 80060ee:	d512      	bpl.n	8006116 <__swsetup_r+0x5a>
 80060f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060f2:	b141      	cbz	r1, 8006106 <__swsetup_r+0x4a>
 80060f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060f8:	4299      	cmp	r1, r3
 80060fa:	d002      	beq.n	8006102 <__swsetup_r+0x46>
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 f8c1 	bl	8006284 <_free_r>
 8006102:	2300      	movs	r3, #0
 8006104:	6363      	str	r3, [r4, #52]	@ 0x34
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800610c:	81a3      	strh	r3, [r4, #12]
 800610e:	2300      	movs	r3, #0
 8006110:	6063      	str	r3, [r4, #4]
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	f043 0308 	orr.w	r3, r3, #8
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	b94b      	cbnz	r3, 8006136 <__swsetup_r+0x7a>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800612c:	d003      	beq.n	8006136 <__swsetup_r+0x7a>
 800612e:	4621      	mov	r1, r4
 8006130:	4628      	mov	r0, r5
 8006132:	f000 fe99 	bl	8006e68 <__smakebuf_r>
 8006136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800613a:	f013 0201 	ands.w	r2, r3, #1
 800613e:	d00a      	beq.n	8006156 <__swsetup_r+0x9a>
 8006140:	2200      	movs	r2, #0
 8006142:	60a2      	str	r2, [r4, #8]
 8006144:	6962      	ldr	r2, [r4, #20]
 8006146:	4252      	negs	r2, r2
 8006148:	61a2      	str	r2, [r4, #24]
 800614a:	6922      	ldr	r2, [r4, #16]
 800614c:	b942      	cbnz	r2, 8006160 <__swsetup_r+0xa4>
 800614e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006152:	d1c5      	bne.n	80060e0 <__swsetup_r+0x24>
 8006154:	bd38      	pop	{r3, r4, r5, pc}
 8006156:	0799      	lsls	r1, r3, #30
 8006158:	bf58      	it	pl
 800615a:	6962      	ldrpl	r2, [r4, #20]
 800615c:	60a2      	str	r2, [r4, #8]
 800615e:	e7f4      	b.n	800614a <__swsetup_r+0x8e>
 8006160:	2000      	movs	r0, #0
 8006162:	e7f7      	b.n	8006154 <__swsetup_r+0x98>
 8006164:	2000002c 	.word	0x2000002c

08006168 <memset>:
 8006168:	4402      	add	r2, r0
 800616a:	4603      	mov	r3, r0
 800616c:	4293      	cmp	r3, r2
 800616e:	d100      	bne.n	8006172 <memset+0xa>
 8006170:	4770      	bx	lr
 8006172:	f803 1b01 	strb.w	r1, [r3], #1
 8006176:	e7f9      	b.n	800616c <memset+0x4>

08006178 <strncmp>:
 8006178:	b510      	push	{r4, lr}
 800617a:	b16a      	cbz	r2, 8006198 <strncmp+0x20>
 800617c:	3901      	subs	r1, #1
 800617e:	1884      	adds	r4, r0, r2
 8006180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006184:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006188:	429a      	cmp	r2, r3
 800618a:	d103      	bne.n	8006194 <strncmp+0x1c>
 800618c:	42a0      	cmp	r0, r4
 800618e:	d001      	beq.n	8006194 <strncmp+0x1c>
 8006190:	2a00      	cmp	r2, #0
 8006192:	d1f5      	bne.n	8006180 <strncmp+0x8>
 8006194:	1ad0      	subs	r0, r2, r3
 8006196:	bd10      	pop	{r4, pc}
 8006198:	4610      	mov	r0, r2
 800619a:	e7fc      	b.n	8006196 <strncmp+0x1e>

0800619c <_close_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d06      	ldr	r5, [pc, #24]	@ (80061b8 <_close_r+0x1c>)
 80061a0:	2300      	movs	r3, #0
 80061a2:	4604      	mov	r4, r0
 80061a4:	4608      	mov	r0, r1
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	f7fc fbbd 	bl	8002926 <_close>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_close_r+0x1a>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_close_r+0x1a>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	2000088c 	.word	0x2000088c

080061bc <_lseek_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	@ (80061dc <_lseek_r+0x20>)
 80061c0:	4604      	mov	r4, r0
 80061c2:	4608      	mov	r0, r1
 80061c4:	4611      	mov	r1, r2
 80061c6:	2200      	movs	r2, #0
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f7fc fbd2 	bl	8002974 <_lseek>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_lseek_r+0x1e>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_lseek_r+0x1e>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	2000088c 	.word	0x2000088c

080061e0 <_read_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4d07      	ldr	r5, [pc, #28]	@ (8006200 <_read_r+0x20>)
 80061e4:	4604      	mov	r4, r0
 80061e6:	4608      	mov	r0, r1
 80061e8:	4611      	mov	r1, r2
 80061ea:	2200      	movs	r2, #0
 80061ec:	602a      	str	r2, [r5, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f7fc fb60 	bl	80028b4 <_read>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_read_r+0x1e>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_read_r+0x1e>
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	2000088c 	.word	0x2000088c

08006204 <_write_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4d07      	ldr	r5, [pc, #28]	@ (8006224 <_write_r+0x20>)
 8006208:	4604      	mov	r4, r0
 800620a:	4608      	mov	r0, r1
 800620c:	4611      	mov	r1, r2
 800620e:	2200      	movs	r2, #0
 8006210:	602a      	str	r2, [r5, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	f7fc fb6b 	bl	80028ee <_write>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_write_r+0x1e>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_write_r+0x1e>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	2000088c 	.word	0x2000088c

08006228 <__errno>:
 8006228:	4b01      	ldr	r3, [pc, #4]	@ (8006230 <__errno+0x8>)
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	2000002c 	.word	0x2000002c

08006234 <__libc_init_array>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	4d0d      	ldr	r5, [pc, #52]	@ (800626c <__libc_init_array+0x38>)
 8006238:	4c0d      	ldr	r4, [pc, #52]	@ (8006270 <__libc_init_array+0x3c>)
 800623a:	1b64      	subs	r4, r4, r5
 800623c:	10a4      	asrs	r4, r4, #2
 800623e:	2600      	movs	r6, #0
 8006240:	42a6      	cmp	r6, r4
 8006242:	d109      	bne.n	8006258 <__libc_init_array+0x24>
 8006244:	4d0b      	ldr	r5, [pc, #44]	@ (8006274 <__libc_init_array+0x40>)
 8006246:	4c0c      	ldr	r4, [pc, #48]	@ (8006278 <__libc_init_array+0x44>)
 8006248:	f000 feda 	bl	8007000 <_init>
 800624c:	1b64      	subs	r4, r4, r5
 800624e:	10a4      	asrs	r4, r4, #2
 8006250:	2600      	movs	r6, #0
 8006252:	42a6      	cmp	r6, r4
 8006254:	d105      	bne.n	8006262 <__libc_init_array+0x2e>
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	f855 3b04 	ldr.w	r3, [r5], #4
 800625c:	4798      	blx	r3
 800625e:	3601      	adds	r6, #1
 8006260:	e7ee      	b.n	8006240 <__libc_init_array+0xc>
 8006262:	f855 3b04 	ldr.w	r3, [r5], #4
 8006266:	4798      	blx	r3
 8006268:	3601      	adds	r6, #1
 800626a:	e7f2      	b.n	8006252 <__libc_init_array+0x1e>
 800626c:	08007e50 	.word	0x08007e50
 8006270:	08007e50 	.word	0x08007e50
 8006274:	08007e50 	.word	0x08007e50
 8006278:	08007e54 	.word	0x08007e54

0800627c <__retarget_lock_init_recursive>:
 800627c:	4770      	bx	lr

0800627e <__retarget_lock_acquire_recursive>:
 800627e:	4770      	bx	lr

08006280 <__retarget_lock_release_recursive>:
 8006280:	4770      	bx	lr
	...

08006284 <_free_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4605      	mov	r5, r0
 8006288:	2900      	cmp	r1, #0
 800628a:	d041      	beq.n	8006310 <_free_r+0x8c>
 800628c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006290:	1f0c      	subs	r4, r1, #4
 8006292:	2b00      	cmp	r3, #0
 8006294:	bfb8      	it	lt
 8006296:	18e4      	addlt	r4, r4, r3
 8006298:	f000 f8e0 	bl	800645c <__malloc_lock>
 800629c:	4a1d      	ldr	r2, [pc, #116]	@ (8006314 <_free_r+0x90>)
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	b933      	cbnz	r3, 80062b0 <_free_r+0x2c>
 80062a2:	6063      	str	r3, [r4, #4]
 80062a4:	6014      	str	r4, [r2, #0]
 80062a6:	4628      	mov	r0, r5
 80062a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ac:	f000 b8dc 	b.w	8006468 <__malloc_unlock>
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	d908      	bls.n	80062c6 <_free_r+0x42>
 80062b4:	6820      	ldr	r0, [r4, #0]
 80062b6:	1821      	adds	r1, r4, r0
 80062b8:	428b      	cmp	r3, r1
 80062ba:	bf01      	itttt	eq
 80062bc:	6819      	ldreq	r1, [r3, #0]
 80062be:	685b      	ldreq	r3, [r3, #4]
 80062c0:	1809      	addeq	r1, r1, r0
 80062c2:	6021      	streq	r1, [r4, #0]
 80062c4:	e7ed      	b.n	80062a2 <_free_r+0x1e>
 80062c6:	461a      	mov	r2, r3
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	b10b      	cbz	r3, 80062d0 <_free_r+0x4c>
 80062cc:	42a3      	cmp	r3, r4
 80062ce:	d9fa      	bls.n	80062c6 <_free_r+0x42>
 80062d0:	6811      	ldr	r1, [r2, #0]
 80062d2:	1850      	adds	r0, r2, r1
 80062d4:	42a0      	cmp	r0, r4
 80062d6:	d10b      	bne.n	80062f0 <_free_r+0x6c>
 80062d8:	6820      	ldr	r0, [r4, #0]
 80062da:	4401      	add	r1, r0
 80062dc:	1850      	adds	r0, r2, r1
 80062de:	4283      	cmp	r3, r0
 80062e0:	6011      	str	r1, [r2, #0]
 80062e2:	d1e0      	bne.n	80062a6 <_free_r+0x22>
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	6053      	str	r3, [r2, #4]
 80062ea:	4408      	add	r0, r1
 80062ec:	6010      	str	r0, [r2, #0]
 80062ee:	e7da      	b.n	80062a6 <_free_r+0x22>
 80062f0:	d902      	bls.n	80062f8 <_free_r+0x74>
 80062f2:	230c      	movs	r3, #12
 80062f4:	602b      	str	r3, [r5, #0]
 80062f6:	e7d6      	b.n	80062a6 <_free_r+0x22>
 80062f8:	6820      	ldr	r0, [r4, #0]
 80062fa:	1821      	adds	r1, r4, r0
 80062fc:	428b      	cmp	r3, r1
 80062fe:	bf04      	itt	eq
 8006300:	6819      	ldreq	r1, [r3, #0]
 8006302:	685b      	ldreq	r3, [r3, #4]
 8006304:	6063      	str	r3, [r4, #4]
 8006306:	bf04      	itt	eq
 8006308:	1809      	addeq	r1, r1, r0
 800630a:	6021      	streq	r1, [r4, #0]
 800630c:	6054      	str	r4, [r2, #4]
 800630e:	e7ca      	b.n	80062a6 <_free_r+0x22>
 8006310:	bd38      	pop	{r3, r4, r5, pc}
 8006312:	bf00      	nop
 8006314:	20000898 	.word	0x20000898

08006318 <sbrk_aligned>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	4e0f      	ldr	r6, [pc, #60]	@ (8006358 <sbrk_aligned+0x40>)
 800631c:	460c      	mov	r4, r1
 800631e:	6831      	ldr	r1, [r6, #0]
 8006320:	4605      	mov	r5, r0
 8006322:	b911      	cbnz	r1, 800632a <sbrk_aligned+0x12>
 8006324:	f000 fe18 	bl	8006f58 <_sbrk_r>
 8006328:	6030      	str	r0, [r6, #0]
 800632a:	4621      	mov	r1, r4
 800632c:	4628      	mov	r0, r5
 800632e:	f000 fe13 	bl	8006f58 <_sbrk_r>
 8006332:	1c43      	adds	r3, r0, #1
 8006334:	d103      	bne.n	800633e <sbrk_aligned+0x26>
 8006336:	f04f 34ff 	mov.w	r4, #4294967295
 800633a:	4620      	mov	r0, r4
 800633c:	bd70      	pop	{r4, r5, r6, pc}
 800633e:	1cc4      	adds	r4, r0, #3
 8006340:	f024 0403 	bic.w	r4, r4, #3
 8006344:	42a0      	cmp	r0, r4
 8006346:	d0f8      	beq.n	800633a <sbrk_aligned+0x22>
 8006348:	1a21      	subs	r1, r4, r0
 800634a:	4628      	mov	r0, r5
 800634c:	f000 fe04 	bl	8006f58 <_sbrk_r>
 8006350:	3001      	adds	r0, #1
 8006352:	d1f2      	bne.n	800633a <sbrk_aligned+0x22>
 8006354:	e7ef      	b.n	8006336 <sbrk_aligned+0x1e>
 8006356:	bf00      	nop
 8006358:	20000894 	.word	0x20000894

0800635c <_malloc_r>:
 800635c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006360:	1ccd      	adds	r5, r1, #3
 8006362:	f025 0503 	bic.w	r5, r5, #3
 8006366:	3508      	adds	r5, #8
 8006368:	2d0c      	cmp	r5, #12
 800636a:	bf38      	it	cc
 800636c:	250c      	movcc	r5, #12
 800636e:	2d00      	cmp	r5, #0
 8006370:	4606      	mov	r6, r0
 8006372:	db01      	blt.n	8006378 <_malloc_r+0x1c>
 8006374:	42a9      	cmp	r1, r5
 8006376:	d904      	bls.n	8006382 <_malloc_r+0x26>
 8006378:	230c      	movs	r3, #12
 800637a:	6033      	str	r3, [r6, #0]
 800637c:	2000      	movs	r0, #0
 800637e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006458 <_malloc_r+0xfc>
 8006386:	f000 f869 	bl	800645c <__malloc_lock>
 800638a:	f8d8 3000 	ldr.w	r3, [r8]
 800638e:	461c      	mov	r4, r3
 8006390:	bb44      	cbnz	r4, 80063e4 <_malloc_r+0x88>
 8006392:	4629      	mov	r1, r5
 8006394:	4630      	mov	r0, r6
 8006396:	f7ff ffbf 	bl	8006318 <sbrk_aligned>
 800639a:	1c43      	adds	r3, r0, #1
 800639c:	4604      	mov	r4, r0
 800639e:	d158      	bne.n	8006452 <_malloc_r+0xf6>
 80063a0:	f8d8 4000 	ldr.w	r4, [r8]
 80063a4:	4627      	mov	r7, r4
 80063a6:	2f00      	cmp	r7, #0
 80063a8:	d143      	bne.n	8006432 <_malloc_r+0xd6>
 80063aa:	2c00      	cmp	r4, #0
 80063ac:	d04b      	beq.n	8006446 <_malloc_r+0xea>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	4639      	mov	r1, r7
 80063b2:	4630      	mov	r0, r6
 80063b4:	eb04 0903 	add.w	r9, r4, r3
 80063b8:	f000 fdce 	bl	8006f58 <_sbrk_r>
 80063bc:	4581      	cmp	r9, r0
 80063be:	d142      	bne.n	8006446 <_malloc_r+0xea>
 80063c0:	6821      	ldr	r1, [r4, #0]
 80063c2:	1a6d      	subs	r5, r5, r1
 80063c4:	4629      	mov	r1, r5
 80063c6:	4630      	mov	r0, r6
 80063c8:	f7ff ffa6 	bl	8006318 <sbrk_aligned>
 80063cc:	3001      	adds	r0, #1
 80063ce:	d03a      	beq.n	8006446 <_malloc_r+0xea>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	442b      	add	r3, r5
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	f8d8 3000 	ldr.w	r3, [r8]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	bb62      	cbnz	r2, 8006438 <_malloc_r+0xdc>
 80063de:	f8c8 7000 	str.w	r7, [r8]
 80063e2:	e00f      	b.n	8006404 <_malloc_r+0xa8>
 80063e4:	6822      	ldr	r2, [r4, #0]
 80063e6:	1b52      	subs	r2, r2, r5
 80063e8:	d420      	bmi.n	800642c <_malloc_r+0xd0>
 80063ea:	2a0b      	cmp	r2, #11
 80063ec:	d917      	bls.n	800641e <_malloc_r+0xc2>
 80063ee:	1961      	adds	r1, r4, r5
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	6025      	str	r5, [r4, #0]
 80063f4:	bf18      	it	ne
 80063f6:	6059      	strne	r1, [r3, #4]
 80063f8:	6863      	ldr	r3, [r4, #4]
 80063fa:	bf08      	it	eq
 80063fc:	f8c8 1000 	streq.w	r1, [r8]
 8006400:	5162      	str	r2, [r4, r5]
 8006402:	604b      	str	r3, [r1, #4]
 8006404:	4630      	mov	r0, r6
 8006406:	f000 f82f 	bl	8006468 <__malloc_unlock>
 800640a:	f104 000b 	add.w	r0, r4, #11
 800640e:	1d23      	adds	r3, r4, #4
 8006410:	f020 0007 	bic.w	r0, r0, #7
 8006414:	1ac2      	subs	r2, r0, r3
 8006416:	bf1c      	itt	ne
 8006418:	1a1b      	subne	r3, r3, r0
 800641a:	50a3      	strne	r3, [r4, r2]
 800641c:	e7af      	b.n	800637e <_malloc_r+0x22>
 800641e:	6862      	ldr	r2, [r4, #4]
 8006420:	42a3      	cmp	r3, r4
 8006422:	bf0c      	ite	eq
 8006424:	f8c8 2000 	streq.w	r2, [r8]
 8006428:	605a      	strne	r2, [r3, #4]
 800642a:	e7eb      	b.n	8006404 <_malloc_r+0xa8>
 800642c:	4623      	mov	r3, r4
 800642e:	6864      	ldr	r4, [r4, #4]
 8006430:	e7ae      	b.n	8006390 <_malloc_r+0x34>
 8006432:	463c      	mov	r4, r7
 8006434:	687f      	ldr	r7, [r7, #4]
 8006436:	e7b6      	b.n	80063a6 <_malloc_r+0x4a>
 8006438:	461a      	mov	r2, r3
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	42a3      	cmp	r3, r4
 800643e:	d1fb      	bne.n	8006438 <_malloc_r+0xdc>
 8006440:	2300      	movs	r3, #0
 8006442:	6053      	str	r3, [r2, #4]
 8006444:	e7de      	b.n	8006404 <_malloc_r+0xa8>
 8006446:	230c      	movs	r3, #12
 8006448:	6033      	str	r3, [r6, #0]
 800644a:	4630      	mov	r0, r6
 800644c:	f000 f80c 	bl	8006468 <__malloc_unlock>
 8006450:	e794      	b.n	800637c <_malloc_r+0x20>
 8006452:	6005      	str	r5, [r0, #0]
 8006454:	e7d6      	b.n	8006404 <_malloc_r+0xa8>
 8006456:	bf00      	nop
 8006458:	20000898 	.word	0x20000898

0800645c <__malloc_lock>:
 800645c:	4801      	ldr	r0, [pc, #4]	@ (8006464 <__malloc_lock+0x8>)
 800645e:	f7ff bf0e 	b.w	800627e <__retarget_lock_acquire_recursive>
 8006462:	bf00      	nop
 8006464:	20000890 	.word	0x20000890

08006468 <__malloc_unlock>:
 8006468:	4801      	ldr	r0, [pc, #4]	@ (8006470 <__malloc_unlock+0x8>)
 800646a:	f7ff bf09 	b.w	8006280 <__retarget_lock_release_recursive>
 800646e:	bf00      	nop
 8006470:	20000890 	.word	0x20000890

08006474 <__ssputs_r>:
 8006474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006478:	688e      	ldr	r6, [r1, #8]
 800647a:	461f      	mov	r7, r3
 800647c:	42be      	cmp	r6, r7
 800647e:	680b      	ldr	r3, [r1, #0]
 8006480:	4682      	mov	sl, r0
 8006482:	460c      	mov	r4, r1
 8006484:	4690      	mov	r8, r2
 8006486:	d82d      	bhi.n	80064e4 <__ssputs_r+0x70>
 8006488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800648c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006490:	d026      	beq.n	80064e0 <__ssputs_r+0x6c>
 8006492:	6965      	ldr	r5, [r4, #20]
 8006494:	6909      	ldr	r1, [r1, #16]
 8006496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800649a:	eba3 0901 	sub.w	r9, r3, r1
 800649e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064a2:	1c7b      	adds	r3, r7, #1
 80064a4:	444b      	add	r3, r9
 80064a6:	106d      	asrs	r5, r5, #1
 80064a8:	429d      	cmp	r5, r3
 80064aa:	bf38      	it	cc
 80064ac:	461d      	movcc	r5, r3
 80064ae:	0553      	lsls	r3, r2, #21
 80064b0:	d527      	bpl.n	8006502 <__ssputs_r+0x8e>
 80064b2:	4629      	mov	r1, r5
 80064b4:	f7ff ff52 	bl	800635c <_malloc_r>
 80064b8:	4606      	mov	r6, r0
 80064ba:	b360      	cbz	r0, 8006516 <__ssputs_r+0xa2>
 80064bc:	6921      	ldr	r1, [r4, #16]
 80064be:	464a      	mov	r2, r9
 80064c0:	f000 fd5a 	bl	8006f78 <memcpy>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	6126      	str	r6, [r4, #16]
 80064d2:	6165      	str	r5, [r4, #20]
 80064d4:	444e      	add	r6, r9
 80064d6:	eba5 0509 	sub.w	r5, r5, r9
 80064da:	6026      	str	r6, [r4, #0]
 80064dc:	60a5      	str	r5, [r4, #8]
 80064de:	463e      	mov	r6, r7
 80064e0:	42be      	cmp	r6, r7
 80064e2:	d900      	bls.n	80064e6 <__ssputs_r+0x72>
 80064e4:	463e      	mov	r6, r7
 80064e6:	6820      	ldr	r0, [r4, #0]
 80064e8:	4632      	mov	r2, r6
 80064ea:	4641      	mov	r1, r8
 80064ec:	f000 fcf8 	bl	8006ee0 <memmove>
 80064f0:	68a3      	ldr	r3, [r4, #8]
 80064f2:	1b9b      	subs	r3, r3, r6
 80064f4:	60a3      	str	r3, [r4, #8]
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	4433      	add	r3, r6
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	2000      	movs	r0, #0
 80064fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006502:	462a      	mov	r2, r5
 8006504:	f000 fd46 	bl	8006f94 <_realloc_r>
 8006508:	4606      	mov	r6, r0
 800650a:	2800      	cmp	r0, #0
 800650c:	d1e0      	bne.n	80064d0 <__ssputs_r+0x5c>
 800650e:	6921      	ldr	r1, [r4, #16]
 8006510:	4650      	mov	r0, sl
 8006512:	f7ff feb7 	bl	8006284 <_free_r>
 8006516:	230c      	movs	r3, #12
 8006518:	f8ca 3000 	str.w	r3, [sl]
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006522:	81a3      	strh	r3, [r4, #12]
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	e7e9      	b.n	80064fe <__ssputs_r+0x8a>
	...

0800652c <_svfiprintf_r>:
 800652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	4698      	mov	r8, r3
 8006532:	898b      	ldrh	r3, [r1, #12]
 8006534:	061b      	lsls	r3, r3, #24
 8006536:	b09d      	sub	sp, #116	@ 0x74
 8006538:	4607      	mov	r7, r0
 800653a:	460d      	mov	r5, r1
 800653c:	4614      	mov	r4, r2
 800653e:	d510      	bpl.n	8006562 <_svfiprintf_r+0x36>
 8006540:	690b      	ldr	r3, [r1, #16]
 8006542:	b973      	cbnz	r3, 8006562 <_svfiprintf_r+0x36>
 8006544:	2140      	movs	r1, #64	@ 0x40
 8006546:	f7ff ff09 	bl	800635c <_malloc_r>
 800654a:	6028      	str	r0, [r5, #0]
 800654c:	6128      	str	r0, [r5, #16]
 800654e:	b930      	cbnz	r0, 800655e <_svfiprintf_r+0x32>
 8006550:	230c      	movs	r3, #12
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	b01d      	add	sp, #116	@ 0x74
 800655a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655e:	2340      	movs	r3, #64	@ 0x40
 8006560:	616b      	str	r3, [r5, #20]
 8006562:	2300      	movs	r3, #0
 8006564:	9309      	str	r3, [sp, #36]	@ 0x24
 8006566:	2320      	movs	r3, #32
 8006568:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800656c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006570:	2330      	movs	r3, #48	@ 0x30
 8006572:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006710 <_svfiprintf_r+0x1e4>
 8006576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800657a:	f04f 0901 	mov.w	r9, #1
 800657e:	4623      	mov	r3, r4
 8006580:	469a      	mov	sl, r3
 8006582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006586:	b10a      	cbz	r2, 800658c <_svfiprintf_r+0x60>
 8006588:	2a25      	cmp	r2, #37	@ 0x25
 800658a:	d1f9      	bne.n	8006580 <_svfiprintf_r+0x54>
 800658c:	ebba 0b04 	subs.w	fp, sl, r4
 8006590:	d00b      	beq.n	80065aa <_svfiprintf_r+0x7e>
 8006592:	465b      	mov	r3, fp
 8006594:	4622      	mov	r2, r4
 8006596:	4629      	mov	r1, r5
 8006598:	4638      	mov	r0, r7
 800659a:	f7ff ff6b 	bl	8006474 <__ssputs_r>
 800659e:	3001      	adds	r0, #1
 80065a0:	f000 80a7 	beq.w	80066f2 <_svfiprintf_r+0x1c6>
 80065a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065a6:	445a      	add	r2, fp
 80065a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80065aa:	f89a 3000 	ldrb.w	r3, [sl]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 809f 	beq.w	80066f2 <_svfiprintf_r+0x1c6>
 80065b4:	2300      	movs	r3, #0
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065be:	f10a 0a01 	add.w	sl, sl, #1
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	9307      	str	r3, [sp, #28]
 80065c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80065cc:	4654      	mov	r4, sl
 80065ce:	2205      	movs	r2, #5
 80065d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d4:	484e      	ldr	r0, [pc, #312]	@ (8006710 <_svfiprintf_r+0x1e4>)
 80065d6:	f7f9 fe03 	bl	80001e0 <memchr>
 80065da:	9a04      	ldr	r2, [sp, #16]
 80065dc:	b9d8      	cbnz	r0, 8006616 <_svfiprintf_r+0xea>
 80065de:	06d0      	lsls	r0, r2, #27
 80065e0:	bf44      	itt	mi
 80065e2:	2320      	movmi	r3, #32
 80065e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065e8:	0711      	lsls	r1, r2, #28
 80065ea:	bf44      	itt	mi
 80065ec:	232b      	movmi	r3, #43	@ 0x2b
 80065ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065f2:	f89a 3000 	ldrb.w	r3, [sl]
 80065f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f8:	d015      	beq.n	8006626 <_svfiprintf_r+0xfa>
 80065fa:	9a07      	ldr	r2, [sp, #28]
 80065fc:	4654      	mov	r4, sl
 80065fe:	2000      	movs	r0, #0
 8006600:	f04f 0c0a 	mov.w	ip, #10
 8006604:	4621      	mov	r1, r4
 8006606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800660a:	3b30      	subs	r3, #48	@ 0x30
 800660c:	2b09      	cmp	r3, #9
 800660e:	d94b      	bls.n	80066a8 <_svfiprintf_r+0x17c>
 8006610:	b1b0      	cbz	r0, 8006640 <_svfiprintf_r+0x114>
 8006612:	9207      	str	r2, [sp, #28]
 8006614:	e014      	b.n	8006640 <_svfiprintf_r+0x114>
 8006616:	eba0 0308 	sub.w	r3, r0, r8
 800661a:	fa09 f303 	lsl.w	r3, r9, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	9304      	str	r3, [sp, #16]
 8006622:	46a2      	mov	sl, r4
 8006624:	e7d2      	b.n	80065cc <_svfiprintf_r+0xa0>
 8006626:	9b03      	ldr	r3, [sp, #12]
 8006628:	1d19      	adds	r1, r3, #4
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	9103      	str	r1, [sp, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	bfbb      	ittet	lt
 8006632:	425b      	neglt	r3, r3
 8006634:	f042 0202 	orrlt.w	r2, r2, #2
 8006638:	9307      	strge	r3, [sp, #28]
 800663a:	9307      	strlt	r3, [sp, #28]
 800663c:	bfb8      	it	lt
 800663e:	9204      	strlt	r2, [sp, #16]
 8006640:	7823      	ldrb	r3, [r4, #0]
 8006642:	2b2e      	cmp	r3, #46	@ 0x2e
 8006644:	d10a      	bne.n	800665c <_svfiprintf_r+0x130>
 8006646:	7863      	ldrb	r3, [r4, #1]
 8006648:	2b2a      	cmp	r3, #42	@ 0x2a
 800664a:	d132      	bne.n	80066b2 <_svfiprintf_r+0x186>
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	1d1a      	adds	r2, r3, #4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	9203      	str	r2, [sp, #12]
 8006654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006658:	3402      	adds	r4, #2
 800665a:	9305      	str	r3, [sp, #20]
 800665c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006720 <_svfiprintf_r+0x1f4>
 8006660:	7821      	ldrb	r1, [r4, #0]
 8006662:	2203      	movs	r2, #3
 8006664:	4650      	mov	r0, sl
 8006666:	f7f9 fdbb 	bl	80001e0 <memchr>
 800666a:	b138      	cbz	r0, 800667c <_svfiprintf_r+0x150>
 800666c:	9b04      	ldr	r3, [sp, #16]
 800666e:	eba0 000a 	sub.w	r0, r0, sl
 8006672:	2240      	movs	r2, #64	@ 0x40
 8006674:	4082      	lsls	r2, r0
 8006676:	4313      	orrs	r3, r2
 8006678:	3401      	adds	r4, #1
 800667a:	9304      	str	r3, [sp, #16]
 800667c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006680:	4824      	ldr	r0, [pc, #144]	@ (8006714 <_svfiprintf_r+0x1e8>)
 8006682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006686:	2206      	movs	r2, #6
 8006688:	f7f9 fdaa 	bl	80001e0 <memchr>
 800668c:	2800      	cmp	r0, #0
 800668e:	d036      	beq.n	80066fe <_svfiprintf_r+0x1d2>
 8006690:	4b21      	ldr	r3, [pc, #132]	@ (8006718 <_svfiprintf_r+0x1ec>)
 8006692:	bb1b      	cbnz	r3, 80066dc <_svfiprintf_r+0x1b0>
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	3307      	adds	r3, #7
 8006698:	f023 0307 	bic.w	r3, r3, #7
 800669c:	3308      	adds	r3, #8
 800669e:	9303      	str	r3, [sp, #12]
 80066a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a2:	4433      	add	r3, r6
 80066a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a6:	e76a      	b.n	800657e <_svfiprintf_r+0x52>
 80066a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80066ac:	460c      	mov	r4, r1
 80066ae:	2001      	movs	r0, #1
 80066b0:	e7a8      	b.n	8006604 <_svfiprintf_r+0xd8>
 80066b2:	2300      	movs	r3, #0
 80066b4:	3401      	adds	r4, #1
 80066b6:	9305      	str	r3, [sp, #20]
 80066b8:	4619      	mov	r1, r3
 80066ba:	f04f 0c0a 	mov.w	ip, #10
 80066be:	4620      	mov	r0, r4
 80066c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066c4:	3a30      	subs	r2, #48	@ 0x30
 80066c6:	2a09      	cmp	r2, #9
 80066c8:	d903      	bls.n	80066d2 <_svfiprintf_r+0x1a6>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0c6      	beq.n	800665c <_svfiprintf_r+0x130>
 80066ce:	9105      	str	r1, [sp, #20]
 80066d0:	e7c4      	b.n	800665c <_svfiprintf_r+0x130>
 80066d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80066d6:	4604      	mov	r4, r0
 80066d8:	2301      	movs	r3, #1
 80066da:	e7f0      	b.n	80066be <_svfiprintf_r+0x192>
 80066dc:	ab03      	add	r3, sp, #12
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	462a      	mov	r2, r5
 80066e2:	4b0e      	ldr	r3, [pc, #56]	@ (800671c <_svfiprintf_r+0x1f0>)
 80066e4:	a904      	add	r1, sp, #16
 80066e6:	4638      	mov	r0, r7
 80066e8:	f3af 8000 	nop.w
 80066ec:	1c42      	adds	r2, r0, #1
 80066ee:	4606      	mov	r6, r0
 80066f0:	d1d6      	bne.n	80066a0 <_svfiprintf_r+0x174>
 80066f2:	89ab      	ldrh	r3, [r5, #12]
 80066f4:	065b      	lsls	r3, r3, #25
 80066f6:	f53f af2d 	bmi.w	8006554 <_svfiprintf_r+0x28>
 80066fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066fc:	e72c      	b.n	8006558 <_svfiprintf_r+0x2c>
 80066fe:	ab03      	add	r3, sp, #12
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	462a      	mov	r2, r5
 8006704:	4b05      	ldr	r3, [pc, #20]	@ (800671c <_svfiprintf_r+0x1f0>)
 8006706:	a904      	add	r1, sp, #16
 8006708:	4638      	mov	r0, r7
 800670a:	f000 f9bb 	bl	8006a84 <_printf_i>
 800670e:	e7ed      	b.n	80066ec <_svfiprintf_r+0x1c0>
 8006710:	08007e14 	.word	0x08007e14
 8006714:	08007e1e 	.word	0x08007e1e
 8006718:	00000000 	.word	0x00000000
 800671c:	08006475 	.word	0x08006475
 8006720:	08007e1a 	.word	0x08007e1a

08006724 <__sfputc_r>:
 8006724:	6893      	ldr	r3, [r2, #8]
 8006726:	3b01      	subs	r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	b410      	push	{r4}
 800672c:	6093      	str	r3, [r2, #8]
 800672e:	da08      	bge.n	8006742 <__sfputc_r+0x1e>
 8006730:	6994      	ldr	r4, [r2, #24]
 8006732:	42a3      	cmp	r3, r4
 8006734:	db01      	blt.n	800673a <__sfputc_r+0x16>
 8006736:	290a      	cmp	r1, #10
 8006738:	d103      	bne.n	8006742 <__sfputc_r+0x1e>
 800673a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800673e:	f7ff bc7e 	b.w	800603e <__swbuf_r>
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	1c58      	adds	r0, r3, #1
 8006746:	6010      	str	r0, [r2, #0]
 8006748:	7019      	strb	r1, [r3, #0]
 800674a:	4608      	mov	r0, r1
 800674c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006750:	4770      	bx	lr

08006752 <__sfputs_r>:
 8006752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006754:	4606      	mov	r6, r0
 8006756:	460f      	mov	r7, r1
 8006758:	4614      	mov	r4, r2
 800675a:	18d5      	adds	r5, r2, r3
 800675c:	42ac      	cmp	r4, r5
 800675e:	d101      	bne.n	8006764 <__sfputs_r+0x12>
 8006760:	2000      	movs	r0, #0
 8006762:	e007      	b.n	8006774 <__sfputs_r+0x22>
 8006764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006768:	463a      	mov	r2, r7
 800676a:	4630      	mov	r0, r6
 800676c:	f7ff ffda 	bl	8006724 <__sfputc_r>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d1f3      	bne.n	800675c <__sfputs_r+0xa>
 8006774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006778 <_vfiprintf_r>:
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	460d      	mov	r5, r1
 800677e:	b09d      	sub	sp, #116	@ 0x74
 8006780:	4614      	mov	r4, r2
 8006782:	4698      	mov	r8, r3
 8006784:	4606      	mov	r6, r0
 8006786:	b118      	cbz	r0, 8006790 <_vfiprintf_r+0x18>
 8006788:	6a03      	ldr	r3, [r0, #32]
 800678a:	b90b      	cbnz	r3, 8006790 <_vfiprintf_r+0x18>
 800678c:	f7ff fb4e 	bl	8005e2c <__sinit>
 8006790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006792:	07d9      	lsls	r1, r3, #31
 8006794:	d405      	bmi.n	80067a2 <_vfiprintf_r+0x2a>
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	059a      	lsls	r2, r3, #22
 800679a:	d402      	bmi.n	80067a2 <_vfiprintf_r+0x2a>
 800679c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800679e:	f7ff fd6e 	bl	800627e <__retarget_lock_acquire_recursive>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	071b      	lsls	r3, r3, #28
 80067a6:	d501      	bpl.n	80067ac <_vfiprintf_r+0x34>
 80067a8:	692b      	ldr	r3, [r5, #16]
 80067aa:	b99b      	cbnz	r3, 80067d4 <_vfiprintf_r+0x5c>
 80067ac:	4629      	mov	r1, r5
 80067ae:	4630      	mov	r0, r6
 80067b0:	f7ff fc84 	bl	80060bc <__swsetup_r>
 80067b4:	b170      	cbz	r0, 80067d4 <_vfiprintf_r+0x5c>
 80067b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067b8:	07dc      	lsls	r4, r3, #31
 80067ba:	d504      	bpl.n	80067c6 <_vfiprintf_r+0x4e>
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	b01d      	add	sp, #116	@ 0x74
 80067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	0598      	lsls	r0, r3, #22
 80067ca:	d4f7      	bmi.n	80067bc <_vfiprintf_r+0x44>
 80067cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ce:	f7ff fd57 	bl	8006280 <__retarget_lock_release_recursive>
 80067d2:	e7f3      	b.n	80067bc <_vfiprintf_r+0x44>
 80067d4:	2300      	movs	r3, #0
 80067d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80067d8:	2320      	movs	r3, #32
 80067da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067de:	f8cd 800c 	str.w	r8, [sp, #12]
 80067e2:	2330      	movs	r3, #48	@ 0x30
 80067e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006994 <_vfiprintf_r+0x21c>
 80067e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067ec:	f04f 0901 	mov.w	r9, #1
 80067f0:	4623      	mov	r3, r4
 80067f2:	469a      	mov	sl, r3
 80067f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f8:	b10a      	cbz	r2, 80067fe <_vfiprintf_r+0x86>
 80067fa:	2a25      	cmp	r2, #37	@ 0x25
 80067fc:	d1f9      	bne.n	80067f2 <_vfiprintf_r+0x7a>
 80067fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006802:	d00b      	beq.n	800681c <_vfiprintf_r+0xa4>
 8006804:	465b      	mov	r3, fp
 8006806:	4622      	mov	r2, r4
 8006808:	4629      	mov	r1, r5
 800680a:	4630      	mov	r0, r6
 800680c:	f7ff ffa1 	bl	8006752 <__sfputs_r>
 8006810:	3001      	adds	r0, #1
 8006812:	f000 80a7 	beq.w	8006964 <_vfiprintf_r+0x1ec>
 8006816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006818:	445a      	add	r2, fp
 800681a:	9209      	str	r2, [sp, #36]	@ 0x24
 800681c:	f89a 3000 	ldrb.w	r3, [sl]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 809f 	beq.w	8006964 <_vfiprintf_r+0x1ec>
 8006826:	2300      	movs	r3, #0
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006830:	f10a 0a01 	add.w	sl, sl, #1
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	9307      	str	r3, [sp, #28]
 8006838:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800683c:	931a      	str	r3, [sp, #104]	@ 0x68
 800683e:	4654      	mov	r4, sl
 8006840:	2205      	movs	r2, #5
 8006842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006846:	4853      	ldr	r0, [pc, #332]	@ (8006994 <_vfiprintf_r+0x21c>)
 8006848:	f7f9 fcca 	bl	80001e0 <memchr>
 800684c:	9a04      	ldr	r2, [sp, #16]
 800684e:	b9d8      	cbnz	r0, 8006888 <_vfiprintf_r+0x110>
 8006850:	06d1      	lsls	r1, r2, #27
 8006852:	bf44      	itt	mi
 8006854:	2320      	movmi	r3, #32
 8006856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800685a:	0713      	lsls	r3, r2, #28
 800685c:	bf44      	itt	mi
 800685e:	232b      	movmi	r3, #43	@ 0x2b
 8006860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006864:	f89a 3000 	ldrb.w	r3, [sl]
 8006868:	2b2a      	cmp	r3, #42	@ 0x2a
 800686a:	d015      	beq.n	8006898 <_vfiprintf_r+0x120>
 800686c:	9a07      	ldr	r2, [sp, #28]
 800686e:	4654      	mov	r4, sl
 8006870:	2000      	movs	r0, #0
 8006872:	f04f 0c0a 	mov.w	ip, #10
 8006876:	4621      	mov	r1, r4
 8006878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800687c:	3b30      	subs	r3, #48	@ 0x30
 800687e:	2b09      	cmp	r3, #9
 8006880:	d94b      	bls.n	800691a <_vfiprintf_r+0x1a2>
 8006882:	b1b0      	cbz	r0, 80068b2 <_vfiprintf_r+0x13a>
 8006884:	9207      	str	r2, [sp, #28]
 8006886:	e014      	b.n	80068b2 <_vfiprintf_r+0x13a>
 8006888:	eba0 0308 	sub.w	r3, r0, r8
 800688c:	fa09 f303 	lsl.w	r3, r9, r3
 8006890:	4313      	orrs	r3, r2
 8006892:	9304      	str	r3, [sp, #16]
 8006894:	46a2      	mov	sl, r4
 8006896:	e7d2      	b.n	800683e <_vfiprintf_r+0xc6>
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	1d19      	adds	r1, r3, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	9103      	str	r1, [sp, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bfbb      	ittet	lt
 80068a4:	425b      	neglt	r3, r3
 80068a6:	f042 0202 	orrlt.w	r2, r2, #2
 80068aa:	9307      	strge	r3, [sp, #28]
 80068ac:	9307      	strlt	r3, [sp, #28]
 80068ae:	bfb8      	it	lt
 80068b0:	9204      	strlt	r2, [sp, #16]
 80068b2:	7823      	ldrb	r3, [r4, #0]
 80068b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80068b6:	d10a      	bne.n	80068ce <_vfiprintf_r+0x156>
 80068b8:	7863      	ldrb	r3, [r4, #1]
 80068ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80068bc:	d132      	bne.n	8006924 <_vfiprintf_r+0x1ac>
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	1d1a      	adds	r2, r3, #4
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	9203      	str	r2, [sp, #12]
 80068c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068ca:	3402      	adds	r4, #2
 80068cc:	9305      	str	r3, [sp, #20]
 80068ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80069a4 <_vfiprintf_r+0x22c>
 80068d2:	7821      	ldrb	r1, [r4, #0]
 80068d4:	2203      	movs	r2, #3
 80068d6:	4650      	mov	r0, sl
 80068d8:	f7f9 fc82 	bl	80001e0 <memchr>
 80068dc:	b138      	cbz	r0, 80068ee <_vfiprintf_r+0x176>
 80068de:	9b04      	ldr	r3, [sp, #16]
 80068e0:	eba0 000a 	sub.w	r0, r0, sl
 80068e4:	2240      	movs	r2, #64	@ 0x40
 80068e6:	4082      	lsls	r2, r0
 80068e8:	4313      	orrs	r3, r2
 80068ea:	3401      	adds	r4, #1
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f2:	4829      	ldr	r0, [pc, #164]	@ (8006998 <_vfiprintf_r+0x220>)
 80068f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068f8:	2206      	movs	r2, #6
 80068fa:	f7f9 fc71 	bl	80001e0 <memchr>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d03f      	beq.n	8006982 <_vfiprintf_r+0x20a>
 8006902:	4b26      	ldr	r3, [pc, #152]	@ (800699c <_vfiprintf_r+0x224>)
 8006904:	bb1b      	cbnz	r3, 800694e <_vfiprintf_r+0x1d6>
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	3307      	adds	r3, #7
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	3308      	adds	r3, #8
 8006910:	9303      	str	r3, [sp, #12]
 8006912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006914:	443b      	add	r3, r7
 8006916:	9309      	str	r3, [sp, #36]	@ 0x24
 8006918:	e76a      	b.n	80067f0 <_vfiprintf_r+0x78>
 800691a:	fb0c 3202 	mla	r2, ip, r2, r3
 800691e:	460c      	mov	r4, r1
 8006920:	2001      	movs	r0, #1
 8006922:	e7a8      	b.n	8006876 <_vfiprintf_r+0xfe>
 8006924:	2300      	movs	r3, #0
 8006926:	3401      	adds	r4, #1
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	4619      	mov	r1, r3
 800692c:	f04f 0c0a 	mov.w	ip, #10
 8006930:	4620      	mov	r0, r4
 8006932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006936:	3a30      	subs	r2, #48	@ 0x30
 8006938:	2a09      	cmp	r2, #9
 800693a:	d903      	bls.n	8006944 <_vfiprintf_r+0x1cc>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0c6      	beq.n	80068ce <_vfiprintf_r+0x156>
 8006940:	9105      	str	r1, [sp, #20]
 8006942:	e7c4      	b.n	80068ce <_vfiprintf_r+0x156>
 8006944:	fb0c 2101 	mla	r1, ip, r1, r2
 8006948:	4604      	mov	r4, r0
 800694a:	2301      	movs	r3, #1
 800694c:	e7f0      	b.n	8006930 <_vfiprintf_r+0x1b8>
 800694e:	ab03      	add	r3, sp, #12
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	462a      	mov	r2, r5
 8006954:	4b12      	ldr	r3, [pc, #72]	@ (80069a0 <_vfiprintf_r+0x228>)
 8006956:	a904      	add	r1, sp, #16
 8006958:	4630      	mov	r0, r6
 800695a:	f3af 8000 	nop.w
 800695e:	4607      	mov	r7, r0
 8006960:	1c78      	adds	r0, r7, #1
 8006962:	d1d6      	bne.n	8006912 <_vfiprintf_r+0x19a>
 8006964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006966:	07d9      	lsls	r1, r3, #31
 8006968:	d405      	bmi.n	8006976 <_vfiprintf_r+0x1fe>
 800696a:	89ab      	ldrh	r3, [r5, #12]
 800696c:	059a      	lsls	r2, r3, #22
 800696e:	d402      	bmi.n	8006976 <_vfiprintf_r+0x1fe>
 8006970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006972:	f7ff fc85 	bl	8006280 <__retarget_lock_release_recursive>
 8006976:	89ab      	ldrh	r3, [r5, #12]
 8006978:	065b      	lsls	r3, r3, #25
 800697a:	f53f af1f 	bmi.w	80067bc <_vfiprintf_r+0x44>
 800697e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006980:	e71e      	b.n	80067c0 <_vfiprintf_r+0x48>
 8006982:	ab03      	add	r3, sp, #12
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	462a      	mov	r2, r5
 8006988:	4b05      	ldr	r3, [pc, #20]	@ (80069a0 <_vfiprintf_r+0x228>)
 800698a:	a904      	add	r1, sp, #16
 800698c:	4630      	mov	r0, r6
 800698e:	f000 f879 	bl	8006a84 <_printf_i>
 8006992:	e7e4      	b.n	800695e <_vfiprintf_r+0x1e6>
 8006994:	08007e14 	.word	0x08007e14
 8006998:	08007e1e 	.word	0x08007e1e
 800699c:	00000000 	.word	0x00000000
 80069a0:	08006753 	.word	0x08006753
 80069a4:	08007e1a 	.word	0x08007e1a

080069a8 <_printf_common>:
 80069a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ac:	4616      	mov	r6, r2
 80069ae:	4698      	mov	r8, r3
 80069b0:	688a      	ldr	r2, [r1, #8]
 80069b2:	690b      	ldr	r3, [r1, #16]
 80069b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069b8:	4293      	cmp	r3, r2
 80069ba:	bfb8      	it	lt
 80069bc:	4613      	movlt	r3, r2
 80069be:	6033      	str	r3, [r6, #0]
 80069c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069c4:	4607      	mov	r7, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	b10a      	cbz	r2, 80069ce <_printf_common+0x26>
 80069ca:	3301      	adds	r3, #1
 80069cc:	6033      	str	r3, [r6, #0]
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	0699      	lsls	r1, r3, #26
 80069d2:	bf42      	ittt	mi
 80069d4:	6833      	ldrmi	r3, [r6, #0]
 80069d6:	3302      	addmi	r3, #2
 80069d8:	6033      	strmi	r3, [r6, #0]
 80069da:	6825      	ldr	r5, [r4, #0]
 80069dc:	f015 0506 	ands.w	r5, r5, #6
 80069e0:	d106      	bne.n	80069f0 <_printf_common+0x48>
 80069e2:	f104 0a19 	add.w	sl, r4, #25
 80069e6:	68e3      	ldr	r3, [r4, #12]
 80069e8:	6832      	ldr	r2, [r6, #0]
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	42ab      	cmp	r3, r5
 80069ee:	dc26      	bgt.n	8006a3e <_printf_common+0x96>
 80069f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	3b00      	subs	r3, #0
 80069f8:	bf18      	it	ne
 80069fa:	2301      	movne	r3, #1
 80069fc:	0692      	lsls	r2, r2, #26
 80069fe:	d42b      	bmi.n	8006a58 <_printf_common+0xb0>
 8006a00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a04:	4641      	mov	r1, r8
 8006a06:	4638      	mov	r0, r7
 8006a08:	47c8      	blx	r9
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d01e      	beq.n	8006a4c <_printf_common+0xa4>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	6922      	ldr	r2, [r4, #16]
 8006a12:	f003 0306 	and.w	r3, r3, #6
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	bf02      	ittt	eq
 8006a1a:	68e5      	ldreq	r5, [r4, #12]
 8006a1c:	6833      	ldreq	r3, [r6, #0]
 8006a1e:	1aed      	subeq	r5, r5, r3
 8006a20:	68a3      	ldr	r3, [r4, #8]
 8006a22:	bf0c      	ite	eq
 8006a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a28:	2500      	movne	r5, #0
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	bfc4      	itt	gt
 8006a2e:	1a9b      	subgt	r3, r3, r2
 8006a30:	18ed      	addgt	r5, r5, r3
 8006a32:	2600      	movs	r6, #0
 8006a34:	341a      	adds	r4, #26
 8006a36:	42b5      	cmp	r5, r6
 8006a38:	d11a      	bne.n	8006a70 <_printf_common+0xc8>
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	e008      	b.n	8006a50 <_printf_common+0xa8>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4652      	mov	r2, sl
 8006a42:	4641      	mov	r1, r8
 8006a44:	4638      	mov	r0, r7
 8006a46:	47c8      	blx	r9
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d103      	bne.n	8006a54 <_printf_common+0xac>
 8006a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a54:	3501      	adds	r5, #1
 8006a56:	e7c6      	b.n	80069e6 <_printf_common+0x3e>
 8006a58:	18e1      	adds	r1, r4, r3
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	2030      	movs	r0, #48	@ 0x30
 8006a5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a62:	4422      	add	r2, r4
 8006a64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	e7c7      	b.n	8006a00 <_printf_common+0x58>
 8006a70:	2301      	movs	r3, #1
 8006a72:	4622      	mov	r2, r4
 8006a74:	4641      	mov	r1, r8
 8006a76:	4638      	mov	r0, r7
 8006a78:	47c8      	blx	r9
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d0e6      	beq.n	8006a4c <_printf_common+0xa4>
 8006a7e:	3601      	adds	r6, #1
 8006a80:	e7d9      	b.n	8006a36 <_printf_common+0x8e>
	...

08006a84 <_printf_i>:
 8006a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	7e0f      	ldrb	r7, [r1, #24]
 8006a8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a8c:	2f78      	cmp	r7, #120	@ 0x78
 8006a8e:	4691      	mov	r9, r2
 8006a90:	4680      	mov	r8, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	469a      	mov	sl, r3
 8006a96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a9a:	d807      	bhi.n	8006aac <_printf_i+0x28>
 8006a9c:	2f62      	cmp	r7, #98	@ 0x62
 8006a9e:	d80a      	bhi.n	8006ab6 <_printf_i+0x32>
 8006aa0:	2f00      	cmp	r7, #0
 8006aa2:	f000 80d2 	beq.w	8006c4a <_printf_i+0x1c6>
 8006aa6:	2f58      	cmp	r7, #88	@ 0x58
 8006aa8:	f000 80b9 	beq.w	8006c1e <_printf_i+0x19a>
 8006aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ab0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ab4:	e03a      	b.n	8006b2c <_printf_i+0xa8>
 8006ab6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006aba:	2b15      	cmp	r3, #21
 8006abc:	d8f6      	bhi.n	8006aac <_printf_i+0x28>
 8006abe:	a101      	add	r1, pc, #4	@ (adr r1, 8006ac4 <_printf_i+0x40>)
 8006ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ac4:	08006b1d 	.word	0x08006b1d
 8006ac8:	08006b31 	.word	0x08006b31
 8006acc:	08006aad 	.word	0x08006aad
 8006ad0:	08006aad 	.word	0x08006aad
 8006ad4:	08006aad 	.word	0x08006aad
 8006ad8:	08006aad 	.word	0x08006aad
 8006adc:	08006b31 	.word	0x08006b31
 8006ae0:	08006aad 	.word	0x08006aad
 8006ae4:	08006aad 	.word	0x08006aad
 8006ae8:	08006aad 	.word	0x08006aad
 8006aec:	08006aad 	.word	0x08006aad
 8006af0:	08006c31 	.word	0x08006c31
 8006af4:	08006b5b 	.word	0x08006b5b
 8006af8:	08006beb 	.word	0x08006beb
 8006afc:	08006aad 	.word	0x08006aad
 8006b00:	08006aad 	.word	0x08006aad
 8006b04:	08006c53 	.word	0x08006c53
 8006b08:	08006aad 	.word	0x08006aad
 8006b0c:	08006b5b 	.word	0x08006b5b
 8006b10:	08006aad 	.word	0x08006aad
 8006b14:	08006aad 	.word	0x08006aad
 8006b18:	08006bf3 	.word	0x08006bf3
 8006b1c:	6833      	ldr	r3, [r6, #0]
 8006b1e:	1d1a      	adds	r2, r3, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6032      	str	r2, [r6, #0]
 8006b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e09d      	b.n	8006c6c <_printf_i+0x1e8>
 8006b30:	6833      	ldr	r3, [r6, #0]
 8006b32:	6820      	ldr	r0, [r4, #0]
 8006b34:	1d19      	adds	r1, r3, #4
 8006b36:	6031      	str	r1, [r6, #0]
 8006b38:	0606      	lsls	r6, r0, #24
 8006b3a:	d501      	bpl.n	8006b40 <_printf_i+0xbc>
 8006b3c:	681d      	ldr	r5, [r3, #0]
 8006b3e:	e003      	b.n	8006b48 <_printf_i+0xc4>
 8006b40:	0645      	lsls	r5, r0, #25
 8006b42:	d5fb      	bpl.n	8006b3c <_printf_i+0xb8>
 8006b44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	da03      	bge.n	8006b54 <_printf_i+0xd0>
 8006b4c:	232d      	movs	r3, #45	@ 0x2d
 8006b4e:	426d      	negs	r5, r5
 8006b50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b54:	4859      	ldr	r0, [pc, #356]	@ (8006cbc <_printf_i+0x238>)
 8006b56:	230a      	movs	r3, #10
 8006b58:	e011      	b.n	8006b7e <_printf_i+0xfa>
 8006b5a:	6821      	ldr	r1, [r4, #0]
 8006b5c:	6833      	ldr	r3, [r6, #0]
 8006b5e:	0608      	lsls	r0, r1, #24
 8006b60:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b64:	d402      	bmi.n	8006b6c <_printf_i+0xe8>
 8006b66:	0649      	lsls	r1, r1, #25
 8006b68:	bf48      	it	mi
 8006b6a:	b2ad      	uxthmi	r5, r5
 8006b6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b6e:	4853      	ldr	r0, [pc, #332]	@ (8006cbc <_printf_i+0x238>)
 8006b70:	6033      	str	r3, [r6, #0]
 8006b72:	bf14      	ite	ne
 8006b74:	230a      	movne	r3, #10
 8006b76:	2308      	moveq	r3, #8
 8006b78:	2100      	movs	r1, #0
 8006b7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b7e:	6866      	ldr	r6, [r4, #4]
 8006b80:	60a6      	str	r6, [r4, #8]
 8006b82:	2e00      	cmp	r6, #0
 8006b84:	bfa2      	ittt	ge
 8006b86:	6821      	ldrge	r1, [r4, #0]
 8006b88:	f021 0104 	bicge.w	r1, r1, #4
 8006b8c:	6021      	strge	r1, [r4, #0]
 8006b8e:	b90d      	cbnz	r5, 8006b94 <_printf_i+0x110>
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	d04b      	beq.n	8006c2c <_printf_i+0x1a8>
 8006b94:	4616      	mov	r6, r2
 8006b96:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b9a:	fb03 5711 	mls	r7, r3, r1, r5
 8006b9e:	5dc7      	ldrb	r7, [r0, r7]
 8006ba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ba4:	462f      	mov	r7, r5
 8006ba6:	42bb      	cmp	r3, r7
 8006ba8:	460d      	mov	r5, r1
 8006baa:	d9f4      	bls.n	8006b96 <_printf_i+0x112>
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d10b      	bne.n	8006bc8 <_printf_i+0x144>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	07df      	lsls	r7, r3, #31
 8006bb4:	d508      	bpl.n	8006bc8 <_printf_i+0x144>
 8006bb6:	6923      	ldr	r3, [r4, #16]
 8006bb8:	6861      	ldr	r1, [r4, #4]
 8006bba:	4299      	cmp	r1, r3
 8006bbc:	bfde      	ittt	le
 8006bbe:	2330      	movle	r3, #48	@ 0x30
 8006bc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bc8:	1b92      	subs	r2, r2, r6
 8006bca:	6122      	str	r2, [r4, #16]
 8006bcc:	f8cd a000 	str.w	sl, [sp]
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	aa03      	add	r2, sp, #12
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	f7ff fee6 	bl	80069a8 <_printf_common>
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d14a      	bne.n	8006c76 <_printf_i+0x1f2>
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	b004      	add	sp, #16
 8006be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	f043 0320 	orr.w	r3, r3, #32
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	4833      	ldr	r0, [pc, #204]	@ (8006cc0 <_printf_i+0x23c>)
 8006bf4:	2778      	movs	r7, #120	@ 0x78
 8006bf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	6831      	ldr	r1, [r6, #0]
 8006bfe:	061f      	lsls	r7, r3, #24
 8006c00:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c04:	d402      	bmi.n	8006c0c <_printf_i+0x188>
 8006c06:	065f      	lsls	r7, r3, #25
 8006c08:	bf48      	it	mi
 8006c0a:	b2ad      	uxthmi	r5, r5
 8006c0c:	6031      	str	r1, [r6, #0]
 8006c0e:	07d9      	lsls	r1, r3, #31
 8006c10:	bf44      	itt	mi
 8006c12:	f043 0320 	orrmi.w	r3, r3, #32
 8006c16:	6023      	strmi	r3, [r4, #0]
 8006c18:	b11d      	cbz	r5, 8006c22 <_printf_i+0x19e>
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	e7ac      	b.n	8006b78 <_printf_i+0xf4>
 8006c1e:	4827      	ldr	r0, [pc, #156]	@ (8006cbc <_printf_i+0x238>)
 8006c20:	e7e9      	b.n	8006bf6 <_printf_i+0x172>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	f023 0320 	bic.w	r3, r3, #32
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	e7f6      	b.n	8006c1a <_printf_i+0x196>
 8006c2c:	4616      	mov	r6, r2
 8006c2e:	e7bd      	b.n	8006bac <_printf_i+0x128>
 8006c30:	6833      	ldr	r3, [r6, #0]
 8006c32:	6825      	ldr	r5, [r4, #0]
 8006c34:	6961      	ldr	r1, [r4, #20]
 8006c36:	1d18      	adds	r0, r3, #4
 8006c38:	6030      	str	r0, [r6, #0]
 8006c3a:	062e      	lsls	r6, r5, #24
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	d501      	bpl.n	8006c44 <_printf_i+0x1c0>
 8006c40:	6019      	str	r1, [r3, #0]
 8006c42:	e002      	b.n	8006c4a <_printf_i+0x1c6>
 8006c44:	0668      	lsls	r0, r5, #25
 8006c46:	d5fb      	bpl.n	8006c40 <_printf_i+0x1bc>
 8006c48:	8019      	strh	r1, [r3, #0]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	6123      	str	r3, [r4, #16]
 8006c4e:	4616      	mov	r6, r2
 8006c50:	e7bc      	b.n	8006bcc <_printf_i+0x148>
 8006c52:	6833      	ldr	r3, [r6, #0]
 8006c54:	1d1a      	adds	r2, r3, #4
 8006c56:	6032      	str	r2, [r6, #0]
 8006c58:	681e      	ldr	r6, [r3, #0]
 8006c5a:	6862      	ldr	r2, [r4, #4]
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f7f9 fabe 	bl	80001e0 <memchr>
 8006c64:	b108      	cbz	r0, 8006c6a <_printf_i+0x1e6>
 8006c66:	1b80      	subs	r0, r0, r6
 8006c68:	6060      	str	r0, [r4, #4]
 8006c6a:	6863      	ldr	r3, [r4, #4]
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c74:	e7aa      	b.n	8006bcc <_printf_i+0x148>
 8006c76:	6923      	ldr	r3, [r4, #16]
 8006c78:	4632      	mov	r2, r6
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	4640      	mov	r0, r8
 8006c7e:	47d0      	blx	sl
 8006c80:	3001      	adds	r0, #1
 8006c82:	d0ad      	beq.n	8006be0 <_printf_i+0x15c>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	079b      	lsls	r3, r3, #30
 8006c88:	d413      	bmi.n	8006cb2 <_printf_i+0x22e>
 8006c8a:	68e0      	ldr	r0, [r4, #12]
 8006c8c:	9b03      	ldr	r3, [sp, #12]
 8006c8e:	4298      	cmp	r0, r3
 8006c90:	bfb8      	it	lt
 8006c92:	4618      	movlt	r0, r3
 8006c94:	e7a6      	b.n	8006be4 <_printf_i+0x160>
 8006c96:	2301      	movs	r3, #1
 8006c98:	4632      	mov	r2, r6
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	47d0      	blx	sl
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d09d      	beq.n	8006be0 <_printf_i+0x15c>
 8006ca4:	3501      	adds	r5, #1
 8006ca6:	68e3      	ldr	r3, [r4, #12]
 8006ca8:	9903      	ldr	r1, [sp, #12]
 8006caa:	1a5b      	subs	r3, r3, r1
 8006cac:	42ab      	cmp	r3, r5
 8006cae:	dcf2      	bgt.n	8006c96 <_printf_i+0x212>
 8006cb0:	e7eb      	b.n	8006c8a <_printf_i+0x206>
 8006cb2:	2500      	movs	r5, #0
 8006cb4:	f104 0619 	add.w	r6, r4, #25
 8006cb8:	e7f5      	b.n	8006ca6 <_printf_i+0x222>
 8006cba:	bf00      	nop
 8006cbc:	08007e25 	.word	0x08007e25
 8006cc0:	08007e36 	.word	0x08007e36

08006cc4 <__sflush_r>:
 8006cc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ccc:	0716      	lsls	r6, r2, #28
 8006cce:	4605      	mov	r5, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	d454      	bmi.n	8006d7e <__sflush_r+0xba>
 8006cd4:	684b      	ldr	r3, [r1, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dc02      	bgt.n	8006ce0 <__sflush_r+0x1c>
 8006cda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	dd48      	ble.n	8006d72 <__sflush_r+0xae>
 8006ce0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ce2:	2e00      	cmp	r6, #0
 8006ce4:	d045      	beq.n	8006d72 <__sflush_r+0xae>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cec:	682f      	ldr	r7, [r5, #0]
 8006cee:	6a21      	ldr	r1, [r4, #32]
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	d030      	beq.n	8006d56 <__sflush_r+0x92>
 8006cf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	0759      	lsls	r1, r3, #29
 8006cfa:	d505      	bpl.n	8006d08 <__sflush_r+0x44>
 8006cfc:	6863      	ldr	r3, [r4, #4]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d02:	b10b      	cbz	r3, 8006d08 <__sflush_r+0x44>
 8006d04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d0c:	6a21      	ldr	r1, [r4, #32]
 8006d0e:	4628      	mov	r0, r5
 8006d10:	47b0      	blx	r6
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	d106      	bne.n	8006d26 <__sflush_r+0x62>
 8006d18:	6829      	ldr	r1, [r5, #0]
 8006d1a:	291d      	cmp	r1, #29
 8006d1c:	d82b      	bhi.n	8006d76 <__sflush_r+0xb2>
 8006d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc8 <__sflush_r+0x104>)
 8006d20:	410a      	asrs	r2, r1
 8006d22:	07d6      	lsls	r6, r2, #31
 8006d24:	d427      	bmi.n	8006d76 <__sflush_r+0xb2>
 8006d26:	2200      	movs	r2, #0
 8006d28:	6062      	str	r2, [r4, #4]
 8006d2a:	04d9      	lsls	r1, r3, #19
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	6022      	str	r2, [r4, #0]
 8006d30:	d504      	bpl.n	8006d3c <__sflush_r+0x78>
 8006d32:	1c42      	adds	r2, r0, #1
 8006d34:	d101      	bne.n	8006d3a <__sflush_r+0x76>
 8006d36:	682b      	ldr	r3, [r5, #0]
 8006d38:	b903      	cbnz	r3, 8006d3c <__sflush_r+0x78>
 8006d3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d3e:	602f      	str	r7, [r5, #0]
 8006d40:	b1b9      	cbz	r1, 8006d72 <__sflush_r+0xae>
 8006d42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d46:	4299      	cmp	r1, r3
 8006d48:	d002      	beq.n	8006d50 <__sflush_r+0x8c>
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f7ff fa9a 	bl	8006284 <_free_r>
 8006d50:	2300      	movs	r3, #0
 8006d52:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d54:	e00d      	b.n	8006d72 <__sflush_r+0xae>
 8006d56:	2301      	movs	r3, #1
 8006d58:	4628      	mov	r0, r5
 8006d5a:	47b0      	blx	r6
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	1c50      	adds	r0, r2, #1
 8006d60:	d1c9      	bne.n	8006cf6 <__sflush_r+0x32>
 8006d62:	682b      	ldr	r3, [r5, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0c6      	beq.n	8006cf6 <__sflush_r+0x32>
 8006d68:	2b1d      	cmp	r3, #29
 8006d6a:	d001      	beq.n	8006d70 <__sflush_r+0xac>
 8006d6c:	2b16      	cmp	r3, #22
 8006d6e:	d11e      	bne.n	8006dae <__sflush_r+0xea>
 8006d70:	602f      	str	r7, [r5, #0]
 8006d72:	2000      	movs	r0, #0
 8006d74:	e022      	b.n	8006dbc <__sflush_r+0xf8>
 8006d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d7a:	b21b      	sxth	r3, r3
 8006d7c:	e01b      	b.n	8006db6 <__sflush_r+0xf2>
 8006d7e:	690f      	ldr	r7, [r1, #16]
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	d0f6      	beq.n	8006d72 <__sflush_r+0xae>
 8006d84:	0793      	lsls	r3, r2, #30
 8006d86:	680e      	ldr	r6, [r1, #0]
 8006d88:	bf08      	it	eq
 8006d8a:	694b      	ldreq	r3, [r1, #20]
 8006d8c:	600f      	str	r7, [r1, #0]
 8006d8e:	bf18      	it	ne
 8006d90:	2300      	movne	r3, #0
 8006d92:	eba6 0807 	sub.w	r8, r6, r7
 8006d96:	608b      	str	r3, [r1, #8]
 8006d98:	f1b8 0f00 	cmp.w	r8, #0
 8006d9c:	dde9      	ble.n	8006d72 <__sflush_r+0xae>
 8006d9e:	6a21      	ldr	r1, [r4, #32]
 8006da0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006da2:	4643      	mov	r3, r8
 8006da4:	463a      	mov	r2, r7
 8006da6:	4628      	mov	r0, r5
 8006da8:	47b0      	blx	r6
 8006daa:	2800      	cmp	r0, #0
 8006dac:	dc08      	bgt.n	8006dc0 <__sflush_r+0xfc>
 8006dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dc0:	4407      	add	r7, r0
 8006dc2:	eba8 0800 	sub.w	r8, r8, r0
 8006dc6:	e7e7      	b.n	8006d98 <__sflush_r+0xd4>
 8006dc8:	dfbffffe 	.word	0xdfbffffe

08006dcc <_fflush_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	690b      	ldr	r3, [r1, #16]
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	b913      	cbnz	r3, 8006ddc <_fflush_r+0x10>
 8006dd6:	2500      	movs	r5, #0
 8006dd8:	4628      	mov	r0, r5
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	b118      	cbz	r0, 8006de6 <_fflush_r+0x1a>
 8006dde:	6a03      	ldr	r3, [r0, #32]
 8006de0:	b90b      	cbnz	r3, 8006de6 <_fflush_r+0x1a>
 8006de2:	f7ff f823 	bl	8005e2c <__sinit>
 8006de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f3      	beq.n	8006dd6 <_fflush_r+0xa>
 8006dee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006df0:	07d0      	lsls	r0, r2, #31
 8006df2:	d404      	bmi.n	8006dfe <_fflush_r+0x32>
 8006df4:	0599      	lsls	r1, r3, #22
 8006df6:	d402      	bmi.n	8006dfe <_fflush_r+0x32>
 8006df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dfa:	f7ff fa40 	bl	800627e <__retarget_lock_acquire_recursive>
 8006dfe:	4628      	mov	r0, r5
 8006e00:	4621      	mov	r1, r4
 8006e02:	f7ff ff5f 	bl	8006cc4 <__sflush_r>
 8006e06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e08:	07da      	lsls	r2, r3, #31
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	d4e4      	bmi.n	8006dd8 <_fflush_r+0xc>
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	059b      	lsls	r3, r3, #22
 8006e12:	d4e1      	bmi.n	8006dd8 <_fflush_r+0xc>
 8006e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e16:	f7ff fa33 	bl	8006280 <__retarget_lock_release_recursive>
 8006e1a:	e7dd      	b.n	8006dd8 <_fflush_r+0xc>

08006e1c <__swhatbuf_r>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	460c      	mov	r4, r1
 8006e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e24:	2900      	cmp	r1, #0
 8006e26:	b096      	sub	sp, #88	@ 0x58
 8006e28:	4615      	mov	r5, r2
 8006e2a:	461e      	mov	r6, r3
 8006e2c:	da0d      	bge.n	8006e4a <__swhatbuf_r+0x2e>
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e34:	f04f 0100 	mov.w	r1, #0
 8006e38:	bf14      	ite	ne
 8006e3a:	2340      	movne	r3, #64	@ 0x40
 8006e3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e40:	2000      	movs	r0, #0
 8006e42:	6031      	str	r1, [r6, #0]
 8006e44:	602b      	str	r3, [r5, #0]
 8006e46:	b016      	add	sp, #88	@ 0x58
 8006e48:	bd70      	pop	{r4, r5, r6, pc}
 8006e4a:	466a      	mov	r2, sp
 8006e4c:	f000 f862 	bl	8006f14 <_fstat_r>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	dbec      	blt.n	8006e2e <__swhatbuf_r+0x12>
 8006e54:	9901      	ldr	r1, [sp, #4]
 8006e56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e5e:	4259      	negs	r1, r3
 8006e60:	4159      	adcs	r1, r3
 8006e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e66:	e7eb      	b.n	8006e40 <__swhatbuf_r+0x24>

08006e68 <__smakebuf_r>:
 8006e68:	898b      	ldrh	r3, [r1, #12]
 8006e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e6c:	079d      	lsls	r5, r3, #30
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	d507      	bpl.n	8006e84 <__smakebuf_r+0x1c>
 8006e74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	6123      	str	r3, [r4, #16]
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	6163      	str	r3, [r4, #20]
 8006e80:	b003      	add	sp, #12
 8006e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e84:	ab01      	add	r3, sp, #4
 8006e86:	466a      	mov	r2, sp
 8006e88:	f7ff ffc8 	bl	8006e1c <__swhatbuf_r>
 8006e8c:	9f00      	ldr	r7, [sp, #0]
 8006e8e:	4605      	mov	r5, r0
 8006e90:	4639      	mov	r1, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7ff fa62 	bl	800635c <_malloc_r>
 8006e98:	b948      	cbnz	r0, 8006eae <__smakebuf_r+0x46>
 8006e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9e:	059a      	lsls	r2, r3, #22
 8006ea0:	d4ee      	bmi.n	8006e80 <__smakebuf_r+0x18>
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	f043 0302 	orr.w	r3, r3, #2
 8006eaa:	81a3      	strh	r3, [r4, #12]
 8006eac:	e7e2      	b.n	8006e74 <__smakebuf_r+0xc>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	6020      	str	r0, [r4, #0]
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	9b01      	ldr	r3, [sp, #4]
 8006eba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ebe:	b15b      	cbz	r3, 8006ed8 <__smakebuf_r+0x70>
 8006ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f000 f837 	bl	8006f38 <_isatty_r>
 8006eca:	b128      	cbz	r0, 8006ed8 <__smakebuf_r+0x70>
 8006ecc:	89a3      	ldrh	r3, [r4, #12]
 8006ece:	f023 0303 	bic.w	r3, r3, #3
 8006ed2:	f043 0301 	orr.w	r3, r3, #1
 8006ed6:	81a3      	strh	r3, [r4, #12]
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	431d      	orrs	r5, r3
 8006edc:	81a5      	strh	r5, [r4, #12]
 8006ede:	e7cf      	b.n	8006e80 <__smakebuf_r+0x18>

08006ee0 <memmove>:
 8006ee0:	4288      	cmp	r0, r1
 8006ee2:	b510      	push	{r4, lr}
 8006ee4:	eb01 0402 	add.w	r4, r1, r2
 8006ee8:	d902      	bls.n	8006ef0 <memmove+0x10>
 8006eea:	4284      	cmp	r4, r0
 8006eec:	4623      	mov	r3, r4
 8006eee:	d807      	bhi.n	8006f00 <memmove+0x20>
 8006ef0:	1e43      	subs	r3, r0, #1
 8006ef2:	42a1      	cmp	r1, r4
 8006ef4:	d008      	beq.n	8006f08 <memmove+0x28>
 8006ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006efa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006efe:	e7f8      	b.n	8006ef2 <memmove+0x12>
 8006f00:	4402      	add	r2, r0
 8006f02:	4601      	mov	r1, r0
 8006f04:	428a      	cmp	r2, r1
 8006f06:	d100      	bne.n	8006f0a <memmove+0x2a>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f12:	e7f7      	b.n	8006f04 <memmove+0x24>

08006f14 <_fstat_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d07      	ldr	r5, [pc, #28]	@ (8006f34 <_fstat_r+0x20>)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	f7fb fd0c 	bl	800293e <_fstat>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d102      	bne.n	8006f30 <_fstat_r+0x1c>
 8006f2a:	682b      	ldr	r3, [r5, #0]
 8006f2c:	b103      	cbz	r3, 8006f30 <_fstat_r+0x1c>
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	2000088c 	.word	0x2000088c

08006f38 <_isatty_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d06      	ldr	r5, [pc, #24]	@ (8006f54 <_isatty_r+0x1c>)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	602b      	str	r3, [r5, #0]
 8006f44:	f7fb fd0b 	bl	800295e <_isatty>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_isatty_r+0x1a>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_isatty_r+0x1a>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	2000088c 	.word	0x2000088c

08006f58 <_sbrk_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4d06      	ldr	r5, [pc, #24]	@ (8006f74 <_sbrk_r+0x1c>)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	f7fb fd14 	bl	8002990 <_sbrk>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_sbrk_r+0x1a>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_sbrk_r+0x1a>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	2000088c 	.word	0x2000088c

08006f78 <memcpy>:
 8006f78:	440a      	add	r2, r1
 8006f7a:	4291      	cmp	r1, r2
 8006f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f80:	d100      	bne.n	8006f84 <memcpy+0xc>
 8006f82:	4770      	bx	lr
 8006f84:	b510      	push	{r4, lr}
 8006f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f8e:	4291      	cmp	r1, r2
 8006f90:	d1f9      	bne.n	8006f86 <memcpy+0xe>
 8006f92:	bd10      	pop	{r4, pc}

08006f94 <_realloc_r>:
 8006f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f98:	4680      	mov	r8, r0
 8006f9a:	4615      	mov	r5, r2
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	b921      	cbnz	r1, 8006faa <_realloc_r+0x16>
 8006fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	f7ff b9d9 	b.w	800635c <_malloc_r>
 8006faa:	b92a      	cbnz	r2, 8006fb8 <_realloc_r+0x24>
 8006fac:	f7ff f96a 	bl	8006284 <_free_r>
 8006fb0:	2400      	movs	r4, #0
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb8:	f000 f81a 	bl	8006ff0 <_malloc_usable_size_r>
 8006fbc:	4285      	cmp	r5, r0
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	d802      	bhi.n	8006fc8 <_realloc_r+0x34>
 8006fc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006fc6:	d8f4      	bhi.n	8006fb2 <_realloc_r+0x1e>
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4640      	mov	r0, r8
 8006fcc:	f7ff f9c6 	bl	800635c <_malloc_r>
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d0ec      	beq.n	8006fb0 <_realloc_r+0x1c>
 8006fd6:	42b5      	cmp	r5, r6
 8006fd8:	462a      	mov	r2, r5
 8006fda:	4621      	mov	r1, r4
 8006fdc:	bf28      	it	cs
 8006fde:	4632      	movcs	r2, r6
 8006fe0:	f7ff ffca 	bl	8006f78 <memcpy>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	f7ff f94c 	bl	8006284 <_free_r>
 8006fec:	463c      	mov	r4, r7
 8006fee:	e7e0      	b.n	8006fb2 <_realloc_r+0x1e>

08006ff0 <_malloc_usable_size_r>:
 8006ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff4:	1f18      	subs	r0, r3, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bfbc      	itt	lt
 8006ffa:	580b      	ldrlt	r3, [r1, r0]
 8006ffc:	18c0      	addlt	r0, r0, r3
 8006ffe:	4770      	bx	lr

08007000 <_init>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	bf00      	nop
 8007004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007006:	bc08      	pop	{r3}
 8007008:	469e      	mov	lr, r3
 800700a:	4770      	bx	lr

0800700c <_fini>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	bf00      	nop
 8007010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007012:	bc08      	pop	{r3}
 8007014:	469e      	mov	lr, r3
 8007016:	4770      	bx	lr
