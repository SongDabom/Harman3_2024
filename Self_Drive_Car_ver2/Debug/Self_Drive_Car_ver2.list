
Self_Drive_Car_ver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f50  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080060f0  080060f0  000070f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061ac  080061ac  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  080061ac  080061ac  000071ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061b4  080061b4  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b4  080061b4  000071b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061b8  080061b8  000071b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080061bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000078  08006234  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08006234  00008420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e201  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216e  00000000  00000000  000162a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00018418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a82  00000000  00000000  00019188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bc1  00000000  00000000  00019c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f979  00000000  00000000  0001c7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090409  00000000  00000000  0002c144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc54d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000410c  00000000  00000000  000bc590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000c069c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060d8 	.word	0x080060d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080060d8 	.word	0x080060d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96a 	b.w	8000b88 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	460c      	mov	r4, r1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d14e      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008d8:	4694      	mov	ip, r2
 80008da:	458c      	cmp	ip, r1
 80008dc:	4686      	mov	lr, r0
 80008de:	fab2 f282 	clz	r2, r2
 80008e2:	d962      	bls.n	80009aa <__udivmoddi4+0xde>
 80008e4:	b14a      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e6:	f1c2 0320 	rsb	r3, r2, #32
 80008ea:	4091      	lsls	r1, r2
 80008ec:	fa20 f303 	lsr.w	r3, r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	4319      	orrs	r1, r3
 80008f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f f68c 	uxth.w	r6, ip
 8000902:	fbb1 f4f7 	udiv	r4, r1, r7
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb07 1114 	mls	r1, r7, r4, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb04 f106 	mul.w	r1, r4, r6
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000922:	f080 8112 	bcs.w	8000b4a <__udivmoddi4+0x27e>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 810f 	bls.w	8000b4a <__udivmoddi4+0x27e>
 800092c:	3c02      	subs	r4, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a59      	subs	r1, r3, r1
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb1 f0f7 	udiv	r0, r1, r7
 800093a:	fb07 1110 	mls	r1, r7, r0, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb00 f606 	mul.w	r6, r0, r6
 8000946:	429e      	cmp	r6, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x94>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000952:	f080 80fc 	bcs.w	8000b4e <__udivmoddi4+0x282>
 8000956:	429e      	cmp	r6, r3
 8000958:	f240 80f9 	bls.w	8000b4e <__udivmoddi4+0x282>
 800095c:	4463      	add	r3, ip
 800095e:	3802      	subs	r0, #2
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000966:	2100      	movs	r1, #0
 8000968:	b11d      	cbz	r5, 8000972 <__udivmoddi4+0xa6>
 800096a:	40d3      	lsrs	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	e9c5 3200 	strd	r3, r2, [r5]
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d905      	bls.n	8000986 <__udivmoddi4+0xba>
 800097a:	b10d      	cbz	r5, 8000980 <__udivmoddi4+0xb4>
 800097c:	e9c5 0100 	strd	r0, r1, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	4608      	mov	r0, r1
 8000984:	e7f5      	b.n	8000972 <__udivmoddi4+0xa6>
 8000986:	fab3 f183 	clz	r1, r3
 800098a:	2900      	cmp	r1, #0
 800098c:	d146      	bne.n	8000a1c <__udivmoddi4+0x150>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xcc>
 8000992:	4290      	cmp	r0, r2
 8000994:	f0c0 80f0 	bcc.w	8000b78 <__udivmoddi4+0x2ac>
 8000998:	1a86      	subs	r6, r0, r2
 800099a:	eb64 0303 	sbc.w	r3, r4, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e6      	beq.n	8000972 <__udivmoddi4+0xa6>
 80009a4:	e9c5 6300 	strd	r6, r3, [r5]
 80009a8:	e7e3      	b.n	8000972 <__udivmoddi4+0xa6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8090 	bne.w	8000ad0 <__udivmoddi4+0x204>
 80009b0:	eba1 040c 	sub.w	r4, r1, ip
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	fa1f f78c 	uxth.w	r7, ip
 80009bc:	2101      	movs	r1, #1
 80009be:	fbb4 f6f8 	udiv	r6, r4, r8
 80009c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009c6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ce:	fb07 f006 	mul.w	r0, r7, r6
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x11c>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f106 34ff 	add.w	r4, r6, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x11a>
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f200 80cd 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009e6:	4626      	mov	r6, r4
 80009e8:	1a1c      	subs	r4, r3, r0
 80009ea:	fa1f f38e 	uxth.w	r3, lr
 80009ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80009f2:	fb08 4410 	mls	r4, r8, r0, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb00 f707 	mul.w	r7, r0, r7
 80009fe:	429f      	cmp	r7, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x148>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x146>
 8000a0c:	429f      	cmp	r7, r3
 8000a0e:	f200 80b0 	bhi.w	8000b72 <__udivmoddi4+0x2a6>
 8000a12:	4620      	mov	r0, r4
 8000a14:	1bdb      	subs	r3, r3, r7
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	e7a5      	b.n	8000968 <__udivmoddi4+0x9c>
 8000a1c:	f1c1 0620 	rsb	r6, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 f706 	lsr.w	r7, r2, r6
 8000a26:	431f      	orrs	r7, r3
 8000a28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a30:	ea43 030c 	orr.w	r3, r3, ip
 8000a34:	40f4      	lsrs	r4, r6
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	0c38      	lsrs	r0, r7, #16
 8000a3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a40:	fbb4 fef0 	udiv	lr, r4, r0
 8000a44:	fa1f fc87 	uxth.w	ip, r7
 8000a48:	fb00 441e 	mls	r4, r0, lr, r4
 8000a4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a50:	fb0e f90c 	mul.w	r9, lr, ip
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x1a6>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a62:	f080 8084 	bcs.w	8000b6e <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8081 	bls.w	8000b6e <__udivmoddi4+0x2a2>
 8000a6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	eba4 0409 	sub.w	r4, r4, r9
 8000a76:	fa1f f983 	uxth.w	r9, r3
 8000a7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x1d2>
 8000a8e:	193c      	adds	r4, r7, r4
 8000a90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a94:	d267      	bcs.n	8000b66 <__udivmoddi4+0x29a>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0x29a>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000aa2:	fba0 9302 	umull	r9, r3, r0, r2
 8000aa6:	eba4 040c 	sub.w	r4, r4, ip
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	46ce      	mov	lr, r9
 8000aae:	469c      	mov	ip, r3
 8000ab0:	d351      	bcc.n	8000b56 <__udivmoddi4+0x28a>
 8000ab2:	d04e      	beq.n	8000b52 <__udivmoddi4+0x286>
 8000ab4:	b155      	cbz	r5, 8000acc <__udivmoddi4+0x200>
 8000ab6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aba:	eb64 040c 	sbc.w	r4, r4, ip
 8000abe:	fa04 f606 	lsl.w	r6, r4, r6
 8000ac2:	40cb      	lsrs	r3, r1
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	40cc      	lsrs	r4, r1
 8000ac8:	e9c5 6400 	strd	r6, r4, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	e750      	b.n	8000972 <__udivmoddi4+0xa6>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	430c      	orrs	r4, r1
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aec:	fa1f f78c 	uxth.w	r7, ip
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3110 	mls	r1, r8, r0, r3
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb00 f107 	mul.w	r1, r0, r7
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x24c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b0e:	d22c      	bcs.n	8000b6a <__udivmoddi4+0x29e>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	d92a      	bls.n	8000b6a <__udivmoddi4+0x29e>
 8000b14:	3802      	subs	r0, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b20:	fb08 3311 	mls	r3, r8, r1, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x276>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b38:	d213      	bcs.n	8000b62 <__udivmoddi4+0x296>
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	d911      	bls.n	8000b62 <__udivmoddi4+0x296>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4464      	add	r4, ip
 8000b42:	1ae4      	subs	r4, r4, r3
 8000b44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b48:	e739      	b.n	80009be <__udivmoddi4+0xf2>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	e6f0      	b.n	8000930 <__udivmoddi4+0x64>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0x94>
 8000b52:	45c8      	cmp	r8, r9
 8000b54:	d2ae      	bcs.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7a8      	b.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b62:	4631      	mov	r1, r6
 8000b64:	e7ed      	b.n	8000b42 <__udivmoddi4+0x276>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e799      	b.n	8000a9e <__udivmoddi4+0x1d2>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e7d4      	b.n	8000b18 <__udivmoddi4+0x24c>
 8000b6e:	46d6      	mov	lr, sl
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1a6>
 8000b72:	4463      	add	r3, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	e74d      	b.n	8000a14 <__udivmoddi4+0x148>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e70f      	b.n	80009a0 <__udivmoddi4+0xd4>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	e730      	b.n	80009e8 <__udivmoddi4+0x11c>
 8000b86:	bf00      	nop

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <HAL_UART_RxCpltCallback>:
unsigned int handle_flag = 0;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
   if(huart == &huart1)  // BT input
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a6d      	ldr	r2, [pc, #436]	@ (8000d4c <HAL_UART_RxCpltCallback+0x1c0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	f040 80d3 	bne.w	8000d44 <HAL_UART_RxCpltCallback+0x1b8>
   {

		if(strncmp(buf1,"A0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	496b      	ldr	r1, [pc, #428]	@ (8000d50 <HAL_UART_RxCpltCallback+0x1c4>)
 8000ba2:	486c      	ldr	r0, [pc, #432]	@ (8000d54 <HAL_UART_RxCpltCallback+0x1c8>)
 8000ba4:	f004 fd0a 	bl	80055bc <strncmp>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10a      	bne.n	8000bc4 <HAL_UART_RxCpltCallback+0x38>
		{
			handle_flag = 1;
 8000bae:	4b6a      	ldr	r3, [pc, #424]	@ (8000d58 <HAL_UART_RxCpltCallback+0x1cc>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
			htim1.Instance->CCR2 = 0;
 8000bb4:	4b69      	ldr	r3, [pc, #420]	@ (8000d5c <HAL_UART_RxCpltCallback+0x1d0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	639a      	str	r2, [r3, #56]	@ 0x38
			htim3.Instance->CCR1 = 0;
 8000bbc:	4b68      	ldr	r3, [pc, #416]	@ (8000d60 <HAL_UART_RxCpltCallback+0x1d4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	635a      	str	r2, [r3, #52]	@ 0x34

		}
		if(strncmp(buf1,"P0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	4967      	ldr	r1, [pc, #412]	@ (8000d64 <HAL_UART_RxCpltCallback+0x1d8>)
 8000bc8:	4862      	ldr	r0, [pc, #392]	@ (8000d54 <HAL_UART_RxCpltCallback+0x1c8>)
 8000bca:	f004 fcf7 	bl	80055bc <strncmp>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <HAL_UART_RxCpltCallback+0x4e>
		{
			handle_flag = 0;
 8000bd4:	4b60      	ldr	r3, [pc, #384]	@ (8000d58 <HAL_UART_RxCpltCallback+0x1cc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
		}
		if(handle_flag == 1)
 8000bda:	4b5f      	ldr	r3, [pc, #380]	@ (8000d58 <HAL_UART_RxCpltCallback+0x1cc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d173      	bne.n	8000cca <HAL_UART_RxCpltCallback+0x13e>
		{
			if(strncmp(buf1,"F0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8000be2:	2202      	movs	r2, #2
 8000be4:	4960      	ldr	r1, [pc, #384]	@ (8000d68 <HAL_UART_RxCpltCallback+0x1dc>)
 8000be6:	485b      	ldr	r0, [pc, #364]	@ (8000d54 <HAL_UART_RxCpltCallback+0x1c8>)
 8000be8:	f004 fce8 	bl	80055bc <strncmp>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d120      	bne.n	8000c34 <HAL_UART_RxCpltCallback+0xa8>
					{
					  // forward
					  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf8:	485c      	ldr	r0, [pc, #368]	@ (8000d6c <HAL_UART_RxCpltCallback+0x1e0>)
 8000bfa:	f001 feef 	bl	80029dc <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2108      	movs	r1, #8
 8000c02:	485b      	ldr	r0, [pc, #364]	@ (8000d70 <HAL_UART_RxCpltCallback+0x1e4>)
 8000c04:	f001 feea 	bl	80029dc <HAL_GPIO_WritePin>

					  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0e:	4858      	ldr	r0, [pc, #352]	@ (8000d70 <HAL_UART_RxCpltCallback+0x1e4>)
 8000c10:	f001 fee4 	bl	80029dc <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c1a:	4854      	ldr	r0, [pc, #336]	@ (8000d6c <HAL_UART_RxCpltCallback+0x1e0>)
 8000c1c:	f001 fede 	bl	80029dc <HAL_GPIO_WritePin>
					  htim1.Instance->CCR2 = speed;
 8000c20:	4b54      	ldr	r3, [pc, #336]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b4d      	ldr	r3, [pc, #308]	@ (8000d5c <HAL_UART_RxCpltCallback+0x1d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	639a      	str	r2, [r3, #56]	@ 0x38
					  htim3.Instance->CCR1 = speed;
 8000c2a:	4b52      	ldr	r3, [pc, #328]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <HAL_UART_RxCpltCallback+0x1d4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	635a      	str	r2, [r3, #52]	@ 0x34

					}
					if(strncmp(buf1,"B0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8000c34:	2202      	movs	r2, #2
 8000c36:	4950      	ldr	r1, [pc, #320]	@ (8000d78 <HAL_UART_RxCpltCallback+0x1ec>)
 8000c38:	4846      	ldr	r0, [pc, #280]	@ (8000d54 <HAL_UART_RxCpltCallback+0x1c8>)
 8000c3a:	f004 fcbf 	bl	80055bc <strncmp>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d120      	bne.n	8000c86 <HAL_UART_RxCpltCallback+0xfa>
					{
					  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c4a:	4848      	ldr	r0, [pc, #288]	@ (8000d6c <HAL_UART_RxCpltCallback+0x1e0>)
 8000c4c:	f001 fec6 	bl	80029dc <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2108      	movs	r1, #8
 8000c54:	4846      	ldr	r0, [pc, #280]	@ (8000d70 <HAL_UART_RxCpltCallback+0x1e4>)
 8000c56:	f001 fec1 	bl	80029dc <HAL_GPIO_WritePin>

					  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	4843      	ldr	r0, [pc, #268]	@ (8000d70 <HAL_UART_RxCpltCallback+0x1e4>)
 8000c62:	f001 febb 	bl	80029dc <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c6c:	483f      	ldr	r0, [pc, #252]	@ (8000d6c <HAL_UART_RxCpltCallback+0x1e0>)
 8000c6e:	f001 feb5 	bl	80029dc <HAL_GPIO_WritePin>

					  htim1.Instance->CCR2 = speed;
 8000c72:	4b40      	ldr	r3, [pc, #256]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b39      	ldr	r3, [pc, #228]	@ (8000d5c <HAL_UART_RxCpltCallback+0x1d0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	639a      	str	r2, [r3, #56]	@ 0x38
					  htim3.Instance->CCR1 = speed;
 8000c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b37      	ldr	r3, [pc, #220]	@ (8000d60 <HAL_UART_RxCpltCallback+0x1d4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	635a      	str	r2, [r3, #52]	@ 0x34

					}
					if(strncmp(buf1,"L0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8000c86:	2202      	movs	r2, #2
 8000c88:	493c      	ldr	r1, [pc, #240]	@ (8000d7c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c8a:	4832      	ldr	r0, [pc, #200]	@ (8000d54 <HAL_UART_RxCpltCallback+0x1c8>)
 8000c8c:	f004 fc96 	bl	80055bc <strncmp>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d108      	bne.n	8000ca8 <HAL_UART_RxCpltCallback+0x11c>
					{
						  htim1.Instance->CCR2 = 0;
 8000c96:	4b31      	ldr	r3, [pc, #196]	@ (8000d5c <HAL_UART_RxCpltCallback+0x1d0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	639a      	str	r2, [r3, #56]	@ 0x38
						  htim3.Instance->CCR1 = speed;
 8000c9e:	4b35      	ldr	r3, [pc, #212]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d60 <HAL_UART_RxCpltCallback+0x1d4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	635a      	str	r2, [r3, #52]	@ 0x34


					}
					if(strncmp(buf1,"R0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	4935      	ldr	r1, [pc, #212]	@ (8000d80 <HAL_UART_RxCpltCallback+0x1f4>)
 8000cac:	4829      	ldr	r0, [pc, #164]	@ (8000d54 <HAL_UART_RxCpltCallback+0x1c8>)
 8000cae:	f004 fc85 	bl	80055bc <strncmp>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d108      	bne.n	8000cca <HAL_UART_RxCpltCallback+0x13e>
					{

						  htim1.Instance->CCR2 = speed;
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b27      	ldr	r3, [pc, #156]	@ (8000d5c <HAL_UART_RxCpltCallback+0x1d0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	639a      	str	r2, [r3, #56]	@ 0x38
						  htim3.Instance->CCR1 = 0;
 8000cc2:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <HAL_UART_RxCpltCallback+0x1d4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	635a      	str	r2, [r3, #52]	@ 0x34
					}
		}

		if(strncmp(buf1,"T0",2) == 0)
 8000cca:	2202      	movs	r2, #2
 8000ccc:	492d      	ldr	r1, [pc, #180]	@ (8000d84 <HAL_UART_RxCpltCallback+0x1f8>)
 8000cce:	4821      	ldr	r0, [pc, #132]	@ (8000d54 <HAL_UART_RxCpltCallback+0x1c8>)
 8000cd0:	f004 fc74 	bl	80055bc <strncmp>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d110      	bne.n	8000cfc <HAL_UART_RxCpltCallback+0x170>
		{
		   if(speed == MaxSpeed) speed = MaxSpeed;
 8000cda:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b2a      	ldr	r3, [pc, #168]	@ (8000d88 <HAL_UART_RxCpltCallback+0x1fc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d104      	bne.n	8000cf0 <HAL_UART_RxCpltCallback+0x164>
 8000ce6:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <HAL_UART_RxCpltCallback+0x1fc>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a22      	ldr	r2, [pc, #136]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e005      	b.n	8000cfc <HAL_UART_RxCpltCallback+0x170>
		   else speed += 1000;
 8000cf0:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000cfa:	6013      	str	r3, [r2, #0]
		}
		if(strncmp(buf1,"X0",2) == 0)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	4923      	ldr	r1, [pc, #140]	@ (8000d8c <HAL_UART_RxCpltCallback+0x200>)
 8000d00:	4814      	ldr	r0, [pc, #80]	@ (8000d54 <HAL_UART_RxCpltCallback+0x1c8>)
 8000d02:	f004 fc5b 	bl	80055bc <strncmp>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10d      	bne.n	8000d28 <HAL_UART_RxCpltCallback+0x19c>
		{
		   if(speed == 0) speed = 0;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <HAL_UART_RxCpltCallback+0x190>
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e005      	b.n	8000d28 <HAL_UART_RxCpltCallback+0x19c>
		   else speed -= 1000;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000d24:	4a13      	ldr	r2, [pc, #76]	@ (8000d74 <HAL_UART_RxCpltCallback+0x1e8>)
 8000d26:	6013      	str	r3, [r2, #0]
}

      buf1[idx1++] = dum1;
 8000d28:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <HAL_UART_RxCpltCallback+0x204>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	4918      	ldr	r1, [pc, #96]	@ (8000d90 <HAL_UART_RxCpltCallback+0x204>)
 8000d30:	600a      	str	r2, [r1, #0]
 8000d32:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <HAL_UART_RxCpltCallback+0x208>)
 8000d34:	7811      	ldrb	r1, [r2, #0]
 8000d36:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_UART_RxCpltCallback+0x1c8>)
 8000d38:	54d1      	strb	r1, [r2, r3]
      HAL_UART_Receive_IT(&huart1, &dum1, 1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4915      	ldr	r1, [pc, #84]	@ (8000d94 <HAL_UART_RxCpltCallback+0x208>)
 8000d3e:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <HAL_UART_RxCpltCallback+0x1c0>)
 8000d40:	f003 faaf 	bl	80042a2 <HAL_UART_Receive_IT>

   }
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200001b4 	.word	0x200001b4
 8000d50:	080060f0 	.word	0x080060f0
 8000d54:	20000244 	.word	0x20000244
 8000d58:	200002c8 	.word	0x200002c8
 8000d5c:	20000094 	.word	0x20000094
 8000d60:	20000124 	.word	0x20000124
 8000d64:	080060f4 	.word	0x080060f4
 8000d68:	080060f8 	.word	0x080060f8
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020400 	.word	0x40020400
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	080060fc 	.word	0x080060fc
 8000d7c:	08006100 	.word	0x08006100
 8000d80:	08006104 	.word	0x08006104
 8000d84:	08006108 	.word	0x08006108
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	0800610c 	.word	0x0800610c
 8000d90:	200002ac 	.word	0x200002ac
 8000d94:	200002a8 	.word	0x200002a8

08000d98 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

	if(idx1)
 8000da0:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00b      	beq.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x28>
	   {
		  buf1[idx1] = 0;
 8000da8:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	54d1      	strb	r1, [r2, r3]
		  printf("UART1>%s\r\n",buf1);
 8000db2:	4906      	ldr	r1, [pc, #24]	@ (8000dcc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000db4:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000db6:	f004 fab1 	bl	800531c <iprintf>
		  idx1 = 0;
 8000dba:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
	   }

}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200002ac 	.word	0x200002ac
 8000dcc:	20000244 	.word	0x20000244
 8000dd0:	08006110 	.word	0x08006110

08000dd4 <SelfDrive_Mode>:

void SelfDrive_Mode()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	num1 = usDist1() * 100;
 8000dd8:	f000 fda2 	bl	8001920 <usDist1>
 8000ddc:	ec51 0b10 	vmov	r0, r1, d0
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	4b93      	ldr	r3, [pc, #588]	@ (8001034 <SelfDrive_Mode+0x260>)
 8000de6:	f7ff fa4b 	bl	8000280 <__aeabi_dmul>
 8000dea:	4602      	mov	r2, r0
 8000dec:	460b      	mov	r3, r1
 8000dee:	4610      	mov	r0, r2
 8000df0:	4619      	mov	r1, r3
 8000df2:	f7ff fd2b 	bl	800084c <__aeabi_d2iz>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a8f      	ldr	r2, [pc, #572]	@ (8001038 <SelfDrive_Mode+0x264>)
 8000dfa:	6013      	str	r3, [r2, #0]
	num2 = usDist2() * 100;
 8000dfc:	f000 fdf4 	bl	80019e8 <usDist2>
 8000e00:	ec51 0b10 	vmov	r0, r1, d0
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	4b8a      	ldr	r3, [pc, #552]	@ (8001034 <SelfDrive_Mode+0x260>)
 8000e0a:	f7ff fa39 	bl	8000280 <__aeabi_dmul>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fd19 	bl	800084c <__aeabi_d2iz>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a87      	ldr	r2, [pc, #540]	@ (800103c <SelfDrive_Mode+0x268>)
 8000e1e:	6013      	str	r3, [r2, #0]
	num3 = usDist3() * 100;
 8000e20:	f000 fe42 	bl	8001aa8 <usDist3>
 8000e24:	ec51 0b10 	vmov	r0, r1, d0
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	4b81      	ldr	r3, [pc, #516]	@ (8001034 <SelfDrive_Mode+0x260>)
 8000e2e:	f7ff fa27 	bl	8000280 <__aeabi_dmul>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff fd07 	bl	800084c <__aeabi_d2iz>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a7f      	ldr	r2, [pc, #508]	@ (8001040 <SelfDrive_Mode+0x26c>)
 8000e42:	6013      	str	r3, [r2, #0]
	num4 = usDist4() * 100;
 8000e44:	f000 fe8c 	bl	8001b60 <usDist4>
 8000e48:	ec51 0b10 	vmov	r0, r1, d0
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b78      	ldr	r3, [pc, #480]	@ (8001034 <SelfDrive_Mode+0x260>)
 8000e52:	f7ff fa15 	bl	8000280 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f7ff fcf5 	bl	800084c <__aeabi_d2iz>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a77      	ldr	r2, [pc, #476]	@ (8001044 <SelfDrive_Mode+0x270>)
 8000e66:	6013      	str	r3, [r2, #0]
	num5 = usDist5() * 100;
 8000e68:	f000 fede 	bl	8001c28 <usDist5>
 8000e6c:	ec51 0b10 	vmov	r0, r1, d0
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	4b6f      	ldr	r3, [pc, #444]	@ (8001034 <SelfDrive_Mode+0x260>)
 8000e76:	f7ff fa03 	bl	8000280 <__aeabi_dmul>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fce3 	bl	800084c <__aeabi_d2iz>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a6f      	ldr	r2, [pc, #444]	@ (8001048 <SelfDrive_Mode+0x274>)
 8000e8a:	6013      	str	r3, [r2, #0]

	while(num1 <= 0) num1 = usDist1() * 100;
 8000e8c:	e011      	b.n	8000eb2 <SelfDrive_Mode+0xde>
 8000e8e:	f000 fd47 	bl	8001920 <usDist1>
 8000e92:	ec51 0b10 	vmov	r0, r1, d0
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	4b66      	ldr	r3, [pc, #408]	@ (8001034 <SelfDrive_Mode+0x260>)
 8000e9c:	f7ff f9f0 	bl	8000280 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fcd0 	bl	800084c <__aeabi_d2iz>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a62      	ldr	r2, [pc, #392]	@ (8001038 <SelfDrive_Mode+0x264>)
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b61      	ldr	r3, [pc, #388]	@ (8001038 <SelfDrive_Mode+0x264>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dde9      	ble.n	8000e8e <SelfDrive_Mode+0xba>
	while(num2 <= 0) num2 = usDist2() * 100;
 8000eba:	e011      	b.n	8000ee0 <SelfDrive_Mode+0x10c>
 8000ebc:	f000 fd94 	bl	80019e8 <usDist2>
 8000ec0:	ec51 0b10 	vmov	r0, r1, d0
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8001034 <SelfDrive_Mode+0x260>)
 8000eca:	f7ff f9d9 	bl	8000280 <__aeabi_dmul>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fcb9 	bl	800084c <__aeabi_d2iz>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a57      	ldr	r2, [pc, #348]	@ (800103c <SelfDrive_Mode+0x268>)
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b56      	ldr	r3, [pc, #344]	@ (800103c <SelfDrive_Mode+0x268>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dde9      	ble.n	8000ebc <SelfDrive_Mode+0xe8>
	while(num3 <= 0) num3 = usDist3() * 100;
 8000ee8:	e011      	b.n	8000f0e <SelfDrive_Mode+0x13a>
 8000eea:	f000 fddd 	bl	8001aa8 <usDist3>
 8000eee:	ec51 0b10 	vmov	r0, r1, d0
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8001034 <SelfDrive_Mode+0x260>)
 8000ef8:	f7ff f9c2 	bl	8000280 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fca2 	bl	800084c <__aeabi_d2iz>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8001040 <SelfDrive_Mode+0x26c>)
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001040 <SelfDrive_Mode+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	dde9      	ble.n	8000eea <SelfDrive_Mode+0x116>
	while(num4 <= 0) num4 = usDist4() * 100;
 8000f16:	e011      	b.n	8000f3c <SelfDrive_Mode+0x168>
 8000f18:	f000 fe22 	bl	8001b60 <usDist4>
 8000f1c:	ec51 0b10 	vmov	r0, r1, d0
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	4b43      	ldr	r3, [pc, #268]	@ (8001034 <SelfDrive_Mode+0x260>)
 8000f26:	f7ff f9ab 	bl	8000280 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	f7ff fc8b 	bl	800084c <__aeabi_d2iz>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a42      	ldr	r2, [pc, #264]	@ (8001044 <SelfDrive_Mode+0x270>)
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <SelfDrive_Mode+0x270>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dde9      	ble.n	8000f18 <SelfDrive_Mode+0x144>
	while(num5 <= 0) num5 = usDist5() * 100;
 8000f44:	e011      	b.n	8000f6a <SelfDrive_Mode+0x196>
 8000f46:	f000 fe6f 	bl	8001c28 <usDist5>
 8000f4a:	ec51 0b10 	vmov	r0, r1, d0
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b38      	ldr	r3, [pc, #224]	@ (8001034 <SelfDrive_Mode+0x260>)
 8000f54:	f7ff f994 	bl	8000280 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fc74 	bl	800084c <__aeabi_d2iz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a38      	ldr	r2, [pc, #224]	@ (8001048 <SelfDrive_Mode+0x274>)
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b37      	ldr	r3, [pc, #220]	@ (8001048 <SelfDrive_Mode+0x274>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	dde9      	ble.n	8000f46 <SelfDrive_Mode+0x172>
	//printf("num1 : %d  num2 : %d  num3 : %d  num4 : %d  num5 : %d\r\n", num1, num2, num3, num4, num5);
	//printf("%d	%d\r\n", abs(num4-num5), abs(num2-num3));

	if(num1 >= Front_Dist)
 8000f72:	4b31      	ldr	r3, [pc, #196]	@ (8001038 <SelfDrive_Mode+0x264>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b35      	ldr	r3, [pc, #212]	@ (800104c <SelfDrive_Mode+0x278>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	db74      	blt.n	8001068 <SelfDrive_Mode+0x294>
	{

		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f84:	4832      	ldr	r0, [pc, #200]	@ (8001050 <SelfDrive_Mode+0x27c>)
 8000f86:	f001 fd29 	bl	80029dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	4831      	ldr	r0, [pc, #196]	@ (8001054 <SelfDrive_Mode+0x280>)
 8000f90:	f001 fd24 	bl	80029dc <HAL_GPIO_WritePin>
		//LEFT FRONT
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f9a:	482e      	ldr	r0, [pc, #184]	@ (8001054 <SelfDrive_Mode+0x280>)
 8000f9c:	f001 fd1e 	bl	80029dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa6:	482a      	ldr	r0, [pc, #168]	@ (8001050 <SelfDrive_Mode+0x27c>)
 8000fa8:	f001 fd18 	bl	80029dc <HAL_GPIO_WritePin>

		if(num2 > Digonal_Dist && num3 > Digonal_Dist)
 8000fac:	4b23      	ldr	r3, [pc, #140]	@ (800103c <SelfDrive_Mode+0x268>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <SelfDrive_Mode+0x284>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dd10      	ble.n	8000fda <SelfDrive_Mode+0x206>
 8000fb8:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <SelfDrive_Mode+0x26c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <SelfDrive_Mode+0x284>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dd0a      	ble.n	8000fda <SelfDrive_Mode+0x206>
		{
			htim1.Instance->CCR2 = speed;
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <SelfDrive_Mode+0x288>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <SelfDrive_Mode+0x28c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	639a      	str	r2, [r3, #56]	@ 0x38
			htim3.Instance->CCR1 = speed;
 8000fce:	4b23      	ldr	r3, [pc, #140]	@ (800105c <SelfDrive_Mode+0x288>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b24      	ldr	r3, [pc, #144]	@ (8001064 <SelfDrive_Mode+0x290>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fd8:	e0a0      	b.n	800111c <SelfDrive_Mode+0x348>
		}
		else if(num2 <= Digonal_Dist && num3 > Digonal_Dist)
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <SelfDrive_Mode+0x268>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <SelfDrive_Mode+0x284>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	dc0f      	bgt.n	8001006 <SelfDrive_Mode+0x232>
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <SelfDrive_Mode+0x26c>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <SelfDrive_Mode+0x284>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dd09      	ble.n	8001006 <SelfDrive_Mode+0x232>
		{
			htim1.Instance->CCR2 = speed;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <SelfDrive_Mode+0x288>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <SelfDrive_Mode+0x28c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	639a      	str	r2, [r3, #56]	@ 0x38
			htim3.Instance->CCR1 = 0;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <SelfDrive_Mode+0x290>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	635a      	str	r2, [r3, #52]	@ 0x34
 8001004:	e08a      	b.n	800111c <SelfDrive_Mode+0x348>
		}
		else if(num3 <= Digonal_Dist && num2 > Digonal_Dist)
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <SelfDrive_Mode+0x26c>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <SelfDrive_Mode+0x284>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	f300 8084 	bgt.w	800111c <SelfDrive_Mode+0x348>
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <SelfDrive_Mode+0x268>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <SelfDrive_Mode+0x284>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	dd7d      	ble.n	800111c <SelfDrive_Mode+0x348>
		{
			htim1.Instance->CCR2 = 0;
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <SelfDrive_Mode+0x28c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2200      	movs	r2, #0
 8001026:	639a      	str	r2, [r3, #56]	@ 0x38
			htim3.Instance->CCR1 = speed;
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <SelfDrive_Mode+0x288>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <SelfDrive_Mode+0x290>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(1500);
		}
	}


}
 8001032:	e073      	b.n	800111c <SelfDrive_Mode+0x348>
 8001034:	40590000 	.word	0x40590000
 8001038:	200002b0 	.word	0x200002b0
 800103c:	200002b4 	.word	0x200002b4
 8001040:	200002b8 	.word	0x200002b8
 8001044:	200002bc 	.word	0x200002bc
 8001048:	200002c0 	.word	0x200002c0
 800104c:	20000000 	.word	0x20000000
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	20000004 	.word	0x20000004
 800105c:	2000000c 	.word	0x2000000c
 8001060:	20000094 	.word	0x20000094
 8001064:	20000124 	.word	0x20000124
	else if(num1 < Front_Dist)
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <SelfDrive_Mode+0x34c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <SelfDrive_Mode+0x350>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	da53      	bge.n	800111c <SelfDrive_Mode+0x348>
		cnt++;
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <SelfDrive_Mode+0x354>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	4a2b      	ldr	r2, [pc, #172]	@ (8001128 <SelfDrive_Mode+0x354>)
 800107c:	6013      	str	r3, [r2, #0]
		speed = MaxSpeed;
 800107e:	4b2b      	ldr	r3, [pc, #172]	@ (800112c <SelfDrive_Mode+0x358>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a2b      	ldr	r2, [pc, #172]	@ (8001130 <SelfDrive_Mode+0x35c>)
 8001084:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800108c:	4829      	ldr	r0, [pc, #164]	@ (8001134 <SelfDrive_Mode+0x360>)
 800108e:	f001 fca5 	bl	80029dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2108      	movs	r1, #8
 8001096:	4828      	ldr	r0, [pc, #160]	@ (8001138 <SelfDrive_Mode+0x364>)
 8001098:	f001 fca0 	bl	80029dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010a2:	4825      	ldr	r0, [pc, #148]	@ (8001138 <SelfDrive_Mode+0x364>)
 80010a4:	f001 fc9a 	bl	80029dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ae:	4821      	ldr	r0, [pc, #132]	@ (8001134 <SelfDrive_Mode+0x360>)
 80010b0:	f001 fc94 	bl	80029dc <HAL_GPIO_WritePin>
		htim1.Instance->CCR2 = speed;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <SelfDrive_Mode+0x35c>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <SelfDrive_Mode+0x368>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance->CCR1 = speed;
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <SelfDrive_Mode+0x35c>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <SelfDrive_Mode+0x36c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(100);
 80010c8:	2064      	movs	r0, #100	@ 0x64
 80010ca:	f001 f923 	bl	8002314 <HAL_Delay>
			cnt = 0;
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <SelfDrive_Mode+0x354>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
			if(num4 > num5)
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <SelfDrive_Mode+0x370>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <SelfDrive_Mode+0x374>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dd09      	ble.n	80010f4 <SelfDrive_Mode+0x320>
				htim1.Instance->CCR2 = speed;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <SelfDrive_Mode+0x35c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <SelfDrive_Mode+0x368>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	639a      	str	r2, [r3, #56]	@ 0x38
				htim3.Instance->CCR1 = 0;
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <SelfDrive_Mode+0x36c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010f2:	e00e      	b.n	8001112 <SelfDrive_Mode+0x33e>
			else if(num5 > num4)
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <SelfDrive_Mode+0x374>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <SelfDrive_Mode+0x370>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dd08      	ble.n	8001112 <SelfDrive_Mode+0x33e>
				htim1.Instance->CCR2 = 0;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <SelfDrive_Mode+0x368>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2200      	movs	r2, #0
 8001106:	639a      	str	r2, [r3, #56]	@ 0x38
				htim3.Instance->CCR1 = speed;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <SelfDrive_Mode+0x35c>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <SelfDrive_Mode+0x36c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(1500);
 8001112:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001116:	f001 f8fd 	bl	8002314 <HAL_Delay>
}
 800111a:	e7ff      	b.n	800111c <SelfDrive_Mode+0x348>
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200002b0 	.word	0x200002b0
 8001124:	20000000 	.word	0x20000000
 8001128:	200002c4 	.word	0x200002c4
 800112c:	20000008 	.word	0x20000008
 8001130:	2000000c 	.word	0x2000000c
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	20000094 	.word	0x20000094
 8001140:	20000124 	.word	0x20000124
 8001144:	200002bc 	.word	0x200002bc
 8001148:	200002c0 	.word	0x200002c0

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001150:	f001 f86e 	bl	8002230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001154:	f000 f85a 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f000 fac6 	bl	80016e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800115c:	f000 fa9a 	bl	8001694 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001160:	f000 f95e 	bl	8001420 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001164:	f000 f9a8 	bl	80014b8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001168:	f000 f8ba 	bl	80012e0 <MX_TIM1_Init>
  MX_TIM5_Init();
 800116c:	f000 fa1a 	bl	80015a4 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001170:	f000 fa66 	bl	8001640 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  ProgramStart();
 8001174:	f000 fb84 	bl	8001880 <ProgramStart>




  HAL_TIM_Base_Start(&htim2);
 8001178:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <main+0xa4>)
 800117a:	f002 f931 	bl	80033e0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800117e:	2104      	movs	r1, #4
 8001180:	481c      	ldr	r0, [pc, #112]	@ (80011f4 <main+0xa8>)
 8001182:	f002 f9e1 	bl	8003548 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001186:	2100      	movs	r1, #0
 8001188:	481b      	ldr	r0, [pc, #108]	@ (80011f8 <main+0xac>)
 800118a:	f002 f9dd 	bl	8003548 <HAL_TIM_PWM_Start>

  HAL_UART_RxCpltCallback(&huart1);
 800118e:	481b      	ldr	r0, [pc, #108]	@ (80011fc <main+0xb0>)
 8001190:	f7ff fcfc 	bl	8000b8c <HAL_UART_RxCpltCallback>
  HAL_TIM_PeriodElapsedCallback(&htim2);
 8001194:	4816      	ldr	r0, [pc, #88]	@ (80011f0 <main+0xa4>)
 8001196:	f7ff fdff 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>



  //Left Motor Forward
  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a0:	4817      	ldr	r0, [pc, #92]	@ (8001200 <main+0xb4>)
 80011a2:	f001 fc1b 	bl	80029dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80011a6:	2201      	movs	r2, #1
 80011a8:	2108      	movs	r1, #8
 80011aa:	4816      	ldr	r0, [pc, #88]	@ (8001204 <main+0xb8>)
 80011ac:	f001 fc16 	bl	80029dc <HAL_GPIO_WritePin>
  //Right Motor Forward
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011b6:	4813      	ldr	r0, [pc, #76]	@ (8001204 <main+0xb8>)
 80011b8:	f001 fc10 	bl	80029dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c2:	480f      	ldr	r0, [pc, #60]	@ (8001200 <main+0xb4>)
 80011c4:	f001 fc0a 	bl	80029dc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_RxCpltCallback(&huart1);
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <main+0xb0>)
 80011ca:	f7ff fcdf 	bl	8000b8c <HAL_UART_RxCpltCallback>
	  HAL_TIM_PeriodElapsedCallback(&htim2);
 80011ce:	4808      	ldr	r0, [pc, #32]	@ (80011f0 <main+0xa4>)
 80011d0:	f7ff fde2 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>





	  if(handle_flag == 0)
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <main+0xbc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <main+0x96>
	  {
		  SelfDrive_Mode();
 80011dc:	f7ff fdfa 	bl	8000dd4 <SelfDrive_Mode>
 80011e0:	e7f2      	b.n	80011c8 <main+0x7c>
	  }
	  else
	  {
		  HAL_UART_RxCpltCallback(&huart1);
 80011e2:	4806      	ldr	r0, [pc, #24]	@ (80011fc <main+0xb0>)
 80011e4:	f7ff fcd2 	bl	8000b8c <HAL_UART_RxCpltCallback>
		  HAL_TIM_PeriodElapsedCallback(&htim2);
 80011e8:	4801      	ldr	r0, [pc, #4]	@ (80011f0 <main+0xa4>)
 80011ea:	f7ff fdd5 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
	  HAL_UART_RxCpltCallback(&huart1);
 80011ee:	e7eb      	b.n	80011c8 <main+0x7c>
 80011f0:	200000dc 	.word	0x200000dc
 80011f4:	20000094 	.word	0x20000094
 80011f8:	20000124 	.word	0x20000124
 80011fc:	200001b4 	.word	0x200001b4
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	200002c8 	.word	0x200002c8

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	@ 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	2230      	movs	r2, #48	@ 0x30
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f004 f9c6 	bl	80055ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	4b28      	ldr	r3, [pc, #160]	@ (80012d8 <SystemClock_Config+0xcc>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	4a27      	ldr	r2, [pc, #156]	@ (80012d8 <SystemClock_Config+0xcc>)
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001240:	4b25      	ldr	r3, [pc, #148]	@ (80012d8 <SystemClock_Config+0xcc>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <SystemClock_Config+0xd0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <SystemClock_Config+0xd0>)
 8001256:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <SystemClock_Config+0xd0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126c:	2301      	movs	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001270:	2310      	movs	r3, #16
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001274:	2302      	movs	r3, #2
 8001276:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800127c:	2310      	movs	r3, #16
 800127e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001280:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001284:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001286:	2304      	movs	r3, #4
 8001288:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800128a:	2304      	movs	r3, #4
 800128c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4618      	mov	r0, r3
 8001294:	f001 fbbc 	bl	8002a10 <HAL_RCC_OscConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800129e:	f000 fad7 	bl	8001850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a2:	230f      	movs	r3, #15
 80012a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a6:	2302      	movs	r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2102      	movs	r1, #2
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fe1e 	bl	8002f00 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012ca:	f000 fac1 	bl	8001850 <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	@ 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b096      	sub	sp, #88	@ 0x58
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2220      	movs	r2, #32
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f004 f947 	bl	80055ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800131e:	4b3e      	ldr	r3, [pc, #248]	@ (8001418 <MX_TIM1_Init+0x138>)
 8001320:	4a3e      	ldr	r2, [pc, #248]	@ (800141c <MX_TIM1_Init+0x13c>)
 8001322:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001324:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <MX_TIM1_Init+0x138>)
 8001326:	2253      	movs	r2, #83	@ 0x53
 8001328:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <MX_TIM1_Init+0x138>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8001330:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <MX_TIM1_Init+0x138>)
 8001332:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001336:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b37      	ldr	r3, [pc, #220]	@ (8001418 <MX_TIM1_Init+0x138>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800133e:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <MX_TIM1_Init+0x138>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <MX_TIM1_Init+0x138>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800134a:	4833      	ldr	r0, [pc, #204]	@ (8001418 <MX_TIM1_Init+0x138>)
 800134c:	f001 fff8 	bl	8003340 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001356:	f000 fa7b 	bl	8001850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001360:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001364:	4619      	mov	r1, r3
 8001366:	482c      	ldr	r0, [pc, #176]	@ (8001418 <MX_TIM1_Init+0x138>)
 8001368:	f002 fa60 	bl	800382c <HAL_TIM_ConfigClockSource>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001372:	f000 fa6d 	bl	8001850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001376:	4828      	ldr	r0, [pc, #160]	@ (8001418 <MX_TIM1_Init+0x138>)
 8001378:	f002 f88c 	bl	8003494 <HAL_TIM_PWM_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001382:	f000 fa65 	bl	8001850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001392:	4619      	mov	r1, r3
 8001394:	4820      	ldr	r0, [pc, #128]	@ (8001418 <MX_TIM1_Init+0x138>)
 8001396:	f002 fde9 	bl	8003f6c <HAL_TIMEx_MasterConfigSynchronization>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013a0:	f000 fa56 	bl	8001850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a4:	2360      	movs	r3, #96	@ 0x60
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c4:	2204      	movs	r2, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4813      	ldr	r0, [pc, #76]	@ (8001418 <MX_TIM1_Init+0x138>)
 80013ca:	f002 f96d 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80013d4:	f000 fa3c 	bl	8001850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4807      	ldr	r0, [pc, #28]	@ (8001418 <MX_TIM1_Init+0x138>)
 80013fc:	f002 fe24 	bl	8004048 <HAL_TIMEx_ConfigBreakDeadTime>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001406:	f000 fa23 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800140a:	4803      	ldr	r0, [pc, #12]	@ (8001418 <MX_TIM1_Init+0x138>)
 800140c:	f000 fcf2 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 8001410:	bf00      	nop
 8001412:	3758      	adds	r7, #88	@ 0x58
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000094 	.word	0x20000094
 800141c:	40010000 	.word	0x40010000

08001420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <MX_TIM2_Init+0x94>)
 800143e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001442:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001444:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <MX_TIM2_Init+0x94>)
 8001446:	2253      	movs	r2, #83	@ 0x53
 8001448:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_TIM2_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001450:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_TIM2_Init+0x94>)
 8001452:	f04f 32ff 	mov.w	r2, #4294967295
 8001456:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_TIM2_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <MX_TIM2_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001464:	4813      	ldr	r0, [pc, #76]	@ (80014b4 <MX_TIM2_Init+0x94>)
 8001466:	f001 ff6b 	bl	8003340 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001470:	f000 f9ee 	bl	8001850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4619      	mov	r1, r3
 8001480:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <MX_TIM2_Init+0x94>)
 8001482:	f002 f9d3 	bl	800382c <HAL_TIM_ConfigClockSource>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800148c:	f000 f9e0 	bl	8001850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MX_TIM2_Init+0x94>)
 800149e:	f002 fd65 	bl	8003f6c <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a8:	f000 f9d2 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200000dc 	.word	0x200000dc

080014b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	@ 0x38
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	615a      	str	r2, [r3, #20]
 80014e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e8:	4b2c      	ldr	r3, [pc, #176]	@ (800159c <MX_TIM3_Init+0xe4>)
 80014ea:	4a2d      	ldr	r2, [pc, #180]	@ (80015a0 <MX_TIM3_Init+0xe8>)
 80014ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80014ee:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <MX_TIM3_Init+0xe4>)
 80014f0:	2253      	movs	r2, #83	@ 0x53
 80014f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <MX_TIM3_Init+0xe4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 80014fa:	4b28      	ldr	r3, [pc, #160]	@ (800159c <MX_TIM3_Init+0xe4>)
 80014fc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001500:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001502:	4b26      	ldr	r3, [pc, #152]	@ (800159c <MX_TIM3_Init+0xe4>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001508:	4b24      	ldr	r3, [pc, #144]	@ (800159c <MX_TIM3_Init+0xe4>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800150e:	4823      	ldr	r0, [pc, #140]	@ (800159c <MX_TIM3_Init+0xe4>)
 8001510:	f001 ff16 	bl	8003340 <HAL_TIM_Base_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800151a:	f000 f999 	bl	8001850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001524:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001528:	4619      	mov	r1, r3
 800152a:	481c      	ldr	r0, [pc, #112]	@ (800159c <MX_TIM3_Init+0xe4>)
 800152c:	f002 f97e 	bl	800382c <HAL_TIM_ConfigClockSource>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001536:	f000 f98b 	bl	8001850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800153a:	4818      	ldr	r0, [pc, #96]	@ (800159c <MX_TIM3_Init+0xe4>)
 800153c:	f001 ffaa 	bl	8003494 <HAL_TIM_PWM_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001546:	f000 f983 	bl	8001850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	4619      	mov	r1, r3
 8001558:	4810      	ldr	r0, [pc, #64]	@ (800159c <MX_TIM3_Init+0xe4>)
 800155a:	f002 fd07 	bl	8003f6c <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001564:	f000 f974 	bl	8001850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001568:	2360      	movs	r3, #96	@ 0x60
 800156a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	4807      	ldr	r0, [pc, #28]	@ (800159c <MX_TIM3_Init+0xe4>)
 8001580:	f002 f892 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800158a:	f000 f961 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800158e:	4803      	ldr	r0, [pc, #12]	@ (800159c <MX_TIM3_Init+0xe4>)
 8001590:	f000 fc30 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 8001594:	bf00      	nop
 8001596:	3738      	adds	r7, #56	@ 0x38
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000124 	.word	0x20000124
 80015a0:	40000400 	.word	0x40000400

080015a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	463b      	mov	r3, r7
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <MX_TIM5_Init+0x94>)
 80015c2:	4a1e      	ldr	r2, [pc, #120]	@ (800163c <MX_TIM5_Init+0x98>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <MX_TIM5_Init+0x94>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <MX_TIM5_Init+0x94>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_TIM5_Init+0x94>)
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <MX_TIM5_Init+0x94>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <MX_TIM5_Init+0x94>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015e6:	4814      	ldr	r0, [pc, #80]	@ (8001638 <MX_TIM5_Init+0x94>)
 80015e8:	f001 feaa 	bl	8003340 <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80015f2:	f000 f92d 	bl	8001850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	@ (8001638 <MX_TIM5_Init+0x94>)
 8001604:	f002 f912 	bl	800382c <HAL_TIM_ConfigClockSource>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800160e:	f000 f91f 	bl	8001850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800161a:	463b      	mov	r3, r7
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	@ (8001638 <MX_TIM5_Init+0x94>)
 8001620:	f002 fca4 	bl	8003f6c <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800162a:	f000 f911 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000016c 	.word	0x2000016c
 800163c:	40000c00 	.word	0x40000c00

08001640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <MX_USART1_UART_Init+0x50>)
 8001648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 800164c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001678:	f002 fd38 	bl	80040ec <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001682:	f000 f8e5 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200001b4 	.word	0x200001b4
 8001690:	40011000 	.word	0x40011000

08001694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_USART2_UART_Init+0x4c>)
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <MX_USART2_UART_Init+0x50>)
 800169c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <MX_USART2_UART_Init+0x4c>)
 80016cc:	f002 fd0e 	bl	80040ec <HAL_UART_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016d6:	f000 f8bb 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001fc 	.word	0x200001fc
 80016e4:	40004400 	.word	0x40004400

080016e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b4f      	ldr	r3, [pc, #316]	@ (8001840 <MX_GPIO_Init+0x158>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a4e      	ldr	r2, [pc, #312]	@ (8001840 <MX_GPIO_Init+0x158>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <MX_GPIO_Init+0x158>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b48      	ldr	r3, [pc, #288]	@ (8001840 <MX_GPIO_Init+0x158>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a47      	ldr	r2, [pc, #284]	@ (8001840 <MX_GPIO_Init+0x158>)
 8001724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b45      	ldr	r3, [pc, #276]	@ (8001840 <MX_GPIO_Init+0x158>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <MX_GPIO_Init+0x158>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a40      	ldr	r2, [pc, #256]	@ (8001840 <MX_GPIO_Init+0x158>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b3e      	ldr	r3, [pc, #248]	@ (8001840 <MX_GPIO_Init+0x158>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <MX_GPIO_Init+0x158>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a39      	ldr	r2, [pc, #228]	@ (8001840 <MX_GPIO_Init+0x158>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <MX_GPIO_Init+0x158>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|TRIG5_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	2141      	movs	r1, #65	@ 0x41
 8001772:	4834      	ldr	r0, [pc, #208]	@ (8001844 <MX_GPIO_Init+0x15c>)
 8001774:	f001 f932 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin|TRIG4_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 6152 	mov.w	r1, #3360	@ 0xd20
 800177e:	4832      	ldr	r0, [pc, #200]	@ (8001848 <MX_GPIO_Init+0x160>)
 8001780:	f001 f92c 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG3_Pin|D6_Pin|TRIG1_Pin|TRIG2_Pin
 8001784:	2200      	movs	r2, #0
 8001786:	f24a 413c 	movw	r1, #42044	@ 0xa43c
 800178a:	4830      	ldr	r0, [pc, #192]	@ (800184c <MX_GPIO_Init+0x164>)
 800178c:	f001 f926 	bl	80029dc <HAL_GPIO_WritePin>
                          |D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001796:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800179a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4827      	ldr	r0, [pc, #156]	@ (8001844 <MX_GPIO_Init+0x15c>)
 80017a8:	f000 ff7c 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin TRIG5_Pin */
  GPIO_InitStruct.Pin = A0_Pin|TRIG5_Pin;
 80017ac:	2341      	movs	r3, #65	@ 0x41
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4820      	ldr	r0, [pc, #128]	@ (8001844 <MX_GPIO_Init+0x15c>)
 80017c4:	f000 ff6e 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin TRIG4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin|TRIG4_Pin;
 80017c8:	f44f 6352 	mov.w	r3, #3360	@ 0xd20
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4819      	ldr	r0, [pc, #100]	@ (8001848 <MX_GPIO_Init+0x160>)
 80017e2:	f000 ff5f 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO1_Pin ECHO5_Pin */
  GPIO_InitStruct.Pin = ECHO1_Pin|ECHO5_Pin;
 80017e6:	2330      	movs	r3, #48	@ 0x30
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4812      	ldr	r0, [pc, #72]	@ (8001844 <MX_GPIO_Init+0x15c>)
 80017fa:	f000 ff53 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO3_Pin ECHO4_Pin ECHO2_Pin */
  GPIO_InitStruct.Pin = ECHO3_Pin|ECHO4_Pin|ECHO2_Pin;
 80017fe:	f245 0302 	movw	r3, #20482	@ 0x5002
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	480e      	ldr	r0, [pc, #56]	@ (800184c <MX_GPIO_Init+0x164>)
 8001814:	f000 ff46 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG3_Pin D6_Pin TRIG1_Pin TRIG2_Pin
                           D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = TRIG3_Pin|D6_Pin|TRIG1_Pin|TRIG2_Pin
 8001818:	f24a 433c 	movw	r3, #42044	@ 0xa43c
 800181c:	617b      	str	r3, [r7, #20]
                          |D3_Pin|D5_Pin|D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4806      	ldr	r0, [pc, #24]	@ (800184c <MX_GPIO_Init+0x164>)
 8001832:	f000 ff37 	bl	80026a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	@ 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40020800 	.word	0x40020800
 8001848:	40020000 	.word	0x40020000
 800184c:	40020400 	.word	0x40020400

08001850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
}
 8001856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <Error_Handler+0x8>

0800185c <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim2;

int __io_putchar(int ch)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8001864:	1d39      	adds	r1, r7, #4
 8001866:	230a      	movs	r3, #10
 8001868:	2201      	movs	r2, #1
 800186a:	4804      	ldr	r0, [pc, #16]	@ (800187c <__io_putchar+0x20>)
 800186c:	f002 fc8e 	bl	800418c <HAL_UART_Transmit>
   return ch;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200001fc 	.word	0x200001fc

08001880 <ProgramStart>:
{

   while(*s) (*s != '\r') ? __io_putchar(*s++) : (__io_putchar(*s++), __io_putchar('\n'));         //enable Enter key
}

void ProgramStart(){
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
   printf("\033[2J");   // screen clear
 8001884:	4808      	ldr	r0, [pc, #32]	@ (80018a8 <ProgramStart+0x28>)
 8001886:	f003 fd49 	bl	800531c <iprintf>
   printf("\033[1;1H");   // Move cursor pos to (1,1)
 800188a:	4808      	ldr	r0, [pc, #32]	@ (80018ac <ProgramStart+0x2c>)
 800188c:	f003 fd46 	bl	800531c <iprintf>
   printf("Program Started ");
 8001890:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <ProgramStart+0x30>)
 8001892:	f003 fd43 	bl	800531c <iprintf>
   Wait(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f000 f80c 	bl	80018b4 <Wait>
   printf("\033[2J");   // screen clear
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <ProgramStart+0x28>)
 800189e:	f003 fd3d 	bl	800531c <iprintf>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	0800611c 	.word	0x0800611c
 80018ac:	08006124 	.word	0x08006124
 80018b0:	0800612c 	.word	0x0800612c

080018b4 <Wait>:

void Wait(int o)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	   printf("Press Blue button to continue\r\n");
 80018bc:	4808      	ldr	r0, [pc, #32]	@ (80018e0 <Wait+0x2c>)
 80018be:	f003 fd95 	bl	80053ec <puts>
	   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 80018c2:	bf00      	nop
 80018c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018c8:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <Wait+0x30>)
 80018ca:	f001 f86f 	bl	80029ac <HAL_GPIO_ReadPin>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f7      	bne.n	80018c4 <Wait+0x10>

}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	08006140 	.word	0x08006140
 80018e4:	40020800 	.word	0x40020800

080018e8 <usDelay>:


void usDelay(int us) // micro-second based Delay
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	volatile uint32_t t1 = htim2.Instance->CNT;
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <usDelay+0x30>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	60fb      	str	r3, [r7, #12]
	while((htim2.Instance->CNT -t1) < us);
 80018f8:	bf00      	nop
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <usDelay+0x30>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad2      	subs	r2, r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d3f7      	bcc.n	80018fa <usDelay+0x12>
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	200000dc 	.word	0x200000dc
 800191c:	00000000 	.word	0x00000000

08001920 <usDist1>:

double usDist1()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800192c:	482a      	ldr	r0, [pc, #168]	@ (80019d8 <usDist1+0xb8>)
 800192e:	f001 f855 	bl	80029dc <HAL_GPIO_WritePin>
	usDelay(10);
 8001932:	200a      	movs	r0, #10
 8001934:	f7ff ffd8 	bl	80018e8 <usDelay>
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 1);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800193e:	4826      	ldr	r0, [pc, #152]	@ (80019d8 <usDist1+0xb8>)
 8001940:	f001 f84c 	bl	80029dc <HAL_GPIO_WritePin>
	usDelay(10);
 8001944:	200a      	movs	r0, #10
 8001946:	f7ff ffcf 	bl	80018e8 <usDelay>
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001950:	4821      	ldr	r0, [pc, #132]	@ (80019d8 <usDist1+0xb8>)
 8001952:	f001 f843 	bl	80029dc <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8001956:	20c8      	movs	r0, #200	@ 0xc8
 8001958:	f7ff ffc6 	bl	80018e8 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) != 1);
 800195c:	bf00      	nop
 800195e:	2110      	movs	r1, #16
 8001960:	481e      	ldr	r0, [pc, #120]	@ (80019dc <usDist1+0xbc>)
 8001962:	f001 f823 	bl	80029ac <HAL_GPIO_ReadPin>
 8001966:	4603      	mov	r3, r0
 8001968:	2b01      	cmp	r3, #1
 800196a:	d1f8      	bne.n	800195e <usDist1+0x3e>
	volatile uint32_t t1 = htim2.Instance->CNT;
 800196c:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <usDist1+0xc0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) != 0);
 8001974:	bf00      	nop
 8001976:	2110      	movs	r1, #16
 8001978:	4818      	ldr	r0, [pc, #96]	@ (80019dc <usDist1+0xbc>)
 800197a:	f001 f817 	bl	80029ac <HAL_GPIO_ReadPin>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f8      	bne.n	8001976 <usDist1+0x56>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8001984:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <usDist1+0xc0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8001994:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001998:	f7ff ffa6 	bl	80018e8 <usDelay>

	double Dist = 0.0001715 * dt;
 800199c:	6978      	ldr	r0, [r7, #20]
 800199e:	f7fe feeb 	bl	8000778 <__aeabi_i2d>
 80019a2:	a30b      	add	r3, pc, #44	@ (adr r3, 80019d0 <usDist1+0xb0>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fc6a 	bl	8000280 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 80019b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80019bc:	eeb0 0a47 	vmov.f32	s0, s14
 80019c0:	eef0 0a67 	vmov.f32	s1, s15
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	f3af 8000 	nop.w
 80019d0:	c853c148 	.word	0xc853c148
 80019d4:	3f267a95 	.word	0x3f267a95
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40020800 	.word	0x40020800
 80019e0:	200000dc 	.word	0x200000dc
 80019e4:	00000000 	.word	0x00000000

080019e8 <usDist2>:

double usDist2()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019f4:	482a      	ldr	r0, [pc, #168]	@ (8001aa0 <usDist2+0xb8>)
 80019f6:	f000 fff1 	bl	80029dc <HAL_GPIO_WritePin>
	usDelay(10);
 80019fa:	200a      	movs	r0, #10
 80019fc:	f7ff ff74 	bl	80018e8 <usDelay>
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a06:	4826      	ldr	r0, [pc, #152]	@ (8001aa0 <usDist2+0xb8>)
 8001a08:	f000 ffe8 	bl	80029dc <HAL_GPIO_WritePin>
	usDelay(10);
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	f7ff ff6b 	bl	80018e8 <usDelay>
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a18:	4821      	ldr	r0, [pc, #132]	@ (8001aa0 <usDist2+0xb8>)
 8001a1a:	f000 ffdf 	bl	80029dc <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8001a1e:	20c8      	movs	r0, #200	@ 0xc8
 8001a20:	f7ff ff62 	bl	80018e8 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin) != 1);
 8001a24:	bf00      	nop
 8001a26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a2a:	481d      	ldr	r0, [pc, #116]	@ (8001aa0 <usDist2+0xb8>)
 8001a2c:	f000 ffbe 	bl	80029ac <HAL_GPIO_ReadPin>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d1f7      	bne.n	8001a26 <usDist2+0x3e>
	volatile uint32_t t1 = htim2.Instance->CNT;
 8001a36:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <usDist2+0xbc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin) != 0);
 8001a3e:	bf00      	nop
 8001a40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a44:	4816      	ldr	r0, [pc, #88]	@ (8001aa0 <usDist2+0xb8>)
 8001a46:	f000 ffb1 	bl	80029ac <HAL_GPIO_ReadPin>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f7      	bne.n	8001a40 <usDist2+0x58>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <usDist2+0xbc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8001a60:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001a64:	f7ff ff40 	bl	80018e8 <usDelay>

	double Dist = 0.0001715 * dt;
 8001a68:	6978      	ldr	r0, [r7, #20]
 8001a6a:	f7fe fe85 	bl	8000778 <__aeabi_i2d>
 8001a6e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001a98 <usDist2+0xb0>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fc04 	bl	8000280 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8001a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a84:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a88:	eeb0 0a47 	vmov.f32	s0, s14
 8001a8c:	eef0 0a67 	vmov.f32	s1, s15
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	c853c148 	.word	0xc853c148
 8001a9c:	3f267a95 	.word	0x3f267a95
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	200000dc 	.word	0x200000dc

08001aa8 <usDist3>:

double usDist3()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	4829      	ldr	r0, [pc, #164]	@ (8001b58 <usDist3+0xb0>)
 8001ab4:	f000 ff92 	bl	80029dc <HAL_GPIO_WritePin>
	usDelay(10);
 8001ab8:	200a      	movs	r0, #10
 8001aba:	f7ff ff15 	bl	80018e8 <usDelay>
	HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 1);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	4825      	ldr	r0, [pc, #148]	@ (8001b58 <usDist3+0xb0>)
 8001ac4:	f000 ff8a 	bl	80029dc <HAL_GPIO_WritePin>
	usDelay(10);
 8001ac8:	200a      	movs	r0, #10
 8001aca:	f7ff ff0d 	bl	80018e8 <usDelay>
	HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	4821      	ldr	r0, [pc, #132]	@ (8001b58 <usDist3+0xb0>)
 8001ad4:	f000 ff82 	bl	80029dc <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8001ad8:	20c8      	movs	r0, #200	@ 0xc8
 8001ada:	f7ff ff05 	bl	80018e8 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO3_GPIO_Port, ECHO3_Pin) != 1);
 8001ade:	bf00      	nop
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	481d      	ldr	r0, [pc, #116]	@ (8001b58 <usDist3+0xb0>)
 8001ae4:	f000 ff62 	bl	80029ac <HAL_GPIO_ReadPin>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d1f8      	bne.n	8001ae0 <usDist3+0x38>
	volatile uint32_t t1 = htim2.Instance->CNT;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <usDist3+0xb4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af4:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO3_GPIO_Port, ECHO3_Pin) != 0);
 8001af6:	bf00      	nop
 8001af8:	2102      	movs	r1, #2
 8001afa:	4817      	ldr	r0, [pc, #92]	@ (8001b58 <usDist3+0xb0>)
 8001afc:	f000 ff56 	bl	80029ac <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f8      	bne.n	8001af8 <usDist3+0x50>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <usDist3+0xb4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8001b16:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001b1a:	f7ff fee5 	bl	80018e8 <usDelay>
	double Dist = 0.0001715 * dt;
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7fe fe2a 	bl	8000778 <__aeabi_i2d>
 8001b24:	a30a      	add	r3, pc, #40	@ (adr r3, 8001b50 <usDist3+0xa8>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fba9 	bl	8000280 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8001b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b3a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b42:	eef0 0a67 	vmov.f32	s1, s15
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	f3af 8000 	nop.w
 8001b50:	c853c148 	.word	0xc853c148
 8001b54:	3f267a95 	.word	0x3f267a95
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	200000dc 	.word	0x200000dc

08001b60 <usDist4>:

double usDist4()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG4_GPIO_Port, TRIG4_Pin, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b6c:	482a      	ldr	r0, [pc, #168]	@ (8001c18 <usDist4+0xb8>)
 8001b6e:	f000 ff35 	bl	80029dc <HAL_GPIO_WritePin>
	usDelay(10);
 8001b72:	200a      	movs	r0, #10
 8001b74:	f7ff feb8 	bl	80018e8 <usDelay>
	HAL_GPIO_WritePin(TRIG4_GPIO_Port, TRIG4_Pin, 1);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b7e:	4826      	ldr	r0, [pc, #152]	@ (8001c18 <usDist4+0xb8>)
 8001b80:	f000 ff2c 	bl	80029dc <HAL_GPIO_WritePin>
	usDelay(10);
 8001b84:	200a      	movs	r0, #10
 8001b86:	f7ff feaf 	bl	80018e8 <usDelay>
	HAL_GPIO_WritePin(TRIG4_GPIO_Port, TRIG4_Pin, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b90:	4821      	ldr	r0, [pc, #132]	@ (8001c18 <usDist4+0xb8>)
 8001b92:	f000 ff23 	bl	80029dc <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8001b96:	20c8      	movs	r0, #200	@ 0xc8
 8001b98:	f7ff fea6 	bl	80018e8 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO4_GPIO_Port, ECHO4_Pin) != 1);
 8001b9c:	bf00      	nop
 8001b9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ba2:	481e      	ldr	r0, [pc, #120]	@ (8001c1c <usDist4+0xbc>)
 8001ba4:	f000 ff02 	bl	80029ac <HAL_GPIO_ReadPin>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d1f7      	bne.n	8001b9e <usDist4+0x3e>
	volatile uint32_t t1 = htim2.Instance->CNT;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <usDist4+0xc0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO4_GPIO_Port, ECHO4_Pin) != 0);
 8001bb6:	bf00      	nop
 8001bb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bbc:	4817      	ldr	r0, [pc, #92]	@ (8001c1c <usDist4+0xbc>)
 8001bbe:	f000 fef5 	bl	80029ac <HAL_GPIO_ReadPin>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f7      	bne.n	8001bb8 <usDist4+0x58>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <usDist4+0xc0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8001bd8:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001bdc:	f7ff fe84 	bl	80018e8 <usDelay>
	double Dist = 0.0001715 * dt;
 8001be0:	6978      	ldr	r0, [r7, #20]
 8001be2:	f7fe fdc9 	bl	8000778 <__aeabi_i2d>
 8001be6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001c10 <usDist4+0xb0>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fb48 	bl	8000280 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8001bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bfc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c00:	eeb0 0a47 	vmov.f32	s0, s14
 8001c04:	eef0 0a67 	vmov.f32	s1, s15
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	c853c148 	.word	0xc853c148
 8001c14:	3f267a95 	.word	0x3f267a95
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	200000dc 	.word	0x200000dc
 8001c24:	00000000 	.word	0x00000000

08001c28 <usDist5>:

double usDist5()
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG5_GPIO_Port, TRIG5_Pin, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2140      	movs	r1, #64	@ 0x40
 8001c32:	4829      	ldr	r0, [pc, #164]	@ (8001cd8 <usDist5+0xb0>)
 8001c34:	f000 fed2 	bl	80029dc <HAL_GPIO_WritePin>
	usDelay(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f7ff fe55 	bl	80018e8 <usDelay>
	HAL_GPIO_WritePin(TRIG5_GPIO_Port, TRIG5_Pin, 1);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2140      	movs	r1, #64	@ 0x40
 8001c42:	4825      	ldr	r0, [pc, #148]	@ (8001cd8 <usDist5+0xb0>)
 8001c44:	f000 feca 	bl	80029dc <HAL_GPIO_WritePin>
	usDelay(10);
 8001c48:	200a      	movs	r0, #10
 8001c4a:	f7ff fe4d 	bl	80018e8 <usDelay>
	HAL_GPIO_WritePin(TRIG5_GPIO_Port, TRIG5_Pin, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2140      	movs	r1, #64	@ 0x40
 8001c52:	4821      	ldr	r0, [pc, #132]	@ (8001cd8 <usDist5+0xb0>)
 8001c54:	f000 fec2 	bl	80029dc <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8001c58:	20c8      	movs	r0, #200	@ 0xc8
 8001c5a:	f7ff fe45 	bl	80018e8 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO5_GPIO_Port, ECHO5_Pin) != 1);
 8001c5e:	bf00      	nop
 8001c60:	2120      	movs	r1, #32
 8001c62:	481d      	ldr	r0, [pc, #116]	@ (8001cd8 <usDist5+0xb0>)
 8001c64:	f000 fea2 	bl	80029ac <HAL_GPIO_ReadPin>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d1f8      	bne.n	8001c60 <usDist5+0x38>
	volatile uint32_t t1 = htim2.Instance->CNT;
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <usDist5+0xb4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO5_GPIO_Port, ECHO5_Pin) != 0);
 8001c76:	bf00      	nop
 8001c78:	2120      	movs	r1, #32
 8001c7a:	4817      	ldr	r0, [pc, #92]	@ (8001cd8 <usDist5+0xb0>)
 8001c7c:	f000 fe96 	bl	80029ac <HAL_GPIO_ReadPin>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f8      	bne.n	8001c78 <usDist5+0x50>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <usDist5+0xb4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8001c96:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001c9a:	f7ff fe25 	bl	80018e8 <usDelay>
	double Dist = 0.0001715 * dt;
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7fe fd6a 	bl	8000778 <__aeabi_i2d>
 8001ca4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001cd0 <usDist5+0xa8>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fae9 	bl	8000280 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8001cb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cba:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc2:	eef0 0a67 	vmov.f32	s1, s15
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	c853c148 	.word	0xc853c148
 8001cd4:	3f267a95 	.word	0x3f267a95
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	200000dc 	.word	0x200000dc

08001ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d1e:	2007      	movs	r0, #7
 8001d20:	f000 fbec 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800

08001d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a29      	ldr	r2, [pc, #164]	@ (8001de4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10e      	bne.n	8001d60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	4a27      	ldr	r2, [pc, #156]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d52:	4b25      	ldr	r3, [pc, #148]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d5e:	e03a      	b.n	8001dd6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	4a1d      	ldr	r2, [pc, #116]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
}
 8001d86:	e026      	b.n	8001dd6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a17      	ldr	r2, [pc, #92]	@ (8001dec <HAL_TIM_Base_MspInit+0xbc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	4a13      	ldr	r2, [pc, #76]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
}
 8001dae:	e012      	b.n	8001dd6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0e      	ldr	r2, [pc, #56]	@ (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10d      	bne.n	8001dd6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	4a09      	ldr	r2, [pc, #36]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <HAL_TIM_Base_MspInit+0xb8>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
}
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000c00 	.word	0x40000c00

08001df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	@ 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a24      	ldr	r2, [pc, #144]	@ (8001ea4 <HAL_TIM_MspPostInit+0xb0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d11f      	bne.n	8001e56 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	4a22      	ldr	r2, [pc, #136]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e26:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e44:	2301      	movs	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4817      	ldr	r0, [pc, #92]	@ (8001eac <HAL_TIM_MspPostInit+0xb8>)
 8001e50:	f000 fc28 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e54:	e022      	b.n	8001e9c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a15      	ldr	r2, [pc, #84]	@ (8001eb0 <HAL_TIM_MspPostInit+0xbc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d11d      	bne.n	8001e9c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e68:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb4>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e7c:	2340      	movs	r3, #64	@ 0x40
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <HAL_TIM_MspPostInit+0xb8>)
 8001e98:	f000 fc04 	bl	80026a4 <HAL_GPIO_Init>
}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	@ 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40000400 	.word	0x40000400

08001eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	@ 0x30
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a45      	ldr	r2, [pc, #276]	@ (8001fe8 <HAL_UART_MspInit+0x134>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d153      	bne.n	8001f7e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	4b44      	ldr	r3, [pc, #272]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	4a43      	ldr	r2, [pc, #268]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001ee0:	f043 0310 	orr.w	r3, r3, #16
 8001ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee6:	4b41      	ldr	r3, [pc, #260]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a3c      	ldr	r2, [pc, #240]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b3a      	ldr	r3, [pc, #232]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b36      	ldr	r3, [pc, #216]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a35      	ldr	r2, [pc, #212]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b33      	ldr	r3, [pc, #204]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	482a      	ldr	r0, [pc, #168]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f48:	f000 fbac 	bl	80026a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	4823      	ldr	r0, [pc, #140]	@ (8001ff4 <HAL_UART_MspInit+0x140>)
 8001f68:	f000 fb9c 	bl	80026a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2025      	movs	r0, #37	@ 0x25
 8001f72:	f000 face 	bl	8002512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f76:	2025      	movs	r0, #37	@ 0x25
 8001f78:	f000 fae7 	bl	800254a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7c:	e030      	b.n	8001fe0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff8 <HAL_UART_MspInit+0x144>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d12b      	bne.n	8001fe0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	4a16      	ldr	r2, [pc, #88]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fac:	4a0f      	ldr	r2, [pc, #60]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4805      	ldr	r0, [pc, #20]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001fdc:	f000 fb62 	bl	80026a4 <HAL_GPIO_Init>
}
 8001fe0:	bf00      	nop
 8001fe2:	3730      	adds	r7, #48	@ 0x30
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40011000 	.word	0x40011000
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40004400 	.word	0x40004400

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <NMI_Handler+0x4>

08002004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <HardFault_Handler+0x4>

0800200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <MemManage_Handler+0x4>

08002014 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <UsageFault_Handler+0x4>

08002024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002052:	f000 f93f 	bl	80022d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002060:	4802      	ldr	r0, [pc, #8]	@ (800206c <USART1_IRQHandler+0x10>)
 8002062:	f002 f943 	bl	80042ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200001b4 	.word	0x200001b4

08002070 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e00a      	b.n	8002098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002082:	f3af 8000 	nop.w
 8002086:	4601      	mov	r1, r0
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	60ba      	str	r2, [r7, #8]
 800208e:	b2ca      	uxtb	r2, r1
 8002090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	dbf0      	blt.n	8002082 <_read+0x12>
  }

  return len;
 80020a0:	687b      	ldr	r3, [r7, #4]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e009      	b.n	80020d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	60ba      	str	r2, [r7, #8]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fbc9 	bl	800185c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbf1      	blt.n	80020bc <_write+0x12>
  }
  return len;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_close>:

int _close(int file)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800210a:	605a      	str	r2, [r3, #4]
  return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_isatty>:

int _isatty(int file)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	4a14      	ldr	r2, [pc, #80]	@ (80021a8 <_sbrk+0x5c>)
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <_sbrk+0x60>)
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002160:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002168:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <_sbrk+0x64>)
 800216a:	4a12      	ldr	r2, [pc, #72]	@ (80021b4 <_sbrk+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d207      	bcs.n	800218c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800217c:	f003 fa76 	bl	800566c <__errno>
 8002180:	4603      	mov	r3, r0
 8002182:	220c      	movs	r2, #12
 8002184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e009      	b.n	80021a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	4a05      	ldr	r2, [pc, #20]	@ (80021b0 <_sbrk+0x64>)
 800219c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20020000 	.word	0x20020000
 80021ac:	00000400 	.word	0x00000400
 80021b0:	200002cc 	.word	0x200002cc
 80021b4:	20000420 	.word	0x20000420

080021b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <SystemInit+0x20>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <SystemInit+0x20>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002214 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021e0:	f7ff ffea 	bl	80021b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e4:	480c      	ldr	r0, [pc, #48]	@ (8002218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021e6:	490d      	ldr	r1, [pc, #52]	@ (800221c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220a:	f003 fa35 	bl	8005678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800220e:	f7fe ff9d 	bl	800114c <main>
  bx  lr    
 8002212:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002220:	080061bc 	.word	0x080061bc
  ldr r2, =_sbss
 8002224:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002228:	20000420 	.word	0x20000420

0800222c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC_IRQHandler>
	...

08002230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002234:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	@ (8002270 <HAL_Init+0x40>)
 800223a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800223e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <HAL_Init+0x40>)
 8002246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800224a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800224c:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a07      	ldr	r2, [pc, #28]	@ (8002270 <HAL_Init+0x40>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002258:	2003      	movs	r0, #3
 800225a:	f000 f94f 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225e:	2000      	movs	r0, #0
 8002260:	f000 f808 	bl	8002274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002264:	f7ff fd3c 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023c00 	.word	0x40023c00

08002274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_InitTick+0x54>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_InitTick+0x58>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228a:	fbb3 f3f1 	udiv	r3, r3, r1
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f967 	bl	8002566 <HAL_SYSTICK_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e00e      	b.n	80022c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d80a      	bhi.n	80022be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	f000 f92f 	bl	8002512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b4:	4a06      	ldr	r2, [pc, #24]	@ (80022d0 <HAL_InitTick+0x5c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000010 	.word	0x20000010
 80022cc:	20000018 	.word	0x20000018
 80022d0:	20000014 	.word	0x20000014

080022d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_IncTick+0x20>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_IncTick+0x24>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <HAL_IncTick+0x24>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000018 	.word	0x20000018
 80022f8:	200002d0 	.word	0x200002d0

080022fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_GetTick+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	200002d0 	.word	0x200002d0

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff ffee 	bl	80022fc <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d005      	beq.n	800233a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <HAL_Delay+0x44>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800233a:	bf00      	nop
 800233c:	f7ff ffde 	bl	80022fc <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8f7      	bhi.n	800233c <HAL_Delay+0x28>
  {
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000018 	.word	0x20000018

0800235c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800236c:	4b0c      	ldr	r3, [pc, #48]	@ (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <__NVIC_GetPriorityGrouping+0x18>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0307 	and.w	r3, r3, #7
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db0b      	blt.n	80023ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4907      	ldr	r1, [pc, #28]	@ (80023f8 <__NVIC_EnableIRQ+0x38>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100

080023fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	db0a      	blt.n	8002426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	490c      	ldr	r1, [pc, #48]	@ (8002448 <__NVIC_SetPriority+0x4c>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	440b      	add	r3, r1
 8002420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002424:	e00a      	b.n	800243c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4908      	ldr	r1, [pc, #32]	@ (800244c <__NVIC_SetPriority+0x50>)
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	3b04      	subs	r3, #4
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	440b      	add	r3, r1
 800243a:	761a      	strb	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	@ 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f1c3 0307 	rsb	r3, r3, #7
 800246a:	2b04      	cmp	r3, #4
 800246c:	bf28      	it	cs
 800246e:	2304      	movcs	r3, #4
 8002470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3304      	adds	r3, #4
 8002476:	2b06      	cmp	r3, #6
 8002478:	d902      	bls.n	8002480 <NVIC_EncodePriority+0x30>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3b03      	subs	r3, #3
 800247e:	e000      	b.n	8002482 <NVIC_EncodePriority+0x32>
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	401a      	ands	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43d9      	mvns	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	4313      	orrs	r3, r2
         );
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	@ 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024c8:	d301      	bcc.n	80024ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00f      	b.n	80024ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <SysTick_Config+0x40>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d6:	210f      	movs	r1, #15
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f7ff ff8e 	bl	80023fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <SysTick_Config+0x40>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e6:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <SysTick_Config+0x40>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	e000e010 	.word	0xe000e010

080024fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff29 	bl	800235c <__NVIC_SetPriorityGrouping>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002524:	f7ff ff3e 	bl	80023a4 <__NVIC_GetPriorityGrouping>
 8002528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f7ff ff8e 	bl	8002450 <NVIC_EncodePriority>
 8002534:	4602      	mov	r2, r0
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff5d 	bl	80023fc <__NVIC_SetPriority>
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff31 	bl	80023c0 <__NVIC_EnableIRQ>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffa2 	bl	80024b8 <SysTick_Config>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff feb6 	bl	80022fc <HAL_GetTick>
 8002590:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d008      	beq.n	80025b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2280      	movs	r2, #128	@ 0x80
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e052      	b.n	8002656 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0216 	bic.w	r2, r2, #22
 80025be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <HAL_DMA_Abort+0x62>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0208 	bic.w	r2, r2, #8
 80025ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002600:	e013      	b.n	800262a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002602:	f7ff fe7b 	bl	80022fc <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b05      	cmp	r3, #5
 800260e:	d90c      	bls.n	800262a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2203      	movs	r2, #3
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e015      	b.n	8002656 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e4      	bne.n	8002602 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263c:	223f      	movs	r2, #63	@ 0x3f
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d004      	beq.n	800267c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2280      	movs	r2, #128	@ 0x80
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e00c      	b.n	8002696 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2205      	movs	r2, #5
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	@ 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e159      	b.n	8002974 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c0:	2201      	movs	r2, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f040 8148 	bne.w	800296e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d005      	beq.n	80026f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d130      	bne.n	8002758 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272c:	2201      	movs	r2, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 0201 	and.w	r2, r3, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b03      	cmp	r3, #3
 8002762:	d017      	beq.n	8002794 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d123      	bne.n	80027e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	08da      	lsrs	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3208      	adds	r2, #8
 80027a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80a2 	beq.w	800296e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b57      	ldr	r3, [pc, #348]	@ (800298c <HAL_GPIO_Init+0x2e8>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	4a56      	ldr	r2, [pc, #344]	@ (800298c <HAL_GPIO_Init+0x2e8>)
 8002834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002838:	6453      	str	r3, [r2, #68]	@ 0x44
 800283a:	4b54      	ldr	r3, [pc, #336]	@ (800298c <HAL_GPIO_Init+0x2e8>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002846:	4a52      	ldr	r2, [pc, #328]	@ (8002990 <HAL_GPIO_Init+0x2ec>)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a49      	ldr	r2, [pc, #292]	@ (8002994 <HAL_GPIO_Init+0x2f0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d019      	beq.n	80028a6 <HAL_GPIO_Init+0x202>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a48      	ldr	r2, [pc, #288]	@ (8002998 <HAL_GPIO_Init+0x2f4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0x1fe>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a47      	ldr	r2, [pc, #284]	@ (800299c <HAL_GPIO_Init+0x2f8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00d      	beq.n	800289e <HAL_GPIO_Init+0x1fa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a46      	ldr	r2, [pc, #280]	@ (80029a0 <HAL_GPIO_Init+0x2fc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x1f6>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a45      	ldr	r2, [pc, #276]	@ (80029a4 <HAL_GPIO_Init+0x300>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_GPIO_Init+0x1f2>
 8002892:	2304      	movs	r3, #4
 8002894:	e008      	b.n	80028a8 <HAL_GPIO_Init+0x204>
 8002896:	2307      	movs	r3, #7
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x204>
 800289a:	2303      	movs	r3, #3
 800289c:	e004      	b.n	80028a8 <HAL_GPIO_Init+0x204>
 800289e:	2302      	movs	r3, #2
 80028a0:	e002      	b.n	80028a8 <HAL_GPIO_Init+0x204>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_GPIO_Init+0x204>
 80028a6:	2300      	movs	r3, #0
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	f002 0203 	and.w	r2, r2, #3
 80028ae:	0092      	lsls	r2, r2, #2
 80028b0:	4093      	lsls	r3, r2
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b8:	4935      	ldr	r1, [pc, #212]	@ (8002990 <HAL_GPIO_Init+0x2ec>)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	3302      	adds	r3, #2
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c6:	4b38      	ldr	r3, [pc, #224]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ea:	4a2f      	ldr	r2, [pc, #188]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f0:	4b2d      	ldr	r3, [pc, #180]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002914:	4a24      	ldr	r2, [pc, #144]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800291a:	4b23      	ldr	r3, [pc, #140]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800293e:	4a1a      	ldr	r2, [pc, #104]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002944:	4b18      	ldr	r3, [pc, #96]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002968:	4a0f      	ldr	r2, [pc, #60]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3301      	adds	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b0f      	cmp	r3, #15
 8002978:	f67f aea2 	bls.w	80026c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3724      	adds	r7, #36	@ 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	40013800 	.word	0x40013800
 8002994:	40020000 	.word	0x40020000
 8002998:	40020400 	.word	0x40020400
 800299c:	40020800 	.word	0x40020800
 80029a0:	40020c00 	.word	0x40020c00
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40013c00 	.word	0x40013c00

080029ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	e001      	b.n	80029ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029f8:	e003      	b.n	8002a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	041a      	lsls	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	619a      	str	r2, [r3, #24]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e267      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d075      	beq.n	8002b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a2e:	4b88      	ldr	r3, [pc, #544]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d00c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4b85      	ldr	r3, [pc, #532]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d112      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a46:	4b82      	ldr	r3, [pc, #520]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a52:	d10b      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	4b7e      	ldr	r3, [pc, #504]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05b      	beq.n	8002b18 <HAL_RCC_OscConfig+0x108>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d157      	bne.n	8002b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e242      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a74:	d106      	bne.n	8002a84 <HAL_RCC_OscConfig+0x74>
 8002a76:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a75      	ldr	r2, [pc, #468]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e01d      	b.n	8002ac0 <HAL_RCC_OscConfig+0xb0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x98>
 8002a8e:	4b70      	ldr	r3, [pc, #448]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a6f      	ldr	r2, [pc, #444]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6c      	ldr	r2, [pc, #432]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0xb0>
 8002aa8:	4b69      	ldr	r3, [pc, #420]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a68      	ldr	r2, [pc, #416]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b66      	ldr	r3, [pc, #408]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a65      	ldr	r2, [pc, #404]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fc18 	bl	80022fc <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7ff fc14 	bl	80022fc <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	@ 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e207      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xc0>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7ff fc04 	bl	80022fc <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7ff fc00 	bl	80022fc <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e1f3      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	4b51      	ldr	r3, [pc, #324]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0xe8>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d063      	beq.n	8002bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b26:	4b4a      	ldr	r3, [pc, #296]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3e:	4b44      	ldr	r3, [pc, #272]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	4b41      	ldr	r3, [pc, #260]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_RCC_OscConfig+0x152>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e1c7      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b62:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4937      	ldr	r1, [pc, #220]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	e03a      	b.n	8002bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b80:	4b34      	ldr	r3, [pc, #208]	@ (8002c54 <HAL_RCC_OscConfig+0x244>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7ff fbb9 	bl	80022fc <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7ff fbb5 	bl	80022fc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1a8      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	4b28      	ldr	r3, [pc, #160]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4925      	ldr	r1, [pc, #148]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
 8002bc0:	e015      	b.n	8002bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc2:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <HAL_RCC_OscConfig+0x244>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7ff fb98 	bl	80022fc <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7ff fb94 	bl	80022fc <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e187      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d036      	beq.n	8002c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <HAL_RCC_OscConfig+0x248>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7ff fb78 	bl	80022fc <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c10:	f7ff fb74 	bl	80022fc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e167      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c22:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_OscConfig+0x240>)
 8002c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x200>
 8002c2e:	e01b      	b.n	8002c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c30:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <HAL_RCC_OscConfig+0x248>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7ff fb61 	bl	80022fc <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	e00e      	b.n	8002c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7ff fb5d 	bl	80022fc <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d907      	bls.n	8002c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e150      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
 8002c50:	40023800 	.word	0x40023800
 8002c54:	42470000 	.word	0x42470000
 8002c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5c:	4b88      	ldr	r3, [pc, #544]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ea      	bne.n	8002c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8097 	beq.w	8002da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c76:	2300      	movs	r3, #0
 8002c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7a:	4b81      	ldr	r3, [pc, #516]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c96:	4b7a      	ldr	r3, [pc, #488]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	4b77      	ldr	r3, [pc, #476]	@ (8002e84 <HAL_RCC_OscConfig+0x474>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d118      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb2:	4b74      	ldr	r3, [pc, #464]	@ (8002e84 <HAL_RCC_OscConfig+0x474>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a73      	ldr	r2, [pc, #460]	@ (8002e84 <HAL_RCC_OscConfig+0x474>)
 8002cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cbe:	f7ff fb1d 	bl	80022fc <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc6:	f7ff fb19 	bl	80022fc <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e10c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e84 <HAL_RCC_OscConfig+0x474>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x2ea>
 8002cec:	4b64      	ldr	r3, [pc, #400]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf0:	4a63      	ldr	r2, [pc, #396]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf8:	e01c      	b.n	8002d34 <HAL_RCC_OscConfig+0x324>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x30c>
 8002d02:	4b5f      	ldr	r3, [pc, #380]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d06:	4a5e      	ldr	r2, [pc, #376]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d12:	4a5b      	ldr	r2, [pc, #364]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0x324>
 8002d1c:	4b58      	ldr	r3, [pc, #352]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d20:	4a57      	ldr	r2, [pc, #348]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d28:	4b55      	ldr	r3, [pc, #340]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2c:	4a54      	ldr	r2, [pc, #336]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	f023 0304 	bic.w	r3, r3, #4
 8002d32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d015      	beq.n	8002d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7ff fade 	bl	80022fc <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f7ff fada 	bl	80022fc <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e0cb      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5a:	4b49      	ldr	r3, [pc, #292]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0ee      	beq.n	8002d44 <HAL_RCC_OscConfig+0x334>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7ff fac8 	bl	80022fc <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7ff fac4 	bl	80022fc <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e0b5      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d86:	4b3e      	ldr	r3, [pc, #248]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ee      	bne.n	8002d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d98:	4b39      	ldr	r3, [pc, #228]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	4a38      	ldr	r2, [pc, #224]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a1 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dae:	4b34      	ldr	r3, [pc, #208]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d05c      	beq.n	8002e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d141      	bne.n	8002e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b31      	ldr	r3, [pc, #196]	@ (8002e88 <HAL_RCC_OscConfig+0x478>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7ff fa98 	bl	80022fc <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7ff fa94 	bl	80022fc <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e087      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de2:	4b27      	ldr	r3, [pc, #156]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	019b      	lsls	r3, r3, #6
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	3b01      	subs	r3, #1
 8002e08:	041b      	lsls	r3, r3, #16
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	491b      	ldr	r1, [pc, #108]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e18:	4b1b      	ldr	r3, [pc, #108]	@ (8002e88 <HAL_RCC_OscConfig+0x478>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7ff fa6d 	bl	80022fc <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e26:	f7ff fa69 	bl	80022fc <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e05c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x416>
 8002e44:	e054      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <HAL_RCC_OscConfig+0x478>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7ff fa56 	bl	80022fc <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7ff fa52 	bl	80022fc <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e045      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_RCC_OscConfig+0x470>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x444>
 8002e72:	e03d      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e038      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40007000 	.word	0x40007000
 8002e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <HAL_RCC_OscConfig+0x4ec>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d028      	beq.n	8002eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d121      	bne.n	8002eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d11a      	bne.n	8002eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d111      	bne.n	8002eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed2:	085b      	lsrs	r3, r3, #1
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800

08002f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0cc      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f14:	4b68      	ldr	r3, [pc, #416]	@ (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d90c      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f22:	4b65      	ldr	r3, [pc, #404]	@ (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b63      	ldr	r3, [pc, #396]	@ (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0b8      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d020      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f54:	4b59      	ldr	r3, [pc, #356]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a58      	ldr	r2, [pc, #352]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f6c:	4b53      	ldr	r3, [pc, #332]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a52      	ldr	r2, [pc, #328]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f78:	4b50      	ldr	r3, [pc, #320]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	494d      	ldr	r1, [pc, #308]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d044      	beq.n	8003020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b47      	ldr	r3, [pc, #284]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d119      	bne.n	8002fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e07f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e06f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fce:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e067      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fde:	4b37      	ldr	r3, [pc, #220]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f023 0203 	bic.w	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4934      	ldr	r1, [pc, #208]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff0:	f7ff f984 	bl	80022fc <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff8:	f7ff f980 	bl	80022fc <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e04f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 020c 	and.w	r2, r3, #12
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	429a      	cmp	r2, r3
 800301e:	d1eb      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003020:	4b25      	ldr	r3, [pc, #148]	@ (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d20c      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b20      	ldr	r3, [pc, #128]	@ (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e032      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003054:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4916      	ldr	r1, [pc, #88]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003072:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	490e      	ldr	r1, [pc, #56]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003086:	f000 f821 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 800308a:	4602      	mov	r2, r0
 800308c:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	490a      	ldr	r1, [pc, #40]	@ (80030c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	5ccb      	ldrb	r3, [r1, r3]
 800309a:	fa22 f303 	lsr.w	r3, r2, r3
 800309e:	4a09      	ldr	r2, [pc, #36]	@ (80030c4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030a2:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f8e4 	bl	8002274 <HAL_InitTick>

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023c00 	.word	0x40023c00
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08006160 	.word	0x08006160
 80030c4:	20000010 	.word	0x20000010
 80030c8:	20000014 	.word	0x20000014

080030cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d0:	b094      	sub	sp, #80	@ 0x50
 80030d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030d8:	2300      	movs	r3, #0
 80030da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030dc:	2300      	movs	r3, #0
 80030de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e4:	4b79      	ldr	r3, [pc, #484]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x200>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d00d      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x40>
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	f200 80e1 	bhi.w	80032b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x34>
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d003      	beq.n	8003106 <HAL_RCC_GetSysClockFreq+0x3a>
 80030fe:	e0db      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b73      	ldr	r3, [pc, #460]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003102:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003104:	e0db      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003106:	4b73      	ldr	r3, [pc, #460]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003108:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800310a:	e0d8      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800310c:	4b6f      	ldr	r3, [pc, #444]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x200>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003114:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003116:	4b6d      	ldr	r3, [pc, #436]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003122:	4b6a      	ldr	r3, [pc, #424]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	2200      	movs	r2, #0
 800312a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800312c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800312e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003134:	633b      	str	r3, [r7, #48]	@ 0x30
 8003136:	2300      	movs	r3, #0
 8003138:	637b      	str	r3, [r7, #52]	@ 0x34
 800313a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800313e:	4622      	mov	r2, r4
 8003140:	462b      	mov	r3, r5
 8003142:	f04f 0000 	mov.w	r0, #0
 8003146:	f04f 0100 	mov.w	r1, #0
 800314a:	0159      	lsls	r1, r3, #5
 800314c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003150:	0150      	lsls	r0, r2, #5
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4621      	mov	r1, r4
 8003158:	1a51      	subs	r1, r2, r1
 800315a:	6139      	str	r1, [r7, #16]
 800315c:	4629      	mov	r1, r5
 800315e:	eb63 0301 	sbc.w	r3, r3, r1
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003170:	4659      	mov	r1, fp
 8003172:	018b      	lsls	r3, r1, #6
 8003174:	4651      	mov	r1, sl
 8003176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800317a:	4651      	mov	r1, sl
 800317c:	018a      	lsls	r2, r1, #6
 800317e:	4651      	mov	r1, sl
 8003180:	ebb2 0801 	subs.w	r8, r2, r1
 8003184:	4659      	mov	r1, fp
 8003186:	eb63 0901 	sbc.w	r9, r3, r1
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800319a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800319e:	4690      	mov	r8, r2
 80031a0:	4699      	mov	r9, r3
 80031a2:	4623      	mov	r3, r4
 80031a4:	eb18 0303 	adds.w	r3, r8, r3
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	462b      	mov	r3, r5
 80031ac:	eb49 0303 	adc.w	r3, r9, r3
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031be:	4629      	mov	r1, r5
 80031c0:	024b      	lsls	r3, r1, #9
 80031c2:	4621      	mov	r1, r4
 80031c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031c8:	4621      	mov	r1, r4
 80031ca:	024a      	lsls	r2, r1, #9
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031d2:	2200      	movs	r2, #0
 80031d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031dc:	f7fd fb5e 	bl	800089c <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4613      	mov	r3, r2
 80031e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031e8:	e058      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ea:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x200>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	2200      	movs	r2, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	4611      	mov	r1, r2
 80031f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031fa:	623b      	str	r3, [r7, #32]
 80031fc:	2300      	movs	r3, #0
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003200:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003204:	4642      	mov	r2, r8
 8003206:	464b      	mov	r3, r9
 8003208:	f04f 0000 	mov.w	r0, #0
 800320c:	f04f 0100 	mov.w	r1, #0
 8003210:	0159      	lsls	r1, r3, #5
 8003212:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003216:	0150      	lsls	r0, r2, #5
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4641      	mov	r1, r8
 800321e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003222:	4649      	mov	r1, r9
 8003224:	eb63 0b01 	sbc.w	fp, r3, r1
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003234:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003238:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800323c:	ebb2 040a 	subs.w	r4, r2, sl
 8003240:	eb63 050b 	sbc.w	r5, r3, fp
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	00eb      	lsls	r3, r5, #3
 800324e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003252:	00e2      	lsls	r2, r4, #3
 8003254:	4614      	mov	r4, r2
 8003256:	461d      	mov	r5, r3
 8003258:	4643      	mov	r3, r8
 800325a:	18e3      	adds	r3, r4, r3
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	464b      	mov	r3, r9
 8003260:	eb45 0303 	adc.w	r3, r5, r3
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003272:	4629      	mov	r1, r5
 8003274:	028b      	lsls	r3, r1, #10
 8003276:	4621      	mov	r1, r4
 8003278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800327c:	4621      	mov	r1, r4
 800327e:	028a      	lsls	r2, r1, #10
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003286:	2200      	movs	r2, #0
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	61fa      	str	r2, [r7, #28]
 800328c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003290:	f7fd fb04 	bl	800089c <__aeabi_uldivmod>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4613      	mov	r3, r2
 800329a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800329c:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x200>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	3301      	adds	r3, #1
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80032ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032b6:	e002      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3750      	adds	r7, #80	@ 0x50
 80032c4:	46bd      	mov	sp, r7
 80032c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800
 80032d0:	00f42400 	.word	0x00f42400
 80032d4:	007a1200 	.word	0x007a1200

080032d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032dc:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <HAL_RCC_GetHCLKFreq+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000010 	.word	0x20000010

080032f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032f4:	f7ff fff0 	bl	80032d8 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	0a9b      	lsrs	r3, r3, #10
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4903      	ldr	r1, [pc, #12]	@ (8003314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	08006170 	.word	0x08006170

08003318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800331c:	f7ff ffdc 	bl	80032d8 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0b5b      	lsrs	r3, r3, #13
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	@ (800333c <HAL_RCC_GetPCLK2Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	08006170 	.word	0x08006170

08003340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e041      	b.n	80033d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fe fce2 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f000 fb1c 	bl	80039bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d001      	beq.n	80033f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e03c      	b.n	8003472 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1e      	ldr	r2, [pc, #120]	@ (8003480 <HAL_TIM_Base_Start+0xa0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d018      	beq.n	800343c <HAL_TIM_Base_Start+0x5c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003412:	d013      	beq.n	800343c <HAL_TIM_Base_Start+0x5c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1a      	ldr	r2, [pc, #104]	@ (8003484 <HAL_TIM_Base_Start+0xa4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_TIM_Base_Start+0x5c>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a19      	ldr	r2, [pc, #100]	@ (8003488 <HAL_TIM_Base_Start+0xa8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_TIM_Base_Start+0x5c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a17      	ldr	r2, [pc, #92]	@ (800348c <HAL_TIM_Base_Start+0xac>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIM_Base_Start+0x5c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a16      	ldr	r2, [pc, #88]	@ (8003490 <HAL_TIM_Base_Start+0xb0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d111      	bne.n	8003460 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b06      	cmp	r3, #6
 800344c:	d010      	beq.n	8003470 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	e007      	b.n	8003470 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010000 	.word	0x40010000
 8003484:	40000400 	.word	0x40000400
 8003488:	40000800 	.word	0x40000800
 800348c:	40000c00 	.word	0x40000c00
 8003490:	40014000 	.word	0x40014000

08003494 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e041      	b.n	800352a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f839 	bl	8003532 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f000 fa72 	bl	80039bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_TIM_PWM_Start+0x24>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e022      	b.n	80035b2 <HAL_TIM_PWM_Start+0x6a>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d109      	bne.n	8003586 <HAL_TIM_PWM_Start+0x3e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e015      	b.n	80035b2 <HAL_TIM_PWM_Start+0x6a>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d109      	bne.n	80035a0 <HAL_TIM_PWM_Start+0x58>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e008      	b.n	80035b2 <HAL_TIM_PWM_Start+0x6a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e068      	b.n	800368c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <HAL_TIM_PWM_Start+0x82>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c8:	e013      	b.n	80035f2 <HAL_TIM_PWM_Start+0xaa>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d104      	bne.n	80035da <HAL_TIM_PWM_Start+0x92>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d8:	e00b      	b.n	80035f2 <HAL_TIM_PWM_Start+0xaa>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d104      	bne.n	80035ea <HAL_TIM_PWM_Start+0xa2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e8:	e003      	b.n	80035f2 <HAL_TIM_PWM_Start+0xaa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2201      	movs	r2, #1
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fc90 	bl	8003f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a23      	ldr	r2, [pc, #140]	@ (8003694 <HAL_TIM_PWM_Start+0x14c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d107      	bne.n	800361a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1d      	ldr	r2, [pc, #116]	@ (8003694 <HAL_TIM_PWM_Start+0x14c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <HAL_TIM_PWM_Start+0x10e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d013      	beq.n	8003656 <HAL_TIM_PWM_Start+0x10e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <HAL_TIM_PWM_Start+0x150>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_TIM_PWM_Start+0x10e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a17      	ldr	r2, [pc, #92]	@ (800369c <HAL_TIM_PWM_Start+0x154>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_TIM_PWM_Start+0x10e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a16      	ldr	r2, [pc, #88]	@ (80036a0 <HAL_TIM_PWM_Start+0x158>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_TIM_PWM_Start+0x10e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a14      	ldr	r2, [pc, #80]	@ (80036a4 <HAL_TIM_PWM_Start+0x15c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d111      	bne.n	800367a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b06      	cmp	r3, #6
 8003666:	d010      	beq.n	800368a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003678:	e007      	b.n	800368a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40010000 	.word	0x40010000
 8003698:	40000400 	.word	0x40000400
 800369c:	40000800 	.word	0x40000800
 80036a0:	40000c00 	.word	0x40000c00
 80036a4:	40014000 	.word	0x40014000

080036a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0ae      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	f200 809f 	bhi.w	8003814 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036d6:	a201      	add	r2, pc, #4	@ (adr r2, 80036dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003815 	.word	0x08003815
 80036e4:	08003815 	.word	0x08003815
 80036e8:	08003815 	.word	0x08003815
 80036ec:	08003751 	.word	0x08003751
 80036f0:	08003815 	.word	0x08003815
 80036f4:	08003815 	.word	0x08003815
 80036f8:	08003815 	.word	0x08003815
 80036fc:	08003793 	.word	0x08003793
 8003700:	08003815 	.word	0x08003815
 8003704:	08003815 	.word	0x08003815
 8003708:	08003815 	.word	0x08003815
 800370c:	080037d3 	.word	0x080037d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f9dc 	bl	8003ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0208 	orr.w	r2, r2, #8
 800372a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0204 	bic.w	r2, r2, #4
 800373a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6999      	ldr	r1, [r3, #24]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	619a      	str	r2, [r3, #24]
      break;
 800374e:	e064      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fa22 	bl	8003ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800376a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6999      	ldr	r1, [r3, #24]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	619a      	str	r2, [r3, #24]
      break;
 8003790:	e043      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fa6d 	bl	8003c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0208 	orr.w	r2, r2, #8
 80037ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0204 	bic.w	r2, r2, #4
 80037bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69d9      	ldr	r1, [r3, #28]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	61da      	str	r2, [r3, #28]
      break;
 80037d0:	e023      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fab7 	bl	8003d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69d9      	ldr	r1, [r3, #28]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	021a      	lsls	r2, r3, #8
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	61da      	str	r2, [r3, #28]
      break;
 8003812:	e002      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]
      break;
 8003818:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003822:	7dfb      	ldrb	r3, [r7, #23]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIM_ConfigClockSource+0x1c>
 8003844:	2302      	movs	r3, #2
 8003846:	e0b4      	b.n	80039b2 <HAL_TIM_ConfigClockSource+0x186>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800386e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003880:	d03e      	beq.n	8003900 <HAL_TIM_ConfigClockSource+0xd4>
 8003882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003886:	f200 8087 	bhi.w	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388e:	f000 8086 	beq.w	800399e <HAL_TIM_ConfigClockSource+0x172>
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003896:	d87f      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b70      	cmp	r3, #112	@ 0x70
 800389a:	d01a      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0xa6>
 800389c:	2b70      	cmp	r3, #112	@ 0x70
 800389e:	d87b      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b60      	cmp	r3, #96	@ 0x60
 80038a2:	d050      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0x11a>
 80038a4:	2b60      	cmp	r3, #96	@ 0x60
 80038a6:	d877      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b50      	cmp	r3, #80	@ 0x50
 80038aa:	d03c      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0xfa>
 80038ac:	2b50      	cmp	r3, #80	@ 0x50
 80038ae:	d873      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b40      	cmp	r3, #64	@ 0x40
 80038b2:	d058      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x13a>
 80038b4:	2b40      	cmp	r3, #64	@ 0x40
 80038b6:	d86f      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b30      	cmp	r3, #48	@ 0x30
 80038ba:	d064      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038bc:	2b30      	cmp	r3, #48	@ 0x30
 80038be:	d86b      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d060      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d867      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d05c      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d05a      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038d0:	e062      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e2:	f000 fafd 	bl	8003ee0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	609a      	str	r2, [r3, #8]
      break;
 80038fe:	e04f      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003910:	f000 fae6 	bl	8003ee0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003922:	609a      	str	r2, [r3, #8]
      break;
 8003924:	e03c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003932:	461a      	mov	r2, r3
 8003934:	f000 fa5a 	bl	8003dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2150      	movs	r1, #80	@ 0x50
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fab3 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 8003944:	e02c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003952:	461a      	mov	r2, r3
 8003954:	f000 fa79 	bl	8003e4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2160      	movs	r1, #96	@ 0x60
 800395e:	4618      	mov	r0, r3
 8003960:	f000 faa3 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 8003964:	e01c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	461a      	mov	r2, r3
 8003974:	f000 fa3a 	bl	8003dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2140      	movs	r1, #64	@ 0x40
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fa93 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 8003984:	e00c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4619      	mov	r1, r3
 8003990:	4610      	mov	r0, r2
 8003992:	f000 fa8a 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 8003996:	e003      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e000      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800399e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a3a      	ldr	r2, [pc, #232]	@ (8003ab8 <TIM_Base_SetConfig+0xfc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00f      	beq.n	80039f4 <TIM_Base_SetConfig+0x38>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039da:	d00b      	beq.n	80039f4 <TIM_Base_SetConfig+0x38>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a37      	ldr	r2, [pc, #220]	@ (8003abc <TIM_Base_SetConfig+0x100>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d007      	beq.n	80039f4 <TIM_Base_SetConfig+0x38>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a36      	ldr	r2, [pc, #216]	@ (8003ac0 <TIM_Base_SetConfig+0x104>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_Base_SetConfig+0x38>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a35      	ldr	r2, [pc, #212]	@ (8003ac4 <TIM_Base_SetConfig+0x108>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d108      	bne.n	8003a06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2b      	ldr	r2, [pc, #172]	@ (8003ab8 <TIM_Base_SetConfig+0xfc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01b      	beq.n	8003a46 <TIM_Base_SetConfig+0x8a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a14:	d017      	beq.n	8003a46 <TIM_Base_SetConfig+0x8a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a28      	ldr	r2, [pc, #160]	@ (8003abc <TIM_Base_SetConfig+0x100>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <TIM_Base_SetConfig+0x8a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a27      	ldr	r2, [pc, #156]	@ (8003ac0 <TIM_Base_SetConfig+0x104>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00f      	beq.n	8003a46 <TIM_Base_SetConfig+0x8a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a26      	ldr	r2, [pc, #152]	@ (8003ac4 <TIM_Base_SetConfig+0x108>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <TIM_Base_SetConfig+0x8a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a25      	ldr	r2, [pc, #148]	@ (8003ac8 <TIM_Base_SetConfig+0x10c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <TIM_Base_SetConfig+0x8a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a24      	ldr	r2, [pc, #144]	@ (8003acc <TIM_Base_SetConfig+0x110>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0x8a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a23      	ldr	r2, [pc, #140]	@ (8003ad0 <TIM_Base_SetConfig+0x114>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab8 <TIM_Base_SetConfig+0xfc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d103      	bne.n	8003a8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f023 0201 	bic.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 0302 	bic.w	r3, r3, #2
 8003b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b9c <TIM_OC1_SetConfig+0xc8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10c      	bne.n	8003b4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0308 	bic.w	r3, r3, #8
 8003b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a13      	ldr	r2, [pc, #76]	@ (8003b9c <TIM_OC1_SetConfig+0xc8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d111      	bne.n	8003b76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	621a      	str	r2, [r3, #32]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	40010000 	.word	0x40010000

08003ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f023 0210 	bic.w	r2, r3, #16
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f023 0320 	bic.w	r3, r3, #32
 8003bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003c74 <TIM_OC2_SetConfig+0xd4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10d      	bne.n	8003c1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a15      	ldr	r2, [pc, #84]	@ (8003c74 <TIM_OC2_SetConfig+0xd4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d113      	bne.n	8003c4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000

08003c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0303 	bic.w	r3, r3, #3
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d48 <TIM_OC3_SetConfig+0xd0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d10d      	bne.n	8003cf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a14      	ldr	r2, [pc, #80]	@ (8003d48 <TIM_OC3_SetConfig+0xd0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d113      	bne.n	8003d22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40010000 	.word	0x40010000

08003d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	031b      	lsls	r3, r3, #12
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a10      	ldr	r2, [pc, #64]	@ (8003de8 <TIM_OC4_SetConfig+0x9c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d109      	bne.n	8003dc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40010000 	.word	0x40010000

08003dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f023 0201 	bic.w	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f023 030a 	bic.w	r3, r3, #10
 8003e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b087      	sub	sp, #28
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f023 0210 	bic.w	r2, r3, #16
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	031b      	lsls	r3, r3, #12
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f043 0307 	orr.w	r3, r3, #7
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	021a      	lsls	r2, r3, #8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2201      	movs	r2, #1
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1a      	ldr	r2, [r3, #32]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	401a      	ands	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1a      	ldr	r2, [r3, #32]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	fa01 f303 	lsl.w	r3, r1, r3
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e050      	b.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d018      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd0:	d013      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a18      	ldr	r2, [pc, #96]	@ (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00e      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a16      	ldr	r2, [pc, #88]	@ (800403c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d009      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a15      	ldr	r2, [pc, #84]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a13      	ldr	r2, [pc, #76]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10c      	bne.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	4313      	orrs	r3, r2
 800400a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40010000 	.word	0x40010000
 8004038:	40000400 	.word	0x40000400
 800403c:	40000800 	.word	0x40000800
 8004040:	40000c00 	.word	0x40000c00
 8004044:	40014000 	.word	0x40014000

08004048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004060:	2302      	movs	r3, #2
 8004062:	e03d      	b.n	80040e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e042      	b.n	8004184 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fd fece 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	@ 0x24
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800412e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fdbd 	bl	8004cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	@ 0x28
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d175      	bne.n	8004298 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_UART_Transmit+0x2c>
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e06e      	b.n	800429a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2221      	movs	r2, #33	@ 0x21
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ca:	f7fe f897 	bl	80022fc <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e4:	d108      	bne.n	80041f8 <HAL_UART_Transmit+0x6c>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	e003      	b.n	8004200 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004200:	e02e      	b.n	8004260 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fb1f 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e03a      	b.n	800429a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	3302      	adds	r3, #2
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	e007      	b.n	8004252 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	3301      	adds	r3, #1
 8004250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1cb      	bne.n	8004202 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	2140      	movs	r1, #64	@ 0x40
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 faeb 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e006      	b.n	800429a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	4613      	mov	r3, r2
 80042ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d112      	bne.n	80042e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_UART_Receive_IT+0x26>
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e00b      	b.n	80042e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	461a      	mov	r2, r3
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fb12 	bl	8004902 <UART_Start_Receive_IT>
 80042de:	4603      	mov	r3, r0
 80042e0:	e000      	b.n	80042e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b0ba      	sub	sp, #232	@ 0xe8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800432a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_UART_IRQHandler+0x66>
 800433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fbf2 	bl	8004b34 <UART_Receive_IT>
      return;
 8004350:	e25b      	b.n	800480a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80de 	beq.w	8004518 <HAL_UART_IRQHandler+0x22c>
 800435c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800436c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80d1 	beq.w	8004518 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_UART_IRQHandler+0xae>
 8004382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_UART_IRQHandler+0xd2>
 80043a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	f043 0202 	orr.w	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_UART_IRQHandler+0xf6>
 80043ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	f043 0204 	orr.w	r2, r3, #4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d011      	beq.n	8004412 <HAL_UART_IRQHandler+0x126>
 80043ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f043 0208 	orr.w	r2, r3, #8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 81f2 	beq.w	8004800 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800441c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_UART_IRQHandler+0x14e>
 8004428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fb7d 	bl	8004b34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d103      	bne.n	8004466 <HAL_UART_IRQHandler+0x17a>
 800445e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04f      	beq.n	8004506 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa85 	bl	8004976 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d141      	bne.n	80044fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3314      	adds	r3, #20
 80044a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1d9      	bne.n	800447a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d013      	beq.n	80044f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d2:	4a7e      	ldr	r2, [pc, #504]	@ (80046cc <HAL_UART_IRQHandler+0x3e0>)
 80044d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe f8bf 	bl	800265e <HAL_DMA_Abort_IT>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d016      	beq.n	8004514 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044f0:	4610      	mov	r0, r2
 80044f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	e00e      	b.n	8004514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f994 	bl	8004824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	e00a      	b.n	8004514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f990 	bl	8004824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	e006      	b.n	8004514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f98c 	bl	8004824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004512:	e175      	b.n	8004800 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004514:	bf00      	nop
    return;
 8004516:	e173      	b.n	8004800 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451c:	2b01      	cmp	r3, #1
 800451e:	f040 814f 	bne.w	80047c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8148 	beq.w	80047c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8141 	beq.w	80047c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455e:	2b40      	cmp	r3, #64	@ 0x40
 8004560:	f040 80b6 	bne.w	80046d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004570:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8145 	beq.w	8004804 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800457e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004582:	429a      	cmp	r2, r3
 8004584:	f080 813e 	bcs.w	8004804 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800458e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459a:	f000 8088 	beq.w	80046ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	330c      	adds	r3, #12
 80045a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80045ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1d9      	bne.n	800459e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3314      	adds	r3, #20
 80045f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3314      	adds	r3, #20
 800460a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800460e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004612:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004616:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e1      	bne.n	80045ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800463c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3314      	adds	r3, #20
 8004646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800464a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800464c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004650:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e3      	bne.n	8004626 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800467c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800467e:	f023 0310 	bic.w	r3, r3, #16
 8004682:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004690:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004692:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004696:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800469e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e3      	bne.n	800466c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fd ff68 	bl	800257e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f8b7 	bl	8004838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046ca:	e09b      	b.n	8004804 <HAL_UART_IRQHandler+0x518>
 80046cc:	08004a3d 	.word	0x08004a3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046d8:	b29b      	uxth	r3, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 808e 	beq.w	8004808 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8089 	beq.w	8004808 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800470c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800471a:	647a      	str	r2, [r7, #68]	@ 0x44
 800471c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004720:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e3      	bne.n	80046f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	623b      	str	r3, [r7, #32]
   return(result);
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004752:	633a      	str	r2, [r7, #48]	@ 0x30
 8004754:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e3      	bne.n	800472e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	60fb      	str	r3, [r7, #12]
   return(result);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0310 	bic.w	r3, r3, #16
 800478a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004798:	61fa      	str	r2, [r7, #28]
 800479a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	69b9      	ldr	r1, [r7, #24]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	617b      	str	r3, [r7, #20]
   return(result);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e3      	bne.n	8004774 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047b6:	4619      	mov	r1, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f83d 	bl	8004838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047be:	e023      	b.n	8004808 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <HAL_UART_IRQHandler+0x4f4>
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f943 	bl	8004a64 <UART_Transmit_IT>
    return;
 80047de:	e014      	b.n	800480a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <HAL_UART_IRQHandler+0x51e>
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f983 	bl	8004b04 <UART_EndTransmit_IT>
    return;
 80047fe:	e004      	b.n	800480a <HAL_UART_IRQHandler+0x51e>
    return;
 8004800:	bf00      	nop
 8004802:	e002      	b.n	800480a <HAL_UART_IRQHandler+0x51e>
      return;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <HAL_UART_IRQHandler+0x51e>
      return;
 8004808:	bf00      	nop
  }
}
 800480a:	37e8      	adds	r7, #232	@ 0xe8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004860:	e03b      	b.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d037      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fd fd47 	bl	80022fc <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <UART_WaitOnFlagUntilTimeout+0x30>
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e03a      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d023      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b80      	cmp	r3, #128	@ 0x80
 8004896:	d020      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b40      	cmp	r3, #64	@ 0x40
 800489c:	d01d      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d116      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f857 	bl	8004976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2208      	movs	r2, #8
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e00f      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4013      	ands	r3, r2
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d0b4      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	4613      	mov	r3, r2
 800490e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	88fa      	ldrh	r2, [r7, #6]
 800491a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2222      	movs	r2, #34	@ 0x22
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004946:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0220 	orr.w	r2, r2, #32
 8004966:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004976:	b480      	push	{r7}
 8004978:	b095      	sub	sp, #84	@ 0x54
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004994:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800499e:	643a      	str	r2, [r7, #64]	@ 0x40
 80049a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e5      	bne.n	80049b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d119      	bne.n	8004a22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	330c      	adds	r3, #12
 80049f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f023 0310 	bic.w	r3, r3, #16
 8004a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	330c      	adds	r3, #12
 8004a0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a0e:	61ba      	str	r2, [r7, #24]
 8004a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6979      	ldr	r1, [r7, #20]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e5      	bne.n	80049ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a30:	bf00      	nop
 8004a32:	3754      	adds	r7, #84	@ 0x54
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff fee4 	bl	8004824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b21      	cmp	r3, #33	@ 0x21
 8004a76:	d13e      	bne.n	8004af6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a80:	d114      	bne.n	8004aac <UART_Transmit_IT+0x48>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d110      	bne.n	8004aac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	1c9a      	adds	r2, r3, #2
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]
 8004aaa:	e008      	b.n	8004abe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6211      	str	r1, [r2, #32]
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4619      	mov	r1, r3
 8004acc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ae0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fe73 	bl	8004810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08c      	sub	sp, #48	@ 0x30
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b22      	cmp	r3, #34	@ 0x22
 8004b46:	f040 80ae 	bne.w	8004ca6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b52:	d117      	bne.n	8004b84 <UART_Receive_IT+0x50>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d113      	bne.n	8004b84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b82:	e026      	b.n	8004bd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b96:	d007      	beq.n	8004ba8 <UART_Receive_IT+0x74>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <UART_Receive_IT+0x82>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e008      	b.n	8004bc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4619      	mov	r1, r3
 8004be0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d15d      	bne.n	8004ca2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0220 	bic.w	r2, r2, #32
 8004bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d135      	bne.n	8004c98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	613b      	str	r3, [r7, #16]
   return(result);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f023 0310 	bic.w	r3, r3, #16
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c52:	623a      	str	r2, [r7, #32]
 8004c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	69f9      	ldr	r1, [r7, #28]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e5      	bne.n	8004c32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d10a      	bne.n	8004c8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fdd1 	bl	8004838 <HAL_UARTEx_RxEventCallback>
 8004c96:	e002      	b.n	8004c9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fb ff77 	bl	8000b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e002      	b.n	8004ca8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3730      	adds	r7, #48	@ 0x30
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb4:	b0c0      	sub	sp, #256	@ 0x100
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ccc:	68d9      	ldr	r1, [r3, #12]
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	ea40 0301 	orr.w	r3, r0, r1
 8004cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d08:	f021 010c 	bic.w	r1, r1, #12
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d16:	430b      	orrs	r3, r1
 8004d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2a:	6999      	ldr	r1, [r3, #24]
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	ea40 0301 	orr.w	r3, r0, r1
 8004d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b8f      	ldr	r3, [pc, #572]	@ (8004f7c <UART_SetConfig+0x2cc>)
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d005      	beq.n	8004d50 <UART_SetConfig+0xa0>
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f80 <UART_SetConfig+0x2d0>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d104      	bne.n	8004d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7fe fae2 	bl	8003318 <HAL_RCC_GetPCLK2Freq>
 8004d54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d58:	e003      	b.n	8004d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d5a:	f7fe fac9 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 8004d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d6c:	f040 810c 	bne.w	8004f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	1891      	adds	r1, r2, r2
 8004d88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d8a:	415b      	adcs	r3, r3
 8004d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d92:	4621      	mov	r1, r4
 8004d94:	eb12 0801 	adds.w	r8, r2, r1
 8004d98:	4629      	mov	r1, r5
 8004d9a:	eb43 0901 	adc.w	r9, r3, r1
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db2:	4690      	mov	r8, r2
 8004db4:	4699      	mov	r9, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	eb18 0303 	adds.w	r3, r8, r3
 8004dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	eb49 0303 	adc.w	r3, r9, r3
 8004dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dde:	460b      	mov	r3, r1
 8004de0:	18db      	adds	r3, r3, r3
 8004de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004de4:	4613      	mov	r3, r2
 8004de6:	eb42 0303 	adc.w	r3, r2, r3
 8004dea:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004df4:	f7fb fd52 	bl	800089c <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4b61      	ldr	r3, [pc, #388]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	011c      	lsls	r4, r3, #4
 8004e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	1891      	adds	r1, r2, r2
 8004e1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e20:	415b      	adcs	r3, r3
 8004e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e28:	4641      	mov	r1, r8
 8004e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e2e:	4649      	mov	r1, r9
 8004e30:	eb43 0b01 	adc.w	fp, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e48:	4692      	mov	sl, r2
 8004e4a:	469b      	mov	fp, r3
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e56:	464b      	mov	r3, r9
 8004e58:	eb4b 0303 	adc.w	r3, fp, r3
 8004e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e74:	460b      	mov	r3, r1
 8004e76:	18db      	adds	r3, r3, r3
 8004e78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	eb42 0303 	adc.w	r3, r2, r3
 8004e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e8a:	f7fb fd07 	bl	800089c <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	4b3b      	ldr	r3, [pc, #236]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004e96:	fba3 2301 	umull	r2, r3, r3, r1
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	2264      	movs	r2, #100	@ 0x64
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	1acb      	subs	r3, r1, r3
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004eaa:	4b36      	ldr	r3, [pc, #216]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004eac:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004eb8:	441c      	add	r4, r3
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004edc:	4641      	mov	r1, r8
 8004ede:	1851      	adds	r1, r2, r1
 8004ee0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	00cb      	lsls	r3, r1, #3
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efe:	4651      	mov	r1, sl
 8004f00:	00ca      	lsls	r2, r1, #3
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f10:	464b      	mov	r3, r9
 8004f12:	460a      	mov	r2, r1
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f30:	460b      	mov	r3, r1
 8004f32:	18db      	adds	r3, r3, r3
 8004f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f36:	4613      	mov	r3, r2
 8004f38:	eb42 0303 	adc.w	r3, r2, r3
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f46:	f7fb fca9 	bl	800089c <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	@ 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	3332      	adds	r3, #50	@ 0x32
 8004f62:	4a08      	ldr	r2, [pc, #32]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 0207 	and.w	r2, r3, #7
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4422      	add	r2, r4
 8004f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f78:	e106      	b.n	8005188 <UART_SetConfig+0x4d8>
 8004f7a:	bf00      	nop
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	40011400 	.word	0x40011400
 8004f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	1891      	adds	r1, r2, r2
 8004fa0:	6239      	str	r1, [r7, #32]
 8004fa2:	415b      	adcs	r3, r3
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004faa:	4641      	mov	r1, r8
 8004fac:	1854      	adds	r4, r2, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	eb43 0501 	adc.w	r5, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	00eb      	lsls	r3, r5, #3
 8004fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fc2:	00e2      	lsls	r2, r4, #3
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	461d      	mov	r5, r3
 8004fc8:	4643      	mov	r3, r8
 8004fca:	18e3      	adds	r3, r4, r3
 8004fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	eb45 0303 	adc.w	r3, r5, r3
 8004fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fe6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	008b      	lsls	r3, r1, #2
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005000:	4621      	mov	r1, r4
 8005002:	008a      	lsls	r2, r1, #2
 8005004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005008:	f7fb fc48 	bl	800089c <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4b60      	ldr	r3, [pc, #384]	@ (8005194 <UART_SetConfig+0x4e4>)
 8005012:	fba3 2302 	umull	r2, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	011c      	lsls	r4, r3, #4
 800501a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005024:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	1891      	adds	r1, r2, r2
 8005032:	61b9      	str	r1, [r7, #24]
 8005034:	415b      	adcs	r3, r3
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503c:	4641      	mov	r1, r8
 800503e:	1851      	adds	r1, r2, r1
 8005040:	6139      	str	r1, [r7, #16]
 8005042:	4649      	mov	r1, r9
 8005044:	414b      	adcs	r3, r1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005054:	4659      	mov	r1, fp
 8005056:	00cb      	lsls	r3, r1, #3
 8005058:	4651      	mov	r1, sl
 800505a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505e:	4651      	mov	r1, sl
 8005060:	00ca      	lsls	r2, r1, #3
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	4603      	mov	r3, r0
 8005068:	4642      	mov	r2, r8
 800506a:	189b      	adds	r3, r3, r2
 800506c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005070:	464b      	mov	r3, r9
 8005072:	460a      	mov	r2, r1
 8005074:	eb42 0303 	adc.w	r3, r2, r3
 8005078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005086:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005094:	4649      	mov	r1, r9
 8005096:	008b      	lsls	r3, r1, #2
 8005098:	4641      	mov	r1, r8
 800509a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800509e:	4641      	mov	r1, r8
 80050a0:	008a      	lsls	r2, r1, #2
 80050a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050a6:	f7fb fbf9 	bl	800089c <__aeabi_uldivmod>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	4b38      	ldr	r3, [pc, #224]	@ (8005194 <UART_SetConfig+0x4e4>)
 80050b2:	fba3 2301 	umull	r2, r3, r3, r1
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2264      	movs	r2, #100	@ 0x64
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	1acb      	subs	r3, r1, r3
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	3332      	adds	r3, #50	@ 0x32
 80050c4:	4a33      	ldr	r2, [pc, #204]	@ (8005194 <UART_SetConfig+0x4e4>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050d0:	441c      	add	r4, r3
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d6:	2200      	movs	r2, #0
 80050d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80050da:	677a      	str	r2, [r7, #116]	@ 0x74
 80050dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050e0:	4642      	mov	r2, r8
 80050e2:	464b      	mov	r3, r9
 80050e4:	1891      	adds	r1, r2, r2
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	415b      	adcs	r3, r3
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f0:	4641      	mov	r1, r8
 80050f2:	1851      	adds	r1, r2, r1
 80050f4:	6039      	str	r1, [r7, #0]
 80050f6:	4649      	mov	r1, r9
 80050f8:	414b      	adcs	r3, r1
 80050fa:	607b      	str	r3, [r7, #4]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005108:	4659      	mov	r1, fp
 800510a:	00cb      	lsls	r3, r1, #3
 800510c:	4651      	mov	r1, sl
 800510e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005112:	4651      	mov	r1, sl
 8005114:	00ca      	lsls	r2, r1, #3
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	4603      	mov	r3, r0
 800511c:	4642      	mov	r2, r8
 800511e:	189b      	adds	r3, r3, r2
 8005120:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005122:	464b      	mov	r3, r9
 8005124:	460a      	mov	r2, r1
 8005126:	eb42 0303 	adc.w	r3, r2, r3
 800512a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	663b      	str	r3, [r7, #96]	@ 0x60
 8005136:	667a      	str	r2, [r7, #100]	@ 0x64
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005144:	4649      	mov	r1, r9
 8005146:	008b      	lsls	r3, r1, #2
 8005148:	4641      	mov	r1, r8
 800514a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514e:	4641      	mov	r1, r8
 8005150:	008a      	lsls	r2, r1, #2
 8005152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005156:	f7fb fba1 	bl	800089c <__aeabi_uldivmod>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <UART_SetConfig+0x4e4>)
 8005160:	fba3 1302 	umull	r1, r3, r3, r2
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	2164      	movs	r1, #100	@ 0x64
 8005168:	fb01 f303 	mul.w	r3, r1, r3
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	3332      	adds	r3, #50	@ 0x32
 8005172:	4a08      	ldr	r2, [pc, #32]	@ (8005194 <UART_SetConfig+0x4e4>)
 8005174:	fba2 2303 	umull	r2, r3, r2, r3
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	f003 020f 	and.w	r2, r3, #15
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4422      	add	r2, r4
 8005186:	609a      	str	r2, [r3, #8]
}
 8005188:	bf00      	nop
 800518a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800518e:	46bd      	mov	sp, r7
 8005190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005194:	51eb851f 	.word	0x51eb851f

08005198 <std>:
 8005198:	2300      	movs	r3, #0
 800519a:	b510      	push	{r4, lr}
 800519c:	4604      	mov	r4, r0
 800519e:	e9c0 3300 	strd	r3, r3, [r0]
 80051a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051a6:	6083      	str	r3, [r0, #8]
 80051a8:	8181      	strh	r1, [r0, #12]
 80051aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80051ac:	81c2      	strh	r2, [r0, #14]
 80051ae:	6183      	str	r3, [r0, #24]
 80051b0:	4619      	mov	r1, r3
 80051b2:	2208      	movs	r2, #8
 80051b4:	305c      	adds	r0, #92	@ 0x5c
 80051b6:	f000 f9f9 	bl	80055ac <memset>
 80051ba:	4b0d      	ldr	r3, [pc, #52]	@ (80051f0 <std+0x58>)
 80051bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80051be:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <std+0x5c>)
 80051c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051c2:	4b0d      	ldr	r3, [pc, #52]	@ (80051f8 <std+0x60>)
 80051c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051c6:	4b0d      	ldr	r3, [pc, #52]	@ (80051fc <std+0x64>)
 80051c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80051ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <std+0x68>)
 80051cc:	6224      	str	r4, [r4, #32]
 80051ce:	429c      	cmp	r4, r3
 80051d0:	d006      	beq.n	80051e0 <std+0x48>
 80051d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051d6:	4294      	cmp	r4, r2
 80051d8:	d002      	beq.n	80051e0 <std+0x48>
 80051da:	33d0      	adds	r3, #208	@ 0xd0
 80051dc:	429c      	cmp	r4, r3
 80051de:	d105      	bne.n	80051ec <std+0x54>
 80051e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e8:	f000 ba6a 	b.w	80056c0 <__retarget_lock_init_recursive>
 80051ec:	bd10      	pop	{r4, pc}
 80051ee:	bf00      	nop
 80051f0:	080053fd 	.word	0x080053fd
 80051f4:	0800541f 	.word	0x0800541f
 80051f8:	08005457 	.word	0x08005457
 80051fc:	0800547b 	.word	0x0800547b
 8005200:	200002d4 	.word	0x200002d4

08005204 <stdio_exit_handler>:
 8005204:	4a02      	ldr	r2, [pc, #8]	@ (8005210 <stdio_exit_handler+0xc>)
 8005206:	4903      	ldr	r1, [pc, #12]	@ (8005214 <stdio_exit_handler+0x10>)
 8005208:	4803      	ldr	r0, [pc, #12]	@ (8005218 <stdio_exit_handler+0x14>)
 800520a:	f000 b869 	b.w	80052e0 <_fwalk_sglue>
 800520e:	bf00      	nop
 8005210:	2000001c 	.word	0x2000001c
 8005214:	08005f61 	.word	0x08005f61
 8005218:	2000002c 	.word	0x2000002c

0800521c <cleanup_stdio>:
 800521c:	6841      	ldr	r1, [r0, #4]
 800521e:	4b0c      	ldr	r3, [pc, #48]	@ (8005250 <cleanup_stdio+0x34>)
 8005220:	4299      	cmp	r1, r3
 8005222:	b510      	push	{r4, lr}
 8005224:	4604      	mov	r4, r0
 8005226:	d001      	beq.n	800522c <cleanup_stdio+0x10>
 8005228:	f000 fe9a 	bl	8005f60 <_fflush_r>
 800522c:	68a1      	ldr	r1, [r4, #8]
 800522e:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <cleanup_stdio+0x38>)
 8005230:	4299      	cmp	r1, r3
 8005232:	d002      	beq.n	800523a <cleanup_stdio+0x1e>
 8005234:	4620      	mov	r0, r4
 8005236:	f000 fe93 	bl	8005f60 <_fflush_r>
 800523a:	68e1      	ldr	r1, [r4, #12]
 800523c:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <cleanup_stdio+0x3c>)
 800523e:	4299      	cmp	r1, r3
 8005240:	d004      	beq.n	800524c <cleanup_stdio+0x30>
 8005242:	4620      	mov	r0, r4
 8005244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005248:	f000 be8a 	b.w	8005f60 <_fflush_r>
 800524c:	bd10      	pop	{r4, pc}
 800524e:	bf00      	nop
 8005250:	200002d4 	.word	0x200002d4
 8005254:	2000033c 	.word	0x2000033c
 8005258:	200003a4 	.word	0x200003a4

0800525c <global_stdio_init.part.0>:
 800525c:	b510      	push	{r4, lr}
 800525e:	4b0b      	ldr	r3, [pc, #44]	@ (800528c <global_stdio_init.part.0+0x30>)
 8005260:	4c0b      	ldr	r4, [pc, #44]	@ (8005290 <global_stdio_init.part.0+0x34>)
 8005262:	4a0c      	ldr	r2, [pc, #48]	@ (8005294 <global_stdio_init.part.0+0x38>)
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	4620      	mov	r0, r4
 8005268:	2200      	movs	r2, #0
 800526a:	2104      	movs	r1, #4
 800526c:	f7ff ff94 	bl	8005198 <std>
 8005270:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005274:	2201      	movs	r2, #1
 8005276:	2109      	movs	r1, #9
 8005278:	f7ff ff8e 	bl	8005198 <std>
 800527c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005280:	2202      	movs	r2, #2
 8005282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005286:	2112      	movs	r1, #18
 8005288:	f7ff bf86 	b.w	8005198 <std>
 800528c:	2000040c 	.word	0x2000040c
 8005290:	200002d4 	.word	0x200002d4
 8005294:	08005205 	.word	0x08005205

08005298 <__sfp_lock_acquire>:
 8005298:	4801      	ldr	r0, [pc, #4]	@ (80052a0 <__sfp_lock_acquire+0x8>)
 800529a:	f000 ba12 	b.w	80056c2 <__retarget_lock_acquire_recursive>
 800529e:	bf00      	nop
 80052a0:	20000415 	.word	0x20000415

080052a4 <__sfp_lock_release>:
 80052a4:	4801      	ldr	r0, [pc, #4]	@ (80052ac <__sfp_lock_release+0x8>)
 80052a6:	f000 ba0d 	b.w	80056c4 <__retarget_lock_release_recursive>
 80052aa:	bf00      	nop
 80052ac:	20000415 	.word	0x20000415

080052b0 <__sinit>:
 80052b0:	b510      	push	{r4, lr}
 80052b2:	4604      	mov	r4, r0
 80052b4:	f7ff fff0 	bl	8005298 <__sfp_lock_acquire>
 80052b8:	6a23      	ldr	r3, [r4, #32]
 80052ba:	b11b      	cbz	r3, 80052c4 <__sinit+0x14>
 80052bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c0:	f7ff bff0 	b.w	80052a4 <__sfp_lock_release>
 80052c4:	4b04      	ldr	r3, [pc, #16]	@ (80052d8 <__sinit+0x28>)
 80052c6:	6223      	str	r3, [r4, #32]
 80052c8:	4b04      	ldr	r3, [pc, #16]	@ (80052dc <__sinit+0x2c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f5      	bne.n	80052bc <__sinit+0xc>
 80052d0:	f7ff ffc4 	bl	800525c <global_stdio_init.part.0>
 80052d4:	e7f2      	b.n	80052bc <__sinit+0xc>
 80052d6:	bf00      	nop
 80052d8:	0800521d 	.word	0x0800521d
 80052dc:	2000040c 	.word	0x2000040c

080052e0 <_fwalk_sglue>:
 80052e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e4:	4607      	mov	r7, r0
 80052e6:	4688      	mov	r8, r1
 80052e8:	4614      	mov	r4, r2
 80052ea:	2600      	movs	r6, #0
 80052ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052f0:	f1b9 0901 	subs.w	r9, r9, #1
 80052f4:	d505      	bpl.n	8005302 <_fwalk_sglue+0x22>
 80052f6:	6824      	ldr	r4, [r4, #0]
 80052f8:	2c00      	cmp	r4, #0
 80052fa:	d1f7      	bne.n	80052ec <_fwalk_sglue+0xc>
 80052fc:	4630      	mov	r0, r6
 80052fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005302:	89ab      	ldrh	r3, [r5, #12]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d907      	bls.n	8005318 <_fwalk_sglue+0x38>
 8005308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800530c:	3301      	adds	r3, #1
 800530e:	d003      	beq.n	8005318 <_fwalk_sglue+0x38>
 8005310:	4629      	mov	r1, r5
 8005312:	4638      	mov	r0, r7
 8005314:	47c0      	blx	r8
 8005316:	4306      	orrs	r6, r0
 8005318:	3568      	adds	r5, #104	@ 0x68
 800531a:	e7e9      	b.n	80052f0 <_fwalk_sglue+0x10>

0800531c <iprintf>:
 800531c:	b40f      	push	{r0, r1, r2, r3}
 800531e:	b507      	push	{r0, r1, r2, lr}
 8005320:	4906      	ldr	r1, [pc, #24]	@ (800533c <iprintf+0x20>)
 8005322:	ab04      	add	r3, sp, #16
 8005324:	6808      	ldr	r0, [r1, #0]
 8005326:	f853 2b04 	ldr.w	r2, [r3], #4
 800532a:	6881      	ldr	r1, [r0, #8]
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	f000 faed 	bl	800590c <_vfiprintf_r>
 8005332:	b003      	add	sp, #12
 8005334:	f85d eb04 	ldr.w	lr, [sp], #4
 8005338:	b004      	add	sp, #16
 800533a:	4770      	bx	lr
 800533c:	20000028 	.word	0x20000028

08005340 <_puts_r>:
 8005340:	6a03      	ldr	r3, [r0, #32]
 8005342:	b570      	push	{r4, r5, r6, lr}
 8005344:	6884      	ldr	r4, [r0, #8]
 8005346:	4605      	mov	r5, r0
 8005348:	460e      	mov	r6, r1
 800534a:	b90b      	cbnz	r3, 8005350 <_puts_r+0x10>
 800534c:	f7ff ffb0 	bl	80052b0 <__sinit>
 8005350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005352:	07db      	lsls	r3, r3, #31
 8005354:	d405      	bmi.n	8005362 <_puts_r+0x22>
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	0598      	lsls	r0, r3, #22
 800535a:	d402      	bmi.n	8005362 <_puts_r+0x22>
 800535c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800535e:	f000 f9b0 	bl	80056c2 <__retarget_lock_acquire_recursive>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	0719      	lsls	r1, r3, #28
 8005366:	d502      	bpl.n	800536e <_puts_r+0x2e>
 8005368:	6923      	ldr	r3, [r4, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d135      	bne.n	80053da <_puts_r+0x9a>
 800536e:	4621      	mov	r1, r4
 8005370:	4628      	mov	r0, r5
 8005372:	f000 f8c5 	bl	8005500 <__swsetup_r>
 8005376:	b380      	cbz	r0, 80053da <_puts_r+0x9a>
 8005378:	f04f 35ff 	mov.w	r5, #4294967295
 800537c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800537e:	07da      	lsls	r2, r3, #31
 8005380:	d405      	bmi.n	800538e <_puts_r+0x4e>
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	059b      	lsls	r3, r3, #22
 8005386:	d402      	bmi.n	800538e <_puts_r+0x4e>
 8005388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800538a:	f000 f99b 	bl	80056c4 <__retarget_lock_release_recursive>
 800538e:	4628      	mov	r0, r5
 8005390:	bd70      	pop	{r4, r5, r6, pc}
 8005392:	2b00      	cmp	r3, #0
 8005394:	da04      	bge.n	80053a0 <_puts_r+0x60>
 8005396:	69a2      	ldr	r2, [r4, #24]
 8005398:	429a      	cmp	r2, r3
 800539a:	dc17      	bgt.n	80053cc <_puts_r+0x8c>
 800539c:	290a      	cmp	r1, #10
 800539e:	d015      	beq.n	80053cc <_puts_r+0x8c>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	6022      	str	r2, [r4, #0]
 80053a6:	7019      	strb	r1, [r3, #0]
 80053a8:	68a3      	ldr	r3, [r4, #8]
 80053aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053ae:	3b01      	subs	r3, #1
 80053b0:	60a3      	str	r3, [r4, #8]
 80053b2:	2900      	cmp	r1, #0
 80053b4:	d1ed      	bne.n	8005392 <_puts_r+0x52>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da11      	bge.n	80053de <_puts_r+0x9e>
 80053ba:	4622      	mov	r2, r4
 80053bc:	210a      	movs	r1, #10
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 f85f 	bl	8005482 <__swbuf_r>
 80053c4:	3001      	adds	r0, #1
 80053c6:	d0d7      	beq.n	8005378 <_puts_r+0x38>
 80053c8:	250a      	movs	r5, #10
 80053ca:	e7d7      	b.n	800537c <_puts_r+0x3c>
 80053cc:	4622      	mov	r2, r4
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 f857 	bl	8005482 <__swbuf_r>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d1e7      	bne.n	80053a8 <_puts_r+0x68>
 80053d8:	e7ce      	b.n	8005378 <_puts_r+0x38>
 80053da:	3e01      	subs	r6, #1
 80053dc:	e7e4      	b.n	80053a8 <_puts_r+0x68>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	6022      	str	r2, [r4, #0]
 80053e4:	220a      	movs	r2, #10
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	e7ee      	b.n	80053c8 <_puts_r+0x88>
	...

080053ec <puts>:
 80053ec:	4b02      	ldr	r3, [pc, #8]	@ (80053f8 <puts+0xc>)
 80053ee:	4601      	mov	r1, r0
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	f7ff bfa5 	b.w	8005340 <_puts_r>
 80053f6:	bf00      	nop
 80053f8:	20000028 	.word	0x20000028

080053fc <__sread>:
 80053fc:	b510      	push	{r4, lr}
 80053fe:	460c      	mov	r4, r1
 8005400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005404:	f000 f90e 	bl	8005624 <_read_r>
 8005408:	2800      	cmp	r0, #0
 800540a:	bfab      	itete	ge
 800540c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800540e:	89a3      	ldrhlt	r3, [r4, #12]
 8005410:	181b      	addge	r3, r3, r0
 8005412:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005416:	bfac      	ite	ge
 8005418:	6563      	strge	r3, [r4, #84]	@ 0x54
 800541a:	81a3      	strhlt	r3, [r4, #12]
 800541c:	bd10      	pop	{r4, pc}

0800541e <__swrite>:
 800541e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005422:	461f      	mov	r7, r3
 8005424:	898b      	ldrh	r3, [r1, #12]
 8005426:	05db      	lsls	r3, r3, #23
 8005428:	4605      	mov	r5, r0
 800542a:	460c      	mov	r4, r1
 800542c:	4616      	mov	r6, r2
 800542e:	d505      	bpl.n	800543c <__swrite+0x1e>
 8005430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005434:	2302      	movs	r3, #2
 8005436:	2200      	movs	r2, #0
 8005438:	f000 f8e2 	bl	8005600 <_lseek_r>
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005446:	81a3      	strh	r3, [r4, #12]
 8005448:	4632      	mov	r2, r6
 800544a:	463b      	mov	r3, r7
 800544c:	4628      	mov	r0, r5
 800544e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005452:	f000 b8f9 	b.w	8005648 <_write_r>

08005456 <__sseek>:
 8005456:	b510      	push	{r4, lr}
 8005458:	460c      	mov	r4, r1
 800545a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545e:	f000 f8cf 	bl	8005600 <_lseek_r>
 8005462:	1c43      	adds	r3, r0, #1
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	bf15      	itete	ne
 8005468:	6560      	strne	r0, [r4, #84]	@ 0x54
 800546a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800546e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005472:	81a3      	strheq	r3, [r4, #12]
 8005474:	bf18      	it	ne
 8005476:	81a3      	strhne	r3, [r4, #12]
 8005478:	bd10      	pop	{r4, pc}

0800547a <__sclose>:
 800547a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800547e:	f000 b8af 	b.w	80055e0 <_close_r>

08005482 <__swbuf_r>:
 8005482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005484:	460e      	mov	r6, r1
 8005486:	4614      	mov	r4, r2
 8005488:	4605      	mov	r5, r0
 800548a:	b118      	cbz	r0, 8005494 <__swbuf_r+0x12>
 800548c:	6a03      	ldr	r3, [r0, #32]
 800548e:	b90b      	cbnz	r3, 8005494 <__swbuf_r+0x12>
 8005490:	f7ff ff0e 	bl	80052b0 <__sinit>
 8005494:	69a3      	ldr	r3, [r4, #24]
 8005496:	60a3      	str	r3, [r4, #8]
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	071a      	lsls	r2, r3, #28
 800549c:	d501      	bpl.n	80054a2 <__swbuf_r+0x20>
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	b943      	cbnz	r3, 80054b4 <__swbuf_r+0x32>
 80054a2:	4621      	mov	r1, r4
 80054a4:	4628      	mov	r0, r5
 80054a6:	f000 f82b 	bl	8005500 <__swsetup_r>
 80054aa:	b118      	cbz	r0, 80054b4 <__swbuf_r+0x32>
 80054ac:	f04f 37ff 	mov.w	r7, #4294967295
 80054b0:	4638      	mov	r0, r7
 80054b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	6922      	ldr	r2, [r4, #16]
 80054b8:	1a98      	subs	r0, r3, r2
 80054ba:	6963      	ldr	r3, [r4, #20]
 80054bc:	b2f6      	uxtb	r6, r6
 80054be:	4283      	cmp	r3, r0
 80054c0:	4637      	mov	r7, r6
 80054c2:	dc05      	bgt.n	80054d0 <__swbuf_r+0x4e>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 fd4a 	bl	8005f60 <_fflush_r>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d1ed      	bne.n	80054ac <__swbuf_r+0x2a>
 80054d0:	68a3      	ldr	r3, [r4, #8]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	60a3      	str	r3, [r4, #8]
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	6022      	str	r2, [r4, #0]
 80054dc:	701e      	strb	r6, [r3, #0]
 80054de:	6962      	ldr	r2, [r4, #20]
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d004      	beq.n	80054f0 <__swbuf_r+0x6e>
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	07db      	lsls	r3, r3, #31
 80054ea:	d5e1      	bpl.n	80054b0 <__swbuf_r+0x2e>
 80054ec:	2e0a      	cmp	r6, #10
 80054ee:	d1df      	bne.n	80054b0 <__swbuf_r+0x2e>
 80054f0:	4621      	mov	r1, r4
 80054f2:	4628      	mov	r0, r5
 80054f4:	f000 fd34 	bl	8005f60 <_fflush_r>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d0d9      	beq.n	80054b0 <__swbuf_r+0x2e>
 80054fc:	e7d6      	b.n	80054ac <__swbuf_r+0x2a>
	...

08005500 <__swsetup_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4b29      	ldr	r3, [pc, #164]	@ (80055a8 <__swsetup_r+0xa8>)
 8005504:	4605      	mov	r5, r0
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	460c      	mov	r4, r1
 800550a:	b118      	cbz	r0, 8005514 <__swsetup_r+0x14>
 800550c:	6a03      	ldr	r3, [r0, #32]
 800550e:	b90b      	cbnz	r3, 8005514 <__swsetup_r+0x14>
 8005510:	f7ff fece 	bl	80052b0 <__sinit>
 8005514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005518:	0719      	lsls	r1, r3, #28
 800551a:	d422      	bmi.n	8005562 <__swsetup_r+0x62>
 800551c:	06da      	lsls	r2, r3, #27
 800551e:	d407      	bmi.n	8005530 <__swsetup_r+0x30>
 8005520:	2209      	movs	r2, #9
 8005522:	602a      	str	r2, [r5, #0]
 8005524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	f04f 30ff 	mov.w	r0, #4294967295
 800552e:	e033      	b.n	8005598 <__swsetup_r+0x98>
 8005530:	0758      	lsls	r0, r3, #29
 8005532:	d512      	bpl.n	800555a <__swsetup_r+0x5a>
 8005534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005536:	b141      	cbz	r1, 800554a <__swsetup_r+0x4a>
 8005538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800553c:	4299      	cmp	r1, r3
 800553e:	d002      	beq.n	8005546 <__swsetup_r+0x46>
 8005540:	4628      	mov	r0, r5
 8005542:	f000 f8c1 	bl	80056c8 <_free_r>
 8005546:	2300      	movs	r3, #0
 8005548:	6363      	str	r3, [r4, #52]	@ 0x34
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	2300      	movs	r3, #0
 8005554:	6063      	str	r3, [r4, #4]
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	f043 0308 	orr.w	r3, r3, #8
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	b94b      	cbnz	r3, 800557a <__swsetup_r+0x7a>
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800556c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005570:	d003      	beq.n	800557a <__swsetup_r+0x7a>
 8005572:	4621      	mov	r1, r4
 8005574:	4628      	mov	r0, r5
 8005576:	f000 fd41 	bl	8005ffc <__smakebuf_r>
 800557a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800557e:	f013 0201 	ands.w	r2, r3, #1
 8005582:	d00a      	beq.n	800559a <__swsetup_r+0x9a>
 8005584:	2200      	movs	r2, #0
 8005586:	60a2      	str	r2, [r4, #8]
 8005588:	6962      	ldr	r2, [r4, #20]
 800558a:	4252      	negs	r2, r2
 800558c:	61a2      	str	r2, [r4, #24]
 800558e:	6922      	ldr	r2, [r4, #16]
 8005590:	b942      	cbnz	r2, 80055a4 <__swsetup_r+0xa4>
 8005592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005596:	d1c5      	bne.n	8005524 <__swsetup_r+0x24>
 8005598:	bd38      	pop	{r3, r4, r5, pc}
 800559a:	0799      	lsls	r1, r3, #30
 800559c:	bf58      	it	pl
 800559e:	6962      	ldrpl	r2, [r4, #20]
 80055a0:	60a2      	str	r2, [r4, #8]
 80055a2:	e7f4      	b.n	800558e <__swsetup_r+0x8e>
 80055a4:	2000      	movs	r0, #0
 80055a6:	e7f7      	b.n	8005598 <__swsetup_r+0x98>
 80055a8:	20000028 	.word	0x20000028

080055ac <memset>:
 80055ac:	4402      	add	r2, r0
 80055ae:	4603      	mov	r3, r0
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d100      	bne.n	80055b6 <memset+0xa>
 80055b4:	4770      	bx	lr
 80055b6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ba:	e7f9      	b.n	80055b0 <memset+0x4>

080055bc <strncmp>:
 80055bc:	b510      	push	{r4, lr}
 80055be:	b16a      	cbz	r2, 80055dc <strncmp+0x20>
 80055c0:	3901      	subs	r1, #1
 80055c2:	1884      	adds	r4, r0, r2
 80055c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d103      	bne.n	80055d8 <strncmp+0x1c>
 80055d0:	42a0      	cmp	r0, r4
 80055d2:	d001      	beq.n	80055d8 <strncmp+0x1c>
 80055d4:	2a00      	cmp	r2, #0
 80055d6:	d1f5      	bne.n	80055c4 <strncmp+0x8>
 80055d8:	1ad0      	subs	r0, r2, r3
 80055da:	bd10      	pop	{r4, pc}
 80055dc:	4610      	mov	r0, r2
 80055de:	e7fc      	b.n	80055da <strncmp+0x1e>

080055e0 <_close_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4d06      	ldr	r5, [pc, #24]	@ (80055fc <_close_r+0x1c>)
 80055e4:	2300      	movs	r3, #0
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	f7fc fd79 	bl	80020e2 <_close>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_close_r+0x1a>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_close_r+0x1a>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	20000410 	.word	0x20000410

08005600 <_lseek_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4d07      	ldr	r5, [pc, #28]	@ (8005620 <_lseek_r+0x20>)
 8005604:	4604      	mov	r4, r0
 8005606:	4608      	mov	r0, r1
 8005608:	4611      	mov	r1, r2
 800560a:	2200      	movs	r2, #0
 800560c:	602a      	str	r2, [r5, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	f7fc fd8e 	bl	8002130 <_lseek>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_lseek_r+0x1e>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_lseek_r+0x1e>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	20000410 	.word	0x20000410

08005624 <_read_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	4d07      	ldr	r5, [pc, #28]	@ (8005644 <_read_r+0x20>)
 8005628:	4604      	mov	r4, r0
 800562a:	4608      	mov	r0, r1
 800562c:	4611      	mov	r1, r2
 800562e:	2200      	movs	r2, #0
 8005630:	602a      	str	r2, [r5, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	f7fc fd1c 	bl	8002070 <_read>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_read_r+0x1e>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_read_r+0x1e>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	20000410 	.word	0x20000410

08005648 <_write_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4d07      	ldr	r5, [pc, #28]	@ (8005668 <_write_r+0x20>)
 800564c:	4604      	mov	r4, r0
 800564e:	4608      	mov	r0, r1
 8005650:	4611      	mov	r1, r2
 8005652:	2200      	movs	r2, #0
 8005654:	602a      	str	r2, [r5, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	f7fc fd27 	bl	80020aa <_write>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_write_r+0x1e>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	b103      	cbz	r3, 8005666 <_write_r+0x1e>
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	20000410 	.word	0x20000410

0800566c <__errno>:
 800566c:	4b01      	ldr	r3, [pc, #4]	@ (8005674 <__errno+0x8>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000028 	.word	0x20000028

08005678 <__libc_init_array>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4d0d      	ldr	r5, [pc, #52]	@ (80056b0 <__libc_init_array+0x38>)
 800567c:	4c0d      	ldr	r4, [pc, #52]	@ (80056b4 <__libc_init_array+0x3c>)
 800567e:	1b64      	subs	r4, r4, r5
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	2600      	movs	r6, #0
 8005684:	42a6      	cmp	r6, r4
 8005686:	d109      	bne.n	800569c <__libc_init_array+0x24>
 8005688:	4d0b      	ldr	r5, [pc, #44]	@ (80056b8 <__libc_init_array+0x40>)
 800568a:	4c0c      	ldr	r4, [pc, #48]	@ (80056bc <__libc_init_array+0x44>)
 800568c:	f000 fd24 	bl	80060d8 <_init>
 8005690:	1b64      	subs	r4, r4, r5
 8005692:	10a4      	asrs	r4, r4, #2
 8005694:	2600      	movs	r6, #0
 8005696:	42a6      	cmp	r6, r4
 8005698:	d105      	bne.n	80056a6 <__libc_init_array+0x2e>
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a0:	4798      	blx	r3
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7ee      	b.n	8005684 <__libc_init_array+0xc>
 80056a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056aa:	4798      	blx	r3
 80056ac:	3601      	adds	r6, #1
 80056ae:	e7f2      	b.n	8005696 <__libc_init_array+0x1e>
 80056b0:	080061b4 	.word	0x080061b4
 80056b4:	080061b4 	.word	0x080061b4
 80056b8:	080061b4 	.word	0x080061b4
 80056bc:	080061b8 	.word	0x080061b8

080056c0 <__retarget_lock_init_recursive>:
 80056c0:	4770      	bx	lr

080056c2 <__retarget_lock_acquire_recursive>:
 80056c2:	4770      	bx	lr

080056c4 <__retarget_lock_release_recursive>:
 80056c4:	4770      	bx	lr
	...

080056c8 <_free_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4605      	mov	r5, r0
 80056cc:	2900      	cmp	r1, #0
 80056ce:	d041      	beq.n	8005754 <_free_r+0x8c>
 80056d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056d4:	1f0c      	subs	r4, r1, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bfb8      	it	lt
 80056da:	18e4      	addlt	r4, r4, r3
 80056dc:	f000 f8e0 	bl	80058a0 <__malloc_lock>
 80056e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <_free_r+0x90>)
 80056e2:	6813      	ldr	r3, [r2, #0]
 80056e4:	b933      	cbnz	r3, 80056f4 <_free_r+0x2c>
 80056e6:	6063      	str	r3, [r4, #4]
 80056e8:	6014      	str	r4, [r2, #0]
 80056ea:	4628      	mov	r0, r5
 80056ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056f0:	f000 b8dc 	b.w	80058ac <__malloc_unlock>
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	d908      	bls.n	800570a <_free_r+0x42>
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	1821      	adds	r1, r4, r0
 80056fc:	428b      	cmp	r3, r1
 80056fe:	bf01      	itttt	eq
 8005700:	6819      	ldreq	r1, [r3, #0]
 8005702:	685b      	ldreq	r3, [r3, #4]
 8005704:	1809      	addeq	r1, r1, r0
 8005706:	6021      	streq	r1, [r4, #0]
 8005708:	e7ed      	b.n	80056e6 <_free_r+0x1e>
 800570a:	461a      	mov	r2, r3
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b10b      	cbz	r3, 8005714 <_free_r+0x4c>
 8005710:	42a3      	cmp	r3, r4
 8005712:	d9fa      	bls.n	800570a <_free_r+0x42>
 8005714:	6811      	ldr	r1, [r2, #0]
 8005716:	1850      	adds	r0, r2, r1
 8005718:	42a0      	cmp	r0, r4
 800571a:	d10b      	bne.n	8005734 <_free_r+0x6c>
 800571c:	6820      	ldr	r0, [r4, #0]
 800571e:	4401      	add	r1, r0
 8005720:	1850      	adds	r0, r2, r1
 8005722:	4283      	cmp	r3, r0
 8005724:	6011      	str	r1, [r2, #0]
 8005726:	d1e0      	bne.n	80056ea <_free_r+0x22>
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	6053      	str	r3, [r2, #4]
 800572e:	4408      	add	r0, r1
 8005730:	6010      	str	r0, [r2, #0]
 8005732:	e7da      	b.n	80056ea <_free_r+0x22>
 8005734:	d902      	bls.n	800573c <_free_r+0x74>
 8005736:	230c      	movs	r3, #12
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	e7d6      	b.n	80056ea <_free_r+0x22>
 800573c:	6820      	ldr	r0, [r4, #0]
 800573e:	1821      	adds	r1, r4, r0
 8005740:	428b      	cmp	r3, r1
 8005742:	bf04      	itt	eq
 8005744:	6819      	ldreq	r1, [r3, #0]
 8005746:	685b      	ldreq	r3, [r3, #4]
 8005748:	6063      	str	r3, [r4, #4]
 800574a:	bf04      	itt	eq
 800574c:	1809      	addeq	r1, r1, r0
 800574e:	6021      	streq	r1, [r4, #0]
 8005750:	6054      	str	r4, [r2, #4]
 8005752:	e7ca      	b.n	80056ea <_free_r+0x22>
 8005754:	bd38      	pop	{r3, r4, r5, pc}
 8005756:	bf00      	nop
 8005758:	2000041c 	.word	0x2000041c

0800575c <sbrk_aligned>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	4e0f      	ldr	r6, [pc, #60]	@ (800579c <sbrk_aligned+0x40>)
 8005760:	460c      	mov	r4, r1
 8005762:	6831      	ldr	r1, [r6, #0]
 8005764:	4605      	mov	r5, r0
 8005766:	b911      	cbnz	r1, 800576e <sbrk_aligned+0x12>
 8005768:	f000 fca6 	bl	80060b8 <_sbrk_r>
 800576c:	6030      	str	r0, [r6, #0]
 800576e:	4621      	mov	r1, r4
 8005770:	4628      	mov	r0, r5
 8005772:	f000 fca1 	bl	80060b8 <_sbrk_r>
 8005776:	1c43      	adds	r3, r0, #1
 8005778:	d103      	bne.n	8005782 <sbrk_aligned+0x26>
 800577a:	f04f 34ff 	mov.w	r4, #4294967295
 800577e:	4620      	mov	r0, r4
 8005780:	bd70      	pop	{r4, r5, r6, pc}
 8005782:	1cc4      	adds	r4, r0, #3
 8005784:	f024 0403 	bic.w	r4, r4, #3
 8005788:	42a0      	cmp	r0, r4
 800578a:	d0f8      	beq.n	800577e <sbrk_aligned+0x22>
 800578c:	1a21      	subs	r1, r4, r0
 800578e:	4628      	mov	r0, r5
 8005790:	f000 fc92 	bl	80060b8 <_sbrk_r>
 8005794:	3001      	adds	r0, #1
 8005796:	d1f2      	bne.n	800577e <sbrk_aligned+0x22>
 8005798:	e7ef      	b.n	800577a <sbrk_aligned+0x1e>
 800579a:	bf00      	nop
 800579c:	20000418 	.word	0x20000418

080057a0 <_malloc_r>:
 80057a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a4:	1ccd      	adds	r5, r1, #3
 80057a6:	f025 0503 	bic.w	r5, r5, #3
 80057aa:	3508      	adds	r5, #8
 80057ac:	2d0c      	cmp	r5, #12
 80057ae:	bf38      	it	cc
 80057b0:	250c      	movcc	r5, #12
 80057b2:	2d00      	cmp	r5, #0
 80057b4:	4606      	mov	r6, r0
 80057b6:	db01      	blt.n	80057bc <_malloc_r+0x1c>
 80057b8:	42a9      	cmp	r1, r5
 80057ba:	d904      	bls.n	80057c6 <_malloc_r+0x26>
 80057bc:	230c      	movs	r3, #12
 80057be:	6033      	str	r3, [r6, #0]
 80057c0:	2000      	movs	r0, #0
 80057c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800589c <_malloc_r+0xfc>
 80057ca:	f000 f869 	bl	80058a0 <__malloc_lock>
 80057ce:	f8d8 3000 	ldr.w	r3, [r8]
 80057d2:	461c      	mov	r4, r3
 80057d4:	bb44      	cbnz	r4, 8005828 <_malloc_r+0x88>
 80057d6:	4629      	mov	r1, r5
 80057d8:	4630      	mov	r0, r6
 80057da:	f7ff ffbf 	bl	800575c <sbrk_aligned>
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	4604      	mov	r4, r0
 80057e2:	d158      	bne.n	8005896 <_malloc_r+0xf6>
 80057e4:	f8d8 4000 	ldr.w	r4, [r8]
 80057e8:	4627      	mov	r7, r4
 80057ea:	2f00      	cmp	r7, #0
 80057ec:	d143      	bne.n	8005876 <_malloc_r+0xd6>
 80057ee:	2c00      	cmp	r4, #0
 80057f0:	d04b      	beq.n	800588a <_malloc_r+0xea>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	4639      	mov	r1, r7
 80057f6:	4630      	mov	r0, r6
 80057f8:	eb04 0903 	add.w	r9, r4, r3
 80057fc:	f000 fc5c 	bl	80060b8 <_sbrk_r>
 8005800:	4581      	cmp	r9, r0
 8005802:	d142      	bne.n	800588a <_malloc_r+0xea>
 8005804:	6821      	ldr	r1, [r4, #0]
 8005806:	1a6d      	subs	r5, r5, r1
 8005808:	4629      	mov	r1, r5
 800580a:	4630      	mov	r0, r6
 800580c:	f7ff ffa6 	bl	800575c <sbrk_aligned>
 8005810:	3001      	adds	r0, #1
 8005812:	d03a      	beq.n	800588a <_malloc_r+0xea>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	442b      	add	r3, r5
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	f8d8 3000 	ldr.w	r3, [r8]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	bb62      	cbnz	r2, 800587c <_malloc_r+0xdc>
 8005822:	f8c8 7000 	str.w	r7, [r8]
 8005826:	e00f      	b.n	8005848 <_malloc_r+0xa8>
 8005828:	6822      	ldr	r2, [r4, #0]
 800582a:	1b52      	subs	r2, r2, r5
 800582c:	d420      	bmi.n	8005870 <_malloc_r+0xd0>
 800582e:	2a0b      	cmp	r2, #11
 8005830:	d917      	bls.n	8005862 <_malloc_r+0xc2>
 8005832:	1961      	adds	r1, r4, r5
 8005834:	42a3      	cmp	r3, r4
 8005836:	6025      	str	r5, [r4, #0]
 8005838:	bf18      	it	ne
 800583a:	6059      	strne	r1, [r3, #4]
 800583c:	6863      	ldr	r3, [r4, #4]
 800583e:	bf08      	it	eq
 8005840:	f8c8 1000 	streq.w	r1, [r8]
 8005844:	5162      	str	r2, [r4, r5]
 8005846:	604b      	str	r3, [r1, #4]
 8005848:	4630      	mov	r0, r6
 800584a:	f000 f82f 	bl	80058ac <__malloc_unlock>
 800584e:	f104 000b 	add.w	r0, r4, #11
 8005852:	1d23      	adds	r3, r4, #4
 8005854:	f020 0007 	bic.w	r0, r0, #7
 8005858:	1ac2      	subs	r2, r0, r3
 800585a:	bf1c      	itt	ne
 800585c:	1a1b      	subne	r3, r3, r0
 800585e:	50a3      	strne	r3, [r4, r2]
 8005860:	e7af      	b.n	80057c2 <_malloc_r+0x22>
 8005862:	6862      	ldr	r2, [r4, #4]
 8005864:	42a3      	cmp	r3, r4
 8005866:	bf0c      	ite	eq
 8005868:	f8c8 2000 	streq.w	r2, [r8]
 800586c:	605a      	strne	r2, [r3, #4]
 800586e:	e7eb      	b.n	8005848 <_malloc_r+0xa8>
 8005870:	4623      	mov	r3, r4
 8005872:	6864      	ldr	r4, [r4, #4]
 8005874:	e7ae      	b.n	80057d4 <_malloc_r+0x34>
 8005876:	463c      	mov	r4, r7
 8005878:	687f      	ldr	r7, [r7, #4]
 800587a:	e7b6      	b.n	80057ea <_malloc_r+0x4a>
 800587c:	461a      	mov	r2, r3
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	42a3      	cmp	r3, r4
 8005882:	d1fb      	bne.n	800587c <_malloc_r+0xdc>
 8005884:	2300      	movs	r3, #0
 8005886:	6053      	str	r3, [r2, #4]
 8005888:	e7de      	b.n	8005848 <_malloc_r+0xa8>
 800588a:	230c      	movs	r3, #12
 800588c:	6033      	str	r3, [r6, #0]
 800588e:	4630      	mov	r0, r6
 8005890:	f000 f80c 	bl	80058ac <__malloc_unlock>
 8005894:	e794      	b.n	80057c0 <_malloc_r+0x20>
 8005896:	6005      	str	r5, [r0, #0]
 8005898:	e7d6      	b.n	8005848 <_malloc_r+0xa8>
 800589a:	bf00      	nop
 800589c:	2000041c 	.word	0x2000041c

080058a0 <__malloc_lock>:
 80058a0:	4801      	ldr	r0, [pc, #4]	@ (80058a8 <__malloc_lock+0x8>)
 80058a2:	f7ff bf0e 	b.w	80056c2 <__retarget_lock_acquire_recursive>
 80058a6:	bf00      	nop
 80058a8:	20000414 	.word	0x20000414

080058ac <__malloc_unlock>:
 80058ac:	4801      	ldr	r0, [pc, #4]	@ (80058b4 <__malloc_unlock+0x8>)
 80058ae:	f7ff bf09 	b.w	80056c4 <__retarget_lock_release_recursive>
 80058b2:	bf00      	nop
 80058b4:	20000414 	.word	0x20000414

080058b8 <__sfputc_r>:
 80058b8:	6893      	ldr	r3, [r2, #8]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	b410      	push	{r4}
 80058c0:	6093      	str	r3, [r2, #8]
 80058c2:	da08      	bge.n	80058d6 <__sfputc_r+0x1e>
 80058c4:	6994      	ldr	r4, [r2, #24]
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	db01      	blt.n	80058ce <__sfputc_r+0x16>
 80058ca:	290a      	cmp	r1, #10
 80058cc:	d103      	bne.n	80058d6 <__sfputc_r+0x1e>
 80058ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d2:	f7ff bdd6 	b.w	8005482 <__swbuf_r>
 80058d6:	6813      	ldr	r3, [r2, #0]
 80058d8:	1c58      	adds	r0, r3, #1
 80058da:	6010      	str	r0, [r2, #0]
 80058dc:	7019      	strb	r1, [r3, #0]
 80058de:	4608      	mov	r0, r1
 80058e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <__sfputs_r>:
 80058e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e8:	4606      	mov	r6, r0
 80058ea:	460f      	mov	r7, r1
 80058ec:	4614      	mov	r4, r2
 80058ee:	18d5      	adds	r5, r2, r3
 80058f0:	42ac      	cmp	r4, r5
 80058f2:	d101      	bne.n	80058f8 <__sfputs_r+0x12>
 80058f4:	2000      	movs	r0, #0
 80058f6:	e007      	b.n	8005908 <__sfputs_r+0x22>
 80058f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fc:	463a      	mov	r2, r7
 80058fe:	4630      	mov	r0, r6
 8005900:	f7ff ffda 	bl	80058b8 <__sfputc_r>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d1f3      	bne.n	80058f0 <__sfputs_r+0xa>
 8005908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800590c <_vfiprintf_r>:
 800590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	460d      	mov	r5, r1
 8005912:	b09d      	sub	sp, #116	@ 0x74
 8005914:	4614      	mov	r4, r2
 8005916:	4698      	mov	r8, r3
 8005918:	4606      	mov	r6, r0
 800591a:	b118      	cbz	r0, 8005924 <_vfiprintf_r+0x18>
 800591c:	6a03      	ldr	r3, [r0, #32]
 800591e:	b90b      	cbnz	r3, 8005924 <_vfiprintf_r+0x18>
 8005920:	f7ff fcc6 	bl	80052b0 <__sinit>
 8005924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005926:	07d9      	lsls	r1, r3, #31
 8005928:	d405      	bmi.n	8005936 <_vfiprintf_r+0x2a>
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	059a      	lsls	r2, r3, #22
 800592e:	d402      	bmi.n	8005936 <_vfiprintf_r+0x2a>
 8005930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005932:	f7ff fec6 	bl	80056c2 <__retarget_lock_acquire_recursive>
 8005936:	89ab      	ldrh	r3, [r5, #12]
 8005938:	071b      	lsls	r3, r3, #28
 800593a:	d501      	bpl.n	8005940 <_vfiprintf_r+0x34>
 800593c:	692b      	ldr	r3, [r5, #16]
 800593e:	b99b      	cbnz	r3, 8005968 <_vfiprintf_r+0x5c>
 8005940:	4629      	mov	r1, r5
 8005942:	4630      	mov	r0, r6
 8005944:	f7ff fddc 	bl	8005500 <__swsetup_r>
 8005948:	b170      	cbz	r0, 8005968 <_vfiprintf_r+0x5c>
 800594a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800594c:	07dc      	lsls	r4, r3, #31
 800594e:	d504      	bpl.n	800595a <_vfiprintf_r+0x4e>
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	b01d      	add	sp, #116	@ 0x74
 8005956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595a:	89ab      	ldrh	r3, [r5, #12]
 800595c:	0598      	lsls	r0, r3, #22
 800595e:	d4f7      	bmi.n	8005950 <_vfiprintf_r+0x44>
 8005960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005962:	f7ff feaf 	bl	80056c4 <__retarget_lock_release_recursive>
 8005966:	e7f3      	b.n	8005950 <_vfiprintf_r+0x44>
 8005968:	2300      	movs	r3, #0
 800596a:	9309      	str	r3, [sp, #36]	@ 0x24
 800596c:	2320      	movs	r3, #32
 800596e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005972:	f8cd 800c 	str.w	r8, [sp, #12]
 8005976:	2330      	movs	r3, #48	@ 0x30
 8005978:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b28 <_vfiprintf_r+0x21c>
 800597c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005980:	f04f 0901 	mov.w	r9, #1
 8005984:	4623      	mov	r3, r4
 8005986:	469a      	mov	sl, r3
 8005988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800598c:	b10a      	cbz	r2, 8005992 <_vfiprintf_r+0x86>
 800598e:	2a25      	cmp	r2, #37	@ 0x25
 8005990:	d1f9      	bne.n	8005986 <_vfiprintf_r+0x7a>
 8005992:	ebba 0b04 	subs.w	fp, sl, r4
 8005996:	d00b      	beq.n	80059b0 <_vfiprintf_r+0xa4>
 8005998:	465b      	mov	r3, fp
 800599a:	4622      	mov	r2, r4
 800599c:	4629      	mov	r1, r5
 800599e:	4630      	mov	r0, r6
 80059a0:	f7ff ffa1 	bl	80058e6 <__sfputs_r>
 80059a4:	3001      	adds	r0, #1
 80059a6:	f000 80a7 	beq.w	8005af8 <_vfiprintf_r+0x1ec>
 80059aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059ac:	445a      	add	r2, fp
 80059ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80059b0:	f89a 3000 	ldrb.w	r3, [sl]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 809f 	beq.w	8005af8 <_vfiprintf_r+0x1ec>
 80059ba:	2300      	movs	r3, #0
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059c4:	f10a 0a01 	add.w	sl, sl, #1
 80059c8:	9304      	str	r3, [sp, #16]
 80059ca:	9307      	str	r3, [sp, #28]
 80059cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80059d2:	4654      	mov	r4, sl
 80059d4:	2205      	movs	r2, #5
 80059d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059da:	4853      	ldr	r0, [pc, #332]	@ (8005b28 <_vfiprintf_r+0x21c>)
 80059dc:	f7fa fc00 	bl	80001e0 <memchr>
 80059e0:	9a04      	ldr	r2, [sp, #16]
 80059e2:	b9d8      	cbnz	r0, 8005a1c <_vfiprintf_r+0x110>
 80059e4:	06d1      	lsls	r1, r2, #27
 80059e6:	bf44      	itt	mi
 80059e8:	2320      	movmi	r3, #32
 80059ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059ee:	0713      	lsls	r3, r2, #28
 80059f0:	bf44      	itt	mi
 80059f2:	232b      	movmi	r3, #43	@ 0x2b
 80059f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059f8:	f89a 3000 	ldrb.w	r3, [sl]
 80059fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80059fe:	d015      	beq.n	8005a2c <_vfiprintf_r+0x120>
 8005a00:	9a07      	ldr	r2, [sp, #28]
 8005a02:	4654      	mov	r4, sl
 8005a04:	2000      	movs	r0, #0
 8005a06:	f04f 0c0a 	mov.w	ip, #10
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a10:	3b30      	subs	r3, #48	@ 0x30
 8005a12:	2b09      	cmp	r3, #9
 8005a14:	d94b      	bls.n	8005aae <_vfiprintf_r+0x1a2>
 8005a16:	b1b0      	cbz	r0, 8005a46 <_vfiprintf_r+0x13a>
 8005a18:	9207      	str	r2, [sp, #28]
 8005a1a:	e014      	b.n	8005a46 <_vfiprintf_r+0x13a>
 8005a1c:	eba0 0308 	sub.w	r3, r0, r8
 8005a20:	fa09 f303 	lsl.w	r3, r9, r3
 8005a24:	4313      	orrs	r3, r2
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	46a2      	mov	sl, r4
 8005a2a:	e7d2      	b.n	80059d2 <_vfiprintf_r+0xc6>
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	1d19      	adds	r1, r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	9103      	str	r1, [sp, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bfbb      	ittet	lt
 8005a38:	425b      	neglt	r3, r3
 8005a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8005a3e:	9307      	strge	r3, [sp, #28]
 8005a40:	9307      	strlt	r3, [sp, #28]
 8005a42:	bfb8      	it	lt
 8005a44:	9204      	strlt	r2, [sp, #16]
 8005a46:	7823      	ldrb	r3, [r4, #0]
 8005a48:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a4a:	d10a      	bne.n	8005a62 <_vfiprintf_r+0x156>
 8005a4c:	7863      	ldrb	r3, [r4, #1]
 8005a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a50:	d132      	bne.n	8005ab8 <_vfiprintf_r+0x1ac>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	1d1a      	adds	r2, r3, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	9203      	str	r2, [sp, #12]
 8005a5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a5e:	3402      	adds	r4, #2
 8005a60:	9305      	str	r3, [sp, #20]
 8005a62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b38 <_vfiprintf_r+0x22c>
 8005a66:	7821      	ldrb	r1, [r4, #0]
 8005a68:	2203      	movs	r2, #3
 8005a6a:	4650      	mov	r0, sl
 8005a6c:	f7fa fbb8 	bl	80001e0 <memchr>
 8005a70:	b138      	cbz	r0, 8005a82 <_vfiprintf_r+0x176>
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	eba0 000a 	sub.w	r0, r0, sl
 8005a78:	2240      	movs	r2, #64	@ 0x40
 8005a7a:	4082      	lsls	r2, r0
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	3401      	adds	r4, #1
 8005a80:	9304      	str	r3, [sp, #16]
 8005a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a86:	4829      	ldr	r0, [pc, #164]	@ (8005b2c <_vfiprintf_r+0x220>)
 8005a88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a8c:	2206      	movs	r2, #6
 8005a8e:	f7fa fba7 	bl	80001e0 <memchr>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d03f      	beq.n	8005b16 <_vfiprintf_r+0x20a>
 8005a96:	4b26      	ldr	r3, [pc, #152]	@ (8005b30 <_vfiprintf_r+0x224>)
 8005a98:	bb1b      	cbnz	r3, 8005ae2 <_vfiprintf_r+0x1d6>
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	3307      	adds	r3, #7
 8005a9e:	f023 0307 	bic.w	r3, r3, #7
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	9303      	str	r3, [sp, #12]
 8005aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa8:	443b      	add	r3, r7
 8005aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aac:	e76a      	b.n	8005984 <_vfiprintf_r+0x78>
 8005aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	e7a8      	b.n	8005a0a <_vfiprintf_r+0xfe>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	3401      	adds	r4, #1
 8005abc:	9305      	str	r3, [sp, #20]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f04f 0c0a 	mov.w	ip, #10
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aca:	3a30      	subs	r2, #48	@ 0x30
 8005acc:	2a09      	cmp	r2, #9
 8005ace:	d903      	bls.n	8005ad8 <_vfiprintf_r+0x1cc>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0c6      	beq.n	8005a62 <_vfiprintf_r+0x156>
 8005ad4:	9105      	str	r1, [sp, #20]
 8005ad6:	e7c4      	b.n	8005a62 <_vfiprintf_r+0x156>
 8005ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005adc:	4604      	mov	r4, r0
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e7f0      	b.n	8005ac4 <_vfiprintf_r+0x1b8>
 8005ae2:	ab03      	add	r3, sp, #12
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	462a      	mov	r2, r5
 8005ae8:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <_vfiprintf_r+0x228>)
 8005aea:	a904      	add	r1, sp, #16
 8005aec:	4630      	mov	r0, r6
 8005aee:	f3af 8000 	nop.w
 8005af2:	4607      	mov	r7, r0
 8005af4:	1c78      	adds	r0, r7, #1
 8005af6:	d1d6      	bne.n	8005aa6 <_vfiprintf_r+0x19a>
 8005af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005afa:	07d9      	lsls	r1, r3, #31
 8005afc:	d405      	bmi.n	8005b0a <_vfiprintf_r+0x1fe>
 8005afe:	89ab      	ldrh	r3, [r5, #12]
 8005b00:	059a      	lsls	r2, r3, #22
 8005b02:	d402      	bmi.n	8005b0a <_vfiprintf_r+0x1fe>
 8005b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b06:	f7ff fddd 	bl	80056c4 <__retarget_lock_release_recursive>
 8005b0a:	89ab      	ldrh	r3, [r5, #12]
 8005b0c:	065b      	lsls	r3, r3, #25
 8005b0e:	f53f af1f 	bmi.w	8005950 <_vfiprintf_r+0x44>
 8005b12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b14:	e71e      	b.n	8005954 <_vfiprintf_r+0x48>
 8005b16:	ab03      	add	r3, sp, #12
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	462a      	mov	r2, r5
 8005b1c:	4b05      	ldr	r3, [pc, #20]	@ (8005b34 <_vfiprintf_r+0x228>)
 8005b1e:	a904      	add	r1, sp, #16
 8005b20:	4630      	mov	r0, r6
 8005b22:	f000 f879 	bl	8005c18 <_printf_i>
 8005b26:	e7e4      	b.n	8005af2 <_vfiprintf_r+0x1e6>
 8005b28:	08006178 	.word	0x08006178
 8005b2c:	08006182 	.word	0x08006182
 8005b30:	00000000 	.word	0x00000000
 8005b34:	080058e7 	.word	0x080058e7
 8005b38:	0800617e 	.word	0x0800617e

08005b3c <_printf_common>:
 8005b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b40:	4616      	mov	r6, r2
 8005b42:	4698      	mov	r8, r3
 8005b44:	688a      	ldr	r2, [r1, #8]
 8005b46:	690b      	ldr	r3, [r1, #16]
 8005b48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	bfb8      	it	lt
 8005b50:	4613      	movlt	r3, r2
 8005b52:	6033      	str	r3, [r6, #0]
 8005b54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b58:	4607      	mov	r7, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	b10a      	cbz	r2, 8005b62 <_printf_common+0x26>
 8005b5e:	3301      	adds	r3, #1
 8005b60:	6033      	str	r3, [r6, #0]
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	0699      	lsls	r1, r3, #26
 8005b66:	bf42      	ittt	mi
 8005b68:	6833      	ldrmi	r3, [r6, #0]
 8005b6a:	3302      	addmi	r3, #2
 8005b6c:	6033      	strmi	r3, [r6, #0]
 8005b6e:	6825      	ldr	r5, [r4, #0]
 8005b70:	f015 0506 	ands.w	r5, r5, #6
 8005b74:	d106      	bne.n	8005b84 <_printf_common+0x48>
 8005b76:	f104 0a19 	add.w	sl, r4, #25
 8005b7a:	68e3      	ldr	r3, [r4, #12]
 8005b7c:	6832      	ldr	r2, [r6, #0]
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	42ab      	cmp	r3, r5
 8005b82:	dc26      	bgt.n	8005bd2 <_printf_common+0x96>
 8005b84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	3b00      	subs	r3, #0
 8005b8c:	bf18      	it	ne
 8005b8e:	2301      	movne	r3, #1
 8005b90:	0692      	lsls	r2, r2, #26
 8005b92:	d42b      	bmi.n	8005bec <_printf_common+0xb0>
 8005b94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b98:	4641      	mov	r1, r8
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	47c8      	blx	r9
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d01e      	beq.n	8005be0 <_printf_common+0xa4>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	6922      	ldr	r2, [r4, #16]
 8005ba6:	f003 0306 	and.w	r3, r3, #6
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	bf02      	ittt	eq
 8005bae:	68e5      	ldreq	r5, [r4, #12]
 8005bb0:	6833      	ldreq	r3, [r6, #0]
 8005bb2:	1aed      	subeq	r5, r5, r3
 8005bb4:	68a3      	ldr	r3, [r4, #8]
 8005bb6:	bf0c      	ite	eq
 8005bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bbc:	2500      	movne	r5, #0
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	bfc4      	itt	gt
 8005bc2:	1a9b      	subgt	r3, r3, r2
 8005bc4:	18ed      	addgt	r5, r5, r3
 8005bc6:	2600      	movs	r6, #0
 8005bc8:	341a      	adds	r4, #26
 8005bca:	42b5      	cmp	r5, r6
 8005bcc:	d11a      	bne.n	8005c04 <_printf_common+0xc8>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	e008      	b.n	8005be4 <_printf_common+0xa8>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	4652      	mov	r2, sl
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	4638      	mov	r0, r7
 8005bda:	47c8      	blx	r9
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d103      	bne.n	8005be8 <_printf_common+0xac>
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295
 8005be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be8:	3501      	adds	r5, #1
 8005bea:	e7c6      	b.n	8005b7a <_printf_common+0x3e>
 8005bec:	18e1      	adds	r1, r4, r3
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	2030      	movs	r0, #48	@ 0x30
 8005bf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bf6:	4422      	add	r2, r4
 8005bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c00:	3302      	adds	r3, #2
 8005c02:	e7c7      	b.n	8005b94 <_printf_common+0x58>
 8005c04:	2301      	movs	r3, #1
 8005c06:	4622      	mov	r2, r4
 8005c08:	4641      	mov	r1, r8
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	47c8      	blx	r9
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d0e6      	beq.n	8005be0 <_printf_common+0xa4>
 8005c12:	3601      	adds	r6, #1
 8005c14:	e7d9      	b.n	8005bca <_printf_common+0x8e>
	...

08005c18 <_printf_i>:
 8005c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c1c:	7e0f      	ldrb	r7, [r1, #24]
 8005c1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c20:	2f78      	cmp	r7, #120	@ 0x78
 8005c22:	4691      	mov	r9, r2
 8005c24:	4680      	mov	r8, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	469a      	mov	sl, r3
 8005c2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c2e:	d807      	bhi.n	8005c40 <_printf_i+0x28>
 8005c30:	2f62      	cmp	r7, #98	@ 0x62
 8005c32:	d80a      	bhi.n	8005c4a <_printf_i+0x32>
 8005c34:	2f00      	cmp	r7, #0
 8005c36:	f000 80d2 	beq.w	8005dde <_printf_i+0x1c6>
 8005c3a:	2f58      	cmp	r7, #88	@ 0x58
 8005c3c:	f000 80b9 	beq.w	8005db2 <_printf_i+0x19a>
 8005c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c48:	e03a      	b.n	8005cc0 <_printf_i+0xa8>
 8005c4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c4e:	2b15      	cmp	r3, #21
 8005c50:	d8f6      	bhi.n	8005c40 <_printf_i+0x28>
 8005c52:	a101      	add	r1, pc, #4	@ (adr r1, 8005c58 <_printf_i+0x40>)
 8005c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c58:	08005cb1 	.word	0x08005cb1
 8005c5c:	08005cc5 	.word	0x08005cc5
 8005c60:	08005c41 	.word	0x08005c41
 8005c64:	08005c41 	.word	0x08005c41
 8005c68:	08005c41 	.word	0x08005c41
 8005c6c:	08005c41 	.word	0x08005c41
 8005c70:	08005cc5 	.word	0x08005cc5
 8005c74:	08005c41 	.word	0x08005c41
 8005c78:	08005c41 	.word	0x08005c41
 8005c7c:	08005c41 	.word	0x08005c41
 8005c80:	08005c41 	.word	0x08005c41
 8005c84:	08005dc5 	.word	0x08005dc5
 8005c88:	08005cef 	.word	0x08005cef
 8005c8c:	08005d7f 	.word	0x08005d7f
 8005c90:	08005c41 	.word	0x08005c41
 8005c94:	08005c41 	.word	0x08005c41
 8005c98:	08005de7 	.word	0x08005de7
 8005c9c:	08005c41 	.word	0x08005c41
 8005ca0:	08005cef 	.word	0x08005cef
 8005ca4:	08005c41 	.word	0x08005c41
 8005ca8:	08005c41 	.word	0x08005c41
 8005cac:	08005d87 	.word	0x08005d87
 8005cb0:	6833      	ldr	r3, [r6, #0]
 8005cb2:	1d1a      	adds	r2, r3, #4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6032      	str	r2, [r6, #0]
 8005cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e09d      	b.n	8005e00 <_printf_i+0x1e8>
 8005cc4:	6833      	ldr	r3, [r6, #0]
 8005cc6:	6820      	ldr	r0, [r4, #0]
 8005cc8:	1d19      	adds	r1, r3, #4
 8005cca:	6031      	str	r1, [r6, #0]
 8005ccc:	0606      	lsls	r6, r0, #24
 8005cce:	d501      	bpl.n	8005cd4 <_printf_i+0xbc>
 8005cd0:	681d      	ldr	r5, [r3, #0]
 8005cd2:	e003      	b.n	8005cdc <_printf_i+0xc4>
 8005cd4:	0645      	lsls	r5, r0, #25
 8005cd6:	d5fb      	bpl.n	8005cd0 <_printf_i+0xb8>
 8005cd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005cdc:	2d00      	cmp	r5, #0
 8005cde:	da03      	bge.n	8005ce8 <_printf_i+0xd0>
 8005ce0:	232d      	movs	r3, #45	@ 0x2d
 8005ce2:	426d      	negs	r5, r5
 8005ce4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ce8:	4859      	ldr	r0, [pc, #356]	@ (8005e50 <_printf_i+0x238>)
 8005cea:	230a      	movs	r3, #10
 8005cec:	e011      	b.n	8005d12 <_printf_i+0xfa>
 8005cee:	6821      	ldr	r1, [r4, #0]
 8005cf0:	6833      	ldr	r3, [r6, #0]
 8005cf2:	0608      	lsls	r0, r1, #24
 8005cf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cf8:	d402      	bmi.n	8005d00 <_printf_i+0xe8>
 8005cfa:	0649      	lsls	r1, r1, #25
 8005cfc:	bf48      	it	mi
 8005cfe:	b2ad      	uxthmi	r5, r5
 8005d00:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d02:	4853      	ldr	r0, [pc, #332]	@ (8005e50 <_printf_i+0x238>)
 8005d04:	6033      	str	r3, [r6, #0]
 8005d06:	bf14      	ite	ne
 8005d08:	230a      	movne	r3, #10
 8005d0a:	2308      	moveq	r3, #8
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d12:	6866      	ldr	r6, [r4, #4]
 8005d14:	60a6      	str	r6, [r4, #8]
 8005d16:	2e00      	cmp	r6, #0
 8005d18:	bfa2      	ittt	ge
 8005d1a:	6821      	ldrge	r1, [r4, #0]
 8005d1c:	f021 0104 	bicge.w	r1, r1, #4
 8005d20:	6021      	strge	r1, [r4, #0]
 8005d22:	b90d      	cbnz	r5, 8005d28 <_printf_i+0x110>
 8005d24:	2e00      	cmp	r6, #0
 8005d26:	d04b      	beq.n	8005dc0 <_printf_i+0x1a8>
 8005d28:	4616      	mov	r6, r2
 8005d2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d2e:	fb03 5711 	mls	r7, r3, r1, r5
 8005d32:	5dc7      	ldrb	r7, [r0, r7]
 8005d34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d38:	462f      	mov	r7, r5
 8005d3a:	42bb      	cmp	r3, r7
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	d9f4      	bls.n	8005d2a <_printf_i+0x112>
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d10b      	bne.n	8005d5c <_printf_i+0x144>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	07df      	lsls	r7, r3, #31
 8005d48:	d508      	bpl.n	8005d5c <_printf_i+0x144>
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	6861      	ldr	r1, [r4, #4]
 8005d4e:	4299      	cmp	r1, r3
 8005d50:	bfde      	ittt	le
 8005d52:	2330      	movle	r3, #48	@ 0x30
 8005d54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d5c:	1b92      	subs	r2, r2, r6
 8005d5e:	6122      	str	r2, [r4, #16]
 8005d60:	f8cd a000 	str.w	sl, [sp]
 8005d64:	464b      	mov	r3, r9
 8005d66:	aa03      	add	r2, sp, #12
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	f7ff fee6 	bl	8005b3c <_printf_common>
 8005d70:	3001      	adds	r0, #1
 8005d72:	d14a      	bne.n	8005e0a <_printf_i+0x1f2>
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	b004      	add	sp, #16
 8005d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	f043 0320 	orr.w	r3, r3, #32
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	4833      	ldr	r0, [pc, #204]	@ (8005e54 <_printf_i+0x23c>)
 8005d88:	2778      	movs	r7, #120	@ 0x78
 8005d8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	6831      	ldr	r1, [r6, #0]
 8005d92:	061f      	lsls	r7, r3, #24
 8005d94:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d98:	d402      	bmi.n	8005da0 <_printf_i+0x188>
 8005d9a:	065f      	lsls	r7, r3, #25
 8005d9c:	bf48      	it	mi
 8005d9e:	b2ad      	uxthmi	r5, r5
 8005da0:	6031      	str	r1, [r6, #0]
 8005da2:	07d9      	lsls	r1, r3, #31
 8005da4:	bf44      	itt	mi
 8005da6:	f043 0320 	orrmi.w	r3, r3, #32
 8005daa:	6023      	strmi	r3, [r4, #0]
 8005dac:	b11d      	cbz	r5, 8005db6 <_printf_i+0x19e>
 8005dae:	2310      	movs	r3, #16
 8005db0:	e7ac      	b.n	8005d0c <_printf_i+0xf4>
 8005db2:	4827      	ldr	r0, [pc, #156]	@ (8005e50 <_printf_i+0x238>)
 8005db4:	e7e9      	b.n	8005d8a <_printf_i+0x172>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	f023 0320 	bic.w	r3, r3, #32
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	e7f6      	b.n	8005dae <_printf_i+0x196>
 8005dc0:	4616      	mov	r6, r2
 8005dc2:	e7bd      	b.n	8005d40 <_printf_i+0x128>
 8005dc4:	6833      	ldr	r3, [r6, #0]
 8005dc6:	6825      	ldr	r5, [r4, #0]
 8005dc8:	6961      	ldr	r1, [r4, #20]
 8005dca:	1d18      	adds	r0, r3, #4
 8005dcc:	6030      	str	r0, [r6, #0]
 8005dce:	062e      	lsls	r6, r5, #24
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	d501      	bpl.n	8005dd8 <_printf_i+0x1c0>
 8005dd4:	6019      	str	r1, [r3, #0]
 8005dd6:	e002      	b.n	8005dde <_printf_i+0x1c6>
 8005dd8:	0668      	lsls	r0, r5, #25
 8005dda:	d5fb      	bpl.n	8005dd4 <_printf_i+0x1bc>
 8005ddc:	8019      	strh	r1, [r3, #0]
 8005dde:	2300      	movs	r3, #0
 8005de0:	6123      	str	r3, [r4, #16]
 8005de2:	4616      	mov	r6, r2
 8005de4:	e7bc      	b.n	8005d60 <_printf_i+0x148>
 8005de6:	6833      	ldr	r3, [r6, #0]
 8005de8:	1d1a      	adds	r2, r3, #4
 8005dea:	6032      	str	r2, [r6, #0]
 8005dec:	681e      	ldr	r6, [r3, #0]
 8005dee:	6862      	ldr	r2, [r4, #4]
 8005df0:	2100      	movs	r1, #0
 8005df2:	4630      	mov	r0, r6
 8005df4:	f7fa f9f4 	bl	80001e0 <memchr>
 8005df8:	b108      	cbz	r0, 8005dfe <_printf_i+0x1e6>
 8005dfa:	1b80      	subs	r0, r0, r6
 8005dfc:	6060      	str	r0, [r4, #4]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	2300      	movs	r3, #0
 8005e04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e08:	e7aa      	b.n	8005d60 <_printf_i+0x148>
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	4649      	mov	r1, r9
 8005e10:	4640      	mov	r0, r8
 8005e12:	47d0      	blx	sl
 8005e14:	3001      	adds	r0, #1
 8005e16:	d0ad      	beq.n	8005d74 <_printf_i+0x15c>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	079b      	lsls	r3, r3, #30
 8005e1c:	d413      	bmi.n	8005e46 <_printf_i+0x22e>
 8005e1e:	68e0      	ldr	r0, [r4, #12]
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	4298      	cmp	r0, r3
 8005e24:	bfb8      	it	lt
 8005e26:	4618      	movlt	r0, r3
 8005e28:	e7a6      	b.n	8005d78 <_printf_i+0x160>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4632      	mov	r2, r6
 8005e2e:	4649      	mov	r1, r9
 8005e30:	4640      	mov	r0, r8
 8005e32:	47d0      	blx	sl
 8005e34:	3001      	adds	r0, #1
 8005e36:	d09d      	beq.n	8005d74 <_printf_i+0x15c>
 8005e38:	3501      	adds	r5, #1
 8005e3a:	68e3      	ldr	r3, [r4, #12]
 8005e3c:	9903      	ldr	r1, [sp, #12]
 8005e3e:	1a5b      	subs	r3, r3, r1
 8005e40:	42ab      	cmp	r3, r5
 8005e42:	dcf2      	bgt.n	8005e2a <_printf_i+0x212>
 8005e44:	e7eb      	b.n	8005e1e <_printf_i+0x206>
 8005e46:	2500      	movs	r5, #0
 8005e48:	f104 0619 	add.w	r6, r4, #25
 8005e4c:	e7f5      	b.n	8005e3a <_printf_i+0x222>
 8005e4e:	bf00      	nop
 8005e50:	08006189 	.word	0x08006189
 8005e54:	0800619a 	.word	0x0800619a

08005e58 <__sflush_r>:
 8005e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e60:	0716      	lsls	r6, r2, #28
 8005e62:	4605      	mov	r5, r0
 8005e64:	460c      	mov	r4, r1
 8005e66:	d454      	bmi.n	8005f12 <__sflush_r+0xba>
 8005e68:	684b      	ldr	r3, [r1, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	dc02      	bgt.n	8005e74 <__sflush_r+0x1c>
 8005e6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	dd48      	ble.n	8005f06 <__sflush_r+0xae>
 8005e74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e76:	2e00      	cmp	r6, #0
 8005e78:	d045      	beq.n	8005f06 <__sflush_r+0xae>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e80:	682f      	ldr	r7, [r5, #0]
 8005e82:	6a21      	ldr	r1, [r4, #32]
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	d030      	beq.n	8005eea <__sflush_r+0x92>
 8005e88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	0759      	lsls	r1, r3, #29
 8005e8e:	d505      	bpl.n	8005e9c <__sflush_r+0x44>
 8005e90:	6863      	ldr	r3, [r4, #4]
 8005e92:	1ad2      	subs	r2, r2, r3
 8005e94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e96:	b10b      	cbz	r3, 8005e9c <__sflush_r+0x44>
 8005e98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ea0:	6a21      	ldr	r1, [r4, #32]
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	47b0      	blx	r6
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	d106      	bne.n	8005eba <__sflush_r+0x62>
 8005eac:	6829      	ldr	r1, [r5, #0]
 8005eae:	291d      	cmp	r1, #29
 8005eb0:	d82b      	bhi.n	8005f0a <__sflush_r+0xb2>
 8005eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f5c <__sflush_r+0x104>)
 8005eb4:	410a      	asrs	r2, r1
 8005eb6:	07d6      	lsls	r6, r2, #31
 8005eb8:	d427      	bmi.n	8005f0a <__sflush_r+0xb2>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	6062      	str	r2, [r4, #4]
 8005ebe:	04d9      	lsls	r1, r3, #19
 8005ec0:	6922      	ldr	r2, [r4, #16]
 8005ec2:	6022      	str	r2, [r4, #0]
 8005ec4:	d504      	bpl.n	8005ed0 <__sflush_r+0x78>
 8005ec6:	1c42      	adds	r2, r0, #1
 8005ec8:	d101      	bne.n	8005ece <__sflush_r+0x76>
 8005eca:	682b      	ldr	r3, [r5, #0]
 8005ecc:	b903      	cbnz	r3, 8005ed0 <__sflush_r+0x78>
 8005ece:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ed2:	602f      	str	r7, [r5, #0]
 8005ed4:	b1b9      	cbz	r1, 8005f06 <__sflush_r+0xae>
 8005ed6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005eda:	4299      	cmp	r1, r3
 8005edc:	d002      	beq.n	8005ee4 <__sflush_r+0x8c>
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f7ff fbf2 	bl	80056c8 <_free_r>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ee8:	e00d      	b.n	8005f06 <__sflush_r+0xae>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b0      	blx	r6
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	1c50      	adds	r0, r2, #1
 8005ef4:	d1c9      	bne.n	8005e8a <__sflush_r+0x32>
 8005ef6:	682b      	ldr	r3, [r5, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0c6      	beq.n	8005e8a <__sflush_r+0x32>
 8005efc:	2b1d      	cmp	r3, #29
 8005efe:	d001      	beq.n	8005f04 <__sflush_r+0xac>
 8005f00:	2b16      	cmp	r3, #22
 8005f02:	d11e      	bne.n	8005f42 <__sflush_r+0xea>
 8005f04:	602f      	str	r7, [r5, #0]
 8005f06:	2000      	movs	r0, #0
 8005f08:	e022      	b.n	8005f50 <__sflush_r+0xf8>
 8005f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f0e:	b21b      	sxth	r3, r3
 8005f10:	e01b      	b.n	8005f4a <__sflush_r+0xf2>
 8005f12:	690f      	ldr	r7, [r1, #16]
 8005f14:	2f00      	cmp	r7, #0
 8005f16:	d0f6      	beq.n	8005f06 <__sflush_r+0xae>
 8005f18:	0793      	lsls	r3, r2, #30
 8005f1a:	680e      	ldr	r6, [r1, #0]
 8005f1c:	bf08      	it	eq
 8005f1e:	694b      	ldreq	r3, [r1, #20]
 8005f20:	600f      	str	r7, [r1, #0]
 8005f22:	bf18      	it	ne
 8005f24:	2300      	movne	r3, #0
 8005f26:	eba6 0807 	sub.w	r8, r6, r7
 8005f2a:	608b      	str	r3, [r1, #8]
 8005f2c:	f1b8 0f00 	cmp.w	r8, #0
 8005f30:	dde9      	ble.n	8005f06 <__sflush_r+0xae>
 8005f32:	6a21      	ldr	r1, [r4, #32]
 8005f34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f36:	4643      	mov	r3, r8
 8005f38:	463a      	mov	r2, r7
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	47b0      	blx	r6
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	dc08      	bgt.n	8005f54 <__sflush_r+0xfc>
 8005f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f4a:	81a3      	strh	r3, [r4, #12]
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f54:	4407      	add	r7, r0
 8005f56:	eba8 0800 	sub.w	r8, r8, r0
 8005f5a:	e7e7      	b.n	8005f2c <__sflush_r+0xd4>
 8005f5c:	dfbffffe 	.word	0xdfbffffe

08005f60 <_fflush_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	690b      	ldr	r3, [r1, #16]
 8005f64:	4605      	mov	r5, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	b913      	cbnz	r3, 8005f70 <_fflush_r+0x10>
 8005f6a:	2500      	movs	r5, #0
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	b118      	cbz	r0, 8005f7a <_fflush_r+0x1a>
 8005f72:	6a03      	ldr	r3, [r0, #32]
 8005f74:	b90b      	cbnz	r3, 8005f7a <_fflush_r+0x1a>
 8005f76:	f7ff f99b 	bl	80052b0 <__sinit>
 8005f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f3      	beq.n	8005f6a <_fflush_r+0xa>
 8005f82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f84:	07d0      	lsls	r0, r2, #31
 8005f86:	d404      	bmi.n	8005f92 <_fflush_r+0x32>
 8005f88:	0599      	lsls	r1, r3, #22
 8005f8a:	d402      	bmi.n	8005f92 <_fflush_r+0x32>
 8005f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f8e:	f7ff fb98 	bl	80056c2 <__retarget_lock_acquire_recursive>
 8005f92:	4628      	mov	r0, r5
 8005f94:	4621      	mov	r1, r4
 8005f96:	f7ff ff5f 	bl	8005e58 <__sflush_r>
 8005f9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f9c:	07da      	lsls	r2, r3, #31
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	d4e4      	bmi.n	8005f6c <_fflush_r+0xc>
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	059b      	lsls	r3, r3, #22
 8005fa6:	d4e1      	bmi.n	8005f6c <_fflush_r+0xc>
 8005fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005faa:	f7ff fb8b 	bl	80056c4 <__retarget_lock_release_recursive>
 8005fae:	e7dd      	b.n	8005f6c <_fflush_r+0xc>

08005fb0 <__swhatbuf_r>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	b096      	sub	sp, #88	@ 0x58
 8005fbc:	4615      	mov	r5, r2
 8005fbe:	461e      	mov	r6, r3
 8005fc0:	da0d      	bge.n	8005fde <__swhatbuf_r+0x2e>
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005fc8:	f04f 0100 	mov.w	r1, #0
 8005fcc:	bf14      	ite	ne
 8005fce:	2340      	movne	r3, #64	@ 0x40
 8005fd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	6031      	str	r1, [r6, #0]
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	b016      	add	sp, #88	@ 0x58
 8005fdc:	bd70      	pop	{r4, r5, r6, pc}
 8005fde:	466a      	mov	r2, sp
 8005fe0:	f000 f848 	bl	8006074 <_fstat_r>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	dbec      	blt.n	8005fc2 <__swhatbuf_r+0x12>
 8005fe8:	9901      	ldr	r1, [sp, #4]
 8005fea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005fee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ff2:	4259      	negs	r1, r3
 8005ff4:	4159      	adcs	r1, r3
 8005ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ffa:	e7eb      	b.n	8005fd4 <__swhatbuf_r+0x24>

08005ffc <__smakebuf_r>:
 8005ffc:	898b      	ldrh	r3, [r1, #12]
 8005ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006000:	079d      	lsls	r5, r3, #30
 8006002:	4606      	mov	r6, r0
 8006004:	460c      	mov	r4, r1
 8006006:	d507      	bpl.n	8006018 <__smakebuf_r+0x1c>
 8006008:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	2301      	movs	r3, #1
 8006012:	6163      	str	r3, [r4, #20]
 8006014:	b003      	add	sp, #12
 8006016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006018:	ab01      	add	r3, sp, #4
 800601a:	466a      	mov	r2, sp
 800601c:	f7ff ffc8 	bl	8005fb0 <__swhatbuf_r>
 8006020:	9f00      	ldr	r7, [sp, #0]
 8006022:	4605      	mov	r5, r0
 8006024:	4639      	mov	r1, r7
 8006026:	4630      	mov	r0, r6
 8006028:	f7ff fbba 	bl	80057a0 <_malloc_r>
 800602c:	b948      	cbnz	r0, 8006042 <__smakebuf_r+0x46>
 800602e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006032:	059a      	lsls	r2, r3, #22
 8006034:	d4ee      	bmi.n	8006014 <__smakebuf_r+0x18>
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	f043 0302 	orr.w	r3, r3, #2
 800603e:	81a3      	strh	r3, [r4, #12]
 8006040:	e7e2      	b.n	8006008 <__smakebuf_r+0xc>
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	6020      	str	r0, [r4, #0]
 8006046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800604a:	81a3      	strh	r3, [r4, #12]
 800604c:	9b01      	ldr	r3, [sp, #4]
 800604e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006052:	b15b      	cbz	r3, 800606c <__smakebuf_r+0x70>
 8006054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006058:	4630      	mov	r0, r6
 800605a:	f000 f81d 	bl	8006098 <_isatty_r>
 800605e:	b128      	cbz	r0, 800606c <__smakebuf_r+0x70>
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	81a3      	strh	r3, [r4, #12]
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	431d      	orrs	r5, r3
 8006070:	81a5      	strh	r5, [r4, #12]
 8006072:	e7cf      	b.n	8006014 <__smakebuf_r+0x18>

08006074 <_fstat_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4d07      	ldr	r5, [pc, #28]	@ (8006094 <_fstat_r+0x20>)
 8006078:	2300      	movs	r3, #0
 800607a:	4604      	mov	r4, r0
 800607c:	4608      	mov	r0, r1
 800607e:	4611      	mov	r1, r2
 8006080:	602b      	str	r3, [r5, #0]
 8006082:	f7fc f83a 	bl	80020fa <_fstat>
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	d102      	bne.n	8006090 <_fstat_r+0x1c>
 800608a:	682b      	ldr	r3, [r5, #0]
 800608c:	b103      	cbz	r3, 8006090 <_fstat_r+0x1c>
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	bd38      	pop	{r3, r4, r5, pc}
 8006092:	bf00      	nop
 8006094:	20000410 	.word	0x20000410

08006098 <_isatty_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d06      	ldr	r5, [pc, #24]	@ (80060b4 <_isatty_r+0x1c>)
 800609c:	2300      	movs	r3, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	f7fc f839 	bl	800211a <_isatty>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_isatty_r+0x1a>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_isatty_r+0x1a>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20000410 	.word	0x20000410

080060b8 <_sbrk_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d06      	ldr	r5, [pc, #24]	@ (80060d4 <_sbrk_r+0x1c>)
 80060bc:	2300      	movs	r3, #0
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fc f842 	bl	800214c <_sbrk>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_sbrk_r+0x1a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_sbrk_r+0x1a>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20000410 	.word	0x20000410

080060d8 <_init>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	bf00      	nop
 80060dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060de:	bc08      	pop	{r3}
 80060e0:	469e      	mov	lr, r3
 80060e2:	4770      	bx	lr

080060e4 <_fini>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr
