
test09_Echo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b4c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08007cf0  08007cf0  00008cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008160  08008160  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008160  08008160  00009160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008168  08008168  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008168  08008168  00009168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800816c  0800816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008170  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001d4  08008344  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08008344  0000a3d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7fd  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d66  00000000  00000000  00016a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00018768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b8  00000000  00000000  000193e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170c4  00000000  00000000  00019d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0da  00000000  00000000  00030e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fcfb  00000000  00000000  0003ef36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cec31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a4  00000000  00000000  000cec74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d3618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007cd4 	.word	0x08007cd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007cd4 	.word	0x08007cd4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <usDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void usDelay(int us) // micro-second based Delay
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	volatile uint32_t t1 = htim2.Instance->CNT;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <usDelay+0x30>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001002:	60fb      	str	r3, [r7, #12]
	while((htim2.Instance->CNT -t1) < us);
 8001004:	bf00      	nop
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <usDelay+0x30>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1ad2      	subs	r2, r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3f7      	bcc.n	8001006 <usDelay+0x12>
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	200001f0 	.word	0x200001f0

08001028 <usDist>:

double usDist(int n)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	@ 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	int dt_sum = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 0; i< n; i++)
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001038:	e03e      	b.n	80010b8 <usDist+0x90>
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	4834      	ldr	r0, [pc, #208]	@ (8001110 <usDist+0xe8>)
 8001040:	f000 ff08 	bl	8001e54 <HAL_GPIO_WritePin>
		usDelay(10);
 8001044:	200a      	movs	r0, #10
 8001046:	f7ff ffd5 	bl	8000ff4 <usDelay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 800104a:	2201      	movs	r2, #1
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	4830      	ldr	r0, [pc, #192]	@ (8001110 <usDist+0xe8>)
 8001050:	f000 ff00 	bl	8001e54 <HAL_GPIO_WritePin>
		usDelay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f7ff ffcd 	bl	8000ff4 <usDelay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	482c      	ldr	r0, [pc, #176]	@ (8001110 <usDist+0xe8>)
 8001060:	f000 fef8 	bl	8001e54 <HAL_GPIO_WritePin>
		//	Wait for burst
		usDelay(200);
 8001064:	20c8      	movs	r0, #200	@ 0xc8
 8001066:	f7ff ffc5 	bl	8000ff4 <usDelay>
		//	Wait for Echo Low

		//	Start count
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) != 1);
 800106a:	bf00      	nop
 800106c:	2140      	movs	r1, #64	@ 0x40
 800106e:	4828      	ldr	r0, [pc, #160]	@ (8001110 <usDist+0xe8>)
 8001070:	f000 fed8 	bl	8001e24 <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b01      	cmp	r3, #1
 8001078:	d1f8      	bne.n	800106c <usDist+0x44>
		volatile uint32_t t1 = htim2.Instance->CNT;
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <usDist+0xec>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001080:	613b      	str	r3, [r7, #16]
		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) != 0);
 8001082:	bf00      	nop
 8001084:	2140      	movs	r1, #64	@ 0x40
 8001086:	4822      	ldr	r0, [pc, #136]	@ (8001110 <usDist+0xe8>)
 8001088:	f000 fecc 	bl	8001e24 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f8      	bne.n	8001084 <usDist+0x5c>
		volatile uint32_t t2 = htim2.Instance->CNT;
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <usDist+0xec>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	60fb      	str	r3, [r7, #12]

		int dt = t2 - t1;	//	micro-second sonic speed
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
		dt_sum += dt;
 80010a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4413      	add	r3, r2
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		usDelay(60000);	//	minimum delay for next time
 80010aa:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80010ae:	f7ff ffa1 	bl	8000ff4 <usDelay>
	for (int i = 0; i< n; i++)
 80010b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010b4:	3301      	adds	r3, #1
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbbc      	blt.n	800103a <usDist+0x12>

	}
	double dt_avg = dt_sum / 5;
 80010c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c2:	4a15      	ldr	r2, [pc, #84]	@ (8001118 <usDist+0xf0>)
 80010c4:	fb82 1203 	smull	r1, r2, r2, r3
 80010c8:	1052      	asrs	r2, r2, #1
 80010ca:	17db      	asrs	r3, r3, #31
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa30 	bl	8000534 <__aeabi_i2d>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dist = 0.0001715 * dt_avg;
 80010dc:	a30a      	add	r3, pc, #40	@ (adr r3, 8001108 <usDist+0xe0>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010e6:	f7ff fa8f 	bl	8000608 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	e9c7 2306 	strd	r2, r3, [r7, #24]

	return Dist;
 80010f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010f6:	ec43 2b17 	vmov	d7, r2, r3
}
 80010fa:	eeb0 0a47 	vmov.f32	s0, s14
 80010fe:	eef0 0a67 	vmov.f32	s1, s15
 8001102:	3730      	adds	r7, #48	@ 0x30
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	c853c148 	.word	0xc853c148
 800110c:	3f267a95 	.word	0x3f267a95
 8001110:	40020000 	.word	0x40020000
 8001114:	200001f0 	.word	0x200001f0
 8001118:	66666667 	.word	0x66666667

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f000 fb7f 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f849 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f000 f927 	bl	800137c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800112e:	f000 f8fb 	bl	8001328 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001132:	f000 f8ad 	bl	8001290 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //ProgramStart();
  HAL_TIM_Base_Start(&htim2);
 8001136:	481d      	ldr	r0, [pc, #116]	@ (80011ac <main+0x90>)
 8001138:	f001 fb8e 	bl	8002858 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  double Dist = usDist(5);
 800113c:	2005      	movs	r0, #5
 800113e:	f7ff ff73 	bl	8001028 <usDist>
 8001142:	ed87 0b02 	vstr	d0, [r7, #8]
	  int mt = Dist;
 8001146:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800114a:	f7ff fd0d 	bl	8000b68 <__aeabi_d2iz>
 800114e:	4603      	mov	r3, r0
 8001150:	607b      	str	r3, [r7, #4]
	  int cm = (Dist - mt)*100;
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff f9ee 	bl	8000534 <__aeabi_i2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001160:	f7ff f89a 	bl	8000298 <__aeabi_dsub>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <main+0x94>)
 8001172:	f7ff fa49 	bl	8000608 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fcf3 	bl	8000b68 <__aeabi_d2iz>
 8001182:	4603      	mov	r3, r0
 8001184:	603b      	str	r3, [r7, #0]
	  if(mt) printf("Distance : %dm %dcm\r\n", mt, cm);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <main+0x7c>
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <main+0x98>)
 8001192:	f003 f951 	bl	8004438 <iprintf>
 8001196:	e003      	b.n	80011a0 <main+0x84>
	  else printf("Distance : %dcm\r\n", cm);
 8001198:	6839      	ldr	r1, [r7, #0]
 800119a:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <main+0x9c>)
 800119c:	f003 f94c 	bl	8004438 <iprintf>

	  HAL_Delay(500);
 80011a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011a4:	f000 fbb0 	bl	8001908 <HAL_Delay>
  {
 80011a8:	e7c8      	b.n	800113c <main+0x20>
 80011aa:	bf00      	nop
 80011ac:	200001f0 	.word	0x200001f0
 80011b0:	40590000 	.word	0x40590000
 80011b4:	08007cf0 	.word	0x08007cf0
 80011b8:	08007d08 	.word	0x08007d08

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	@ 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	2230      	movs	r2, #48	@ 0x30
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fa3e 	bl	800464c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <SystemClock_Config+0xcc>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	4a27      	ldr	r2, [pc, #156]	@ (8001288 <SystemClock_Config+0xcc>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f0:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <SystemClock_Config+0xcc>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	4b22      	ldr	r3, [pc, #136]	@ (800128c <SystemClock_Config+0xd0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a21      	ldr	r2, [pc, #132]	@ (800128c <SystemClock_Config+0xd0>)
 8001206:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <SystemClock_Config+0xd0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001220:	2310      	movs	r3, #16
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001224:	2302      	movs	r3, #2
 8001226:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001228:	2300      	movs	r3, #0
 800122a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800122c:	2310      	movs	r3, #16
 800122e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001230:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001234:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001236:	2304      	movs	r3, #4
 8001238:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800123a:	2304      	movs	r3, #4
 800123c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fe20 	bl	8001e88 <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800124e:	f000 f90f 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2302      	movs	r3, #2
 8001258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001262:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2102      	movs	r1, #2
 800126e:	4618      	mov	r0, r3
 8001270:	f001 f882 	bl	8002378 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800127a:	f000 f8f9 	bl	8001470 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	@ 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012b6:	2253      	movs	r2, #83	@ 0x53
 80012b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012c2:	f04f 32ff 	mov.w	r2, #4294967295
 80012c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d4:	4813      	ldr	r0, [pc, #76]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012d6:	f001 fa6f 	bl	80027b8 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012e0:	f000 f8c6 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012f2:	f001 fb0b 	bl	800290c <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012fc:	f000 f8b8 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_TIM2_Init+0x94>)
 800130e:	f001 fceb 	bl	8002ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001318:	f000 f8aa 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200001f0 	.word	0x200001f0

08001328 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <MX_USART2_UART_Init+0x50>)
 8001330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 8001360:	f001 fd30 	bl	8002dc4 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800136a:	f000 f881 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000238 	.word	0x20000238
 8001378:	40004400 	.word	0x40004400

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b33      	ldr	r3, [pc, #204]	@ (8001464 <MX_GPIO_Init+0xe8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a32      	ldr	r2, [pc, #200]	@ (8001464 <MX_GPIO_Init+0xe8>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b25      	ldr	r3, [pc, #148]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a24      	ldr	r2, [pc, #144]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	21a0      	movs	r1, #160	@ 0xa0
 8001406:	4818      	ldr	r0, [pc, #96]	@ (8001468 <MX_GPIO_Init+0xec>)
 8001408:	f000 fd24 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800140c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001412:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4812      	ldr	r0, [pc, #72]	@ (800146c <MX_GPIO_Init+0xf0>)
 8001424:	f000 fb7a 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIG_Pin;
 8001428:	23a0      	movs	r3, #160	@ 0xa0
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480a      	ldr	r0, [pc, #40]	@ (8001468 <MX_GPIO_Init+0xec>)
 8001440:	f000 fb6c 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001444:	2340      	movs	r3, #64	@ 0x40
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_GPIO_Init+0xec>)
 8001458:	f000 fb60 	bl	8001b1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	@ 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020800 	.word	0x40020800

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <Error_Handler+0x8>

0800147c <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8001484:	1d39      	adds	r1, r7, #4
 8001486:	230a      	movs	r3, #10
 8001488:	2201      	movs	r2, #1
 800148a:	4804      	ldr	r0, [pc, #16]	@ (800149c <__io_putchar+0x20>)
 800148c:	f001 fcea 	bl	8002e64 <HAL_UART_Transmit>
   return ch;
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000238 	.word	0x20000238

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <HAL_MspInit+0x4c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <HAL_MspInit+0x4c>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <HAL_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <HAL_MspInit+0x4c>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014de:	2007      	movs	r0, #7
 80014e0:	f000 fae8 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001500:	d10d      	bne.n	800151e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_TIM_Base_MspInit+0x3c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	@ (800152c <HAL_TIM_Base_MspInit+0x3c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_TIM_Base_MspInit+0x3c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	@ (80015b4 <HAL_UART_MspInit+0x84>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12b      	bne.n	80015aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_UART_MspInit+0x88>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a17      	ldr	r2, [pc, #92]	@ (80015b8 <HAL_UART_MspInit+0x88>)
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_UART_MspInit+0x88>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_UART_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	@ (80015b8 <HAL_UART_MspInit+0x88>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_UART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800158a:	230c      	movs	r3, #12
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159a:	2307      	movs	r3, #7
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <HAL_UART_MspInit+0x8c>)
 80015a6:	f000 fab9 	bl	8001b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	@ 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f000 f957 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}

0800161e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  return 1;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_kill>:

int _kill(int pid, int sig)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001638:	f003 f85a 	bl	80046f0 <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	2216      	movs	r2, #22
 8001640:	601a      	str	r2, [r3, #0]
  return -1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_exit>:

void _exit (int status)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001656:	f04f 31ff 	mov.w	r1, #4294967295
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffe7 	bl	800162e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <_exit+0x12>

08001664 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e00a      	b.n	800168c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001676:	f3af 8000 	nop.w
 800167a:	4601      	mov	r1, r0
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	60ba      	str	r2, [r7, #8]
 8001682:	b2ca      	uxtb	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	dbf0      	blt.n	8001676 <_read+0x12>
  }

  return len;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e009      	b.n	80016c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fedf 	bl	800147c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dbf1      	blt.n	80016b0 <_write+0x12>
  }
  return len;
 80016cc:	687b      	ldr	r3, [r7, #4]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_close>:

int _close(int file)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_isatty>:

int _isatty(int file)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001748:	4a14      	ldr	r2, [pc, #80]	@ (800179c <_sbrk+0x5c>)
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <_sbrk+0x60>)
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <_sbrk+0x64>)
 800175e:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <_sbrk+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001770:	f002 ffbe 	bl	80046f0 <__errno>
 8001774:	4603      	mov	r3, r0
 8001776:	220c      	movs	r2, #12
 8001778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	e009      	b.n	8001794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <_sbrk+0x64>)
 8001790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20020000 	.word	0x20020000
 80017a0:	00000400 	.word	0x00000400
 80017a4:	20000280 	.word	0x20000280
 80017a8:	200003d8 	.word	0x200003d8

080017ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <SystemInit+0x20>)
 80017b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <SystemInit+0x20>)
 80017b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001808 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d4:	f7ff ffea 	bl	80017ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d8:	480c      	ldr	r0, [pc, #48]	@ (800180c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017da:	490d      	ldr	r1, [pc, #52]	@ (8001810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f0:	4c0a      	ldr	r4, [pc, #40]	@ (800181c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f002 ff7d 	bl	80046fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7ff fc8b 	bl	800111c <main>
  bx  lr    
 8001806:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001814:	08008170 	.word	0x08008170
  ldr r2, =_sbss
 8001818:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800181c:	200003d4 	.word	0x200003d4

08001820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001828:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <HAL_Init+0x40>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <HAL_Init+0x40>)
 800183a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	@ (8001864 <HAL_Init+0x40>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f931 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fe22 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f93b 	bl	8001b02 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f911 	bl	8001aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	@ (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000284 	.word	0x20000284

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000284 	.word	0x20000284

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800197c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	@ (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	@ (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	@ 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	@ 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f7ff ff8e 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff47 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff5c 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff8e 	bl	8001a08 <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5d 	bl	80019b4 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffb0 	bl	8001a70 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	@ 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e159      	b.n	8001dec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f040 8148 	bne.w	8001de6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d005      	beq.n	8001b6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d130      	bne.n	8001bd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 0201 	and.w	r2, r3, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d017      	beq.n	8001c0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d123      	bne.n	8001c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	08da      	lsrs	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3208      	adds	r2, #8
 8001c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	08da      	lsrs	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	69b9      	ldr	r1, [r7, #24]
 8001c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 80a2 	beq.w	8001de6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b57      	ldr	r3, [pc, #348]	@ (8001e04 <HAL_GPIO_Init+0x2e8>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	4a56      	ldr	r2, [pc, #344]	@ (8001e04 <HAL_GPIO_Init+0x2e8>)
 8001cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cb2:	4b54      	ldr	r3, [pc, #336]	@ (8001e04 <HAL_GPIO_Init+0x2e8>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cbe:	4a52      	ldr	r2, [pc, #328]	@ (8001e08 <HAL_GPIO_Init+0x2ec>)
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a49      	ldr	r2, [pc, #292]	@ (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d019      	beq.n	8001d1e <HAL_GPIO_Init+0x202>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a48      	ldr	r2, [pc, #288]	@ (8001e10 <HAL_GPIO_Init+0x2f4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_GPIO_Init+0x1fe>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a47      	ldr	r2, [pc, #284]	@ (8001e14 <HAL_GPIO_Init+0x2f8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00d      	beq.n	8001d16 <HAL_GPIO_Init+0x1fa>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a46      	ldr	r2, [pc, #280]	@ (8001e18 <HAL_GPIO_Init+0x2fc>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d007      	beq.n	8001d12 <HAL_GPIO_Init+0x1f6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a45      	ldr	r2, [pc, #276]	@ (8001e1c <HAL_GPIO_Init+0x300>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d101      	bne.n	8001d0e <HAL_GPIO_Init+0x1f2>
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	e008      	b.n	8001d20 <HAL_GPIO_Init+0x204>
 8001d0e:	2307      	movs	r3, #7
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x204>
 8001d12:	2303      	movs	r3, #3
 8001d14:	e004      	b.n	8001d20 <HAL_GPIO_Init+0x204>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_Init+0x204>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_GPIO_Init+0x204>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	f002 0203 	and.w	r2, r2, #3
 8001d26:	0092      	lsls	r2, r2, #2
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d30:	4935      	ldr	r1, [pc, #212]	@ (8001e08 <HAL_GPIO_Init+0x2ec>)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3e:	4b38      	ldr	r3, [pc, #224]	@ (8001e20 <HAL_GPIO_Init+0x304>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d62:	4a2f      	ldr	r2, [pc, #188]	@ (8001e20 <HAL_GPIO_Init+0x304>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <HAL_GPIO_Init+0x304>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d8c:	4a24      	ldr	r2, [pc, #144]	@ (8001e20 <HAL_GPIO_Init+0x304>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d92:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <HAL_GPIO_Init+0x304>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e20 <HAL_GPIO_Init+0x304>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <HAL_GPIO_Init+0x304>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de0:	4a0f      	ldr	r2, [pc, #60]	@ (8001e20 <HAL_GPIO_Init+0x304>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3301      	adds	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b0f      	cmp	r3, #15
 8001df0:	f67f aea2 	bls.w	8001b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40013c00 	.word	0x40013c00

08001e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e001      	b.n	8001e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e70:	e003      	b.n	8001e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e267      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d075      	beq.n	8001f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea6:	4b88      	ldr	r3, [pc, #544]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d00c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb2:	4b85      	ldr	r3, [pc, #532]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d112      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ebe:	4b82      	ldr	r3, [pc, #520]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	4b7e      	ldr	r3, [pc, #504]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d05b      	beq.n	8001f90 <HAL_RCC_OscConfig+0x108>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d157      	bne.n	8001f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e242      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eec:	d106      	bne.n	8001efc <HAL_RCC_OscConfig+0x74>
 8001eee:	4b76      	ldr	r3, [pc, #472]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a75      	ldr	r2, [pc, #468]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x98>
 8001f06:	4b70      	ldr	r3, [pc, #448]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6f      	ldr	r2, [pc, #444]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b6d      	ldr	r3, [pc, #436]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6c      	ldr	r2, [pc, #432]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001f20:	4b69      	ldr	r3, [pc, #420]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a68      	ldr	r2, [pc, #416]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b66      	ldr	r3, [pc, #408]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a65      	ldr	r2, [pc, #404]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fcd6 	bl	80018f0 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff fcd2 	bl	80018f0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	@ 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e207      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xc0>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fcc2 	bl	80018f0 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff fcbe 	bl	80018f0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1f3      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b51      	ldr	r3, [pc, #324]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0xe8>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d063      	beq.n	8002066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001faa:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d11c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb6:	4b44      	ldr	r3, [pc, #272]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	4b41      	ldr	r3, [pc, #260]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x152>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1c7      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fda:	4b3b      	ldr	r3, [pc, #236]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4937      	ldr	r1, [pc, #220]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	e03a      	b.n	8002066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	4b34      	ldr	r3, [pc, #208]	@ (80020cc <HAL_RCC_OscConfig+0x244>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fc77 	bl	80018f0 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002006:	f7ff fc73 	bl	80018f0 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1a8      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002024:	4b28      	ldr	r3, [pc, #160]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4925      	ldr	r1, [pc, #148]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <HAL_RCC_OscConfig+0x244>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff fc56 	bl	80018f0 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002048:	f7ff fc52 	bl	80018f0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e187      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d036      	beq.n	80020e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_RCC_OscConfig+0x248>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7ff fc36 	bl	80018f0 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002088:	f7ff fc32 	bl	80018f0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e167      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 800209c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x200>
 80020a6:	e01b      	b.n	80020e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a8:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <HAL_RCC_OscConfig+0x248>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7ff fc1f 	bl	80018f0 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	e00e      	b.n	80020d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b6:	f7ff fc1b 	bl	80018f0 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d907      	bls.n	80020d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e150      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	42470000 	.word	0x42470000
 80020d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b88      	ldr	r3, [pc, #544]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80020d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ea      	bne.n	80020b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8097 	beq.w	800221c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b81      	ldr	r3, [pc, #516]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10f      	bne.n	800211e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b7d      	ldr	r3, [pc, #500]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a7c      	ldr	r2, [pc, #496]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
 800210e:	4b7a      	ldr	r3, [pc, #488]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b77      	ldr	r3, [pc, #476]	@ (80022fc <HAL_RCC_OscConfig+0x474>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212a:	4b74      	ldr	r3, [pc, #464]	@ (80022fc <HAL_RCC_OscConfig+0x474>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a73      	ldr	r2, [pc, #460]	@ (80022fc <HAL_RCC_OscConfig+0x474>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7ff fbdb 	bl	80018f0 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7ff fbd7 	bl	80018f0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e10c      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <HAL_RCC_OscConfig+0x474>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x2ea>
 8002164:	4b64      	ldr	r3, [pc, #400]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002168:	4a63      	ldr	r2, [pc, #396]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002170:	e01c      	b.n	80021ac <HAL_RCC_OscConfig+0x324>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x30c>
 800217a:	4b5f      	ldr	r3, [pc, #380]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217e:	4a5e      	ldr	r2, [pc, #376]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6713      	str	r3, [r2, #112]	@ 0x70
 8002186:	4b5c      	ldr	r3, [pc, #368]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	4a5b      	ldr	r2, [pc, #364]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	@ 0x70
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0x324>
 8002194:	4b58      	ldr	r3, [pc, #352]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002198:	4a57      	ldr	r2, [pc, #348]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a0:	4b55      	ldr	r3, [pc, #340]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a4:	4a54      	ldr	r2, [pc, #336]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff fb9c 	bl	80018f0 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7ff fb98 	bl	80018f0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0cb      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d2:	4b49      	ldr	r3, [pc, #292]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0ee      	beq.n	80021bc <HAL_RCC_OscConfig+0x334>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7ff fb86 	bl	80018f0 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7ff fb82 	bl	80018f0 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0b5      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fe:	4b3e      	ldr	r3, [pc, #248]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ee      	bne.n	80021e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002210:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	4a38      	ldr	r2, [pc, #224]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800221a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a1 	beq.w	8002368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002226:	4b34      	ldr	r3, [pc, #208]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d05c      	beq.n	80022ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d141      	bne.n	80022be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <HAL_RCC_OscConfig+0x478>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fb56 	bl	80018f0 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fb52 	bl	80018f0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e087      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	4b27      	ldr	r3, [pc, #156]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	019b      	lsls	r3, r3, #6
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	3b01      	subs	r3, #1
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	061b      	lsls	r3, r3, #24
 800228a:	491b      	ldr	r1, [pc, #108]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <HAL_RCC_OscConfig+0x478>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff fb2b 	bl	80018f0 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229e:	f7ff fb27 	bl	80018f0 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e05c      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x416>
 80022bc:	e054      	b.n	8002368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <HAL_RCC_OscConfig+0x478>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fb14 	bl	80018f0 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff fb10 	bl	80018f0 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e045      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x444>
 80022ea:	e03d      	b.n	8002368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e038      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40007000 	.word	0x40007000
 8002300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002304:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <HAL_RCC_OscConfig+0x4ec>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d028      	beq.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d121      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d11a      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800233a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800233c:	4293      	cmp	r3, r2
 800233e:	d111      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234a:	085b      	lsrs	r3, r3, #1
 800234c:	3b01      	subs	r3, #1
 800234e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0cc      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b68      	ldr	r3, [pc, #416]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d90c      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b65      	ldr	r3, [pc, #404]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b63      	ldr	r3, [pc, #396]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0b8      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023cc:	4b59      	ldr	r3, [pc, #356]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a58      	ldr	r2, [pc, #352]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e4:	4b53      	ldr	r3, [pc, #332]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a52      	ldr	r2, [pc, #328]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f0:	4b50      	ldr	r3, [pc, #320]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	494d      	ldr	r1, [pc, #308]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d044      	beq.n	8002498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d119      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e07f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d003      	beq.n	8002436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002432:	2b03      	cmp	r3, #3
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b3f      	ldr	r3, [pc, #252]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e067      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002456:	4b37      	ldr	r3, [pc, #220]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f023 0203 	bic.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4934      	ldr	r1, [pc, #208]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	4313      	orrs	r3, r2
 8002466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002468:	f7ff fa42 	bl	80018f0 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	e00a      	b.n	8002486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7ff fa3e 	bl	80018f0 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e04f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 020c 	and.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	429a      	cmp	r2, r3
 8002496:	d1eb      	bne.n	8002470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002498:	4b25      	ldr	r3, [pc, #148]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d20c      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b22      	ldr	r3, [pc, #136]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b20      	ldr	r3, [pc, #128]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e032      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4916      	ldr	r1, [pc, #88]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	490e      	ldr	r1, [pc, #56]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fe:	f000 f821 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	490a      	ldr	r1, [pc, #40]	@ (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	5ccb      	ldrb	r3, [r1, r3]
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	4a09      	ldr	r2, [pc, #36]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f9a2 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023c00 	.word	0x40023c00
 8002534:	40023800 	.word	0x40023800
 8002538:	08007d1c 	.word	0x08007d1c
 800253c:	20000000 	.word	0x20000000
 8002540:	20000004 	.word	0x20000004

08002544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002548:	b094      	sub	sp, #80	@ 0x50
 800254a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002550:	2300      	movs	r3, #0
 8002552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002554:	2300      	movs	r3, #0
 8002556:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255c:	4b79      	ldr	r3, [pc, #484]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b08      	cmp	r3, #8
 8002566:	d00d      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x40>
 8002568:	2b08      	cmp	r3, #8
 800256a:	f200 80e1 	bhi.w	8002730 <HAL_RCC_GetSysClockFreq+0x1ec>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x34>
 8002572:	2b04      	cmp	r3, #4
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x3a>
 8002576:	e0db      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b73      	ldr	r3, [pc, #460]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x204>)
 800257a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800257c:	e0db      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800257e:	4b73      	ldr	r3, [pc, #460]	@ (800274c <HAL_RCC_GetSysClockFreq+0x208>)
 8002580:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002582:	e0d8      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002584:	4b6f      	ldr	r3, [pc, #444]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800258c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258e:	4b6d      	ldr	r3, [pc, #436]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259a:	4b6a      	ldr	r3, [pc, #424]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	099b      	lsrs	r3, r3, #6
 80025a0:	2200      	movs	r2, #0
 80025a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ae:	2300      	movs	r3, #0
 80025b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4621      	mov	r1, r4
 80025d0:	1a51      	subs	r1, r2, r1
 80025d2:	6139      	str	r1, [r7, #16]
 80025d4:	4629      	mov	r1, r5
 80025d6:	eb63 0301 	sbc.w	r3, r3, r1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e8:	4659      	mov	r1, fp
 80025ea:	018b      	lsls	r3, r1, #6
 80025ec:	4651      	mov	r1, sl
 80025ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f2:	4651      	mov	r1, sl
 80025f4:	018a      	lsls	r2, r1, #6
 80025f6:	4651      	mov	r1, sl
 80025f8:	ebb2 0801 	subs.w	r8, r2, r1
 80025fc:	4659      	mov	r1, fp
 80025fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002616:	4690      	mov	r8, r2
 8002618:	4699      	mov	r9, r3
 800261a:	4623      	mov	r3, r4
 800261c:	eb18 0303 	adds.w	r3, r8, r3
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	462b      	mov	r3, r5
 8002624:	eb49 0303 	adc.w	r3, r9, r3
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002636:	4629      	mov	r1, r5
 8002638:	024b      	lsls	r3, r1, #9
 800263a:	4621      	mov	r1, r4
 800263c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002640:	4621      	mov	r1, r4
 8002642:	024a      	lsls	r2, r1, #9
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800264a:	2200      	movs	r2, #0
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800264e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002654:	f7fe fb20 	bl	8000c98 <__aeabi_uldivmod>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4613      	mov	r3, r2
 800265e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002660:	e058      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002662:	4b38      	ldr	r3, [pc, #224]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	2200      	movs	r2, #0
 800266a:	4618      	mov	r0, r3
 800266c:	4611      	mov	r1, r2
 800266e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
 8002678:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	f04f 0000 	mov.w	r0, #0
 8002684:	f04f 0100 	mov.w	r1, #0
 8002688:	0159      	lsls	r1, r3, #5
 800268a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268e:	0150      	lsls	r0, r2, #5
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4641      	mov	r1, r8
 8002696:	ebb2 0a01 	subs.w	sl, r2, r1
 800269a:	4649      	mov	r1, r9
 800269c:	eb63 0b01 	sbc.w	fp, r3, r1
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026b4:	ebb2 040a 	subs.w	r4, r2, sl
 80026b8:	eb63 050b 	sbc.w	r5, r3, fp
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	00eb      	lsls	r3, r5, #3
 80026c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ca:	00e2      	lsls	r2, r4, #3
 80026cc:	4614      	mov	r4, r2
 80026ce:	461d      	mov	r5, r3
 80026d0:	4643      	mov	r3, r8
 80026d2:	18e3      	adds	r3, r4, r3
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	464b      	mov	r3, r9
 80026d8:	eb45 0303 	adc.w	r3, r5, r3
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ea:	4629      	mov	r1, r5
 80026ec:	028b      	lsls	r3, r1, #10
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f4:	4621      	mov	r1, r4
 80026f6:	028a      	lsls	r2, r1, #10
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	61fa      	str	r2, [r7, #28]
 8002704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002708:	f7fe fac6 	bl	8000c98 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	3301      	adds	r3, #1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002724:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800272e:	e002      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002730:	4b05      	ldr	r3, [pc, #20]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x204>)
 8002732:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002738:	4618      	mov	r0, r3
 800273a:	3750      	adds	r7, #80	@ 0x50
 800273c:	46bd      	mov	sp, r7
 800273e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	00f42400 	.word	0x00f42400
 800274c:	007a1200 	.word	0x007a1200

08002750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002754:	4b03      	ldr	r3, [pc, #12]	@ (8002764 <HAL_RCC_GetHCLKFreq+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000000 	.word	0x20000000

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800276c:	f7ff fff0 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0a9b      	lsrs	r3, r3, #10
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4903      	ldr	r1, [pc, #12]	@ (800278c <HAL_RCC_GetPCLK1Freq+0x24>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	08007d2c 	.word	0x08007d2c

08002790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002794:	f7ff ffdc 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002798:	4602      	mov	r2, r0
 800279a:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	0b5b      	lsrs	r3, r3, #13
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	4903      	ldr	r1, [pc, #12]	@ (80027b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	08007d2c 	.word	0x08007d2c

080027b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e041      	b.n	800284e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fe86 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f000 f950 	bl	8002a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d001      	beq.n	8002870 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e03c      	b.n	80028ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1e      	ldr	r2, [pc, #120]	@ (80028f8 <HAL_TIM_Base_Start+0xa0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_TIM_Base_Start+0x5c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800288a:	d013      	beq.n	80028b4 <HAL_TIM_Base_Start+0x5c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1a      	ldr	r2, [pc, #104]	@ (80028fc <HAL_TIM_Base_Start+0xa4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_TIM_Base_Start+0x5c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a19      	ldr	r2, [pc, #100]	@ (8002900 <HAL_TIM_Base_Start+0xa8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_TIM_Base_Start+0x5c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a17      	ldr	r2, [pc, #92]	@ (8002904 <HAL_TIM_Base_Start+0xac>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_TIM_Base_Start+0x5c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a16      	ldr	r2, [pc, #88]	@ (8002908 <HAL_TIM_Base_Start+0xb0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d111      	bne.n	80028d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d010      	beq.n	80028e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d6:	e007      	b.n	80028e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40010000 	.word	0x40010000
 80028fc:	40000400 	.word	0x40000400
 8002900:	40000800 	.word	0x40000800
 8002904:	40000c00 	.word	0x40000c00
 8002908:	40014000 	.word	0x40014000

0800290c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_TIM_ConfigClockSource+0x1c>
 8002924:	2302      	movs	r3, #2
 8002926:	e0b4      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x186>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800294e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002960:	d03e      	beq.n	80029e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002966:	f200 8087 	bhi.w	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296e:	f000 8086 	beq.w	8002a7e <HAL_TIM_ConfigClockSource+0x172>
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002976:	d87f      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b70      	cmp	r3, #112	@ 0x70
 800297a:	d01a      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0xa6>
 800297c:	2b70      	cmp	r3, #112	@ 0x70
 800297e:	d87b      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b60      	cmp	r3, #96	@ 0x60
 8002982:	d050      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x11a>
 8002984:	2b60      	cmp	r3, #96	@ 0x60
 8002986:	d877      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b50      	cmp	r3, #80	@ 0x50
 800298a:	d03c      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0xfa>
 800298c:	2b50      	cmp	r3, #80	@ 0x50
 800298e:	d873      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b40      	cmp	r3, #64	@ 0x40
 8002992:	d058      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x13a>
 8002994:	2b40      	cmp	r3, #64	@ 0x40
 8002996:	d86f      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b30      	cmp	r3, #48	@ 0x30
 800299a:	d064      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 800299c:	2b30      	cmp	r3, #48	@ 0x30
 800299e:	d86b      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d060      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d867      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d05c      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d05a      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 80029b0:	e062      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029c2:	f000 f971 	bl	8002ca8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	609a      	str	r2, [r3, #8]
      break;
 80029de:	e04f      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029f0:	f000 f95a 	bl	8002ca8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a02:	609a      	str	r2, [r3, #8]
      break;
 8002a04:	e03c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a12:	461a      	mov	r2, r3
 8002a14:	f000 f8ce 	bl	8002bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2150      	movs	r1, #80	@ 0x50
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f927 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002a24:	e02c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a32:	461a      	mov	r2, r3
 8002a34:	f000 f8ed 	bl	8002c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2160      	movs	r1, #96	@ 0x60
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f917 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002a44:	e01c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a52:	461a      	mov	r2, r3
 8002a54:	f000 f8ae 	bl	8002bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2140      	movs	r1, #64	@ 0x40
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f907 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002a64:	e00c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f000 f8fe 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002a76:	e003      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7c:	e000      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <TIM_Base_SetConfig+0xfc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00f      	beq.n	8002ad4 <TIM_Base_SetConfig+0x38>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aba:	d00b      	beq.n	8002ad4 <TIM_Base_SetConfig+0x38>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a37      	ldr	r2, [pc, #220]	@ (8002b9c <TIM_Base_SetConfig+0x100>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d007      	beq.n	8002ad4 <TIM_Base_SetConfig+0x38>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a36      	ldr	r2, [pc, #216]	@ (8002ba0 <TIM_Base_SetConfig+0x104>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d003      	beq.n	8002ad4 <TIM_Base_SetConfig+0x38>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a35      	ldr	r2, [pc, #212]	@ (8002ba4 <TIM_Base_SetConfig+0x108>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d108      	bne.n	8002ae6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8002b98 <TIM_Base_SetConfig+0xfc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01b      	beq.n	8002b26 <TIM_Base_SetConfig+0x8a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af4:	d017      	beq.n	8002b26 <TIM_Base_SetConfig+0x8a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a28      	ldr	r2, [pc, #160]	@ (8002b9c <TIM_Base_SetConfig+0x100>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <TIM_Base_SetConfig+0x8a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a27      	ldr	r2, [pc, #156]	@ (8002ba0 <TIM_Base_SetConfig+0x104>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00f      	beq.n	8002b26 <TIM_Base_SetConfig+0x8a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a26      	ldr	r2, [pc, #152]	@ (8002ba4 <TIM_Base_SetConfig+0x108>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <TIM_Base_SetConfig+0x8a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a25      	ldr	r2, [pc, #148]	@ (8002ba8 <TIM_Base_SetConfig+0x10c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <TIM_Base_SetConfig+0x8a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a24      	ldr	r2, [pc, #144]	@ (8002bac <TIM_Base_SetConfig+0x110>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d003      	beq.n	8002b26 <TIM_Base_SetConfig+0x8a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a23      	ldr	r2, [pc, #140]	@ (8002bb0 <TIM_Base_SetConfig+0x114>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d108      	bne.n	8002b38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b98 <TIM_Base_SetConfig+0xfc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d103      	bne.n	8002b6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f023 0201 	bic.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	611a      	str	r2, [r3, #16]
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40000c00 	.word	0x40000c00
 8002ba8:	40014000 	.word	0x40014000
 8002bac:	40014400 	.word	0x40014400
 8002bb0:	40014800 	.word	0x40014800

08002bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0201 	bic.w	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f023 030a 	bic.w	r3, r3, #10
 8002bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	621a      	str	r2, [r3, #32]
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b087      	sub	sp, #28
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f023 0210 	bic.w	r2, r3, #16
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	031b      	lsls	r3, r3, #12
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	621a      	str	r2, [r3, #32]
}
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f043 0307 	orr.w	r3, r3, #7
 8002c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	609a      	str	r2, [r3, #8]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	021a      	lsls	r2, r3, #8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	609a      	str	r2, [r3, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e050      	b.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d018      	beq.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4c:	d013      	beq.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a18      	ldr	r2, [pc, #96]	@ (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00e      	beq.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a16      	ldr	r2, [pc, #88]	@ (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a15      	ldr	r2, [pc, #84]	@ (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a13      	ldr	r2, [pc, #76]	@ (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10c      	bne.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40010000 	.word	0x40010000
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40000800 	.word	0x40000800
 8002dbc:	40000c00 	.word	0x40000c00
 8002dc0:	40014000 	.word	0x40014000

08002dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e042      	b.n	8002e5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe fba0 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	@ 0x24
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f973 	bl	80030f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	@ 0x28
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d175      	bne.n	8002f70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_UART_Transmit+0x2c>
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e06e      	b.n	8002f72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2221      	movs	r2, #33	@ 0x21
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea2:	f7fe fd25 	bl	80018f0 <HAL_GetTick>
 8002ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	88fa      	ldrh	r2, [r7, #6]
 8002eb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ebc:	d108      	bne.n	8002ed0 <HAL_UART_Transmit+0x6c>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d104      	bne.n	8002ed0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	e003      	b.n	8002ed8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ed8:	e02e      	b.n	8002f38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2180      	movs	r1, #128	@ 0x80
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f848 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e03a      	b.n	8002f72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	3302      	adds	r3, #2
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e007      	b.n	8002f2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3301      	adds	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1cb      	bne.n	8002eda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2140      	movs	r1, #64	@ 0x40
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f814 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e006      	b.n	8002f72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f8a:	e03b      	b.n	8003004 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d037      	beq.n	8003004 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f94:	f7fe fcac 	bl	80018f0 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	6a3a      	ldr	r2, [r7, #32]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <UART_WaitOnFlagUntilTimeout+0x30>
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e03a      	b.n	8003024 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d023      	beq.n	8003004 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b80      	cmp	r3, #128	@ 0x80
 8002fc0:	d020      	beq.n	8003004 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b40      	cmp	r3, #64	@ 0x40
 8002fc6:	d01d      	beq.n	8003004 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d116      	bne.n	8003004 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f81d 	bl	800302c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e00f      	b.n	8003024 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	429a      	cmp	r2, r3
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	429a      	cmp	r2, r3
 8003020:	d0b4      	beq.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800302c:	b480      	push	{r7}
 800302e:	b095      	sub	sp, #84	@ 0x54
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303e:	e853 3f00 	ldrex	r3, [r3]
 8003042:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003046:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800304a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	330c      	adds	r3, #12
 8003052:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003054:	643a      	str	r2, [r7, #64]	@ 0x40
 8003056:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800305a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e5      	bne.n	8003034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3314      	adds	r3, #20
 800306e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	61fb      	str	r3, [r7, #28]
   return(result);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3314      	adds	r3, #20
 8003086:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003088:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800308a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800308e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e5      	bne.n	8003068 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d119      	bne.n	80030d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	e853 3f00 	ldrex	r3, [r3]
 80030b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f023 0310 	bic.w	r3, r3, #16
 80030ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030c4:	61ba      	str	r2, [r7, #24]
 80030c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c8:	6979      	ldr	r1, [r7, #20]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	e841 2300 	strex	r3, r2, [r1]
 80030d0:	613b      	str	r3, [r7, #16]
   return(result);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e5      	bne.n	80030a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030e6:	bf00      	nop
 80030e8:	3754      	adds	r7, #84	@ 0x54
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f8:	b0c0      	sub	sp, #256	@ 0x100
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003110:	68d9      	ldr	r1, [r3, #12]
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	ea40 0301 	orr.w	r3, r0, r1
 800311c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	431a      	orrs	r2, r3
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	431a      	orrs	r2, r3
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800314c:	f021 010c 	bic.w	r1, r1, #12
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800315a:	430b      	orrs	r3, r1
 800315c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316e:	6999      	ldr	r1, [r3, #24]
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	ea40 0301 	orr.w	r3, r0, r1
 800317a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b8f      	ldr	r3, [pc, #572]	@ (80033c0 <UART_SetConfig+0x2cc>)
 8003184:	429a      	cmp	r2, r3
 8003186:	d005      	beq.n	8003194 <UART_SetConfig+0xa0>
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b8d      	ldr	r3, [pc, #564]	@ (80033c4 <UART_SetConfig+0x2d0>)
 8003190:	429a      	cmp	r2, r3
 8003192:	d104      	bne.n	800319e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7ff fafc 	bl	8002790 <HAL_RCC_GetPCLK2Freq>
 8003198:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800319c:	e003      	b.n	80031a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800319e:	f7ff fae3 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 80031a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031b0:	f040 810c 	bne.w	80033cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031c6:	4622      	mov	r2, r4
 80031c8:	462b      	mov	r3, r5
 80031ca:	1891      	adds	r1, r2, r2
 80031cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031ce:	415b      	adcs	r3, r3
 80031d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031d6:	4621      	mov	r1, r4
 80031d8:	eb12 0801 	adds.w	r8, r2, r1
 80031dc:	4629      	mov	r1, r5
 80031de:	eb43 0901 	adc.w	r9, r3, r1
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031f6:	4690      	mov	r8, r2
 80031f8:	4699      	mov	r9, r3
 80031fa:	4623      	mov	r3, r4
 80031fc:	eb18 0303 	adds.w	r3, r8, r3
 8003200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003204:	462b      	mov	r3, r5
 8003206:	eb49 0303 	adc.w	r3, r9, r3
 800320a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800321a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800321e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003222:	460b      	mov	r3, r1
 8003224:	18db      	adds	r3, r3, r3
 8003226:	653b      	str	r3, [r7, #80]	@ 0x50
 8003228:	4613      	mov	r3, r2
 800322a:	eb42 0303 	adc.w	r3, r2, r3
 800322e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003230:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003234:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003238:	f7fd fd2e 	bl	8000c98 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4b61      	ldr	r3, [pc, #388]	@ (80033c8 <UART_SetConfig+0x2d4>)
 8003242:	fba3 2302 	umull	r2, r3, r3, r2
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	011c      	lsls	r4, r3, #4
 800324a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800324e:	2200      	movs	r2, #0
 8003250:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003254:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003258:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800325c:	4642      	mov	r2, r8
 800325e:	464b      	mov	r3, r9
 8003260:	1891      	adds	r1, r2, r2
 8003262:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003264:	415b      	adcs	r3, r3
 8003266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003268:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800326c:	4641      	mov	r1, r8
 800326e:	eb12 0a01 	adds.w	sl, r2, r1
 8003272:	4649      	mov	r1, r9
 8003274:	eb43 0b01 	adc.w	fp, r3, r1
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003284:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800328c:	4692      	mov	sl, r2
 800328e:	469b      	mov	fp, r3
 8003290:	4643      	mov	r3, r8
 8003292:	eb1a 0303 	adds.w	r3, sl, r3
 8003296:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800329a:	464b      	mov	r3, r9
 800329c:	eb4b 0303 	adc.w	r3, fp, r3
 80032a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032b8:	460b      	mov	r3, r1
 80032ba:	18db      	adds	r3, r3, r3
 80032bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032be:	4613      	mov	r3, r2
 80032c0:	eb42 0303 	adc.w	r3, r2, r3
 80032c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032ce:	f7fd fce3 	bl	8000c98 <__aeabi_uldivmod>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4611      	mov	r1, r2
 80032d8:	4b3b      	ldr	r3, [pc, #236]	@ (80033c8 <UART_SetConfig+0x2d4>)
 80032da:	fba3 2301 	umull	r2, r3, r3, r1
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2264      	movs	r2, #100	@ 0x64
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	1acb      	subs	r3, r1, r3
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032ee:	4b36      	ldr	r3, [pc, #216]	@ (80033c8 <UART_SetConfig+0x2d4>)
 80032f0:	fba3 2302 	umull	r2, r3, r3, r2
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032fc:	441c      	add	r4, r3
 80032fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003302:	2200      	movs	r2, #0
 8003304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003308:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800330c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003310:	4642      	mov	r2, r8
 8003312:	464b      	mov	r3, r9
 8003314:	1891      	adds	r1, r2, r2
 8003316:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003318:	415b      	adcs	r3, r3
 800331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800331c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003320:	4641      	mov	r1, r8
 8003322:	1851      	adds	r1, r2, r1
 8003324:	6339      	str	r1, [r7, #48]	@ 0x30
 8003326:	4649      	mov	r1, r9
 8003328:	414b      	adcs	r3, r1
 800332a:	637b      	str	r3, [r7, #52]	@ 0x34
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003338:	4659      	mov	r1, fp
 800333a:	00cb      	lsls	r3, r1, #3
 800333c:	4651      	mov	r1, sl
 800333e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003342:	4651      	mov	r1, sl
 8003344:	00ca      	lsls	r2, r1, #3
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	4603      	mov	r3, r0
 800334c:	4642      	mov	r2, r8
 800334e:	189b      	adds	r3, r3, r2
 8003350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003354:	464b      	mov	r3, r9
 8003356:	460a      	mov	r2, r1
 8003358:	eb42 0303 	adc.w	r3, r2, r3
 800335c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800336c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003370:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003374:	460b      	mov	r3, r1
 8003376:	18db      	adds	r3, r3, r3
 8003378:	62bb      	str	r3, [r7, #40]	@ 0x28
 800337a:	4613      	mov	r3, r2
 800337c:	eb42 0303 	adc.w	r3, r2, r3
 8003380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003386:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800338a:	f7fd fc85 	bl	8000c98 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <UART_SetConfig+0x2d4>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2164      	movs	r1, #100	@ 0x64
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	3332      	adds	r3, #50	@ 0x32
 80033a6:	4a08      	ldr	r2, [pc, #32]	@ (80033c8 <UART_SetConfig+0x2d4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f003 0207 	and.w	r2, r3, #7
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4422      	add	r2, r4
 80033ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033bc:	e106      	b.n	80035cc <UART_SetConfig+0x4d8>
 80033be:	bf00      	nop
 80033c0:	40011000 	.word	0x40011000
 80033c4:	40011400 	.word	0x40011400
 80033c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033de:	4642      	mov	r2, r8
 80033e0:	464b      	mov	r3, r9
 80033e2:	1891      	adds	r1, r2, r2
 80033e4:	6239      	str	r1, [r7, #32]
 80033e6:	415b      	adcs	r3, r3
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ee:	4641      	mov	r1, r8
 80033f0:	1854      	adds	r4, r2, r1
 80033f2:	4649      	mov	r1, r9
 80033f4:	eb43 0501 	adc.w	r5, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	00eb      	lsls	r3, r5, #3
 8003402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003406:	00e2      	lsls	r2, r4, #3
 8003408:	4614      	mov	r4, r2
 800340a:	461d      	mov	r5, r3
 800340c:	4643      	mov	r3, r8
 800340e:	18e3      	adds	r3, r4, r3
 8003410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003414:	464b      	mov	r3, r9
 8003416:	eb45 0303 	adc.w	r3, r5, r3
 800341a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800342a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800343a:	4629      	mov	r1, r5
 800343c:	008b      	lsls	r3, r1, #2
 800343e:	4621      	mov	r1, r4
 8003440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003444:	4621      	mov	r1, r4
 8003446:	008a      	lsls	r2, r1, #2
 8003448:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800344c:	f7fd fc24 	bl	8000c98 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4b60      	ldr	r3, [pc, #384]	@ (80035d8 <UART_SetConfig+0x4e4>)
 8003456:	fba3 2302 	umull	r2, r3, r3, r2
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	011c      	lsls	r4, r3, #4
 800345e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003462:	2200      	movs	r2, #0
 8003464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003468:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800346c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003470:	4642      	mov	r2, r8
 8003472:	464b      	mov	r3, r9
 8003474:	1891      	adds	r1, r2, r2
 8003476:	61b9      	str	r1, [r7, #24]
 8003478:	415b      	adcs	r3, r3
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003480:	4641      	mov	r1, r8
 8003482:	1851      	adds	r1, r2, r1
 8003484:	6139      	str	r1, [r7, #16]
 8003486:	4649      	mov	r1, r9
 8003488:	414b      	adcs	r3, r1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003498:	4659      	mov	r1, fp
 800349a:	00cb      	lsls	r3, r1, #3
 800349c:	4651      	mov	r1, sl
 800349e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034a2:	4651      	mov	r1, sl
 80034a4:	00ca      	lsls	r2, r1, #3
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	4642      	mov	r2, r8
 80034ae:	189b      	adds	r3, r3, r2
 80034b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034b4:	464b      	mov	r3, r9
 80034b6:	460a      	mov	r2, r1
 80034b8:	eb42 0303 	adc.w	r3, r2, r3
 80034bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034d8:	4649      	mov	r1, r9
 80034da:	008b      	lsls	r3, r1, #2
 80034dc:	4641      	mov	r1, r8
 80034de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034e2:	4641      	mov	r1, r8
 80034e4:	008a      	lsls	r2, r1, #2
 80034e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034ea:	f7fd fbd5 	bl	8000c98 <__aeabi_uldivmod>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	4b38      	ldr	r3, [pc, #224]	@ (80035d8 <UART_SetConfig+0x4e4>)
 80034f6:	fba3 2301 	umull	r2, r3, r3, r1
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2264      	movs	r2, #100	@ 0x64
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	1acb      	subs	r3, r1, r3
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	3332      	adds	r3, #50	@ 0x32
 8003508:	4a33      	ldr	r2, [pc, #204]	@ (80035d8 <UART_SetConfig+0x4e4>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003514:	441c      	add	r4, r3
 8003516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800351a:	2200      	movs	r2, #0
 800351c:	673b      	str	r3, [r7, #112]	@ 0x70
 800351e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003520:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003524:	4642      	mov	r2, r8
 8003526:	464b      	mov	r3, r9
 8003528:	1891      	adds	r1, r2, r2
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	415b      	adcs	r3, r3
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003534:	4641      	mov	r1, r8
 8003536:	1851      	adds	r1, r2, r1
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	4649      	mov	r1, r9
 800353c:	414b      	adcs	r3, r1
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800354c:	4659      	mov	r1, fp
 800354e:	00cb      	lsls	r3, r1, #3
 8003550:	4651      	mov	r1, sl
 8003552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003556:	4651      	mov	r1, sl
 8003558:	00ca      	lsls	r2, r1, #3
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	4603      	mov	r3, r0
 8003560:	4642      	mov	r2, r8
 8003562:	189b      	adds	r3, r3, r2
 8003564:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003566:	464b      	mov	r3, r9
 8003568:	460a      	mov	r2, r1
 800356a:	eb42 0303 	adc.w	r3, r2, r3
 800356e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	663b      	str	r3, [r7, #96]	@ 0x60
 800357a:	667a      	str	r2, [r7, #100]	@ 0x64
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003588:	4649      	mov	r1, r9
 800358a:	008b      	lsls	r3, r1, #2
 800358c:	4641      	mov	r1, r8
 800358e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003592:	4641      	mov	r1, r8
 8003594:	008a      	lsls	r2, r1, #2
 8003596:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800359a:	f7fd fb7d 	bl	8000c98 <__aeabi_uldivmod>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <UART_SetConfig+0x4e4>)
 80035a4:	fba3 1302 	umull	r1, r3, r3, r2
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	2164      	movs	r1, #100	@ 0x64
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	3332      	adds	r3, #50	@ 0x32
 80035b6:	4a08      	ldr	r2, [pc, #32]	@ (80035d8 <UART_SetConfig+0x4e4>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	f003 020f 	and.w	r2, r3, #15
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4422      	add	r2, r4
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035d2:	46bd      	mov	sp, r7
 80035d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d8:	51eb851f 	.word	0x51eb851f

080035dc <__cvt>:
 80035dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035e0:	ec57 6b10 	vmov	r6, r7, d0
 80035e4:	2f00      	cmp	r7, #0
 80035e6:	460c      	mov	r4, r1
 80035e8:	4619      	mov	r1, r3
 80035ea:	463b      	mov	r3, r7
 80035ec:	bfbb      	ittet	lt
 80035ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80035f2:	461f      	movlt	r7, r3
 80035f4:	2300      	movge	r3, #0
 80035f6:	232d      	movlt	r3, #45	@ 0x2d
 80035f8:	700b      	strb	r3, [r1, #0]
 80035fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003600:	4691      	mov	r9, r2
 8003602:	f023 0820 	bic.w	r8, r3, #32
 8003606:	bfbc      	itt	lt
 8003608:	4632      	movlt	r2, r6
 800360a:	4616      	movlt	r6, r2
 800360c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003610:	d005      	beq.n	800361e <__cvt+0x42>
 8003612:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003616:	d100      	bne.n	800361a <__cvt+0x3e>
 8003618:	3401      	adds	r4, #1
 800361a:	2102      	movs	r1, #2
 800361c:	e000      	b.n	8003620 <__cvt+0x44>
 800361e:	2103      	movs	r1, #3
 8003620:	ab03      	add	r3, sp, #12
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	ab02      	add	r3, sp, #8
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	ec47 6b10 	vmov	d0, r6, r7
 800362c:	4653      	mov	r3, sl
 800362e:	4622      	mov	r2, r4
 8003630:	f001 f91a 	bl	8004868 <_dtoa_r>
 8003634:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003638:	4605      	mov	r5, r0
 800363a:	d119      	bne.n	8003670 <__cvt+0x94>
 800363c:	f019 0f01 	tst.w	r9, #1
 8003640:	d00e      	beq.n	8003660 <__cvt+0x84>
 8003642:	eb00 0904 	add.w	r9, r0, r4
 8003646:	2200      	movs	r2, #0
 8003648:	2300      	movs	r3, #0
 800364a:	4630      	mov	r0, r6
 800364c:	4639      	mov	r1, r7
 800364e:	f7fd fa43 	bl	8000ad8 <__aeabi_dcmpeq>
 8003652:	b108      	cbz	r0, 8003658 <__cvt+0x7c>
 8003654:	f8cd 900c 	str.w	r9, [sp, #12]
 8003658:	2230      	movs	r2, #48	@ 0x30
 800365a:	9b03      	ldr	r3, [sp, #12]
 800365c:	454b      	cmp	r3, r9
 800365e:	d31e      	bcc.n	800369e <__cvt+0xc2>
 8003660:	9b03      	ldr	r3, [sp, #12]
 8003662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003664:	1b5b      	subs	r3, r3, r5
 8003666:	4628      	mov	r0, r5
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	b004      	add	sp, #16
 800366c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003670:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003674:	eb00 0904 	add.w	r9, r0, r4
 8003678:	d1e5      	bne.n	8003646 <__cvt+0x6a>
 800367a:	7803      	ldrb	r3, [r0, #0]
 800367c:	2b30      	cmp	r3, #48	@ 0x30
 800367e:	d10a      	bne.n	8003696 <__cvt+0xba>
 8003680:	2200      	movs	r2, #0
 8003682:	2300      	movs	r3, #0
 8003684:	4630      	mov	r0, r6
 8003686:	4639      	mov	r1, r7
 8003688:	f7fd fa26 	bl	8000ad8 <__aeabi_dcmpeq>
 800368c:	b918      	cbnz	r0, 8003696 <__cvt+0xba>
 800368e:	f1c4 0401 	rsb	r4, r4, #1
 8003692:	f8ca 4000 	str.w	r4, [sl]
 8003696:	f8da 3000 	ldr.w	r3, [sl]
 800369a:	4499      	add	r9, r3
 800369c:	e7d3      	b.n	8003646 <__cvt+0x6a>
 800369e:	1c59      	adds	r1, r3, #1
 80036a0:	9103      	str	r1, [sp, #12]
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e7d9      	b.n	800365a <__cvt+0x7e>

080036a6 <__exponent>:
 80036a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036a8:	2900      	cmp	r1, #0
 80036aa:	bfba      	itte	lt
 80036ac:	4249      	neglt	r1, r1
 80036ae:	232d      	movlt	r3, #45	@ 0x2d
 80036b0:	232b      	movge	r3, #43	@ 0x2b
 80036b2:	2909      	cmp	r1, #9
 80036b4:	7002      	strb	r2, [r0, #0]
 80036b6:	7043      	strb	r3, [r0, #1]
 80036b8:	dd29      	ble.n	800370e <__exponent+0x68>
 80036ba:	f10d 0307 	add.w	r3, sp, #7
 80036be:	461d      	mov	r5, r3
 80036c0:	270a      	movs	r7, #10
 80036c2:	461a      	mov	r2, r3
 80036c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80036c8:	fb07 1416 	mls	r4, r7, r6, r1
 80036cc:	3430      	adds	r4, #48	@ 0x30
 80036ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80036d2:	460c      	mov	r4, r1
 80036d4:	2c63      	cmp	r4, #99	@ 0x63
 80036d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80036da:	4631      	mov	r1, r6
 80036dc:	dcf1      	bgt.n	80036c2 <__exponent+0x1c>
 80036de:	3130      	adds	r1, #48	@ 0x30
 80036e0:	1e94      	subs	r4, r2, #2
 80036e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80036e6:	1c41      	adds	r1, r0, #1
 80036e8:	4623      	mov	r3, r4
 80036ea:	42ab      	cmp	r3, r5
 80036ec:	d30a      	bcc.n	8003704 <__exponent+0x5e>
 80036ee:	f10d 0309 	add.w	r3, sp, #9
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	42ac      	cmp	r4, r5
 80036f6:	bf88      	it	hi
 80036f8:	2300      	movhi	r3, #0
 80036fa:	3302      	adds	r3, #2
 80036fc:	4403      	add	r3, r0
 80036fe:	1a18      	subs	r0, r3, r0
 8003700:	b003      	add	sp, #12
 8003702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003704:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003708:	f801 6f01 	strb.w	r6, [r1, #1]!
 800370c:	e7ed      	b.n	80036ea <__exponent+0x44>
 800370e:	2330      	movs	r3, #48	@ 0x30
 8003710:	3130      	adds	r1, #48	@ 0x30
 8003712:	7083      	strb	r3, [r0, #2]
 8003714:	70c1      	strb	r1, [r0, #3]
 8003716:	1d03      	adds	r3, r0, #4
 8003718:	e7f1      	b.n	80036fe <__exponent+0x58>
	...

0800371c <_printf_float>:
 800371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003720:	b08d      	sub	sp, #52	@ 0x34
 8003722:	460c      	mov	r4, r1
 8003724:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003728:	4616      	mov	r6, r2
 800372a:	461f      	mov	r7, r3
 800372c:	4605      	mov	r5, r0
 800372e:	f000 ff95 	bl	800465c <_localeconv_r>
 8003732:	6803      	ldr	r3, [r0, #0]
 8003734:	9304      	str	r3, [sp, #16]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fda2 	bl	8000280 <strlen>
 800373c:	2300      	movs	r3, #0
 800373e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003740:	f8d8 3000 	ldr.w	r3, [r8]
 8003744:	9005      	str	r0, [sp, #20]
 8003746:	3307      	adds	r3, #7
 8003748:	f023 0307 	bic.w	r3, r3, #7
 800374c:	f103 0208 	add.w	r2, r3, #8
 8003750:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003754:	f8d4 b000 	ldr.w	fp, [r4]
 8003758:	f8c8 2000 	str.w	r2, [r8]
 800375c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003760:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003764:	9307      	str	r3, [sp, #28]
 8003766:	f8cd 8018 	str.w	r8, [sp, #24]
 800376a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800376e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003772:	4b9c      	ldr	r3, [pc, #624]	@ (80039e4 <_printf_float+0x2c8>)
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	f7fd f9e0 	bl	8000b3c <__aeabi_dcmpun>
 800377c:	bb70      	cbnz	r0, 80037dc <_printf_float+0xc0>
 800377e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003782:	4b98      	ldr	r3, [pc, #608]	@ (80039e4 <_printf_float+0x2c8>)
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	f7fd f9ba 	bl	8000b00 <__aeabi_dcmple>
 800378c:	bb30      	cbnz	r0, 80037dc <_printf_float+0xc0>
 800378e:	2200      	movs	r2, #0
 8003790:	2300      	movs	r3, #0
 8003792:	4640      	mov	r0, r8
 8003794:	4649      	mov	r1, r9
 8003796:	f7fd f9a9 	bl	8000aec <__aeabi_dcmplt>
 800379a:	b110      	cbz	r0, 80037a2 <_printf_float+0x86>
 800379c:	232d      	movs	r3, #45	@ 0x2d
 800379e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037a2:	4a91      	ldr	r2, [pc, #580]	@ (80039e8 <_printf_float+0x2cc>)
 80037a4:	4b91      	ldr	r3, [pc, #580]	@ (80039ec <_printf_float+0x2d0>)
 80037a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80037aa:	bf94      	ite	ls
 80037ac:	4690      	movls	r8, r2
 80037ae:	4698      	movhi	r8, r3
 80037b0:	2303      	movs	r3, #3
 80037b2:	6123      	str	r3, [r4, #16]
 80037b4:	f02b 0304 	bic.w	r3, fp, #4
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	f04f 0900 	mov.w	r9, #0
 80037be:	9700      	str	r7, [sp, #0]
 80037c0:	4633      	mov	r3, r6
 80037c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80037c4:	4621      	mov	r1, r4
 80037c6:	4628      	mov	r0, r5
 80037c8:	f000 f9d2 	bl	8003b70 <_printf_common>
 80037cc:	3001      	adds	r0, #1
 80037ce:	f040 808d 	bne.w	80038ec <_printf_float+0x1d0>
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295
 80037d6:	b00d      	add	sp, #52	@ 0x34
 80037d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037dc:	4642      	mov	r2, r8
 80037de:	464b      	mov	r3, r9
 80037e0:	4640      	mov	r0, r8
 80037e2:	4649      	mov	r1, r9
 80037e4:	f7fd f9aa 	bl	8000b3c <__aeabi_dcmpun>
 80037e8:	b140      	cbz	r0, 80037fc <_printf_float+0xe0>
 80037ea:	464b      	mov	r3, r9
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bfbc      	itt	lt
 80037f0:	232d      	movlt	r3, #45	@ 0x2d
 80037f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80037f6:	4a7e      	ldr	r2, [pc, #504]	@ (80039f0 <_printf_float+0x2d4>)
 80037f8:	4b7e      	ldr	r3, [pc, #504]	@ (80039f4 <_printf_float+0x2d8>)
 80037fa:	e7d4      	b.n	80037a6 <_printf_float+0x8a>
 80037fc:	6863      	ldr	r3, [r4, #4]
 80037fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003802:	9206      	str	r2, [sp, #24]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	d13b      	bne.n	8003880 <_printf_float+0x164>
 8003808:	2306      	movs	r3, #6
 800380a:	6063      	str	r3, [r4, #4]
 800380c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003810:	2300      	movs	r3, #0
 8003812:	6022      	str	r2, [r4, #0]
 8003814:	9303      	str	r3, [sp, #12]
 8003816:	ab0a      	add	r3, sp, #40	@ 0x28
 8003818:	e9cd a301 	strd	sl, r3, [sp, #4]
 800381c:	ab09      	add	r3, sp, #36	@ 0x24
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	6861      	ldr	r1, [r4, #4]
 8003822:	ec49 8b10 	vmov	d0, r8, r9
 8003826:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800382a:	4628      	mov	r0, r5
 800382c:	f7ff fed6 	bl	80035dc <__cvt>
 8003830:	9b06      	ldr	r3, [sp, #24]
 8003832:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003834:	2b47      	cmp	r3, #71	@ 0x47
 8003836:	4680      	mov	r8, r0
 8003838:	d129      	bne.n	800388e <_printf_float+0x172>
 800383a:	1cc8      	adds	r0, r1, #3
 800383c:	db02      	blt.n	8003844 <_printf_float+0x128>
 800383e:	6863      	ldr	r3, [r4, #4]
 8003840:	4299      	cmp	r1, r3
 8003842:	dd41      	ble.n	80038c8 <_printf_float+0x1ac>
 8003844:	f1aa 0a02 	sub.w	sl, sl, #2
 8003848:	fa5f fa8a 	uxtb.w	sl, sl
 800384c:	3901      	subs	r1, #1
 800384e:	4652      	mov	r2, sl
 8003850:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003854:	9109      	str	r1, [sp, #36]	@ 0x24
 8003856:	f7ff ff26 	bl	80036a6 <__exponent>
 800385a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800385c:	1813      	adds	r3, r2, r0
 800385e:	2a01      	cmp	r2, #1
 8003860:	4681      	mov	r9, r0
 8003862:	6123      	str	r3, [r4, #16]
 8003864:	dc02      	bgt.n	800386c <_printf_float+0x150>
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	07d2      	lsls	r2, r2, #31
 800386a:	d501      	bpl.n	8003870 <_printf_float+0x154>
 800386c:	3301      	adds	r3, #1
 800386e:	6123      	str	r3, [r4, #16]
 8003870:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0a2      	beq.n	80037be <_printf_float+0xa2>
 8003878:	232d      	movs	r3, #45	@ 0x2d
 800387a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800387e:	e79e      	b.n	80037be <_printf_float+0xa2>
 8003880:	9a06      	ldr	r2, [sp, #24]
 8003882:	2a47      	cmp	r2, #71	@ 0x47
 8003884:	d1c2      	bne.n	800380c <_printf_float+0xf0>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1c0      	bne.n	800380c <_printf_float+0xf0>
 800388a:	2301      	movs	r3, #1
 800388c:	e7bd      	b.n	800380a <_printf_float+0xee>
 800388e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003892:	d9db      	bls.n	800384c <_printf_float+0x130>
 8003894:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003898:	d118      	bne.n	80038cc <_printf_float+0x1b0>
 800389a:	2900      	cmp	r1, #0
 800389c:	6863      	ldr	r3, [r4, #4]
 800389e:	dd0b      	ble.n	80038b8 <_printf_float+0x19c>
 80038a0:	6121      	str	r1, [r4, #16]
 80038a2:	b913      	cbnz	r3, 80038aa <_printf_float+0x18e>
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	07d0      	lsls	r0, r2, #31
 80038a8:	d502      	bpl.n	80038b0 <_printf_float+0x194>
 80038aa:	3301      	adds	r3, #1
 80038ac:	440b      	add	r3, r1
 80038ae:	6123      	str	r3, [r4, #16]
 80038b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80038b2:	f04f 0900 	mov.w	r9, #0
 80038b6:	e7db      	b.n	8003870 <_printf_float+0x154>
 80038b8:	b913      	cbnz	r3, 80038c0 <_printf_float+0x1a4>
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	07d2      	lsls	r2, r2, #31
 80038be:	d501      	bpl.n	80038c4 <_printf_float+0x1a8>
 80038c0:	3302      	adds	r3, #2
 80038c2:	e7f4      	b.n	80038ae <_printf_float+0x192>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e7f2      	b.n	80038ae <_printf_float+0x192>
 80038c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80038cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80038ce:	4299      	cmp	r1, r3
 80038d0:	db05      	blt.n	80038de <_printf_float+0x1c2>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	6121      	str	r1, [r4, #16]
 80038d6:	07d8      	lsls	r0, r3, #31
 80038d8:	d5ea      	bpl.n	80038b0 <_printf_float+0x194>
 80038da:	1c4b      	adds	r3, r1, #1
 80038dc:	e7e7      	b.n	80038ae <_printf_float+0x192>
 80038de:	2900      	cmp	r1, #0
 80038e0:	bfd4      	ite	le
 80038e2:	f1c1 0202 	rsble	r2, r1, #2
 80038e6:	2201      	movgt	r2, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	e7e0      	b.n	80038ae <_printf_float+0x192>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	055a      	lsls	r2, r3, #21
 80038f0:	d407      	bmi.n	8003902 <_printf_float+0x1e6>
 80038f2:	6923      	ldr	r3, [r4, #16]
 80038f4:	4642      	mov	r2, r8
 80038f6:	4631      	mov	r1, r6
 80038f8:	4628      	mov	r0, r5
 80038fa:	47b8      	blx	r7
 80038fc:	3001      	adds	r0, #1
 80038fe:	d12b      	bne.n	8003958 <_printf_float+0x23c>
 8003900:	e767      	b.n	80037d2 <_printf_float+0xb6>
 8003902:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003906:	f240 80dd 	bls.w	8003ac4 <_printf_float+0x3a8>
 800390a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800390e:	2200      	movs	r2, #0
 8003910:	2300      	movs	r3, #0
 8003912:	f7fd f8e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003916:	2800      	cmp	r0, #0
 8003918:	d033      	beq.n	8003982 <_printf_float+0x266>
 800391a:	4a37      	ldr	r2, [pc, #220]	@ (80039f8 <_printf_float+0x2dc>)
 800391c:	2301      	movs	r3, #1
 800391e:	4631      	mov	r1, r6
 8003920:	4628      	mov	r0, r5
 8003922:	47b8      	blx	r7
 8003924:	3001      	adds	r0, #1
 8003926:	f43f af54 	beq.w	80037d2 <_printf_float+0xb6>
 800392a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800392e:	4543      	cmp	r3, r8
 8003930:	db02      	blt.n	8003938 <_printf_float+0x21c>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	07d8      	lsls	r0, r3, #31
 8003936:	d50f      	bpl.n	8003958 <_printf_float+0x23c>
 8003938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800393c:	4631      	mov	r1, r6
 800393e:	4628      	mov	r0, r5
 8003940:	47b8      	blx	r7
 8003942:	3001      	adds	r0, #1
 8003944:	f43f af45 	beq.w	80037d2 <_printf_float+0xb6>
 8003948:	f04f 0900 	mov.w	r9, #0
 800394c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003950:	f104 0a1a 	add.w	sl, r4, #26
 8003954:	45c8      	cmp	r8, r9
 8003956:	dc09      	bgt.n	800396c <_printf_float+0x250>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	079b      	lsls	r3, r3, #30
 800395c:	f100 8103 	bmi.w	8003b66 <_printf_float+0x44a>
 8003960:	68e0      	ldr	r0, [r4, #12]
 8003962:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003964:	4298      	cmp	r0, r3
 8003966:	bfb8      	it	lt
 8003968:	4618      	movlt	r0, r3
 800396a:	e734      	b.n	80037d6 <_printf_float+0xba>
 800396c:	2301      	movs	r3, #1
 800396e:	4652      	mov	r2, sl
 8003970:	4631      	mov	r1, r6
 8003972:	4628      	mov	r0, r5
 8003974:	47b8      	blx	r7
 8003976:	3001      	adds	r0, #1
 8003978:	f43f af2b 	beq.w	80037d2 <_printf_float+0xb6>
 800397c:	f109 0901 	add.w	r9, r9, #1
 8003980:	e7e8      	b.n	8003954 <_printf_float+0x238>
 8003982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	dc39      	bgt.n	80039fc <_printf_float+0x2e0>
 8003988:	4a1b      	ldr	r2, [pc, #108]	@ (80039f8 <_printf_float+0x2dc>)
 800398a:	2301      	movs	r3, #1
 800398c:	4631      	mov	r1, r6
 800398e:	4628      	mov	r0, r5
 8003990:	47b8      	blx	r7
 8003992:	3001      	adds	r0, #1
 8003994:	f43f af1d 	beq.w	80037d2 <_printf_float+0xb6>
 8003998:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800399c:	ea59 0303 	orrs.w	r3, r9, r3
 80039a0:	d102      	bne.n	80039a8 <_printf_float+0x28c>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	07d9      	lsls	r1, r3, #31
 80039a6:	d5d7      	bpl.n	8003958 <_printf_float+0x23c>
 80039a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039ac:	4631      	mov	r1, r6
 80039ae:	4628      	mov	r0, r5
 80039b0:	47b8      	blx	r7
 80039b2:	3001      	adds	r0, #1
 80039b4:	f43f af0d 	beq.w	80037d2 <_printf_float+0xb6>
 80039b8:	f04f 0a00 	mov.w	sl, #0
 80039bc:	f104 0b1a 	add.w	fp, r4, #26
 80039c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039c2:	425b      	negs	r3, r3
 80039c4:	4553      	cmp	r3, sl
 80039c6:	dc01      	bgt.n	80039cc <_printf_float+0x2b0>
 80039c8:	464b      	mov	r3, r9
 80039ca:	e793      	b.n	80038f4 <_printf_float+0x1d8>
 80039cc:	2301      	movs	r3, #1
 80039ce:	465a      	mov	r2, fp
 80039d0:	4631      	mov	r1, r6
 80039d2:	4628      	mov	r0, r5
 80039d4:	47b8      	blx	r7
 80039d6:	3001      	adds	r0, #1
 80039d8:	f43f aefb 	beq.w	80037d2 <_printf_float+0xb6>
 80039dc:	f10a 0a01 	add.w	sl, sl, #1
 80039e0:	e7ee      	b.n	80039c0 <_printf_float+0x2a4>
 80039e2:	bf00      	nop
 80039e4:	7fefffff 	.word	0x7fefffff
 80039e8:	08007d34 	.word	0x08007d34
 80039ec:	08007d38 	.word	0x08007d38
 80039f0:	08007d3c 	.word	0x08007d3c
 80039f4:	08007d40 	.word	0x08007d40
 80039f8:	08007d44 	.word	0x08007d44
 80039fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003a02:	4553      	cmp	r3, sl
 8003a04:	bfa8      	it	ge
 8003a06:	4653      	movge	r3, sl
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	4699      	mov	r9, r3
 8003a0c:	dc36      	bgt.n	8003a7c <_printf_float+0x360>
 8003a0e:	f04f 0b00 	mov.w	fp, #0
 8003a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a16:	f104 021a 	add.w	r2, r4, #26
 8003a1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a1c:	9306      	str	r3, [sp, #24]
 8003a1e:	eba3 0309 	sub.w	r3, r3, r9
 8003a22:	455b      	cmp	r3, fp
 8003a24:	dc31      	bgt.n	8003a8a <_printf_float+0x36e>
 8003a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a28:	459a      	cmp	sl, r3
 8003a2a:	dc3a      	bgt.n	8003aa2 <_printf_float+0x386>
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	07da      	lsls	r2, r3, #31
 8003a30:	d437      	bmi.n	8003aa2 <_printf_float+0x386>
 8003a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a34:	ebaa 0903 	sub.w	r9, sl, r3
 8003a38:	9b06      	ldr	r3, [sp, #24]
 8003a3a:	ebaa 0303 	sub.w	r3, sl, r3
 8003a3e:	4599      	cmp	r9, r3
 8003a40:	bfa8      	it	ge
 8003a42:	4699      	movge	r9, r3
 8003a44:	f1b9 0f00 	cmp.w	r9, #0
 8003a48:	dc33      	bgt.n	8003ab2 <_printf_float+0x396>
 8003a4a:	f04f 0800 	mov.w	r8, #0
 8003a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a52:	f104 0b1a 	add.w	fp, r4, #26
 8003a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a58:	ebaa 0303 	sub.w	r3, sl, r3
 8003a5c:	eba3 0309 	sub.w	r3, r3, r9
 8003a60:	4543      	cmp	r3, r8
 8003a62:	f77f af79 	ble.w	8003958 <_printf_float+0x23c>
 8003a66:	2301      	movs	r3, #1
 8003a68:	465a      	mov	r2, fp
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b8      	blx	r7
 8003a70:	3001      	adds	r0, #1
 8003a72:	f43f aeae 	beq.w	80037d2 <_printf_float+0xb6>
 8003a76:	f108 0801 	add.w	r8, r8, #1
 8003a7a:	e7ec      	b.n	8003a56 <_printf_float+0x33a>
 8003a7c:	4642      	mov	r2, r8
 8003a7e:	4631      	mov	r1, r6
 8003a80:	4628      	mov	r0, r5
 8003a82:	47b8      	blx	r7
 8003a84:	3001      	adds	r0, #1
 8003a86:	d1c2      	bne.n	8003a0e <_printf_float+0x2f2>
 8003a88:	e6a3      	b.n	80037d2 <_printf_float+0xb6>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	4631      	mov	r1, r6
 8003a8e:	4628      	mov	r0, r5
 8003a90:	9206      	str	r2, [sp, #24]
 8003a92:	47b8      	blx	r7
 8003a94:	3001      	adds	r0, #1
 8003a96:	f43f ae9c 	beq.w	80037d2 <_printf_float+0xb6>
 8003a9a:	9a06      	ldr	r2, [sp, #24]
 8003a9c:	f10b 0b01 	add.w	fp, fp, #1
 8003aa0:	e7bb      	b.n	8003a1a <_printf_float+0x2fe>
 8003aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	47b8      	blx	r7
 8003aac:	3001      	adds	r0, #1
 8003aae:	d1c0      	bne.n	8003a32 <_printf_float+0x316>
 8003ab0:	e68f      	b.n	80037d2 <_printf_float+0xb6>
 8003ab2:	9a06      	ldr	r2, [sp, #24]
 8003ab4:	464b      	mov	r3, r9
 8003ab6:	4442      	add	r2, r8
 8003ab8:	4631      	mov	r1, r6
 8003aba:	4628      	mov	r0, r5
 8003abc:	47b8      	blx	r7
 8003abe:	3001      	adds	r0, #1
 8003ac0:	d1c3      	bne.n	8003a4a <_printf_float+0x32e>
 8003ac2:	e686      	b.n	80037d2 <_printf_float+0xb6>
 8003ac4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003ac8:	f1ba 0f01 	cmp.w	sl, #1
 8003acc:	dc01      	bgt.n	8003ad2 <_printf_float+0x3b6>
 8003ace:	07db      	lsls	r3, r3, #31
 8003ad0:	d536      	bpl.n	8003b40 <_printf_float+0x424>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	4631      	mov	r1, r6
 8003ad8:	4628      	mov	r0, r5
 8003ada:	47b8      	blx	r7
 8003adc:	3001      	adds	r0, #1
 8003ade:	f43f ae78 	beq.w	80037d2 <_printf_float+0xb6>
 8003ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	4628      	mov	r0, r5
 8003aea:	47b8      	blx	r7
 8003aec:	3001      	adds	r0, #1
 8003aee:	f43f ae70 	beq.w	80037d2 <_printf_float+0xb6>
 8003af2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003af6:	2200      	movs	r2, #0
 8003af8:	2300      	movs	r3, #0
 8003afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003afe:	f7fc ffeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b02:	b9c0      	cbnz	r0, 8003b36 <_printf_float+0x41a>
 8003b04:	4653      	mov	r3, sl
 8003b06:	f108 0201 	add.w	r2, r8, #1
 8003b0a:	4631      	mov	r1, r6
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	47b8      	blx	r7
 8003b10:	3001      	adds	r0, #1
 8003b12:	d10c      	bne.n	8003b2e <_printf_float+0x412>
 8003b14:	e65d      	b.n	80037d2 <_printf_float+0xb6>
 8003b16:	2301      	movs	r3, #1
 8003b18:	465a      	mov	r2, fp
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	47b8      	blx	r7
 8003b20:	3001      	adds	r0, #1
 8003b22:	f43f ae56 	beq.w	80037d2 <_printf_float+0xb6>
 8003b26:	f108 0801 	add.w	r8, r8, #1
 8003b2a:	45d0      	cmp	r8, sl
 8003b2c:	dbf3      	blt.n	8003b16 <_printf_float+0x3fa>
 8003b2e:	464b      	mov	r3, r9
 8003b30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003b34:	e6df      	b.n	80038f6 <_printf_float+0x1da>
 8003b36:	f04f 0800 	mov.w	r8, #0
 8003b3a:	f104 0b1a 	add.w	fp, r4, #26
 8003b3e:	e7f4      	b.n	8003b2a <_printf_float+0x40e>
 8003b40:	2301      	movs	r3, #1
 8003b42:	4642      	mov	r2, r8
 8003b44:	e7e1      	b.n	8003b0a <_printf_float+0x3ee>
 8003b46:	2301      	movs	r3, #1
 8003b48:	464a      	mov	r2, r9
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	47b8      	blx	r7
 8003b50:	3001      	adds	r0, #1
 8003b52:	f43f ae3e 	beq.w	80037d2 <_printf_float+0xb6>
 8003b56:	f108 0801 	add.w	r8, r8, #1
 8003b5a:	68e3      	ldr	r3, [r4, #12]
 8003b5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003b5e:	1a5b      	subs	r3, r3, r1
 8003b60:	4543      	cmp	r3, r8
 8003b62:	dcf0      	bgt.n	8003b46 <_printf_float+0x42a>
 8003b64:	e6fc      	b.n	8003960 <_printf_float+0x244>
 8003b66:	f04f 0800 	mov.w	r8, #0
 8003b6a:	f104 0919 	add.w	r9, r4, #25
 8003b6e:	e7f4      	b.n	8003b5a <_printf_float+0x43e>

08003b70 <_printf_common>:
 8003b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	4616      	mov	r6, r2
 8003b76:	4698      	mov	r8, r3
 8003b78:	688a      	ldr	r2, [r1, #8]
 8003b7a:	690b      	ldr	r3, [r1, #16]
 8003b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bfb8      	it	lt
 8003b84:	4613      	movlt	r3, r2
 8003b86:	6033      	str	r3, [r6, #0]
 8003b88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b8c:	4607      	mov	r7, r0
 8003b8e:	460c      	mov	r4, r1
 8003b90:	b10a      	cbz	r2, 8003b96 <_printf_common+0x26>
 8003b92:	3301      	adds	r3, #1
 8003b94:	6033      	str	r3, [r6, #0]
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	0699      	lsls	r1, r3, #26
 8003b9a:	bf42      	ittt	mi
 8003b9c:	6833      	ldrmi	r3, [r6, #0]
 8003b9e:	3302      	addmi	r3, #2
 8003ba0:	6033      	strmi	r3, [r6, #0]
 8003ba2:	6825      	ldr	r5, [r4, #0]
 8003ba4:	f015 0506 	ands.w	r5, r5, #6
 8003ba8:	d106      	bne.n	8003bb8 <_printf_common+0x48>
 8003baa:	f104 0a19 	add.w	sl, r4, #25
 8003bae:	68e3      	ldr	r3, [r4, #12]
 8003bb0:	6832      	ldr	r2, [r6, #0]
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	42ab      	cmp	r3, r5
 8003bb6:	dc26      	bgt.n	8003c06 <_printf_common+0x96>
 8003bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	3b00      	subs	r3, #0
 8003bc0:	bf18      	it	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	0692      	lsls	r2, r2, #26
 8003bc6:	d42b      	bmi.n	8003c20 <_printf_common+0xb0>
 8003bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bcc:	4641      	mov	r1, r8
 8003bce:	4638      	mov	r0, r7
 8003bd0:	47c8      	blx	r9
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	d01e      	beq.n	8003c14 <_printf_common+0xa4>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	6922      	ldr	r2, [r4, #16]
 8003bda:	f003 0306 	and.w	r3, r3, #6
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	bf02      	ittt	eq
 8003be2:	68e5      	ldreq	r5, [r4, #12]
 8003be4:	6833      	ldreq	r3, [r6, #0]
 8003be6:	1aed      	subeq	r5, r5, r3
 8003be8:	68a3      	ldr	r3, [r4, #8]
 8003bea:	bf0c      	ite	eq
 8003bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bf0:	2500      	movne	r5, #0
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	bfc4      	itt	gt
 8003bf6:	1a9b      	subgt	r3, r3, r2
 8003bf8:	18ed      	addgt	r5, r5, r3
 8003bfa:	2600      	movs	r6, #0
 8003bfc:	341a      	adds	r4, #26
 8003bfe:	42b5      	cmp	r5, r6
 8003c00:	d11a      	bne.n	8003c38 <_printf_common+0xc8>
 8003c02:	2000      	movs	r0, #0
 8003c04:	e008      	b.n	8003c18 <_printf_common+0xa8>
 8003c06:	2301      	movs	r3, #1
 8003c08:	4652      	mov	r2, sl
 8003c0a:	4641      	mov	r1, r8
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	47c8      	blx	r9
 8003c10:	3001      	adds	r0, #1
 8003c12:	d103      	bne.n	8003c1c <_printf_common+0xac>
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1c:	3501      	adds	r5, #1
 8003c1e:	e7c6      	b.n	8003bae <_printf_common+0x3e>
 8003c20:	18e1      	adds	r1, r4, r3
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	2030      	movs	r0, #48	@ 0x30
 8003c26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c2a:	4422      	add	r2, r4
 8003c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c34:	3302      	adds	r3, #2
 8003c36:	e7c7      	b.n	8003bc8 <_printf_common+0x58>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	4638      	mov	r0, r7
 8003c40:	47c8      	blx	r9
 8003c42:	3001      	adds	r0, #1
 8003c44:	d0e6      	beq.n	8003c14 <_printf_common+0xa4>
 8003c46:	3601      	adds	r6, #1
 8003c48:	e7d9      	b.n	8003bfe <_printf_common+0x8e>
	...

08003c4c <_printf_i>:
 8003c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c50:	7e0f      	ldrb	r7, [r1, #24]
 8003c52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c54:	2f78      	cmp	r7, #120	@ 0x78
 8003c56:	4691      	mov	r9, r2
 8003c58:	4680      	mov	r8, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	469a      	mov	sl, r3
 8003c5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c62:	d807      	bhi.n	8003c74 <_printf_i+0x28>
 8003c64:	2f62      	cmp	r7, #98	@ 0x62
 8003c66:	d80a      	bhi.n	8003c7e <_printf_i+0x32>
 8003c68:	2f00      	cmp	r7, #0
 8003c6a:	f000 80d2 	beq.w	8003e12 <_printf_i+0x1c6>
 8003c6e:	2f58      	cmp	r7, #88	@ 0x58
 8003c70:	f000 80b9 	beq.w	8003de6 <_printf_i+0x19a>
 8003c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c7c:	e03a      	b.n	8003cf4 <_printf_i+0xa8>
 8003c7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c82:	2b15      	cmp	r3, #21
 8003c84:	d8f6      	bhi.n	8003c74 <_printf_i+0x28>
 8003c86:	a101      	add	r1, pc, #4	@ (adr r1, 8003c8c <_printf_i+0x40>)
 8003c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c8c:	08003ce5 	.word	0x08003ce5
 8003c90:	08003cf9 	.word	0x08003cf9
 8003c94:	08003c75 	.word	0x08003c75
 8003c98:	08003c75 	.word	0x08003c75
 8003c9c:	08003c75 	.word	0x08003c75
 8003ca0:	08003c75 	.word	0x08003c75
 8003ca4:	08003cf9 	.word	0x08003cf9
 8003ca8:	08003c75 	.word	0x08003c75
 8003cac:	08003c75 	.word	0x08003c75
 8003cb0:	08003c75 	.word	0x08003c75
 8003cb4:	08003c75 	.word	0x08003c75
 8003cb8:	08003df9 	.word	0x08003df9
 8003cbc:	08003d23 	.word	0x08003d23
 8003cc0:	08003db3 	.word	0x08003db3
 8003cc4:	08003c75 	.word	0x08003c75
 8003cc8:	08003c75 	.word	0x08003c75
 8003ccc:	08003e1b 	.word	0x08003e1b
 8003cd0:	08003c75 	.word	0x08003c75
 8003cd4:	08003d23 	.word	0x08003d23
 8003cd8:	08003c75 	.word	0x08003c75
 8003cdc:	08003c75 	.word	0x08003c75
 8003ce0:	08003dbb 	.word	0x08003dbb
 8003ce4:	6833      	ldr	r3, [r6, #0]
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6032      	str	r2, [r6, #0]
 8003cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e09d      	b.n	8003e34 <_printf_i+0x1e8>
 8003cf8:	6833      	ldr	r3, [r6, #0]
 8003cfa:	6820      	ldr	r0, [r4, #0]
 8003cfc:	1d19      	adds	r1, r3, #4
 8003cfe:	6031      	str	r1, [r6, #0]
 8003d00:	0606      	lsls	r6, r0, #24
 8003d02:	d501      	bpl.n	8003d08 <_printf_i+0xbc>
 8003d04:	681d      	ldr	r5, [r3, #0]
 8003d06:	e003      	b.n	8003d10 <_printf_i+0xc4>
 8003d08:	0645      	lsls	r5, r0, #25
 8003d0a:	d5fb      	bpl.n	8003d04 <_printf_i+0xb8>
 8003d0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d10:	2d00      	cmp	r5, #0
 8003d12:	da03      	bge.n	8003d1c <_printf_i+0xd0>
 8003d14:	232d      	movs	r3, #45	@ 0x2d
 8003d16:	426d      	negs	r5, r5
 8003d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d1c:	4859      	ldr	r0, [pc, #356]	@ (8003e84 <_printf_i+0x238>)
 8003d1e:	230a      	movs	r3, #10
 8003d20:	e011      	b.n	8003d46 <_printf_i+0xfa>
 8003d22:	6821      	ldr	r1, [r4, #0]
 8003d24:	6833      	ldr	r3, [r6, #0]
 8003d26:	0608      	lsls	r0, r1, #24
 8003d28:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d2c:	d402      	bmi.n	8003d34 <_printf_i+0xe8>
 8003d2e:	0649      	lsls	r1, r1, #25
 8003d30:	bf48      	it	mi
 8003d32:	b2ad      	uxthmi	r5, r5
 8003d34:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d36:	4853      	ldr	r0, [pc, #332]	@ (8003e84 <_printf_i+0x238>)
 8003d38:	6033      	str	r3, [r6, #0]
 8003d3a:	bf14      	ite	ne
 8003d3c:	230a      	movne	r3, #10
 8003d3e:	2308      	moveq	r3, #8
 8003d40:	2100      	movs	r1, #0
 8003d42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d46:	6866      	ldr	r6, [r4, #4]
 8003d48:	60a6      	str	r6, [r4, #8]
 8003d4a:	2e00      	cmp	r6, #0
 8003d4c:	bfa2      	ittt	ge
 8003d4e:	6821      	ldrge	r1, [r4, #0]
 8003d50:	f021 0104 	bicge.w	r1, r1, #4
 8003d54:	6021      	strge	r1, [r4, #0]
 8003d56:	b90d      	cbnz	r5, 8003d5c <_printf_i+0x110>
 8003d58:	2e00      	cmp	r6, #0
 8003d5a:	d04b      	beq.n	8003df4 <_printf_i+0x1a8>
 8003d5c:	4616      	mov	r6, r2
 8003d5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d62:	fb03 5711 	mls	r7, r3, r1, r5
 8003d66:	5dc7      	ldrb	r7, [r0, r7]
 8003d68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d6c:	462f      	mov	r7, r5
 8003d6e:	42bb      	cmp	r3, r7
 8003d70:	460d      	mov	r5, r1
 8003d72:	d9f4      	bls.n	8003d5e <_printf_i+0x112>
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d10b      	bne.n	8003d90 <_printf_i+0x144>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	07df      	lsls	r7, r3, #31
 8003d7c:	d508      	bpl.n	8003d90 <_printf_i+0x144>
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	6861      	ldr	r1, [r4, #4]
 8003d82:	4299      	cmp	r1, r3
 8003d84:	bfde      	ittt	le
 8003d86:	2330      	movle	r3, #48	@ 0x30
 8003d88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d90:	1b92      	subs	r2, r2, r6
 8003d92:	6122      	str	r2, [r4, #16]
 8003d94:	f8cd a000 	str.w	sl, [sp]
 8003d98:	464b      	mov	r3, r9
 8003d9a:	aa03      	add	r2, sp, #12
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4640      	mov	r0, r8
 8003da0:	f7ff fee6 	bl	8003b70 <_printf_common>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d14a      	bne.n	8003e3e <_printf_i+0x1f2>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	b004      	add	sp, #16
 8003dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	f043 0320 	orr.w	r3, r3, #32
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	4833      	ldr	r0, [pc, #204]	@ (8003e88 <_printf_i+0x23c>)
 8003dbc:	2778      	movs	r7, #120	@ 0x78
 8003dbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	6831      	ldr	r1, [r6, #0]
 8003dc6:	061f      	lsls	r7, r3, #24
 8003dc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dcc:	d402      	bmi.n	8003dd4 <_printf_i+0x188>
 8003dce:	065f      	lsls	r7, r3, #25
 8003dd0:	bf48      	it	mi
 8003dd2:	b2ad      	uxthmi	r5, r5
 8003dd4:	6031      	str	r1, [r6, #0]
 8003dd6:	07d9      	lsls	r1, r3, #31
 8003dd8:	bf44      	itt	mi
 8003dda:	f043 0320 	orrmi.w	r3, r3, #32
 8003dde:	6023      	strmi	r3, [r4, #0]
 8003de0:	b11d      	cbz	r5, 8003dea <_printf_i+0x19e>
 8003de2:	2310      	movs	r3, #16
 8003de4:	e7ac      	b.n	8003d40 <_printf_i+0xf4>
 8003de6:	4827      	ldr	r0, [pc, #156]	@ (8003e84 <_printf_i+0x238>)
 8003de8:	e7e9      	b.n	8003dbe <_printf_i+0x172>
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	f023 0320 	bic.w	r3, r3, #32
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	e7f6      	b.n	8003de2 <_printf_i+0x196>
 8003df4:	4616      	mov	r6, r2
 8003df6:	e7bd      	b.n	8003d74 <_printf_i+0x128>
 8003df8:	6833      	ldr	r3, [r6, #0]
 8003dfa:	6825      	ldr	r5, [r4, #0]
 8003dfc:	6961      	ldr	r1, [r4, #20]
 8003dfe:	1d18      	adds	r0, r3, #4
 8003e00:	6030      	str	r0, [r6, #0]
 8003e02:	062e      	lsls	r6, r5, #24
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	d501      	bpl.n	8003e0c <_printf_i+0x1c0>
 8003e08:	6019      	str	r1, [r3, #0]
 8003e0a:	e002      	b.n	8003e12 <_printf_i+0x1c6>
 8003e0c:	0668      	lsls	r0, r5, #25
 8003e0e:	d5fb      	bpl.n	8003e08 <_printf_i+0x1bc>
 8003e10:	8019      	strh	r1, [r3, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	6123      	str	r3, [r4, #16]
 8003e16:	4616      	mov	r6, r2
 8003e18:	e7bc      	b.n	8003d94 <_printf_i+0x148>
 8003e1a:	6833      	ldr	r3, [r6, #0]
 8003e1c:	1d1a      	adds	r2, r3, #4
 8003e1e:	6032      	str	r2, [r6, #0]
 8003e20:	681e      	ldr	r6, [r3, #0]
 8003e22:	6862      	ldr	r2, [r4, #4]
 8003e24:	2100      	movs	r1, #0
 8003e26:	4630      	mov	r0, r6
 8003e28:	f7fc f9da 	bl	80001e0 <memchr>
 8003e2c:	b108      	cbz	r0, 8003e32 <_printf_i+0x1e6>
 8003e2e:	1b80      	subs	r0, r0, r6
 8003e30:	6060      	str	r0, [r4, #4]
 8003e32:	6863      	ldr	r3, [r4, #4]
 8003e34:	6123      	str	r3, [r4, #16]
 8003e36:	2300      	movs	r3, #0
 8003e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e3c:	e7aa      	b.n	8003d94 <_printf_i+0x148>
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	4632      	mov	r2, r6
 8003e42:	4649      	mov	r1, r9
 8003e44:	4640      	mov	r0, r8
 8003e46:	47d0      	blx	sl
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d0ad      	beq.n	8003da8 <_printf_i+0x15c>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	079b      	lsls	r3, r3, #30
 8003e50:	d413      	bmi.n	8003e7a <_printf_i+0x22e>
 8003e52:	68e0      	ldr	r0, [r4, #12]
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	4298      	cmp	r0, r3
 8003e58:	bfb8      	it	lt
 8003e5a:	4618      	movlt	r0, r3
 8003e5c:	e7a6      	b.n	8003dac <_printf_i+0x160>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4632      	mov	r2, r6
 8003e62:	4649      	mov	r1, r9
 8003e64:	4640      	mov	r0, r8
 8003e66:	47d0      	blx	sl
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d09d      	beq.n	8003da8 <_printf_i+0x15c>
 8003e6c:	3501      	adds	r5, #1
 8003e6e:	68e3      	ldr	r3, [r4, #12]
 8003e70:	9903      	ldr	r1, [sp, #12]
 8003e72:	1a5b      	subs	r3, r3, r1
 8003e74:	42ab      	cmp	r3, r5
 8003e76:	dcf2      	bgt.n	8003e5e <_printf_i+0x212>
 8003e78:	e7eb      	b.n	8003e52 <_printf_i+0x206>
 8003e7a:	2500      	movs	r5, #0
 8003e7c:	f104 0619 	add.w	r6, r4, #25
 8003e80:	e7f5      	b.n	8003e6e <_printf_i+0x222>
 8003e82:	bf00      	nop
 8003e84:	08007d46 	.word	0x08007d46
 8003e88:	08007d57 	.word	0x08007d57

08003e8c <_scanf_float>:
 8003e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e90:	b087      	sub	sp, #28
 8003e92:	4617      	mov	r7, r2
 8003e94:	9303      	str	r3, [sp, #12]
 8003e96:	688b      	ldr	r3, [r1, #8]
 8003e98:	1e5a      	subs	r2, r3, #1
 8003e9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003e9e:	bf81      	itttt	hi
 8003ea0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003ea4:	eb03 0b05 	addhi.w	fp, r3, r5
 8003ea8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003eac:	608b      	strhi	r3, [r1, #8]
 8003eae:	680b      	ldr	r3, [r1, #0]
 8003eb0:	460a      	mov	r2, r1
 8003eb2:	f04f 0500 	mov.w	r5, #0
 8003eb6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003eba:	f842 3b1c 	str.w	r3, [r2], #28
 8003ebe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	bf98      	it	ls
 8003ec8:	f04f 0b00 	movls.w	fp, #0
 8003ecc:	9201      	str	r2, [sp, #4]
 8003ece:	4616      	mov	r6, r2
 8003ed0:	46aa      	mov	sl, r5
 8003ed2:	46a9      	mov	r9, r5
 8003ed4:	9502      	str	r5, [sp, #8]
 8003ed6:	68a2      	ldr	r2, [r4, #8]
 8003ed8:	b152      	cbz	r2, 8003ef0 <_scanf_float+0x64>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b4e      	cmp	r3, #78	@ 0x4e
 8003ee0:	d864      	bhi.n	8003fac <_scanf_float+0x120>
 8003ee2:	2b40      	cmp	r3, #64	@ 0x40
 8003ee4:	d83c      	bhi.n	8003f60 <_scanf_float+0xd4>
 8003ee6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003eea:	b2c8      	uxtb	r0, r1
 8003eec:	280e      	cmp	r0, #14
 8003eee:	d93a      	bls.n	8003f66 <_scanf_float+0xda>
 8003ef0:	f1b9 0f00 	cmp.w	r9, #0
 8003ef4:	d003      	beq.n	8003efe <_scanf_float+0x72>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003efc:	6023      	str	r3, [r4, #0]
 8003efe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f02:	f1ba 0f01 	cmp.w	sl, #1
 8003f06:	f200 8117 	bhi.w	8004138 <_scanf_float+0x2ac>
 8003f0a:	9b01      	ldr	r3, [sp, #4]
 8003f0c:	429e      	cmp	r6, r3
 8003f0e:	f200 8108 	bhi.w	8004122 <_scanf_float+0x296>
 8003f12:	2001      	movs	r0, #1
 8003f14:	b007      	add	sp, #28
 8003f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003f1e:	2a0d      	cmp	r2, #13
 8003f20:	d8e6      	bhi.n	8003ef0 <_scanf_float+0x64>
 8003f22:	a101      	add	r1, pc, #4	@ (adr r1, 8003f28 <_scanf_float+0x9c>)
 8003f24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003f28:	0800406f 	.word	0x0800406f
 8003f2c:	08003ef1 	.word	0x08003ef1
 8003f30:	08003ef1 	.word	0x08003ef1
 8003f34:	08003ef1 	.word	0x08003ef1
 8003f38:	080040cf 	.word	0x080040cf
 8003f3c:	080040a7 	.word	0x080040a7
 8003f40:	08003ef1 	.word	0x08003ef1
 8003f44:	08003ef1 	.word	0x08003ef1
 8003f48:	0800407d 	.word	0x0800407d
 8003f4c:	08003ef1 	.word	0x08003ef1
 8003f50:	08003ef1 	.word	0x08003ef1
 8003f54:	08003ef1 	.word	0x08003ef1
 8003f58:	08003ef1 	.word	0x08003ef1
 8003f5c:	08004035 	.word	0x08004035
 8003f60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003f64:	e7db      	b.n	8003f1e <_scanf_float+0x92>
 8003f66:	290e      	cmp	r1, #14
 8003f68:	d8c2      	bhi.n	8003ef0 <_scanf_float+0x64>
 8003f6a:	a001      	add	r0, pc, #4	@ (adr r0, 8003f70 <_scanf_float+0xe4>)
 8003f6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003f70:	08004025 	.word	0x08004025
 8003f74:	08003ef1 	.word	0x08003ef1
 8003f78:	08004025 	.word	0x08004025
 8003f7c:	080040bb 	.word	0x080040bb
 8003f80:	08003ef1 	.word	0x08003ef1
 8003f84:	08003fcd 	.word	0x08003fcd
 8003f88:	0800400b 	.word	0x0800400b
 8003f8c:	0800400b 	.word	0x0800400b
 8003f90:	0800400b 	.word	0x0800400b
 8003f94:	0800400b 	.word	0x0800400b
 8003f98:	0800400b 	.word	0x0800400b
 8003f9c:	0800400b 	.word	0x0800400b
 8003fa0:	0800400b 	.word	0x0800400b
 8003fa4:	0800400b 	.word	0x0800400b
 8003fa8:	0800400b 	.word	0x0800400b
 8003fac:	2b6e      	cmp	r3, #110	@ 0x6e
 8003fae:	d809      	bhi.n	8003fc4 <_scanf_float+0x138>
 8003fb0:	2b60      	cmp	r3, #96	@ 0x60
 8003fb2:	d8b2      	bhi.n	8003f1a <_scanf_float+0x8e>
 8003fb4:	2b54      	cmp	r3, #84	@ 0x54
 8003fb6:	d07b      	beq.n	80040b0 <_scanf_float+0x224>
 8003fb8:	2b59      	cmp	r3, #89	@ 0x59
 8003fba:	d199      	bne.n	8003ef0 <_scanf_float+0x64>
 8003fbc:	2d07      	cmp	r5, #7
 8003fbe:	d197      	bne.n	8003ef0 <_scanf_float+0x64>
 8003fc0:	2508      	movs	r5, #8
 8003fc2:	e02c      	b.n	800401e <_scanf_float+0x192>
 8003fc4:	2b74      	cmp	r3, #116	@ 0x74
 8003fc6:	d073      	beq.n	80040b0 <_scanf_float+0x224>
 8003fc8:	2b79      	cmp	r3, #121	@ 0x79
 8003fca:	e7f6      	b.n	8003fba <_scanf_float+0x12e>
 8003fcc:	6821      	ldr	r1, [r4, #0]
 8003fce:	05c8      	lsls	r0, r1, #23
 8003fd0:	d51b      	bpl.n	800400a <_scanf_float+0x17e>
 8003fd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003fd6:	6021      	str	r1, [r4, #0]
 8003fd8:	f109 0901 	add.w	r9, r9, #1
 8003fdc:	f1bb 0f00 	cmp.w	fp, #0
 8003fe0:	d003      	beq.n	8003fea <_scanf_float+0x15e>
 8003fe2:	3201      	adds	r2, #1
 8003fe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fe8:	60a2      	str	r2, [r4, #8]
 8003fea:	68a3      	ldr	r3, [r4, #8]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	60a3      	str	r3, [r4, #8]
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	6123      	str	r3, [r4, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	f340 8087 	ble.w	8004110 <_scanf_float+0x284>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	e765      	b.n	8003ed6 <_scanf_float+0x4a>
 800400a:	eb1a 0105 	adds.w	r1, sl, r5
 800400e:	f47f af6f 	bne.w	8003ef0 <_scanf_float+0x64>
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004018:	6022      	str	r2, [r4, #0]
 800401a:	460d      	mov	r5, r1
 800401c:	468a      	mov	sl, r1
 800401e:	f806 3b01 	strb.w	r3, [r6], #1
 8004022:	e7e2      	b.n	8003fea <_scanf_float+0x15e>
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	0610      	lsls	r0, r2, #24
 8004028:	f57f af62 	bpl.w	8003ef0 <_scanf_float+0x64>
 800402c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004030:	6022      	str	r2, [r4, #0]
 8004032:	e7f4      	b.n	800401e <_scanf_float+0x192>
 8004034:	f1ba 0f00 	cmp.w	sl, #0
 8004038:	d10e      	bne.n	8004058 <_scanf_float+0x1cc>
 800403a:	f1b9 0f00 	cmp.w	r9, #0
 800403e:	d10e      	bne.n	800405e <_scanf_float+0x1d2>
 8004040:	6822      	ldr	r2, [r4, #0]
 8004042:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004046:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800404a:	d108      	bne.n	800405e <_scanf_float+0x1d2>
 800404c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004050:	6022      	str	r2, [r4, #0]
 8004052:	f04f 0a01 	mov.w	sl, #1
 8004056:	e7e2      	b.n	800401e <_scanf_float+0x192>
 8004058:	f1ba 0f02 	cmp.w	sl, #2
 800405c:	d055      	beq.n	800410a <_scanf_float+0x27e>
 800405e:	2d01      	cmp	r5, #1
 8004060:	d002      	beq.n	8004068 <_scanf_float+0x1dc>
 8004062:	2d04      	cmp	r5, #4
 8004064:	f47f af44 	bne.w	8003ef0 <_scanf_float+0x64>
 8004068:	3501      	adds	r5, #1
 800406a:	b2ed      	uxtb	r5, r5
 800406c:	e7d7      	b.n	800401e <_scanf_float+0x192>
 800406e:	f1ba 0f01 	cmp.w	sl, #1
 8004072:	f47f af3d 	bne.w	8003ef0 <_scanf_float+0x64>
 8004076:	f04f 0a02 	mov.w	sl, #2
 800407a:	e7d0      	b.n	800401e <_scanf_float+0x192>
 800407c:	b97d      	cbnz	r5, 800409e <_scanf_float+0x212>
 800407e:	f1b9 0f00 	cmp.w	r9, #0
 8004082:	f47f af38 	bne.w	8003ef6 <_scanf_float+0x6a>
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800408c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004090:	f040 8108 	bne.w	80042a4 <_scanf_float+0x418>
 8004094:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004098:	6022      	str	r2, [r4, #0]
 800409a:	2501      	movs	r5, #1
 800409c:	e7bf      	b.n	800401e <_scanf_float+0x192>
 800409e:	2d03      	cmp	r5, #3
 80040a0:	d0e2      	beq.n	8004068 <_scanf_float+0x1dc>
 80040a2:	2d05      	cmp	r5, #5
 80040a4:	e7de      	b.n	8004064 <_scanf_float+0x1d8>
 80040a6:	2d02      	cmp	r5, #2
 80040a8:	f47f af22 	bne.w	8003ef0 <_scanf_float+0x64>
 80040ac:	2503      	movs	r5, #3
 80040ae:	e7b6      	b.n	800401e <_scanf_float+0x192>
 80040b0:	2d06      	cmp	r5, #6
 80040b2:	f47f af1d 	bne.w	8003ef0 <_scanf_float+0x64>
 80040b6:	2507      	movs	r5, #7
 80040b8:	e7b1      	b.n	800401e <_scanf_float+0x192>
 80040ba:	6822      	ldr	r2, [r4, #0]
 80040bc:	0591      	lsls	r1, r2, #22
 80040be:	f57f af17 	bpl.w	8003ef0 <_scanf_float+0x64>
 80040c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80040c6:	6022      	str	r2, [r4, #0]
 80040c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80040cc:	e7a7      	b.n	800401e <_scanf_float+0x192>
 80040ce:	6822      	ldr	r2, [r4, #0]
 80040d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80040d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80040d8:	d006      	beq.n	80040e8 <_scanf_float+0x25c>
 80040da:	0550      	lsls	r0, r2, #21
 80040dc:	f57f af08 	bpl.w	8003ef0 <_scanf_float+0x64>
 80040e0:	f1b9 0f00 	cmp.w	r9, #0
 80040e4:	f000 80de 	beq.w	80042a4 <_scanf_float+0x418>
 80040e8:	0591      	lsls	r1, r2, #22
 80040ea:	bf58      	it	pl
 80040ec:	9902      	ldrpl	r1, [sp, #8]
 80040ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80040f2:	bf58      	it	pl
 80040f4:	eba9 0101 	subpl.w	r1, r9, r1
 80040f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80040fc:	bf58      	it	pl
 80040fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004102:	6022      	str	r2, [r4, #0]
 8004104:	f04f 0900 	mov.w	r9, #0
 8004108:	e789      	b.n	800401e <_scanf_float+0x192>
 800410a:	f04f 0a03 	mov.w	sl, #3
 800410e:	e786      	b.n	800401e <_scanf_float+0x192>
 8004110:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004114:	4639      	mov	r1, r7
 8004116:	4640      	mov	r0, r8
 8004118:	4798      	blx	r3
 800411a:	2800      	cmp	r0, #0
 800411c:	f43f aedb 	beq.w	8003ed6 <_scanf_float+0x4a>
 8004120:	e6e6      	b.n	8003ef0 <_scanf_float+0x64>
 8004122:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800412a:	463a      	mov	r2, r7
 800412c:	4640      	mov	r0, r8
 800412e:	4798      	blx	r3
 8004130:	6923      	ldr	r3, [r4, #16]
 8004132:	3b01      	subs	r3, #1
 8004134:	6123      	str	r3, [r4, #16]
 8004136:	e6e8      	b.n	8003f0a <_scanf_float+0x7e>
 8004138:	1e6b      	subs	r3, r5, #1
 800413a:	2b06      	cmp	r3, #6
 800413c:	d824      	bhi.n	8004188 <_scanf_float+0x2fc>
 800413e:	2d02      	cmp	r5, #2
 8004140:	d836      	bhi.n	80041b0 <_scanf_float+0x324>
 8004142:	9b01      	ldr	r3, [sp, #4]
 8004144:	429e      	cmp	r6, r3
 8004146:	f67f aee4 	bls.w	8003f12 <_scanf_float+0x86>
 800414a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800414e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004152:	463a      	mov	r2, r7
 8004154:	4640      	mov	r0, r8
 8004156:	4798      	blx	r3
 8004158:	6923      	ldr	r3, [r4, #16]
 800415a:	3b01      	subs	r3, #1
 800415c:	6123      	str	r3, [r4, #16]
 800415e:	e7f0      	b.n	8004142 <_scanf_float+0x2b6>
 8004160:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004164:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004168:	463a      	mov	r2, r7
 800416a:	4640      	mov	r0, r8
 800416c:	4798      	blx	r3
 800416e:	6923      	ldr	r3, [r4, #16]
 8004170:	3b01      	subs	r3, #1
 8004172:	6123      	str	r3, [r4, #16]
 8004174:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004178:	fa5f fa8a 	uxtb.w	sl, sl
 800417c:	f1ba 0f02 	cmp.w	sl, #2
 8004180:	d1ee      	bne.n	8004160 <_scanf_float+0x2d4>
 8004182:	3d03      	subs	r5, #3
 8004184:	b2ed      	uxtb	r5, r5
 8004186:	1b76      	subs	r6, r6, r5
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	05da      	lsls	r2, r3, #23
 800418c:	d530      	bpl.n	80041f0 <_scanf_float+0x364>
 800418e:	055b      	lsls	r3, r3, #21
 8004190:	d511      	bpl.n	80041b6 <_scanf_float+0x32a>
 8004192:	9b01      	ldr	r3, [sp, #4]
 8004194:	429e      	cmp	r6, r3
 8004196:	f67f aebc 	bls.w	8003f12 <_scanf_float+0x86>
 800419a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800419e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80041a2:	463a      	mov	r2, r7
 80041a4:	4640      	mov	r0, r8
 80041a6:	4798      	blx	r3
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	e7f0      	b.n	8004192 <_scanf_float+0x306>
 80041b0:	46aa      	mov	sl, r5
 80041b2:	46b3      	mov	fp, r6
 80041b4:	e7de      	b.n	8004174 <_scanf_float+0x2e8>
 80041b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	2965      	cmp	r1, #101	@ 0x65
 80041be:	f103 33ff 	add.w	r3, r3, #4294967295
 80041c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80041c6:	6123      	str	r3, [r4, #16]
 80041c8:	d00c      	beq.n	80041e4 <_scanf_float+0x358>
 80041ca:	2945      	cmp	r1, #69	@ 0x45
 80041cc:	d00a      	beq.n	80041e4 <_scanf_float+0x358>
 80041ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80041d2:	463a      	mov	r2, r7
 80041d4:	4640      	mov	r0, r8
 80041d6:	4798      	blx	r3
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80041de:	3b01      	subs	r3, #1
 80041e0:	1eb5      	subs	r5, r6, #2
 80041e2:	6123      	str	r3, [r4, #16]
 80041e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80041e8:	463a      	mov	r2, r7
 80041ea:	4640      	mov	r0, r8
 80041ec:	4798      	blx	r3
 80041ee:	462e      	mov	r6, r5
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	f012 0210 	ands.w	r2, r2, #16
 80041f6:	d001      	beq.n	80041fc <_scanf_float+0x370>
 80041f8:	2000      	movs	r0, #0
 80041fa:	e68b      	b.n	8003f14 <_scanf_float+0x88>
 80041fc:	7032      	strb	r2, [r6, #0]
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004208:	d11c      	bne.n	8004244 <_scanf_float+0x3b8>
 800420a:	9b02      	ldr	r3, [sp, #8]
 800420c:	454b      	cmp	r3, r9
 800420e:	eba3 0209 	sub.w	r2, r3, r9
 8004212:	d123      	bne.n	800425c <_scanf_float+0x3d0>
 8004214:	9901      	ldr	r1, [sp, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	4640      	mov	r0, r8
 800421a:	f002 fc9d 	bl	8006b58 <_strtod_r>
 800421e:	9b03      	ldr	r3, [sp, #12]
 8004220:	6821      	ldr	r1, [r4, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f011 0f02 	tst.w	r1, #2
 8004228:	ec57 6b10 	vmov	r6, r7, d0
 800422c:	f103 0204 	add.w	r2, r3, #4
 8004230:	d01f      	beq.n	8004272 <_scanf_float+0x3e6>
 8004232:	9903      	ldr	r1, [sp, #12]
 8004234:	600a      	str	r2, [r1, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	e9c3 6700 	strd	r6, r7, [r3]
 800423c:	68e3      	ldr	r3, [r4, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	60e3      	str	r3, [r4, #12]
 8004242:	e7d9      	b.n	80041f8 <_scanf_float+0x36c>
 8004244:	9b04      	ldr	r3, [sp, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0e4      	beq.n	8004214 <_scanf_float+0x388>
 800424a:	9905      	ldr	r1, [sp, #20]
 800424c:	230a      	movs	r3, #10
 800424e:	3101      	adds	r1, #1
 8004250:	4640      	mov	r0, r8
 8004252:	f002 fd01 	bl	8006c58 <_strtol_r>
 8004256:	9b04      	ldr	r3, [sp, #16]
 8004258:	9e05      	ldr	r6, [sp, #20]
 800425a:	1ac2      	subs	r2, r0, r3
 800425c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004260:	429e      	cmp	r6, r3
 8004262:	bf28      	it	cs
 8004264:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004268:	4910      	ldr	r1, [pc, #64]	@ (80042ac <_scanf_float+0x420>)
 800426a:	4630      	mov	r0, r6
 800426c:	f000 f8f6 	bl	800445c <siprintf>
 8004270:	e7d0      	b.n	8004214 <_scanf_float+0x388>
 8004272:	f011 0f04 	tst.w	r1, #4
 8004276:	9903      	ldr	r1, [sp, #12]
 8004278:	600a      	str	r2, [r1, #0]
 800427a:	d1dc      	bne.n	8004236 <_scanf_float+0x3aa>
 800427c:	681d      	ldr	r5, [r3, #0]
 800427e:	4632      	mov	r2, r6
 8004280:	463b      	mov	r3, r7
 8004282:	4630      	mov	r0, r6
 8004284:	4639      	mov	r1, r7
 8004286:	f7fc fc59 	bl	8000b3c <__aeabi_dcmpun>
 800428a:	b128      	cbz	r0, 8004298 <_scanf_float+0x40c>
 800428c:	4808      	ldr	r0, [pc, #32]	@ (80042b0 <_scanf_float+0x424>)
 800428e:	f000 fa5d 	bl	800474c <nanf>
 8004292:	ed85 0a00 	vstr	s0, [r5]
 8004296:	e7d1      	b.n	800423c <_scanf_float+0x3b0>
 8004298:	4630      	mov	r0, r6
 800429a:	4639      	mov	r1, r7
 800429c:	f7fc fcac 	bl	8000bf8 <__aeabi_d2f>
 80042a0:	6028      	str	r0, [r5, #0]
 80042a2:	e7cb      	b.n	800423c <_scanf_float+0x3b0>
 80042a4:	f04f 0900 	mov.w	r9, #0
 80042a8:	e629      	b.n	8003efe <_scanf_float+0x72>
 80042aa:	bf00      	nop
 80042ac:	08007d68 	.word	0x08007d68
 80042b0:	080080fd 	.word	0x080080fd

080042b4 <std>:
 80042b4:	2300      	movs	r3, #0
 80042b6:	b510      	push	{r4, lr}
 80042b8:	4604      	mov	r4, r0
 80042ba:	e9c0 3300 	strd	r3, r3, [r0]
 80042be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042c2:	6083      	str	r3, [r0, #8]
 80042c4:	8181      	strh	r1, [r0, #12]
 80042c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042c8:	81c2      	strh	r2, [r0, #14]
 80042ca:	6183      	str	r3, [r0, #24]
 80042cc:	4619      	mov	r1, r3
 80042ce:	2208      	movs	r2, #8
 80042d0:	305c      	adds	r0, #92	@ 0x5c
 80042d2:	f000 f9bb 	bl	800464c <memset>
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <std+0x58>)
 80042d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <std+0x5c>)
 80042dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <std+0x60>)
 80042e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <std+0x64>)
 80042e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <std+0x68>)
 80042e8:	6224      	str	r4, [r4, #32]
 80042ea:	429c      	cmp	r4, r3
 80042ec:	d006      	beq.n	80042fc <std+0x48>
 80042ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042f2:	4294      	cmp	r4, r2
 80042f4:	d002      	beq.n	80042fc <std+0x48>
 80042f6:	33d0      	adds	r3, #208	@ 0xd0
 80042f8:	429c      	cmp	r4, r3
 80042fa:	d105      	bne.n	8004308 <std+0x54>
 80042fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004304:	f000 ba1e 	b.w	8004744 <__retarget_lock_init_recursive>
 8004308:	bd10      	pop	{r4, pc}
 800430a:	bf00      	nop
 800430c:	0800449d 	.word	0x0800449d
 8004310:	080044bf 	.word	0x080044bf
 8004314:	080044f7 	.word	0x080044f7
 8004318:	0800451b 	.word	0x0800451b
 800431c:	20000288 	.word	0x20000288

08004320 <stdio_exit_handler>:
 8004320:	4a02      	ldr	r2, [pc, #8]	@ (800432c <stdio_exit_handler+0xc>)
 8004322:	4903      	ldr	r1, [pc, #12]	@ (8004330 <stdio_exit_handler+0x10>)
 8004324:	4803      	ldr	r0, [pc, #12]	@ (8004334 <stdio_exit_handler+0x14>)
 8004326:	f000 b869 	b.w	80043fc <_fwalk_sglue>
 800432a:	bf00      	nop
 800432c:	2000000c 	.word	0x2000000c
 8004330:	08007299 	.word	0x08007299
 8004334:	2000001c 	.word	0x2000001c

08004338 <cleanup_stdio>:
 8004338:	6841      	ldr	r1, [r0, #4]
 800433a:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <cleanup_stdio+0x34>)
 800433c:	4299      	cmp	r1, r3
 800433e:	b510      	push	{r4, lr}
 8004340:	4604      	mov	r4, r0
 8004342:	d001      	beq.n	8004348 <cleanup_stdio+0x10>
 8004344:	f002 ffa8 	bl	8007298 <_fflush_r>
 8004348:	68a1      	ldr	r1, [r4, #8]
 800434a:	4b09      	ldr	r3, [pc, #36]	@ (8004370 <cleanup_stdio+0x38>)
 800434c:	4299      	cmp	r1, r3
 800434e:	d002      	beq.n	8004356 <cleanup_stdio+0x1e>
 8004350:	4620      	mov	r0, r4
 8004352:	f002 ffa1 	bl	8007298 <_fflush_r>
 8004356:	68e1      	ldr	r1, [r4, #12]
 8004358:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <cleanup_stdio+0x3c>)
 800435a:	4299      	cmp	r1, r3
 800435c:	d004      	beq.n	8004368 <cleanup_stdio+0x30>
 800435e:	4620      	mov	r0, r4
 8004360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004364:	f002 bf98 	b.w	8007298 <_fflush_r>
 8004368:	bd10      	pop	{r4, pc}
 800436a:	bf00      	nop
 800436c:	20000288 	.word	0x20000288
 8004370:	200002f0 	.word	0x200002f0
 8004374:	20000358 	.word	0x20000358

08004378 <global_stdio_init.part.0>:
 8004378:	b510      	push	{r4, lr}
 800437a:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <global_stdio_init.part.0+0x30>)
 800437c:	4c0b      	ldr	r4, [pc, #44]	@ (80043ac <global_stdio_init.part.0+0x34>)
 800437e:	4a0c      	ldr	r2, [pc, #48]	@ (80043b0 <global_stdio_init.part.0+0x38>)
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	4620      	mov	r0, r4
 8004384:	2200      	movs	r2, #0
 8004386:	2104      	movs	r1, #4
 8004388:	f7ff ff94 	bl	80042b4 <std>
 800438c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004390:	2201      	movs	r2, #1
 8004392:	2109      	movs	r1, #9
 8004394:	f7ff ff8e 	bl	80042b4 <std>
 8004398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800439c:	2202      	movs	r2, #2
 800439e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a2:	2112      	movs	r1, #18
 80043a4:	f7ff bf86 	b.w	80042b4 <std>
 80043a8:	200003c0 	.word	0x200003c0
 80043ac:	20000288 	.word	0x20000288
 80043b0:	08004321 	.word	0x08004321

080043b4 <__sfp_lock_acquire>:
 80043b4:	4801      	ldr	r0, [pc, #4]	@ (80043bc <__sfp_lock_acquire+0x8>)
 80043b6:	f000 b9c6 	b.w	8004746 <__retarget_lock_acquire_recursive>
 80043ba:	bf00      	nop
 80043bc:	200003c9 	.word	0x200003c9

080043c0 <__sfp_lock_release>:
 80043c0:	4801      	ldr	r0, [pc, #4]	@ (80043c8 <__sfp_lock_release+0x8>)
 80043c2:	f000 b9c1 	b.w	8004748 <__retarget_lock_release_recursive>
 80043c6:	bf00      	nop
 80043c8:	200003c9 	.word	0x200003c9

080043cc <__sinit>:
 80043cc:	b510      	push	{r4, lr}
 80043ce:	4604      	mov	r4, r0
 80043d0:	f7ff fff0 	bl	80043b4 <__sfp_lock_acquire>
 80043d4:	6a23      	ldr	r3, [r4, #32]
 80043d6:	b11b      	cbz	r3, 80043e0 <__sinit+0x14>
 80043d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043dc:	f7ff bff0 	b.w	80043c0 <__sfp_lock_release>
 80043e0:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <__sinit+0x28>)
 80043e2:	6223      	str	r3, [r4, #32]
 80043e4:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <__sinit+0x2c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f5      	bne.n	80043d8 <__sinit+0xc>
 80043ec:	f7ff ffc4 	bl	8004378 <global_stdio_init.part.0>
 80043f0:	e7f2      	b.n	80043d8 <__sinit+0xc>
 80043f2:	bf00      	nop
 80043f4:	08004339 	.word	0x08004339
 80043f8:	200003c0 	.word	0x200003c0

080043fc <_fwalk_sglue>:
 80043fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004400:	4607      	mov	r7, r0
 8004402:	4688      	mov	r8, r1
 8004404:	4614      	mov	r4, r2
 8004406:	2600      	movs	r6, #0
 8004408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800440c:	f1b9 0901 	subs.w	r9, r9, #1
 8004410:	d505      	bpl.n	800441e <_fwalk_sglue+0x22>
 8004412:	6824      	ldr	r4, [r4, #0]
 8004414:	2c00      	cmp	r4, #0
 8004416:	d1f7      	bne.n	8004408 <_fwalk_sglue+0xc>
 8004418:	4630      	mov	r0, r6
 800441a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800441e:	89ab      	ldrh	r3, [r5, #12]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d907      	bls.n	8004434 <_fwalk_sglue+0x38>
 8004424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004428:	3301      	adds	r3, #1
 800442a:	d003      	beq.n	8004434 <_fwalk_sglue+0x38>
 800442c:	4629      	mov	r1, r5
 800442e:	4638      	mov	r0, r7
 8004430:	47c0      	blx	r8
 8004432:	4306      	orrs	r6, r0
 8004434:	3568      	adds	r5, #104	@ 0x68
 8004436:	e7e9      	b.n	800440c <_fwalk_sglue+0x10>

08004438 <iprintf>:
 8004438:	b40f      	push	{r0, r1, r2, r3}
 800443a:	b507      	push	{r0, r1, r2, lr}
 800443c:	4906      	ldr	r1, [pc, #24]	@ (8004458 <iprintf+0x20>)
 800443e:	ab04      	add	r3, sp, #16
 8004440:	6808      	ldr	r0, [r1, #0]
 8004442:	f853 2b04 	ldr.w	r2, [r3], #4
 8004446:	6881      	ldr	r1, [r0, #8]
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	f002 fd89 	bl	8006f60 <_vfiprintf_r>
 800444e:	b003      	add	sp, #12
 8004450:	f85d eb04 	ldr.w	lr, [sp], #4
 8004454:	b004      	add	sp, #16
 8004456:	4770      	bx	lr
 8004458:	20000018 	.word	0x20000018

0800445c <siprintf>:
 800445c:	b40e      	push	{r1, r2, r3}
 800445e:	b500      	push	{lr}
 8004460:	b09c      	sub	sp, #112	@ 0x70
 8004462:	ab1d      	add	r3, sp, #116	@ 0x74
 8004464:	9002      	str	r0, [sp, #8]
 8004466:	9006      	str	r0, [sp, #24]
 8004468:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800446c:	4809      	ldr	r0, [pc, #36]	@ (8004494 <siprintf+0x38>)
 800446e:	9107      	str	r1, [sp, #28]
 8004470:	9104      	str	r1, [sp, #16]
 8004472:	4909      	ldr	r1, [pc, #36]	@ (8004498 <siprintf+0x3c>)
 8004474:	f853 2b04 	ldr.w	r2, [r3], #4
 8004478:	9105      	str	r1, [sp, #20]
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	a902      	add	r1, sp, #8
 8004480:	f002 fc48 	bl	8006d14 <_svfiprintf_r>
 8004484:	9b02      	ldr	r3, [sp, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	b01c      	add	sp, #112	@ 0x70
 800448c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004490:	b003      	add	sp, #12
 8004492:	4770      	bx	lr
 8004494:	20000018 	.word	0x20000018
 8004498:	ffff0208 	.word	0xffff0208

0800449c <__sread>:
 800449c:	b510      	push	{r4, lr}
 800449e:	460c      	mov	r4, r1
 80044a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a4:	f000 f900 	bl	80046a8 <_read_r>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	bfab      	itete	ge
 80044ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044ae:	89a3      	ldrhlt	r3, [r4, #12]
 80044b0:	181b      	addge	r3, r3, r0
 80044b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044b6:	bfac      	ite	ge
 80044b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044ba:	81a3      	strhlt	r3, [r4, #12]
 80044bc:	bd10      	pop	{r4, pc}

080044be <__swrite>:
 80044be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c2:	461f      	mov	r7, r3
 80044c4:	898b      	ldrh	r3, [r1, #12]
 80044c6:	05db      	lsls	r3, r3, #23
 80044c8:	4605      	mov	r5, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	4616      	mov	r6, r2
 80044ce:	d505      	bpl.n	80044dc <__swrite+0x1e>
 80044d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d4:	2302      	movs	r3, #2
 80044d6:	2200      	movs	r2, #0
 80044d8:	f000 f8d4 	bl	8004684 <_lseek_r>
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	4632      	mov	r2, r6
 80044ea:	463b      	mov	r3, r7
 80044ec:	4628      	mov	r0, r5
 80044ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044f2:	f000 b8eb 	b.w	80046cc <_write_r>

080044f6 <__sseek>:
 80044f6:	b510      	push	{r4, lr}
 80044f8:	460c      	mov	r4, r1
 80044fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fe:	f000 f8c1 	bl	8004684 <_lseek_r>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	bf15      	itete	ne
 8004508:	6560      	strne	r0, [r4, #84]	@ 0x54
 800450a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800450e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004512:	81a3      	strheq	r3, [r4, #12]
 8004514:	bf18      	it	ne
 8004516:	81a3      	strhne	r3, [r4, #12]
 8004518:	bd10      	pop	{r4, pc}

0800451a <__sclose>:
 800451a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451e:	f000 b8a1 	b.w	8004664 <_close_r>

08004522 <__swbuf_r>:
 8004522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004524:	460e      	mov	r6, r1
 8004526:	4614      	mov	r4, r2
 8004528:	4605      	mov	r5, r0
 800452a:	b118      	cbz	r0, 8004534 <__swbuf_r+0x12>
 800452c:	6a03      	ldr	r3, [r0, #32]
 800452e:	b90b      	cbnz	r3, 8004534 <__swbuf_r+0x12>
 8004530:	f7ff ff4c 	bl	80043cc <__sinit>
 8004534:	69a3      	ldr	r3, [r4, #24]
 8004536:	60a3      	str	r3, [r4, #8]
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	071a      	lsls	r2, r3, #28
 800453c:	d501      	bpl.n	8004542 <__swbuf_r+0x20>
 800453e:	6923      	ldr	r3, [r4, #16]
 8004540:	b943      	cbnz	r3, 8004554 <__swbuf_r+0x32>
 8004542:	4621      	mov	r1, r4
 8004544:	4628      	mov	r0, r5
 8004546:	f000 f82b 	bl	80045a0 <__swsetup_r>
 800454a:	b118      	cbz	r0, 8004554 <__swbuf_r+0x32>
 800454c:	f04f 37ff 	mov.w	r7, #4294967295
 8004550:	4638      	mov	r0, r7
 8004552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	6922      	ldr	r2, [r4, #16]
 8004558:	1a98      	subs	r0, r3, r2
 800455a:	6963      	ldr	r3, [r4, #20]
 800455c:	b2f6      	uxtb	r6, r6
 800455e:	4283      	cmp	r3, r0
 8004560:	4637      	mov	r7, r6
 8004562:	dc05      	bgt.n	8004570 <__swbuf_r+0x4e>
 8004564:	4621      	mov	r1, r4
 8004566:	4628      	mov	r0, r5
 8004568:	f002 fe96 	bl	8007298 <_fflush_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	d1ed      	bne.n	800454c <__swbuf_r+0x2a>
 8004570:	68a3      	ldr	r3, [r4, #8]
 8004572:	3b01      	subs	r3, #1
 8004574:	60a3      	str	r3, [r4, #8]
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	6022      	str	r2, [r4, #0]
 800457c:	701e      	strb	r6, [r3, #0]
 800457e:	6962      	ldr	r2, [r4, #20]
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	429a      	cmp	r2, r3
 8004584:	d004      	beq.n	8004590 <__swbuf_r+0x6e>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	07db      	lsls	r3, r3, #31
 800458a:	d5e1      	bpl.n	8004550 <__swbuf_r+0x2e>
 800458c:	2e0a      	cmp	r6, #10
 800458e:	d1df      	bne.n	8004550 <__swbuf_r+0x2e>
 8004590:	4621      	mov	r1, r4
 8004592:	4628      	mov	r0, r5
 8004594:	f002 fe80 	bl	8007298 <_fflush_r>
 8004598:	2800      	cmp	r0, #0
 800459a:	d0d9      	beq.n	8004550 <__swbuf_r+0x2e>
 800459c:	e7d6      	b.n	800454c <__swbuf_r+0x2a>
	...

080045a0 <__swsetup_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4b29      	ldr	r3, [pc, #164]	@ (8004648 <__swsetup_r+0xa8>)
 80045a4:	4605      	mov	r5, r0
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	460c      	mov	r4, r1
 80045aa:	b118      	cbz	r0, 80045b4 <__swsetup_r+0x14>
 80045ac:	6a03      	ldr	r3, [r0, #32]
 80045ae:	b90b      	cbnz	r3, 80045b4 <__swsetup_r+0x14>
 80045b0:	f7ff ff0c 	bl	80043cc <__sinit>
 80045b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b8:	0719      	lsls	r1, r3, #28
 80045ba:	d422      	bmi.n	8004602 <__swsetup_r+0x62>
 80045bc:	06da      	lsls	r2, r3, #27
 80045be:	d407      	bmi.n	80045d0 <__swsetup_r+0x30>
 80045c0:	2209      	movs	r2, #9
 80045c2:	602a      	str	r2, [r5, #0]
 80045c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	f04f 30ff 	mov.w	r0, #4294967295
 80045ce:	e033      	b.n	8004638 <__swsetup_r+0x98>
 80045d0:	0758      	lsls	r0, r3, #29
 80045d2:	d512      	bpl.n	80045fa <__swsetup_r+0x5a>
 80045d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045d6:	b141      	cbz	r1, 80045ea <__swsetup_r+0x4a>
 80045d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045dc:	4299      	cmp	r1, r3
 80045de:	d002      	beq.n	80045e6 <__swsetup_r+0x46>
 80045e0:	4628      	mov	r0, r5
 80045e2:	f000 ff05 	bl	80053f0 <_free_r>
 80045e6:	2300      	movs	r3, #0
 80045e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045f0:	81a3      	strh	r3, [r4, #12]
 80045f2:	2300      	movs	r3, #0
 80045f4:	6063      	str	r3, [r4, #4]
 80045f6:	6923      	ldr	r3, [r4, #16]
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f043 0308 	orr.w	r3, r3, #8
 8004600:	81a3      	strh	r3, [r4, #12]
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	b94b      	cbnz	r3, 800461a <__swsetup_r+0x7a>
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800460c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004610:	d003      	beq.n	800461a <__swsetup_r+0x7a>
 8004612:	4621      	mov	r1, r4
 8004614:	4628      	mov	r0, r5
 8004616:	f002 fe8d 	bl	8007334 <__smakebuf_r>
 800461a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800461e:	f013 0201 	ands.w	r2, r3, #1
 8004622:	d00a      	beq.n	800463a <__swsetup_r+0x9a>
 8004624:	2200      	movs	r2, #0
 8004626:	60a2      	str	r2, [r4, #8]
 8004628:	6962      	ldr	r2, [r4, #20]
 800462a:	4252      	negs	r2, r2
 800462c:	61a2      	str	r2, [r4, #24]
 800462e:	6922      	ldr	r2, [r4, #16]
 8004630:	b942      	cbnz	r2, 8004644 <__swsetup_r+0xa4>
 8004632:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004636:	d1c5      	bne.n	80045c4 <__swsetup_r+0x24>
 8004638:	bd38      	pop	{r3, r4, r5, pc}
 800463a:	0799      	lsls	r1, r3, #30
 800463c:	bf58      	it	pl
 800463e:	6962      	ldrpl	r2, [r4, #20]
 8004640:	60a2      	str	r2, [r4, #8]
 8004642:	e7f4      	b.n	800462e <__swsetup_r+0x8e>
 8004644:	2000      	movs	r0, #0
 8004646:	e7f7      	b.n	8004638 <__swsetup_r+0x98>
 8004648:	20000018 	.word	0x20000018

0800464c <memset>:
 800464c:	4402      	add	r2, r0
 800464e:	4603      	mov	r3, r0
 8004650:	4293      	cmp	r3, r2
 8004652:	d100      	bne.n	8004656 <memset+0xa>
 8004654:	4770      	bx	lr
 8004656:	f803 1b01 	strb.w	r1, [r3], #1
 800465a:	e7f9      	b.n	8004650 <memset+0x4>

0800465c <_localeconv_r>:
 800465c:	4800      	ldr	r0, [pc, #0]	@ (8004660 <_localeconv_r+0x4>)
 800465e:	4770      	bx	lr
 8004660:	20000158 	.word	0x20000158

08004664 <_close_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d06      	ldr	r5, [pc, #24]	@ (8004680 <_close_r+0x1c>)
 8004668:	2300      	movs	r3, #0
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	602b      	str	r3, [r5, #0]
 8004670:	f7fd f831 	bl	80016d6 <_close>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_close_r+0x1a>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_close_r+0x1a>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	200003c4 	.word	0x200003c4

08004684 <_lseek_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d07      	ldr	r5, [pc, #28]	@ (80046a4 <_lseek_r+0x20>)
 8004688:	4604      	mov	r4, r0
 800468a:	4608      	mov	r0, r1
 800468c:	4611      	mov	r1, r2
 800468e:	2200      	movs	r2, #0
 8004690:	602a      	str	r2, [r5, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f7fd f846 	bl	8001724 <_lseek>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_lseek_r+0x1e>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_lseek_r+0x1e>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	200003c4 	.word	0x200003c4

080046a8 <_read_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d07      	ldr	r5, [pc, #28]	@ (80046c8 <_read_r+0x20>)
 80046ac:	4604      	mov	r4, r0
 80046ae:	4608      	mov	r0, r1
 80046b0:	4611      	mov	r1, r2
 80046b2:	2200      	movs	r2, #0
 80046b4:	602a      	str	r2, [r5, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f7fc ffd4 	bl	8001664 <_read>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_read_r+0x1e>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_read_r+0x1e>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	200003c4 	.word	0x200003c4

080046cc <_write_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4d07      	ldr	r5, [pc, #28]	@ (80046ec <_write_r+0x20>)
 80046d0:	4604      	mov	r4, r0
 80046d2:	4608      	mov	r0, r1
 80046d4:	4611      	mov	r1, r2
 80046d6:	2200      	movs	r2, #0
 80046d8:	602a      	str	r2, [r5, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7fc ffdf 	bl	800169e <_write>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d102      	bne.n	80046ea <_write_r+0x1e>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	b103      	cbz	r3, 80046ea <_write_r+0x1e>
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	200003c4 	.word	0x200003c4

080046f0 <__errno>:
 80046f0:	4b01      	ldr	r3, [pc, #4]	@ (80046f8 <__errno+0x8>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000018 	.word	0x20000018

080046fc <__libc_init_array>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004734 <__libc_init_array+0x38>)
 8004700:	4c0d      	ldr	r4, [pc, #52]	@ (8004738 <__libc_init_array+0x3c>)
 8004702:	1b64      	subs	r4, r4, r5
 8004704:	10a4      	asrs	r4, r4, #2
 8004706:	2600      	movs	r6, #0
 8004708:	42a6      	cmp	r6, r4
 800470a:	d109      	bne.n	8004720 <__libc_init_array+0x24>
 800470c:	4d0b      	ldr	r5, [pc, #44]	@ (800473c <__libc_init_array+0x40>)
 800470e:	4c0c      	ldr	r4, [pc, #48]	@ (8004740 <__libc_init_array+0x44>)
 8004710:	f003 fae0 	bl	8007cd4 <_init>
 8004714:	1b64      	subs	r4, r4, r5
 8004716:	10a4      	asrs	r4, r4, #2
 8004718:	2600      	movs	r6, #0
 800471a:	42a6      	cmp	r6, r4
 800471c:	d105      	bne.n	800472a <__libc_init_array+0x2e>
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	f855 3b04 	ldr.w	r3, [r5], #4
 8004724:	4798      	blx	r3
 8004726:	3601      	adds	r6, #1
 8004728:	e7ee      	b.n	8004708 <__libc_init_array+0xc>
 800472a:	f855 3b04 	ldr.w	r3, [r5], #4
 800472e:	4798      	blx	r3
 8004730:	3601      	adds	r6, #1
 8004732:	e7f2      	b.n	800471a <__libc_init_array+0x1e>
 8004734:	08008168 	.word	0x08008168
 8004738:	08008168 	.word	0x08008168
 800473c:	08008168 	.word	0x08008168
 8004740:	0800816c 	.word	0x0800816c

08004744 <__retarget_lock_init_recursive>:
 8004744:	4770      	bx	lr

08004746 <__retarget_lock_acquire_recursive>:
 8004746:	4770      	bx	lr

08004748 <__retarget_lock_release_recursive>:
 8004748:	4770      	bx	lr
	...

0800474c <nanf>:
 800474c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004754 <nanf+0x8>
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	7fc00000 	.word	0x7fc00000

08004758 <quorem>:
 8004758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	6903      	ldr	r3, [r0, #16]
 800475e:	690c      	ldr	r4, [r1, #16]
 8004760:	42a3      	cmp	r3, r4
 8004762:	4607      	mov	r7, r0
 8004764:	db7e      	blt.n	8004864 <quorem+0x10c>
 8004766:	3c01      	subs	r4, #1
 8004768:	f101 0814 	add.w	r8, r1, #20
 800476c:	00a3      	lsls	r3, r4, #2
 800476e:	f100 0514 	add.w	r5, r0, #20
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800477e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004782:	3301      	adds	r3, #1
 8004784:	429a      	cmp	r2, r3
 8004786:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800478a:	fbb2 f6f3 	udiv	r6, r2, r3
 800478e:	d32e      	bcc.n	80047ee <quorem+0x96>
 8004790:	f04f 0a00 	mov.w	sl, #0
 8004794:	46c4      	mov	ip, r8
 8004796:	46ae      	mov	lr, r5
 8004798:	46d3      	mov	fp, sl
 800479a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800479e:	b298      	uxth	r0, r3
 80047a0:	fb06 a000 	mla	r0, r6, r0, sl
 80047a4:	0c02      	lsrs	r2, r0, #16
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	fb06 2303 	mla	r3, r6, r3, r2
 80047ac:	f8de 2000 	ldr.w	r2, [lr]
 80047b0:	b280      	uxth	r0, r0
 80047b2:	b292      	uxth	r2, r2
 80047b4:	1a12      	subs	r2, r2, r0
 80047b6:	445a      	add	r2, fp
 80047b8:	f8de 0000 	ldr.w	r0, [lr]
 80047bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80047c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80047ca:	b292      	uxth	r2, r2
 80047cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80047d0:	45e1      	cmp	r9, ip
 80047d2:	f84e 2b04 	str.w	r2, [lr], #4
 80047d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80047da:	d2de      	bcs.n	800479a <quorem+0x42>
 80047dc:	9b00      	ldr	r3, [sp, #0]
 80047de:	58eb      	ldr	r3, [r5, r3]
 80047e0:	b92b      	cbnz	r3, 80047ee <quorem+0x96>
 80047e2:	9b01      	ldr	r3, [sp, #4]
 80047e4:	3b04      	subs	r3, #4
 80047e6:	429d      	cmp	r5, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	d32f      	bcc.n	800484c <quorem+0xf4>
 80047ec:	613c      	str	r4, [r7, #16]
 80047ee:	4638      	mov	r0, r7
 80047f0:	f001 f9c2 	bl	8005b78 <__mcmp>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	db25      	blt.n	8004844 <quorem+0xec>
 80047f8:	4629      	mov	r1, r5
 80047fa:	2000      	movs	r0, #0
 80047fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004800:	f8d1 c000 	ldr.w	ip, [r1]
 8004804:	fa1f fe82 	uxth.w	lr, r2
 8004808:	fa1f f38c 	uxth.w	r3, ip
 800480c:	eba3 030e 	sub.w	r3, r3, lr
 8004810:	4403      	add	r3, r0
 8004812:	0c12      	lsrs	r2, r2, #16
 8004814:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004818:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800481c:	b29b      	uxth	r3, r3
 800481e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004822:	45c1      	cmp	r9, r8
 8004824:	f841 3b04 	str.w	r3, [r1], #4
 8004828:	ea4f 4022 	mov.w	r0, r2, asr #16
 800482c:	d2e6      	bcs.n	80047fc <quorem+0xa4>
 800482e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004836:	b922      	cbnz	r2, 8004842 <quorem+0xea>
 8004838:	3b04      	subs	r3, #4
 800483a:	429d      	cmp	r5, r3
 800483c:	461a      	mov	r2, r3
 800483e:	d30b      	bcc.n	8004858 <quorem+0x100>
 8004840:	613c      	str	r4, [r7, #16]
 8004842:	3601      	adds	r6, #1
 8004844:	4630      	mov	r0, r6
 8004846:	b003      	add	sp, #12
 8004848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	3b04      	subs	r3, #4
 8004850:	2a00      	cmp	r2, #0
 8004852:	d1cb      	bne.n	80047ec <quorem+0x94>
 8004854:	3c01      	subs	r4, #1
 8004856:	e7c6      	b.n	80047e6 <quorem+0x8e>
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	3b04      	subs	r3, #4
 800485c:	2a00      	cmp	r2, #0
 800485e:	d1ef      	bne.n	8004840 <quorem+0xe8>
 8004860:	3c01      	subs	r4, #1
 8004862:	e7ea      	b.n	800483a <quorem+0xe2>
 8004864:	2000      	movs	r0, #0
 8004866:	e7ee      	b.n	8004846 <quorem+0xee>

08004868 <_dtoa_r>:
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	69c7      	ldr	r7, [r0, #28]
 800486e:	b099      	sub	sp, #100	@ 0x64
 8004870:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004874:	ec55 4b10 	vmov	r4, r5, d0
 8004878:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800487a:	9109      	str	r1, [sp, #36]	@ 0x24
 800487c:	4683      	mov	fp, r0
 800487e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004880:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004882:	b97f      	cbnz	r7, 80048a4 <_dtoa_r+0x3c>
 8004884:	2010      	movs	r0, #16
 8004886:	f000 fdfd 	bl	8005484 <malloc>
 800488a:	4602      	mov	r2, r0
 800488c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004890:	b920      	cbnz	r0, 800489c <_dtoa_r+0x34>
 8004892:	4ba7      	ldr	r3, [pc, #668]	@ (8004b30 <_dtoa_r+0x2c8>)
 8004894:	21ef      	movs	r1, #239	@ 0xef
 8004896:	48a7      	ldr	r0, [pc, #668]	@ (8004b34 <_dtoa_r+0x2cc>)
 8004898:	f002 fdfe 	bl	8007498 <__assert_func>
 800489c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80048a0:	6007      	str	r7, [r0, #0]
 80048a2:	60c7      	str	r7, [r0, #12]
 80048a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048a8:	6819      	ldr	r1, [r3, #0]
 80048aa:	b159      	cbz	r1, 80048c4 <_dtoa_r+0x5c>
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	604a      	str	r2, [r1, #4]
 80048b0:	2301      	movs	r3, #1
 80048b2:	4093      	lsls	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
 80048b6:	4658      	mov	r0, fp
 80048b8:	f000 feda 	bl	8005670 <_Bfree>
 80048bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	1e2b      	subs	r3, r5, #0
 80048c6:	bfb9      	ittee	lt
 80048c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80048cc:	9303      	strlt	r3, [sp, #12]
 80048ce:	2300      	movge	r3, #0
 80048d0:	6033      	strge	r3, [r6, #0]
 80048d2:	9f03      	ldr	r7, [sp, #12]
 80048d4:	4b98      	ldr	r3, [pc, #608]	@ (8004b38 <_dtoa_r+0x2d0>)
 80048d6:	bfbc      	itt	lt
 80048d8:	2201      	movlt	r2, #1
 80048da:	6032      	strlt	r2, [r6, #0]
 80048dc:	43bb      	bics	r3, r7
 80048de:	d112      	bne.n	8004906 <_dtoa_r+0x9e>
 80048e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80048e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80048ec:	4323      	orrs	r3, r4
 80048ee:	f000 854d 	beq.w	800538c <_dtoa_r+0xb24>
 80048f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80048f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004b4c <_dtoa_r+0x2e4>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 854f 	beq.w	800539c <_dtoa_r+0xb34>
 80048fe:	f10a 0303 	add.w	r3, sl, #3
 8004902:	f000 bd49 	b.w	8005398 <_dtoa_r+0xb30>
 8004906:	ed9d 7b02 	vldr	d7, [sp, #8]
 800490a:	2200      	movs	r2, #0
 800490c:	ec51 0b17 	vmov	r0, r1, d7
 8004910:	2300      	movs	r3, #0
 8004912:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004916:	f7fc f8df 	bl	8000ad8 <__aeabi_dcmpeq>
 800491a:	4680      	mov	r8, r0
 800491c:	b158      	cbz	r0, 8004936 <_dtoa_r+0xce>
 800491e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004920:	2301      	movs	r3, #1
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004926:	b113      	cbz	r3, 800492e <_dtoa_r+0xc6>
 8004928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800492a:	4b84      	ldr	r3, [pc, #528]	@ (8004b3c <_dtoa_r+0x2d4>)
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004b50 <_dtoa_r+0x2e8>
 8004932:	f000 bd33 	b.w	800539c <_dtoa_r+0xb34>
 8004936:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800493a:	aa16      	add	r2, sp, #88	@ 0x58
 800493c:	a917      	add	r1, sp, #92	@ 0x5c
 800493e:	4658      	mov	r0, fp
 8004940:	f001 fa3a 	bl	8005db8 <__d2b>
 8004944:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004948:	4681      	mov	r9, r0
 800494a:	2e00      	cmp	r6, #0
 800494c:	d077      	beq.n	8004a3e <_dtoa_r+0x1d6>
 800494e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004950:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800495c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004960:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004964:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004968:	4619      	mov	r1, r3
 800496a:	2200      	movs	r2, #0
 800496c:	4b74      	ldr	r3, [pc, #464]	@ (8004b40 <_dtoa_r+0x2d8>)
 800496e:	f7fb fc93 	bl	8000298 <__aeabi_dsub>
 8004972:	a369      	add	r3, pc, #420	@ (adr r3, 8004b18 <_dtoa_r+0x2b0>)
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f7fb fe46 	bl	8000608 <__aeabi_dmul>
 800497c:	a368      	add	r3, pc, #416	@ (adr r3, 8004b20 <_dtoa_r+0x2b8>)
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f7fb fc8b 	bl	800029c <__adddf3>
 8004986:	4604      	mov	r4, r0
 8004988:	4630      	mov	r0, r6
 800498a:	460d      	mov	r5, r1
 800498c:	f7fb fdd2 	bl	8000534 <__aeabi_i2d>
 8004990:	a365      	add	r3, pc, #404	@ (adr r3, 8004b28 <_dtoa_r+0x2c0>)
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f7fb fe37 	bl	8000608 <__aeabi_dmul>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4620      	mov	r0, r4
 80049a0:	4629      	mov	r1, r5
 80049a2:	f7fb fc7b 	bl	800029c <__adddf3>
 80049a6:	4604      	mov	r4, r0
 80049a8:	460d      	mov	r5, r1
 80049aa:	f7fc f8dd 	bl	8000b68 <__aeabi_d2iz>
 80049ae:	2200      	movs	r2, #0
 80049b0:	4607      	mov	r7, r0
 80049b2:	2300      	movs	r3, #0
 80049b4:	4620      	mov	r0, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	f7fc f898 	bl	8000aec <__aeabi_dcmplt>
 80049bc:	b140      	cbz	r0, 80049d0 <_dtoa_r+0x168>
 80049be:	4638      	mov	r0, r7
 80049c0:	f7fb fdb8 	bl	8000534 <__aeabi_i2d>
 80049c4:	4622      	mov	r2, r4
 80049c6:	462b      	mov	r3, r5
 80049c8:	f7fc f886 	bl	8000ad8 <__aeabi_dcmpeq>
 80049cc:	b900      	cbnz	r0, 80049d0 <_dtoa_r+0x168>
 80049ce:	3f01      	subs	r7, #1
 80049d0:	2f16      	cmp	r7, #22
 80049d2:	d851      	bhi.n	8004a78 <_dtoa_r+0x210>
 80049d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b44 <_dtoa_r+0x2dc>)
 80049d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049e2:	f7fc f883 	bl	8000aec <__aeabi_dcmplt>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d048      	beq.n	8004a7c <_dtoa_r+0x214>
 80049ea:	3f01      	subs	r7, #1
 80049ec:	2300      	movs	r3, #0
 80049ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80049f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80049f2:	1b9b      	subs	r3, r3, r6
 80049f4:	1e5a      	subs	r2, r3, #1
 80049f6:	bf44      	itt	mi
 80049f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80049fc:	2300      	movmi	r3, #0
 80049fe:	9208      	str	r2, [sp, #32]
 8004a00:	bf54      	ite	pl
 8004a02:	f04f 0800 	movpl.w	r8, #0
 8004a06:	9308      	strmi	r3, [sp, #32]
 8004a08:	2f00      	cmp	r7, #0
 8004a0a:	db39      	blt.n	8004a80 <_dtoa_r+0x218>
 8004a0c:	9b08      	ldr	r3, [sp, #32]
 8004a0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004a10:	443b      	add	r3, r7
 8004a12:	9308      	str	r3, [sp, #32]
 8004a14:	2300      	movs	r3, #0
 8004a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a1a:	2b09      	cmp	r3, #9
 8004a1c:	d864      	bhi.n	8004ae8 <_dtoa_r+0x280>
 8004a1e:	2b05      	cmp	r3, #5
 8004a20:	bfc4      	itt	gt
 8004a22:	3b04      	subgt	r3, #4
 8004a24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a28:	f1a3 0302 	sub.w	r3, r3, #2
 8004a2c:	bfcc      	ite	gt
 8004a2e:	2400      	movgt	r4, #0
 8004a30:	2401      	movle	r4, #1
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d863      	bhi.n	8004afe <_dtoa_r+0x296>
 8004a36:	e8df f003 	tbb	[pc, r3]
 8004a3a:	372a      	.short	0x372a
 8004a3c:	5535      	.short	0x5535
 8004a3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004a42:	441e      	add	r6, r3
 8004a44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	bfc1      	itttt	gt
 8004a4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004a50:	409f      	lslgt	r7, r3
 8004a52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004a56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004a5a:	bfd6      	itet	le
 8004a5c:	f1c3 0320 	rsble	r3, r3, #32
 8004a60:	ea47 0003 	orrgt.w	r0, r7, r3
 8004a64:	fa04 f003 	lslle.w	r0, r4, r3
 8004a68:	f7fb fd54 	bl	8000514 <__aeabi_ui2d>
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004a72:	3e01      	subs	r6, #1
 8004a74:	9214      	str	r2, [sp, #80]	@ 0x50
 8004a76:	e777      	b.n	8004968 <_dtoa_r+0x100>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e7b8      	b.n	80049ee <_dtoa_r+0x186>
 8004a7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8004a7e:	e7b7      	b.n	80049f0 <_dtoa_r+0x188>
 8004a80:	427b      	negs	r3, r7
 8004a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a84:	2300      	movs	r3, #0
 8004a86:	eba8 0807 	sub.w	r8, r8, r7
 8004a8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a8c:	e7c4      	b.n	8004a18 <_dtoa_r+0x1b0>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	dc35      	bgt.n	8004b04 <_dtoa_r+0x29c>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	9307      	str	r3, [sp, #28]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004aa2:	e00b      	b.n	8004abc <_dtoa_r+0x254>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e7f3      	b.n	8004a90 <_dtoa_r+0x228>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	9307      	str	r3, [sp, #28]
 8004ab8:	bfb8      	it	lt
 8004aba:	2301      	movlt	r3, #1
 8004abc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	f102 0514 	add.w	r5, r2, #20
 8004ac8:	429d      	cmp	r5, r3
 8004aca:	d91f      	bls.n	8004b0c <_dtoa_r+0x2a4>
 8004acc:	6041      	str	r1, [r0, #4]
 8004ace:	4658      	mov	r0, fp
 8004ad0:	f000 fd8e 	bl	80055f0 <_Balloc>
 8004ad4:	4682      	mov	sl, r0
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d13c      	bne.n	8004b54 <_dtoa_r+0x2ec>
 8004ada:	4b1b      	ldr	r3, [pc, #108]	@ (8004b48 <_dtoa_r+0x2e0>)
 8004adc:	4602      	mov	r2, r0
 8004ade:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ae2:	e6d8      	b.n	8004896 <_dtoa_r+0x2e>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e7e0      	b.n	8004aaa <_dtoa_r+0x242>
 8004ae8:	2401      	movs	r4, #1
 8004aea:	2300      	movs	r3, #0
 8004aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	9307      	str	r3, [sp, #28]
 8004af8:	2200      	movs	r2, #0
 8004afa:	2312      	movs	r3, #18
 8004afc:	e7d0      	b.n	8004aa0 <_dtoa_r+0x238>
 8004afe:	2301      	movs	r3, #1
 8004b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b02:	e7f5      	b.n	8004af0 <_dtoa_r+0x288>
 8004b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	9307      	str	r3, [sp, #28]
 8004b0a:	e7d7      	b.n	8004abc <_dtoa_r+0x254>
 8004b0c:	3101      	adds	r1, #1
 8004b0e:	0052      	lsls	r2, r2, #1
 8004b10:	e7d8      	b.n	8004ac4 <_dtoa_r+0x25c>
 8004b12:	bf00      	nop
 8004b14:	f3af 8000 	nop.w
 8004b18:	636f4361 	.word	0x636f4361
 8004b1c:	3fd287a7 	.word	0x3fd287a7
 8004b20:	8b60c8b3 	.word	0x8b60c8b3
 8004b24:	3fc68a28 	.word	0x3fc68a28
 8004b28:	509f79fb 	.word	0x509f79fb
 8004b2c:	3fd34413 	.word	0x3fd34413
 8004b30:	08007d7a 	.word	0x08007d7a
 8004b34:	08007d91 	.word	0x08007d91
 8004b38:	7ff00000 	.word	0x7ff00000
 8004b3c:	08007d45 	.word	0x08007d45
 8004b40:	3ff80000 	.word	0x3ff80000
 8004b44:	08007e88 	.word	0x08007e88
 8004b48:	08007de9 	.word	0x08007de9
 8004b4c:	08007d76 	.word	0x08007d76
 8004b50:	08007d44 	.word	0x08007d44
 8004b54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b58:	6018      	str	r0, [r3, #0]
 8004b5a:	9b07      	ldr	r3, [sp, #28]
 8004b5c:	2b0e      	cmp	r3, #14
 8004b5e:	f200 80a4 	bhi.w	8004caa <_dtoa_r+0x442>
 8004b62:	2c00      	cmp	r4, #0
 8004b64:	f000 80a1 	beq.w	8004caa <_dtoa_r+0x442>
 8004b68:	2f00      	cmp	r7, #0
 8004b6a:	dd33      	ble.n	8004bd4 <_dtoa_r+0x36c>
 8004b6c:	4bad      	ldr	r3, [pc, #692]	@ (8004e24 <_dtoa_r+0x5bc>)
 8004b6e:	f007 020f 	and.w	r2, r7, #15
 8004b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b76:	ed93 7b00 	vldr	d7, [r3]
 8004b7a:	05f8      	lsls	r0, r7, #23
 8004b7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004b80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b84:	d516      	bpl.n	8004bb4 <_dtoa_r+0x34c>
 8004b86:	4ba8      	ldr	r3, [pc, #672]	@ (8004e28 <_dtoa_r+0x5c0>)
 8004b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b90:	f7fb fe64 	bl	800085c <__aeabi_ddiv>
 8004b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b98:	f004 040f 	and.w	r4, r4, #15
 8004b9c:	2603      	movs	r6, #3
 8004b9e:	4da2      	ldr	r5, [pc, #648]	@ (8004e28 <_dtoa_r+0x5c0>)
 8004ba0:	b954      	cbnz	r4, 8004bb8 <_dtoa_r+0x350>
 8004ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004baa:	f7fb fe57 	bl	800085c <__aeabi_ddiv>
 8004bae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bb2:	e028      	b.n	8004c06 <_dtoa_r+0x39e>
 8004bb4:	2602      	movs	r6, #2
 8004bb6:	e7f2      	b.n	8004b9e <_dtoa_r+0x336>
 8004bb8:	07e1      	lsls	r1, r4, #31
 8004bba:	d508      	bpl.n	8004bce <_dtoa_r+0x366>
 8004bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bc4:	f7fb fd20 	bl	8000608 <__aeabi_dmul>
 8004bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bcc:	3601      	adds	r6, #1
 8004bce:	1064      	asrs	r4, r4, #1
 8004bd0:	3508      	adds	r5, #8
 8004bd2:	e7e5      	b.n	8004ba0 <_dtoa_r+0x338>
 8004bd4:	f000 80d2 	beq.w	8004d7c <_dtoa_r+0x514>
 8004bd8:	427c      	negs	r4, r7
 8004bda:	4b92      	ldr	r3, [pc, #584]	@ (8004e24 <_dtoa_r+0x5bc>)
 8004bdc:	4d92      	ldr	r5, [pc, #584]	@ (8004e28 <_dtoa_r+0x5c0>)
 8004bde:	f004 020f 	and.w	r2, r4, #15
 8004be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bee:	f7fb fd0b 	bl	8000608 <__aeabi_dmul>
 8004bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bf6:	1124      	asrs	r4, r4, #4
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2602      	movs	r6, #2
 8004bfc:	2c00      	cmp	r4, #0
 8004bfe:	f040 80b2 	bne.w	8004d66 <_dtoa_r+0x4fe>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1d3      	bne.n	8004bae <_dtoa_r+0x346>
 8004c06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004c08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80b7 	beq.w	8004d80 <_dtoa_r+0x518>
 8004c12:	4b86      	ldr	r3, [pc, #536]	@ (8004e2c <_dtoa_r+0x5c4>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	4620      	mov	r0, r4
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f7fb ff67 	bl	8000aec <__aeabi_dcmplt>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	f000 80ae 	beq.w	8004d80 <_dtoa_r+0x518>
 8004c24:	9b07      	ldr	r3, [sp, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80aa 	beq.w	8004d80 <_dtoa_r+0x518>
 8004c2c:	9b00      	ldr	r3, [sp, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	dd37      	ble.n	8004ca2 <_dtoa_r+0x43a>
 8004c32:	1e7b      	subs	r3, r7, #1
 8004c34:	9304      	str	r3, [sp, #16]
 8004c36:	4620      	mov	r0, r4
 8004c38:	4b7d      	ldr	r3, [pc, #500]	@ (8004e30 <_dtoa_r+0x5c8>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	f7fb fce3 	bl	8000608 <__aeabi_dmul>
 8004c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c46:	9c00      	ldr	r4, [sp, #0]
 8004c48:	3601      	adds	r6, #1
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f7fb fc72 	bl	8000534 <__aeabi_i2d>
 8004c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c54:	f7fb fcd8 	bl	8000608 <__aeabi_dmul>
 8004c58:	4b76      	ldr	r3, [pc, #472]	@ (8004e34 <_dtoa_r+0x5cc>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f7fb fb1e 	bl	800029c <__adddf3>
 8004c60:	4605      	mov	r5, r0
 8004c62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004c66:	2c00      	cmp	r4, #0
 8004c68:	f040 808d 	bne.w	8004d86 <_dtoa_r+0x51e>
 8004c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c70:	4b71      	ldr	r3, [pc, #452]	@ (8004e38 <_dtoa_r+0x5d0>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	f7fb fb10 	bl	8000298 <__aeabi_dsub>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c80:	462a      	mov	r2, r5
 8004c82:	4633      	mov	r3, r6
 8004c84:	f7fb ff50 	bl	8000b28 <__aeabi_dcmpgt>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	f040 828b 	bne.w	80051a4 <_dtoa_r+0x93c>
 8004c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c92:	462a      	mov	r2, r5
 8004c94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c98:	f7fb ff28 	bl	8000aec <__aeabi_dcmplt>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f040 8128 	bne.w	8004ef2 <_dtoa_r+0x68a>
 8004ca2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004ca6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004caa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f2c0 815a 	blt.w	8004f66 <_dtoa_r+0x6fe>
 8004cb2:	2f0e      	cmp	r7, #14
 8004cb4:	f300 8157 	bgt.w	8004f66 <_dtoa_r+0x6fe>
 8004cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e24 <_dtoa_r+0x5bc>)
 8004cba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004cbe:	ed93 7b00 	vldr	d7, [r3]
 8004cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	ed8d 7b00 	vstr	d7, [sp]
 8004cca:	da03      	bge.n	8004cd4 <_dtoa_r+0x46c>
 8004ccc:	9b07      	ldr	r3, [sp, #28]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f340 8101 	ble.w	8004ed6 <_dtoa_r+0x66e>
 8004cd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004cd8:	4656      	mov	r6, sl
 8004cda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fb fdbb 	bl	800085c <__aeabi_ddiv>
 8004ce6:	f7fb ff3f 	bl	8000b68 <__aeabi_d2iz>
 8004cea:	4680      	mov	r8, r0
 8004cec:	f7fb fc22 	bl	8000534 <__aeabi_i2d>
 8004cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cf4:	f7fb fc88 	bl	8000608 <__aeabi_dmul>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	4629      	mov	r1, r5
 8004d00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004d04:	f7fb fac8 	bl	8000298 <__aeabi_dsub>
 8004d08:	f806 4b01 	strb.w	r4, [r6], #1
 8004d0c:	9d07      	ldr	r5, [sp, #28]
 8004d0e:	eba6 040a 	sub.w	r4, r6, sl
 8004d12:	42a5      	cmp	r5, r4
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	f040 8117 	bne.w	8004f4a <_dtoa_r+0x6e2>
 8004d1c:	f7fb fabe 	bl	800029c <__adddf3>
 8004d20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d24:	4604      	mov	r4, r0
 8004d26:	460d      	mov	r5, r1
 8004d28:	f7fb fefe 	bl	8000b28 <__aeabi_dcmpgt>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f040 80f9 	bne.w	8004f24 <_dtoa_r+0x6bc>
 8004d32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d36:	4620      	mov	r0, r4
 8004d38:	4629      	mov	r1, r5
 8004d3a:	f7fb fecd 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d3e:	b118      	cbz	r0, 8004d48 <_dtoa_r+0x4e0>
 8004d40:	f018 0f01 	tst.w	r8, #1
 8004d44:	f040 80ee 	bne.w	8004f24 <_dtoa_r+0x6bc>
 8004d48:	4649      	mov	r1, r9
 8004d4a:	4658      	mov	r0, fp
 8004d4c:	f000 fc90 	bl	8005670 <_Bfree>
 8004d50:	2300      	movs	r3, #0
 8004d52:	7033      	strb	r3, [r6, #0]
 8004d54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004d56:	3701      	adds	r7, #1
 8004d58:	601f      	str	r7, [r3, #0]
 8004d5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 831d 	beq.w	800539c <_dtoa_r+0xb34>
 8004d62:	601e      	str	r6, [r3, #0]
 8004d64:	e31a      	b.n	800539c <_dtoa_r+0xb34>
 8004d66:	07e2      	lsls	r2, r4, #31
 8004d68:	d505      	bpl.n	8004d76 <_dtoa_r+0x50e>
 8004d6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d6e:	f7fb fc4b 	bl	8000608 <__aeabi_dmul>
 8004d72:	3601      	adds	r6, #1
 8004d74:	2301      	movs	r3, #1
 8004d76:	1064      	asrs	r4, r4, #1
 8004d78:	3508      	adds	r5, #8
 8004d7a:	e73f      	b.n	8004bfc <_dtoa_r+0x394>
 8004d7c:	2602      	movs	r6, #2
 8004d7e:	e742      	b.n	8004c06 <_dtoa_r+0x39e>
 8004d80:	9c07      	ldr	r4, [sp, #28]
 8004d82:	9704      	str	r7, [sp, #16]
 8004d84:	e761      	b.n	8004c4a <_dtoa_r+0x3e2>
 8004d86:	4b27      	ldr	r3, [pc, #156]	@ (8004e24 <_dtoa_r+0x5bc>)
 8004d88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d92:	4454      	add	r4, sl
 8004d94:	2900      	cmp	r1, #0
 8004d96:	d053      	beq.n	8004e40 <_dtoa_r+0x5d8>
 8004d98:	4928      	ldr	r1, [pc, #160]	@ (8004e3c <_dtoa_r+0x5d4>)
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	f7fb fd5e 	bl	800085c <__aeabi_ddiv>
 8004da0:	4633      	mov	r3, r6
 8004da2:	462a      	mov	r2, r5
 8004da4:	f7fb fa78 	bl	8000298 <__aeabi_dsub>
 8004da8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004dac:	4656      	mov	r6, sl
 8004dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004db2:	f7fb fed9 	bl	8000b68 <__aeabi_d2iz>
 8004db6:	4605      	mov	r5, r0
 8004db8:	f7fb fbbc 	bl	8000534 <__aeabi_i2d>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dc4:	f7fb fa68 	bl	8000298 <__aeabi_dsub>
 8004dc8:	3530      	adds	r5, #48	@ 0x30
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004dd2:	f806 5b01 	strb.w	r5, [r6], #1
 8004dd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004dda:	f7fb fe87 	bl	8000aec <__aeabi_dcmplt>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d171      	bne.n	8004ec6 <_dtoa_r+0x65e>
 8004de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004de6:	4911      	ldr	r1, [pc, #68]	@ (8004e2c <_dtoa_r+0x5c4>)
 8004de8:	2000      	movs	r0, #0
 8004dea:	f7fb fa55 	bl	8000298 <__aeabi_dsub>
 8004dee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004df2:	f7fb fe7b 	bl	8000aec <__aeabi_dcmplt>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	f040 8095 	bne.w	8004f26 <_dtoa_r+0x6be>
 8004dfc:	42a6      	cmp	r6, r4
 8004dfe:	f43f af50 	beq.w	8004ca2 <_dtoa_r+0x43a>
 8004e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e06:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <_dtoa_r+0x5c8>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f7fb fbfd 	bl	8000608 <__aeabi_dmul>
 8004e0e:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <_dtoa_r+0x5c8>)
 8004e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e14:	2200      	movs	r2, #0
 8004e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e1a:	f7fb fbf5 	bl	8000608 <__aeabi_dmul>
 8004e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e22:	e7c4      	b.n	8004dae <_dtoa_r+0x546>
 8004e24:	08007e88 	.word	0x08007e88
 8004e28:	08007e60 	.word	0x08007e60
 8004e2c:	3ff00000 	.word	0x3ff00000
 8004e30:	40240000 	.word	0x40240000
 8004e34:	401c0000 	.word	0x401c0000
 8004e38:	40140000 	.word	0x40140000
 8004e3c:	3fe00000 	.word	0x3fe00000
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	f7fb fbe0 	bl	8000608 <__aeabi_dmul>
 8004e48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8004e4e:	4656      	mov	r6, sl
 8004e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e54:	f7fb fe88 	bl	8000b68 <__aeabi_d2iz>
 8004e58:	4605      	mov	r5, r0
 8004e5a:	f7fb fb6b 	bl	8000534 <__aeabi_i2d>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e66:	f7fb fa17 	bl	8000298 <__aeabi_dsub>
 8004e6a:	3530      	adds	r5, #48	@ 0x30
 8004e6c:	f806 5b01 	strb.w	r5, [r6], #1
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	42a6      	cmp	r6, r4
 8004e76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	d124      	bne.n	8004eca <_dtoa_r+0x662>
 8004e80:	4bac      	ldr	r3, [pc, #688]	@ (8005134 <_dtoa_r+0x8cc>)
 8004e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e86:	f7fb fa09 	bl	800029c <__adddf3>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e92:	f7fb fe49 	bl	8000b28 <__aeabi_dcmpgt>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d145      	bne.n	8004f26 <_dtoa_r+0x6be>
 8004e9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e9e:	49a5      	ldr	r1, [pc, #660]	@ (8005134 <_dtoa_r+0x8cc>)
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f7fb f9f9 	bl	8000298 <__aeabi_dsub>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eae:	f7fb fe1d 	bl	8000aec <__aeabi_dcmplt>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	f43f aef5 	beq.w	8004ca2 <_dtoa_r+0x43a>
 8004eb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004eba:	1e73      	subs	r3, r6, #1
 8004ebc:	9315      	str	r3, [sp, #84]	@ 0x54
 8004ebe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004ec2:	2b30      	cmp	r3, #48	@ 0x30
 8004ec4:	d0f8      	beq.n	8004eb8 <_dtoa_r+0x650>
 8004ec6:	9f04      	ldr	r7, [sp, #16]
 8004ec8:	e73e      	b.n	8004d48 <_dtoa_r+0x4e0>
 8004eca:	4b9b      	ldr	r3, [pc, #620]	@ (8005138 <_dtoa_r+0x8d0>)
 8004ecc:	f7fb fb9c 	bl	8000608 <__aeabi_dmul>
 8004ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ed4:	e7bc      	b.n	8004e50 <_dtoa_r+0x5e8>
 8004ed6:	d10c      	bne.n	8004ef2 <_dtoa_r+0x68a>
 8004ed8:	4b98      	ldr	r3, [pc, #608]	@ (800513c <_dtoa_r+0x8d4>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ee0:	f7fb fb92 	bl	8000608 <__aeabi_dmul>
 8004ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ee8:	f7fb fe14 	bl	8000b14 <__aeabi_dcmpge>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	f000 8157 	beq.w	80051a0 <_dtoa_r+0x938>
 8004ef2:	2400      	movs	r4, #0
 8004ef4:	4625      	mov	r5, r4
 8004ef6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	9304      	str	r3, [sp, #16]
 8004efc:	4656      	mov	r6, sl
 8004efe:	2700      	movs	r7, #0
 8004f00:	4621      	mov	r1, r4
 8004f02:	4658      	mov	r0, fp
 8004f04:	f000 fbb4 	bl	8005670 <_Bfree>
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	d0dc      	beq.n	8004ec6 <_dtoa_r+0x65e>
 8004f0c:	b12f      	cbz	r7, 8004f1a <_dtoa_r+0x6b2>
 8004f0e:	42af      	cmp	r7, r5
 8004f10:	d003      	beq.n	8004f1a <_dtoa_r+0x6b2>
 8004f12:	4639      	mov	r1, r7
 8004f14:	4658      	mov	r0, fp
 8004f16:	f000 fbab 	bl	8005670 <_Bfree>
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	4658      	mov	r0, fp
 8004f1e:	f000 fba7 	bl	8005670 <_Bfree>
 8004f22:	e7d0      	b.n	8004ec6 <_dtoa_r+0x65e>
 8004f24:	9704      	str	r7, [sp, #16]
 8004f26:	4633      	mov	r3, r6
 8004f28:	461e      	mov	r6, r3
 8004f2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f2e:	2a39      	cmp	r2, #57	@ 0x39
 8004f30:	d107      	bne.n	8004f42 <_dtoa_r+0x6da>
 8004f32:	459a      	cmp	sl, r3
 8004f34:	d1f8      	bne.n	8004f28 <_dtoa_r+0x6c0>
 8004f36:	9a04      	ldr	r2, [sp, #16]
 8004f38:	3201      	adds	r2, #1
 8004f3a:	9204      	str	r2, [sp, #16]
 8004f3c:	2230      	movs	r2, #48	@ 0x30
 8004f3e:	f88a 2000 	strb.w	r2, [sl]
 8004f42:	781a      	ldrb	r2, [r3, #0]
 8004f44:	3201      	adds	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e7bd      	b.n	8004ec6 <_dtoa_r+0x65e>
 8004f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005138 <_dtoa_r+0x8d0>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f7fb fb5b 	bl	8000608 <__aeabi_dmul>
 8004f52:	2200      	movs	r2, #0
 8004f54:	2300      	movs	r3, #0
 8004f56:	4604      	mov	r4, r0
 8004f58:	460d      	mov	r5, r1
 8004f5a:	f7fb fdbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	f43f aebb 	beq.w	8004cda <_dtoa_r+0x472>
 8004f64:	e6f0      	b.n	8004d48 <_dtoa_r+0x4e0>
 8004f66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	f000 80db 	beq.w	8005124 <_dtoa_r+0x8bc>
 8004f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f70:	2a01      	cmp	r2, #1
 8004f72:	f300 80bf 	bgt.w	80050f4 <_dtoa_r+0x88c>
 8004f76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004f78:	2a00      	cmp	r2, #0
 8004f7a:	f000 80b7 	beq.w	80050ec <_dtoa_r+0x884>
 8004f7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004f82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f84:	4646      	mov	r6, r8
 8004f86:	9a08      	ldr	r2, [sp, #32]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	441a      	add	r2, r3
 8004f8c:	4658      	mov	r0, fp
 8004f8e:	4498      	add	r8, r3
 8004f90:	9208      	str	r2, [sp, #32]
 8004f92:	f000 fc6b 	bl	800586c <__i2b>
 8004f96:	4605      	mov	r5, r0
 8004f98:	b15e      	cbz	r6, 8004fb2 <_dtoa_r+0x74a>
 8004f9a:	9b08      	ldr	r3, [sp, #32]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dd08      	ble.n	8004fb2 <_dtoa_r+0x74a>
 8004fa0:	42b3      	cmp	r3, r6
 8004fa2:	9a08      	ldr	r2, [sp, #32]
 8004fa4:	bfa8      	it	ge
 8004fa6:	4633      	movge	r3, r6
 8004fa8:	eba8 0803 	sub.w	r8, r8, r3
 8004fac:	1af6      	subs	r6, r6, r3
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	9308      	str	r3, [sp, #32]
 8004fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fb4:	b1f3      	cbz	r3, 8004ff4 <_dtoa_r+0x78c>
 8004fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80b7 	beq.w	800512c <_dtoa_r+0x8c4>
 8004fbe:	b18c      	cbz	r4, 8004fe4 <_dtoa_r+0x77c>
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	4658      	mov	r0, fp
 8004fc6:	f000 fd11 	bl	80059ec <__pow5mult>
 8004fca:	464a      	mov	r2, r9
 8004fcc:	4601      	mov	r1, r0
 8004fce:	4605      	mov	r5, r0
 8004fd0:	4658      	mov	r0, fp
 8004fd2:	f000 fc61 	bl	8005898 <__multiply>
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	9004      	str	r0, [sp, #16]
 8004fda:	4658      	mov	r0, fp
 8004fdc:	f000 fb48 	bl	8005670 <_Bfree>
 8004fe0:	9b04      	ldr	r3, [sp, #16]
 8004fe2:	4699      	mov	r9, r3
 8004fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fe6:	1b1a      	subs	r2, r3, r4
 8004fe8:	d004      	beq.n	8004ff4 <_dtoa_r+0x78c>
 8004fea:	4649      	mov	r1, r9
 8004fec:	4658      	mov	r0, fp
 8004fee:	f000 fcfd 	bl	80059ec <__pow5mult>
 8004ff2:	4681      	mov	r9, r0
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	4658      	mov	r0, fp
 8004ff8:	f000 fc38 	bl	800586c <__i2b>
 8004ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ffe:	4604      	mov	r4, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 81cf 	beq.w	80053a4 <_dtoa_r+0xb3c>
 8005006:	461a      	mov	r2, r3
 8005008:	4601      	mov	r1, r0
 800500a:	4658      	mov	r0, fp
 800500c:	f000 fcee 	bl	80059ec <__pow5mult>
 8005010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005012:	2b01      	cmp	r3, #1
 8005014:	4604      	mov	r4, r0
 8005016:	f300 8095 	bgt.w	8005144 <_dtoa_r+0x8dc>
 800501a:	9b02      	ldr	r3, [sp, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f040 8087 	bne.w	8005130 <_dtoa_r+0x8c8>
 8005022:	9b03      	ldr	r3, [sp, #12]
 8005024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 8089 	bne.w	8005140 <_dtoa_r+0x8d8>
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005034:	0d1b      	lsrs	r3, r3, #20
 8005036:	051b      	lsls	r3, r3, #20
 8005038:	b12b      	cbz	r3, 8005046 <_dtoa_r+0x7de>
 800503a:	9b08      	ldr	r3, [sp, #32]
 800503c:	3301      	adds	r3, #1
 800503e:	9308      	str	r3, [sp, #32]
 8005040:	f108 0801 	add.w	r8, r8, #1
 8005044:	2301      	movs	r3, #1
 8005046:	930a      	str	r3, [sp, #40]	@ 0x28
 8005048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 81b0 	beq.w	80053b0 <_dtoa_r+0xb48>
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005056:	6918      	ldr	r0, [r3, #16]
 8005058:	f000 fbbc 	bl	80057d4 <__hi0bits>
 800505c:	f1c0 0020 	rsb	r0, r0, #32
 8005060:	9b08      	ldr	r3, [sp, #32]
 8005062:	4418      	add	r0, r3
 8005064:	f010 001f 	ands.w	r0, r0, #31
 8005068:	d077      	beq.n	800515a <_dtoa_r+0x8f2>
 800506a:	f1c0 0320 	rsb	r3, r0, #32
 800506e:	2b04      	cmp	r3, #4
 8005070:	dd6b      	ble.n	800514a <_dtoa_r+0x8e2>
 8005072:	9b08      	ldr	r3, [sp, #32]
 8005074:	f1c0 001c 	rsb	r0, r0, #28
 8005078:	4403      	add	r3, r0
 800507a:	4480      	add	r8, r0
 800507c:	4406      	add	r6, r0
 800507e:	9308      	str	r3, [sp, #32]
 8005080:	f1b8 0f00 	cmp.w	r8, #0
 8005084:	dd05      	ble.n	8005092 <_dtoa_r+0x82a>
 8005086:	4649      	mov	r1, r9
 8005088:	4642      	mov	r2, r8
 800508a:	4658      	mov	r0, fp
 800508c:	f000 fd08 	bl	8005aa0 <__lshift>
 8005090:	4681      	mov	r9, r0
 8005092:	9b08      	ldr	r3, [sp, #32]
 8005094:	2b00      	cmp	r3, #0
 8005096:	dd05      	ble.n	80050a4 <_dtoa_r+0x83c>
 8005098:	4621      	mov	r1, r4
 800509a:	461a      	mov	r2, r3
 800509c:	4658      	mov	r0, fp
 800509e:	f000 fcff 	bl	8005aa0 <__lshift>
 80050a2:	4604      	mov	r4, r0
 80050a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d059      	beq.n	800515e <_dtoa_r+0x8f6>
 80050aa:	4621      	mov	r1, r4
 80050ac:	4648      	mov	r0, r9
 80050ae:	f000 fd63 	bl	8005b78 <__mcmp>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	da53      	bge.n	800515e <_dtoa_r+0x8f6>
 80050b6:	1e7b      	subs	r3, r7, #1
 80050b8:	9304      	str	r3, [sp, #16]
 80050ba:	4649      	mov	r1, r9
 80050bc:	2300      	movs	r3, #0
 80050be:	220a      	movs	r2, #10
 80050c0:	4658      	mov	r0, fp
 80050c2:	f000 faf7 	bl	80056b4 <__multadd>
 80050c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050c8:	4681      	mov	r9, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8172 	beq.w	80053b4 <_dtoa_r+0xb4c>
 80050d0:	2300      	movs	r3, #0
 80050d2:	4629      	mov	r1, r5
 80050d4:	220a      	movs	r2, #10
 80050d6:	4658      	mov	r0, fp
 80050d8:	f000 faec 	bl	80056b4 <__multadd>
 80050dc:	9b00      	ldr	r3, [sp, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	4605      	mov	r5, r0
 80050e2:	dc67      	bgt.n	80051b4 <_dtoa_r+0x94c>
 80050e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	dc41      	bgt.n	800516e <_dtoa_r+0x906>
 80050ea:	e063      	b.n	80051b4 <_dtoa_r+0x94c>
 80050ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80050ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80050f2:	e746      	b.n	8004f82 <_dtoa_r+0x71a>
 80050f4:	9b07      	ldr	r3, [sp, #28]
 80050f6:	1e5c      	subs	r4, r3, #1
 80050f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	bfbf      	itttt	lt
 80050fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005100:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005102:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005104:	1ae3      	sublt	r3, r4, r3
 8005106:	bfb4      	ite	lt
 8005108:	18d2      	addlt	r2, r2, r3
 800510a:	1b1c      	subge	r4, r3, r4
 800510c:	9b07      	ldr	r3, [sp, #28]
 800510e:	bfbc      	itt	lt
 8005110:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005112:	2400      	movlt	r4, #0
 8005114:	2b00      	cmp	r3, #0
 8005116:	bfb5      	itete	lt
 8005118:	eba8 0603 	sublt.w	r6, r8, r3
 800511c:	9b07      	ldrge	r3, [sp, #28]
 800511e:	2300      	movlt	r3, #0
 8005120:	4646      	movge	r6, r8
 8005122:	e730      	b.n	8004f86 <_dtoa_r+0x71e>
 8005124:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005126:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005128:	4646      	mov	r6, r8
 800512a:	e735      	b.n	8004f98 <_dtoa_r+0x730>
 800512c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800512e:	e75c      	b.n	8004fea <_dtoa_r+0x782>
 8005130:	2300      	movs	r3, #0
 8005132:	e788      	b.n	8005046 <_dtoa_r+0x7de>
 8005134:	3fe00000 	.word	0x3fe00000
 8005138:	40240000 	.word	0x40240000
 800513c:	40140000 	.word	0x40140000
 8005140:	9b02      	ldr	r3, [sp, #8]
 8005142:	e780      	b.n	8005046 <_dtoa_r+0x7de>
 8005144:	2300      	movs	r3, #0
 8005146:	930a      	str	r3, [sp, #40]	@ 0x28
 8005148:	e782      	b.n	8005050 <_dtoa_r+0x7e8>
 800514a:	d099      	beq.n	8005080 <_dtoa_r+0x818>
 800514c:	9a08      	ldr	r2, [sp, #32]
 800514e:	331c      	adds	r3, #28
 8005150:	441a      	add	r2, r3
 8005152:	4498      	add	r8, r3
 8005154:	441e      	add	r6, r3
 8005156:	9208      	str	r2, [sp, #32]
 8005158:	e792      	b.n	8005080 <_dtoa_r+0x818>
 800515a:	4603      	mov	r3, r0
 800515c:	e7f6      	b.n	800514c <_dtoa_r+0x8e4>
 800515e:	9b07      	ldr	r3, [sp, #28]
 8005160:	9704      	str	r7, [sp, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	dc20      	bgt.n	80051a8 <_dtoa_r+0x940>
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800516a:	2b02      	cmp	r3, #2
 800516c:	dd1e      	ble.n	80051ac <_dtoa_r+0x944>
 800516e:	9b00      	ldr	r3, [sp, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f47f aec0 	bne.w	8004ef6 <_dtoa_r+0x68e>
 8005176:	4621      	mov	r1, r4
 8005178:	2205      	movs	r2, #5
 800517a:	4658      	mov	r0, fp
 800517c:	f000 fa9a 	bl	80056b4 <__multadd>
 8005180:	4601      	mov	r1, r0
 8005182:	4604      	mov	r4, r0
 8005184:	4648      	mov	r0, r9
 8005186:	f000 fcf7 	bl	8005b78 <__mcmp>
 800518a:	2800      	cmp	r0, #0
 800518c:	f77f aeb3 	ble.w	8004ef6 <_dtoa_r+0x68e>
 8005190:	4656      	mov	r6, sl
 8005192:	2331      	movs	r3, #49	@ 0x31
 8005194:	f806 3b01 	strb.w	r3, [r6], #1
 8005198:	9b04      	ldr	r3, [sp, #16]
 800519a:	3301      	adds	r3, #1
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	e6ae      	b.n	8004efe <_dtoa_r+0x696>
 80051a0:	9c07      	ldr	r4, [sp, #28]
 80051a2:	9704      	str	r7, [sp, #16]
 80051a4:	4625      	mov	r5, r4
 80051a6:	e7f3      	b.n	8005190 <_dtoa_r+0x928>
 80051a8:	9b07      	ldr	r3, [sp, #28]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8104 	beq.w	80053bc <_dtoa_r+0xb54>
 80051b4:	2e00      	cmp	r6, #0
 80051b6:	dd05      	ble.n	80051c4 <_dtoa_r+0x95c>
 80051b8:	4629      	mov	r1, r5
 80051ba:	4632      	mov	r2, r6
 80051bc:	4658      	mov	r0, fp
 80051be:	f000 fc6f 	bl	8005aa0 <__lshift>
 80051c2:	4605      	mov	r5, r0
 80051c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d05a      	beq.n	8005280 <_dtoa_r+0xa18>
 80051ca:	6869      	ldr	r1, [r5, #4]
 80051cc:	4658      	mov	r0, fp
 80051ce:	f000 fa0f 	bl	80055f0 <_Balloc>
 80051d2:	4606      	mov	r6, r0
 80051d4:	b928      	cbnz	r0, 80051e2 <_dtoa_r+0x97a>
 80051d6:	4b84      	ldr	r3, [pc, #528]	@ (80053e8 <_dtoa_r+0xb80>)
 80051d8:	4602      	mov	r2, r0
 80051da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80051de:	f7ff bb5a 	b.w	8004896 <_dtoa_r+0x2e>
 80051e2:	692a      	ldr	r2, [r5, #16]
 80051e4:	3202      	adds	r2, #2
 80051e6:	0092      	lsls	r2, r2, #2
 80051e8:	f105 010c 	add.w	r1, r5, #12
 80051ec:	300c      	adds	r0, #12
 80051ee:	f002 f93b 	bl	8007468 <memcpy>
 80051f2:	2201      	movs	r2, #1
 80051f4:	4631      	mov	r1, r6
 80051f6:	4658      	mov	r0, fp
 80051f8:	f000 fc52 	bl	8005aa0 <__lshift>
 80051fc:	f10a 0301 	add.w	r3, sl, #1
 8005200:	9307      	str	r3, [sp, #28]
 8005202:	9b00      	ldr	r3, [sp, #0]
 8005204:	4453      	add	r3, sl
 8005206:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005208:	9b02      	ldr	r3, [sp, #8]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	462f      	mov	r7, r5
 8005210:	930a      	str	r3, [sp, #40]	@ 0x28
 8005212:	4605      	mov	r5, r0
 8005214:	9b07      	ldr	r3, [sp, #28]
 8005216:	4621      	mov	r1, r4
 8005218:	3b01      	subs	r3, #1
 800521a:	4648      	mov	r0, r9
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	f7ff fa9b 	bl	8004758 <quorem>
 8005222:	4639      	mov	r1, r7
 8005224:	9002      	str	r0, [sp, #8]
 8005226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800522a:	4648      	mov	r0, r9
 800522c:	f000 fca4 	bl	8005b78 <__mcmp>
 8005230:	462a      	mov	r2, r5
 8005232:	9008      	str	r0, [sp, #32]
 8005234:	4621      	mov	r1, r4
 8005236:	4658      	mov	r0, fp
 8005238:	f000 fcba 	bl	8005bb0 <__mdiff>
 800523c:	68c2      	ldr	r2, [r0, #12]
 800523e:	4606      	mov	r6, r0
 8005240:	bb02      	cbnz	r2, 8005284 <_dtoa_r+0xa1c>
 8005242:	4601      	mov	r1, r0
 8005244:	4648      	mov	r0, r9
 8005246:	f000 fc97 	bl	8005b78 <__mcmp>
 800524a:	4602      	mov	r2, r0
 800524c:	4631      	mov	r1, r6
 800524e:	4658      	mov	r0, fp
 8005250:	920e      	str	r2, [sp, #56]	@ 0x38
 8005252:	f000 fa0d 	bl	8005670 <_Bfree>
 8005256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800525a:	9e07      	ldr	r6, [sp, #28]
 800525c:	ea43 0102 	orr.w	r1, r3, r2
 8005260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005262:	4319      	orrs	r1, r3
 8005264:	d110      	bne.n	8005288 <_dtoa_r+0xa20>
 8005266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800526a:	d029      	beq.n	80052c0 <_dtoa_r+0xa58>
 800526c:	9b08      	ldr	r3, [sp, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	dd02      	ble.n	8005278 <_dtoa_r+0xa10>
 8005272:	9b02      	ldr	r3, [sp, #8]
 8005274:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005278:	9b00      	ldr	r3, [sp, #0]
 800527a:	f883 8000 	strb.w	r8, [r3]
 800527e:	e63f      	b.n	8004f00 <_dtoa_r+0x698>
 8005280:	4628      	mov	r0, r5
 8005282:	e7bb      	b.n	80051fc <_dtoa_r+0x994>
 8005284:	2201      	movs	r2, #1
 8005286:	e7e1      	b.n	800524c <_dtoa_r+0x9e4>
 8005288:	9b08      	ldr	r3, [sp, #32]
 800528a:	2b00      	cmp	r3, #0
 800528c:	db04      	blt.n	8005298 <_dtoa_r+0xa30>
 800528e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005290:	430b      	orrs	r3, r1
 8005292:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005294:	430b      	orrs	r3, r1
 8005296:	d120      	bne.n	80052da <_dtoa_r+0xa72>
 8005298:	2a00      	cmp	r2, #0
 800529a:	dded      	ble.n	8005278 <_dtoa_r+0xa10>
 800529c:	4649      	mov	r1, r9
 800529e:	2201      	movs	r2, #1
 80052a0:	4658      	mov	r0, fp
 80052a2:	f000 fbfd 	bl	8005aa0 <__lshift>
 80052a6:	4621      	mov	r1, r4
 80052a8:	4681      	mov	r9, r0
 80052aa:	f000 fc65 	bl	8005b78 <__mcmp>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	dc03      	bgt.n	80052ba <_dtoa_r+0xa52>
 80052b2:	d1e1      	bne.n	8005278 <_dtoa_r+0xa10>
 80052b4:	f018 0f01 	tst.w	r8, #1
 80052b8:	d0de      	beq.n	8005278 <_dtoa_r+0xa10>
 80052ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052be:	d1d8      	bne.n	8005272 <_dtoa_r+0xa0a>
 80052c0:	9a00      	ldr	r2, [sp, #0]
 80052c2:	2339      	movs	r3, #57	@ 0x39
 80052c4:	7013      	strb	r3, [r2, #0]
 80052c6:	4633      	mov	r3, r6
 80052c8:	461e      	mov	r6, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80052d0:	2a39      	cmp	r2, #57	@ 0x39
 80052d2:	d052      	beq.n	800537a <_dtoa_r+0xb12>
 80052d4:	3201      	adds	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e612      	b.n	8004f00 <_dtoa_r+0x698>
 80052da:	2a00      	cmp	r2, #0
 80052dc:	dd07      	ble.n	80052ee <_dtoa_r+0xa86>
 80052de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052e2:	d0ed      	beq.n	80052c0 <_dtoa_r+0xa58>
 80052e4:	9a00      	ldr	r2, [sp, #0]
 80052e6:	f108 0301 	add.w	r3, r8, #1
 80052ea:	7013      	strb	r3, [r2, #0]
 80052ec:	e608      	b.n	8004f00 <_dtoa_r+0x698>
 80052ee:	9b07      	ldr	r3, [sp, #28]
 80052f0:	9a07      	ldr	r2, [sp, #28]
 80052f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80052f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d028      	beq.n	800534e <_dtoa_r+0xae6>
 80052fc:	4649      	mov	r1, r9
 80052fe:	2300      	movs	r3, #0
 8005300:	220a      	movs	r2, #10
 8005302:	4658      	mov	r0, fp
 8005304:	f000 f9d6 	bl	80056b4 <__multadd>
 8005308:	42af      	cmp	r7, r5
 800530a:	4681      	mov	r9, r0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	f04f 020a 	mov.w	r2, #10
 8005314:	4639      	mov	r1, r7
 8005316:	4658      	mov	r0, fp
 8005318:	d107      	bne.n	800532a <_dtoa_r+0xac2>
 800531a:	f000 f9cb 	bl	80056b4 <__multadd>
 800531e:	4607      	mov	r7, r0
 8005320:	4605      	mov	r5, r0
 8005322:	9b07      	ldr	r3, [sp, #28]
 8005324:	3301      	adds	r3, #1
 8005326:	9307      	str	r3, [sp, #28]
 8005328:	e774      	b.n	8005214 <_dtoa_r+0x9ac>
 800532a:	f000 f9c3 	bl	80056b4 <__multadd>
 800532e:	4629      	mov	r1, r5
 8005330:	4607      	mov	r7, r0
 8005332:	2300      	movs	r3, #0
 8005334:	220a      	movs	r2, #10
 8005336:	4658      	mov	r0, fp
 8005338:	f000 f9bc 	bl	80056b4 <__multadd>
 800533c:	4605      	mov	r5, r0
 800533e:	e7f0      	b.n	8005322 <_dtoa_r+0xaba>
 8005340:	9b00      	ldr	r3, [sp, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	bfcc      	ite	gt
 8005346:	461e      	movgt	r6, r3
 8005348:	2601      	movle	r6, #1
 800534a:	4456      	add	r6, sl
 800534c:	2700      	movs	r7, #0
 800534e:	4649      	mov	r1, r9
 8005350:	2201      	movs	r2, #1
 8005352:	4658      	mov	r0, fp
 8005354:	f000 fba4 	bl	8005aa0 <__lshift>
 8005358:	4621      	mov	r1, r4
 800535a:	4681      	mov	r9, r0
 800535c:	f000 fc0c 	bl	8005b78 <__mcmp>
 8005360:	2800      	cmp	r0, #0
 8005362:	dcb0      	bgt.n	80052c6 <_dtoa_r+0xa5e>
 8005364:	d102      	bne.n	800536c <_dtoa_r+0xb04>
 8005366:	f018 0f01 	tst.w	r8, #1
 800536a:	d1ac      	bne.n	80052c6 <_dtoa_r+0xa5e>
 800536c:	4633      	mov	r3, r6
 800536e:	461e      	mov	r6, r3
 8005370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005374:	2a30      	cmp	r2, #48	@ 0x30
 8005376:	d0fa      	beq.n	800536e <_dtoa_r+0xb06>
 8005378:	e5c2      	b.n	8004f00 <_dtoa_r+0x698>
 800537a:	459a      	cmp	sl, r3
 800537c:	d1a4      	bne.n	80052c8 <_dtoa_r+0xa60>
 800537e:	9b04      	ldr	r3, [sp, #16]
 8005380:	3301      	adds	r3, #1
 8005382:	9304      	str	r3, [sp, #16]
 8005384:	2331      	movs	r3, #49	@ 0x31
 8005386:	f88a 3000 	strb.w	r3, [sl]
 800538a:	e5b9      	b.n	8004f00 <_dtoa_r+0x698>
 800538c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800538e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80053ec <_dtoa_r+0xb84>
 8005392:	b11b      	cbz	r3, 800539c <_dtoa_r+0xb34>
 8005394:	f10a 0308 	add.w	r3, sl, #8
 8005398:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	4650      	mov	r0, sl
 800539e:	b019      	add	sp, #100	@ 0x64
 80053a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	f77f ae37 	ble.w	800501a <_dtoa_r+0x7b2>
 80053ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80053b0:	2001      	movs	r0, #1
 80053b2:	e655      	b.n	8005060 <_dtoa_r+0x7f8>
 80053b4:	9b00      	ldr	r3, [sp, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f77f aed6 	ble.w	8005168 <_dtoa_r+0x900>
 80053bc:	4656      	mov	r6, sl
 80053be:	4621      	mov	r1, r4
 80053c0:	4648      	mov	r0, r9
 80053c2:	f7ff f9c9 	bl	8004758 <quorem>
 80053c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80053ca:	f806 8b01 	strb.w	r8, [r6], #1
 80053ce:	9b00      	ldr	r3, [sp, #0]
 80053d0:	eba6 020a 	sub.w	r2, r6, sl
 80053d4:	4293      	cmp	r3, r2
 80053d6:	ddb3      	ble.n	8005340 <_dtoa_r+0xad8>
 80053d8:	4649      	mov	r1, r9
 80053da:	2300      	movs	r3, #0
 80053dc:	220a      	movs	r2, #10
 80053de:	4658      	mov	r0, fp
 80053e0:	f000 f968 	bl	80056b4 <__multadd>
 80053e4:	4681      	mov	r9, r0
 80053e6:	e7ea      	b.n	80053be <_dtoa_r+0xb56>
 80053e8:	08007de9 	.word	0x08007de9
 80053ec:	08007d6d 	.word	0x08007d6d

080053f0 <_free_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4605      	mov	r5, r0
 80053f4:	2900      	cmp	r1, #0
 80053f6:	d041      	beq.n	800547c <_free_r+0x8c>
 80053f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053fc:	1f0c      	subs	r4, r1, #4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bfb8      	it	lt
 8005402:	18e4      	addlt	r4, r4, r3
 8005404:	f000 f8e8 	bl	80055d8 <__malloc_lock>
 8005408:	4a1d      	ldr	r2, [pc, #116]	@ (8005480 <_free_r+0x90>)
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	b933      	cbnz	r3, 800541c <_free_r+0x2c>
 800540e:	6063      	str	r3, [r4, #4]
 8005410:	6014      	str	r4, [r2, #0]
 8005412:	4628      	mov	r0, r5
 8005414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005418:	f000 b8e4 	b.w	80055e4 <__malloc_unlock>
 800541c:	42a3      	cmp	r3, r4
 800541e:	d908      	bls.n	8005432 <_free_r+0x42>
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	1821      	adds	r1, r4, r0
 8005424:	428b      	cmp	r3, r1
 8005426:	bf01      	itttt	eq
 8005428:	6819      	ldreq	r1, [r3, #0]
 800542a:	685b      	ldreq	r3, [r3, #4]
 800542c:	1809      	addeq	r1, r1, r0
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	e7ed      	b.n	800540e <_free_r+0x1e>
 8005432:	461a      	mov	r2, r3
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	b10b      	cbz	r3, 800543c <_free_r+0x4c>
 8005438:	42a3      	cmp	r3, r4
 800543a:	d9fa      	bls.n	8005432 <_free_r+0x42>
 800543c:	6811      	ldr	r1, [r2, #0]
 800543e:	1850      	adds	r0, r2, r1
 8005440:	42a0      	cmp	r0, r4
 8005442:	d10b      	bne.n	800545c <_free_r+0x6c>
 8005444:	6820      	ldr	r0, [r4, #0]
 8005446:	4401      	add	r1, r0
 8005448:	1850      	adds	r0, r2, r1
 800544a:	4283      	cmp	r3, r0
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	d1e0      	bne.n	8005412 <_free_r+0x22>
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	6053      	str	r3, [r2, #4]
 8005456:	4408      	add	r0, r1
 8005458:	6010      	str	r0, [r2, #0]
 800545a:	e7da      	b.n	8005412 <_free_r+0x22>
 800545c:	d902      	bls.n	8005464 <_free_r+0x74>
 800545e:	230c      	movs	r3, #12
 8005460:	602b      	str	r3, [r5, #0]
 8005462:	e7d6      	b.n	8005412 <_free_r+0x22>
 8005464:	6820      	ldr	r0, [r4, #0]
 8005466:	1821      	adds	r1, r4, r0
 8005468:	428b      	cmp	r3, r1
 800546a:	bf04      	itt	eq
 800546c:	6819      	ldreq	r1, [r3, #0]
 800546e:	685b      	ldreq	r3, [r3, #4]
 8005470:	6063      	str	r3, [r4, #4]
 8005472:	bf04      	itt	eq
 8005474:	1809      	addeq	r1, r1, r0
 8005476:	6021      	streq	r1, [r4, #0]
 8005478:	6054      	str	r4, [r2, #4]
 800547a:	e7ca      	b.n	8005412 <_free_r+0x22>
 800547c:	bd38      	pop	{r3, r4, r5, pc}
 800547e:	bf00      	nop
 8005480:	200003d0 	.word	0x200003d0

08005484 <malloc>:
 8005484:	4b02      	ldr	r3, [pc, #8]	@ (8005490 <malloc+0xc>)
 8005486:	4601      	mov	r1, r0
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	f000 b825 	b.w	80054d8 <_malloc_r>
 800548e:	bf00      	nop
 8005490:	20000018 	.word	0x20000018

08005494 <sbrk_aligned>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	4e0f      	ldr	r6, [pc, #60]	@ (80054d4 <sbrk_aligned+0x40>)
 8005498:	460c      	mov	r4, r1
 800549a:	6831      	ldr	r1, [r6, #0]
 800549c:	4605      	mov	r5, r0
 800549e:	b911      	cbnz	r1, 80054a6 <sbrk_aligned+0x12>
 80054a0:	f001 ffd2 	bl	8007448 <_sbrk_r>
 80054a4:	6030      	str	r0, [r6, #0]
 80054a6:	4621      	mov	r1, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	f001 ffcd 	bl	8007448 <_sbrk_r>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	d103      	bne.n	80054ba <sbrk_aligned+0x26>
 80054b2:	f04f 34ff 	mov.w	r4, #4294967295
 80054b6:	4620      	mov	r0, r4
 80054b8:	bd70      	pop	{r4, r5, r6, pc}
 80054ba:	1cc4      	adds	r4, r0, #3
 80054bc:	f024 0403 	bic.w	r4, r4, #3
 80054c0:	42a0      	cmp	r0, r4
 80054c2:	d0f8      	beq.n	80054b6 <sbrk_aligned+0x22>
 80054c4:	1a21      	subs	r1, r4, r0
 80054c6:	4628      	mov	r0, r5
 80054c8:	f001 ffbe 	bl	8007448 <_sbrk_r>
 80054cc:	3001      	adds	r0, #1
 80054ce:	d1f2      	bne.n	80054b6 <sbrk_aligned+0x22>
 80054d0:	e7ef      	b.n	80054b2 <sbrk_aligned+0x1e>
 80054d2:	bf00      	nop
 80054d4:	200003cc 	.word	0x200003cc

080054d8 <_malloc_r>:
 80054d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054dc:	1ccd      	adds	r5, r1, #3
 80054de:	f025 0503 	bic.w	r5, r5, #3
 80054e2:	3508      	adds	r5, #8
 80054e4:	2d0c      	cmp	r5, #12
 80054e6:	bf38      	it	cc
 80054e8:	250c      	movcc	r5, #12
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	4606      	mov	r6, r0
 80054ee:	db01      	blt.n	80054f4 <_malloc_r+0x1c>
 80054f0:	42a9      	cmp	r1, r5
 80054f2:	d904      	bls.n	80054fe <_malloc_r+0x26>
 80054f4:	230c      	movs	r3, #12
 80054f6:	6033      	str	r3, [r6, #0]
 80054f8:	2000      	movs	r0, #0
 80054fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055d4 <_malloc_r+0xfc>
 8005502:	f000 f869 	bl	80055d8 <__malloc_lock>
 8005506:	f8d8 3000 	ldr.w	r3, [r8]
 800550a:	461c      	mov	r4, r3
 800550c:	bb44      	cbnz	r4, 8005560 <_malloc_r+0x88>
 800550e:	4629      	mov	r1, r5
 8005510:	4630      	mov	r0, r6
 8005512:	f7ff ffbf 	bl	8005494 <sbrk_aligned>
 8005516:	1c43      	adds	r3, r0, #1
 8005518:	4604      	mov	r4, r0
 800551a:	d158      	bne.n	80055ce <_malloc_r+0xf6>
 800551c:	f8d8 4000 	ldr.w	r4, [r8]
 8005520:	4627      	mov	r7, r4
 8005522:	2f00      	cmp	r7, #0
 8005524:	d143      	bne.n	80055ae <_malloc_r+0xd6>
 8005526:	2c00      	cmp	r4, #0
 8005528:	d04b      	beq.n	80055c2 <_malloc_r+0xea>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	4639      	mov	r1, r7
 800552e:	4630      	mov	r0, r6
 8005530:	eb04 0903 	add.w	r9, r4, r3
 8005534:	f001 ff88 	bl	8007448 <_sbrk_r>
 8005538:	4581      	cmp	r9, r0
 800553a:	d142      	bne.n	80055c2 <_malloc_r+0xea>
 800553c:	6821      	ldr	r1, [r4, #0]
 800553e:	1a6d      	subs	r5, r5, r1
 8005540:	4629      	mov	r1, r5
 8005542:	4630      	mov	r0, r6
 8005544:	f7ff ffa6 	bl	8005494 <sbrk_aligned>
 8005548:	3001      	adds	r0, #1
 800554a:	d03a      	beq.n	80055c2 <_malloc_r+0xea>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	442b      	add	r3, r5
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	f8d8 3000 	ldr.w	r3, [r8]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	bb62      	cbnz	r2, 80055b4 <_malloc_r+0xdc>
 800555a:	f8c8 7000 	str.w	r7, [r8]
 800555e:	e00f      	b.n	8005580 <_malloc_r+0xa8>
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	1b52      	subs	r2, r2, r5
 8005564:	d420      	bmi.n	80055a8 <_malloc_r+0xd0>
 8005566:	2a0b      	cmp	r2, #11
 8005568:	d917      	bls.n	800559a <_malloc_r+0xc2>
 800556a:	1961      	adds	r1, r4, r5
 800556c:	42a3      	cmp	r3, r4
 800556e:	6025      	str	r5, [r4, #0]
 8005570:	bf18      	it	ne
 8005572:	6059      	strne	r1, [r3, #4]
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	bf08      	it	eq
 8005578:	f8c8 1000 	streq.w	r1, [r8]
 800557c:	5162      	str	r2, [r4, r5]
 800557e:	604b      	str	r3, [r1, #4]
 8005580:	4630      	mov	r0, r6
 8005582:	f000 f82f 	bl	80055e4 <__malloc_unlock>
 8005586:	f104 000b 	add.w	r0, r4, #11
 800558a:	1d23      	adds	r3, r4, #4
 800558c:	f020 0007 	bic.w	r0, r0, #7
 8005590:	1ac2      	subs	r2, r0, r3
 8005592:	bf1c      	itt	ne
 8005594:	1a1b      	subne	r3, r3, r0
 8005596:	50a3      	strne	r3, [r4, r2]
 8005598:	e7af      	b.n	80054fa <_malloc_r+0x22>
 800559a:	6862      	ldr	r2, [r4, #4]
 800559c:	42a3      	cmp	r3, r4
 800559e:	bf0c      	ite	eq
 80055a0:	f8c8 2000 	streq.w	r2, [r8]
 80055a4:	605a      	strne	r2, [r3, #4]
 80055a6:	e7eb      	b.n	8005580 <_malloc_r+0xa8>
 80055a8:	4623      	mov	r3, r4
 80055aa:	6864      	ldr	r4, [r4, #4]
 80055ac:	e7ae      	b.n	800550c <_malloc_r+0x34>
 80055ae:	463c      	mov	r4, r7
 80055b0:	687f      	ldr	r7, [r7, #4]
 80055b2:	e7b6      	b.n	8005522 <_malloc_r+0x4a>
 80055b4:	461a      	mov	r2, r3
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	42a3      	cmp	r3, r4
 80055ba:	d1fb      	bne.n	80055b4 <_malloc_r+0xdc>
 80055bc:	2300      	movs	r3, #0
 80055be:	6053      	str	r3, [r2, #4]
 80055c0:	e7de      	b.n	8005580 <_malloc_r+0xa8>
 80055c2:	230c      	movs	r3, #12
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	4630      	mov	r0, r6
 80055c8:	f000 f80c 	bl	80055e4 <__malloc_unlock>
 80055cc:	e794      	b.n	80054f8 <_malloc_r+0x20>
 80055ce:	6005      	str	r5, [r0, #0]
 80055d0:	e7d6      	b.n	8005580 <_malloc_r+0xa8>
 80055d2:	bf00      	nop
 80055d4:	200003d0 	.word	0x200003d0

080055d8 <__malloc_lock>:
 80055d8:	4801      	ldr	r0, [pc, #4]	@ (80055e0 <__malloc_lock+0x8>)
 80055da:	f7ff b8b4 	b.w	8004746 <__retarget_lock_acquire_recursive>
 80055de:	bf00      	nop
 80055e0:	200003c8 	.word	0x200003c8

080055e4 <__malloc_unlock>:
 80055e4:	4801      	ldr	r0, [pc, #4]	@ (80055ec <__malloc_unlock+0x8>)
 80055e6:	f7ff b8af 	b.w	8004748 <__retarget_lock_release_recursive>
 80055ea:	bf00      	nop
 80055ec:	200003c8 	.word	0x200003c8

080055f0 <_Balloc>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	69c6      	ldr	r6, [r0, #28]
 80055f4:	4604      	mov	r4, r0
 80055f6:	460d      	mov	r5, r1
 80055f8:	b976      	cbnz	r6, 8005618 <_Balloc+0x28>
 80055fa:	2010      	movs	r0, #16
 80055fc:	f7ff ff42 	bl	8005484 <malloc>
 8005600:	4602      	mov	r2, r0
 8005602:	61e0      	str	r0, [r4, #28]
 8005604:	b920      	cbnz	r0, 8005610 <_Balloc+0x20>
 8005606:	4b18      	ldr	r3, [pc, #96]	@ (8005668 <_Balloc+0x78>)
 8005608:	4818      	ldr	r0, [pc, #96]	@ (800566c <_Balloc+0x7c>)
 800560a:	216b      	movs	r1, #107	@ 0x6b
 800560c:	f001 ff44 	bl	8007498 <__assert_func>
 8005610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005614:	6006      	str	r6, [r0, #0]
 8005616:	60c6      	str	r6, [r0, #12]
 8005618:	69e6      	ldr	r6, [r4, #28]
 800561a:	68f3      	ldr	r3, [r6, #12]
 800561c:	b183      	cbz	r3, 8005640 <_Balloc+0x50>
 800561e:	69e3      	ldr	r3, [r4, #28]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005626:	b9b8      	cbnz	r0, 8005658 <_Balloc+0x68>
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f605 	lsl.w	r6, r1, r5
 800562e:	1d72      	adds	r2, r6, #5
 8005630:	0092      	lsls	r2, r2, #2
 8005632:	4620      	mov	r0, r4
 8005634:	f001 ff4e 	bl	80074d4 <_calloc_r>
 8005638:	b160      	cbz	r0, 8005654 <_Balloc+0x64>
 800563a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800563e:	e00e      	b.n	800565e <_Balloc+0x6e>
 8005640:	2221      	movs	r2, #33	@ 0x21
 8005642:	2104      	movs	r1, #4
 8005644:	4620      	mov	r0, r4
 8005646:	f001 ff45 	bl	80074d4 <_calloc_r>
 800564a:	69e3      	ldr	r3, [r4, #28]
 800564c:	60f0      	str	r0, [r6, #12]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e4      	bne.n	800561e <_Balloc+0x2e>
 8005654:	2000      	movs	r0, #0
 8005656:	bd70      	pop	{r4, r5, r6, pc}
 8005658:	6802      	ldr	r2, [r0, #0]
 800565a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800565e:	2300      	movs	r3, #0
 8005660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005664:	e7f7      	b.n	8005656 <_Balloc+0x66>
 8005666:	bf00      	nop
 8005668:	08007d7a 	.word	0x08007d7a
 800566c:	08007dfa 	.word	0x08007dfa

08005670 <_Bfree>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	69c6      	ldr	r6, [r0, #28]
 8005674:	4605      	mov	r5, r0
 8005676:	460c      	mov	r4, r1
 8005678:	b976      	cbnz	r6, 8005698 <_Bfree+0x28>
 800567a:	2010      	movs	r0, #16
 800567c:	f7ff ff02 	bl	8005484 <malloc>
 8005680:	4602      	mov	r2, r0
 8005682:	61e8      	str	r0, [r5, #28]
 8005684:	b920      	cbnz	r0, 8005690 <_Bfree+0x20>
 8005686:	4b09      	ldr	r3, [pc, #36]	@ (80056ac <_Bfree+0x3c>)
 8005688:	4809      	ldr	r0, [pc, #36]	@ (80056b0 <_Bfree+0x40>)
 800568a:	218f      	movs	r1, #143	@ 0x8f
 800568c:	f001 ff04 	bl	8007498 <__assert_func>
 8005690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005694:	6006      	str	r6, [r0, #0]
 8005696:	60c6      	str	r6, [r0, #12]
 8005698:	b13c      	cbz	r4, 80056aa <_Bfree+0x3a>
 800569a:	69eb      	ldr	r3, [r5, #28]
 800569c:	6862      	ldr	r2, [r4, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056a4:	6021      	str	r1, [r4, #0]
 80056a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
 80056ac:	08007d7a 	.word	0x08007d7a
 80056b0:	08007dfa 	.word	0x08007dfa

080056b4 <__multadd>:
 80056b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b8:	690d      	ldr	r5, [r1, #16]
 80056ba:	4607      	mov	r7, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	461e      	mov	r6, r3
 80056c0:	f101 0c14 	add.w	ip, r1, #20
 80056c4:	2000      	movs	r0, #0
 80056c6:	f8dc 3000 	ldr.w	r3, [ip]
 80056ca:	b299      	uxth	r1, r3
 80056cc:	fb02 6101 	mla	r1, r2, r1, r6
 80056d0:	0c1e      	lsrs	r6, r3, #16
 80056d2:	0c0b      	lsrs	r3, r1, #16
 80056d4:	fb02 3306 	mla	r3, r2, r6, r3
 80056d8:	b289      	uxth	r1, r1
 80056da:	3001      	adds	r0, #1
 80056dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056e0:	4285      	cmp	r5, r0
 80056e2:	f84c 1b04 	str.w	r1, [ip], #4
 80056e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056ea:	dcec      	bgt.n	80056c6 <__multadd+0x12>
 80056ec:	b30e      	cbz	r6, 8005732 <__multadd+0x7e>
 80056ee:	68a3      	ldr	r3, [r4, #8]
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dc19      	bgt.n	8005728 <__multadd+0x74>
 80056f4:	6861      	ldr	r1, [r4, #4]
 80056f6:	4638      	mov	r0, r7
 80056f8:	3101      	adds	r1, #1
 80056fa:	f7ff ff79 	bl	80055f0 <_Balloc>
 80056fe:	4680      	mov	r8, r0
 8005700:	b928      	cbnz	r0, 800570e <__multadd+0x5a>
 8005702:	4602      	mov	r2, r0
 8005704:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <__multadd+0x84>)
 8005706:	480d      	ldr	r0, [pc, #52]	@ (800573c <__multadd+0x88>)
 8005708:	21ba      	movs	r1, #186	@ 0xba
 800570a:	f001 fec5 	bl	8007498 <__assert_func>
 800570e:	6922      	ldr	r2, [r4, #16]
 8005710:	3202      	adds	r2, #2
 8005712:	f104 010c 	add.w	r1, r4, #12
 8005716:	0092      	lsls	r2, r2, #2
 8005718:	300c      	adds	r0, #12
 800571a:	f001 fea5 	bl	8007468 <memcpy>
 800571e:	4621      	mov	r1, r4
 8005720:	4638      	mov	r0, r7
 8005722:	f7ff ffa5 	bl	8005670 <_Bfree>
 8005726:	4644      	mov	r4, r8
 8005728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800572c:	3501      	adds	r5, #1
 800572e:	615e      	str	r6, [r3, #20]
 8005730:	6125      	str	r5, [r4, #16]
 8005732:	4620      	mov	r0, r4
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005738:	08007de9 	.word	0x08007de9
 800573c:	08007dfa 	.word	0x08007dfa

08005740 <__s2b>:
 8005740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005744:	460c      	mov	r4, r1
 8005746:	4615      	mov	r5, r2
 8005748:	461f      	mov	r7, r3
 800574a:	2209      	movs	r2, #9
 800574c:	3308      	adds	r3, #8
 800574e:	4606      	mov	r6, r0
 8005750:	fb93 f3f2 	sdiv	r3, r3, r2
 8005754:	2100      	movs	r1, #0
 8005756:	2201      	movs	r2, #1
 8005758:	429a      	cmp	r2, r3
 800575a:	db09      	blt.n	8005770 <__s2b+0x30>
 800575c:	4630      	mov	r0, r6
 800575e:	f7ff ff47 	bl	80055f0 <_Balloc>
 8005762:	b940      	cbnz	r0, 8005776 <__s2b+0x36>
 8005764:	4602      	mov	r2, r0
 8005766:	4b19      	ldr	r3, [pc, #100]	@ (80057cc <__s2b+0x8c>)
 8005768:	4819      	ldr	r0, [pc, #100]	@ (80057d0 <__s2b+0x90>)
 800576a:	21d3      	movs	r1, #211	@ 0xd3
 800576c:	f001 fe94 	bl	8007498 <__assert_func>
 8005770:	0052      	lsls	r2, r2, #1
 8005772:	3101      	adds	r1, #1
 8005774:	e7f0      	b.n	8005758 <__s2b+0x18>
 8005776:	9b08      	ldr	r3, [sp, #32]
 8005778:	6143      	str	r3, [r0, #20]
 800577a:	2d09      	cmp	r5, #9
 800577c:	f04f 0301 	mov.w	r3, #1
 8005780:	6103      	str	r3, [r0, #16]
 8005782:	dd16      	ble.n	80057b2 <__s2b+0x72>
 8005784:	f104 0909 	add.w	r9, r4, #9
 8005788:	46c8      	mov	r8, r9
 800578a:	442c      	add	r4, r5
 800578c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005790:	4601      	mov	r1, r0
 8005792:	3b30      	subs	r3, #48	@ 0x30
 8005794:	220a      	movs	r2, #10
 8005796:	4630      	mov	r0, r6
 8005798:	f7ff ff8c 	bl	80056b4 <__multadd>
 800579c:	45a0      	cmp	r8, r4
 800579e:	d1f5      	bne.n	800578c <__s2b+0x4c>
 80057a0:	f1a5 0408 	sub.w	r4, r5, #8
 80057a4:	444c      	add	r4, r9
 80057a6:	1b2d      	subs	r5, r5, r4
 80057a8:	1963      	adds	r3, r4, r5
 80057aa:	42bb      	cmp	r3, r7
 80057ac:	db04      	blt.n	80057b8 <__s2b+0x78>
 80057ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b2:	340a      	adds	r4, #10
 80057b4:	2509      	movs	r5, #9
 80057b6:	e7f6      	b.n	80057a6 <__s2b+0x66>
 80057b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80057bc:	4601      	mov	r1, r0
 80057be:	3b30      	subs	r3, #48	@ 0x30
 80057c0:	220a      	movs	r2, #10
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7ff ff76 	bl	80056b4 <__multadd>
 80057c8:	e7ee      	b.n	80057a8 <__s2b+0x68>
 80057ca:	bf00      	nop
 80057cc:	08007de9 	.word	0x08007de9
 80057d0:	08007dfa 	.word	0x08007dfa

080057d4 <__hi0bits>:
 80057d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80057d8:	4603      	mov	r3, r0
 80057da:	bf36      	itet	cc
 80057dc:	0403      	lslcc	r3, r0, #16
 80057de:	2000      	movcs	r0, #0
 80057e0:	2010      	movcc	r0, #16
 80057e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057e6:	bf3c      	itt	cc
 80057e8:	021b      	lslcc	r3, r3, #8
 80057ea:	3008      	addcc	r0, #8
 80057ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057f0:	bf3c      	itt	cc
 80057f2:	011b      	lslcc	r3, r3, #4
 80057f4:	3004      	addcc	r0, #4
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fa:	bf3c      	itt	cc
 80057fc:	009b      	lslcc	r3, r3, #2
 80057fe:	3002      	addcc	r0, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	db05      	blt.n	8005810 <__hi0bits+0x3c>
 8005804:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005808:	f100 0001 	add.w	r0, r0, #1
 800580c:	bf08      	it	eq
 800580e:	2020      	moveq	r0, #32
 8005810:	4770      	bx	lr

08005812 <__lo0bits>:
 8005812:	6803      	ldr	r3, [r0, #0]
 8005814:	4602      	mov	r2, r0
 8005816:	f013 0007 	ands.w	r0, r3, #7
 800581a:	d00b      	beq.n	8005834 <__lo0bits+0x22>
 800581c:	07d9      	lsls	r1, r3, #31
 800581e:	d421      	bmi.n	8005864 <__lo0bits+0x52>
 8005820:	0798      	lsls	r0, r3, #30
 8005822:	bf49      	itett	mi
 8005824:	085b      	lsrmi	r3, r3, #1
 8005826:	089b      	lsrpl	r3, r3, #2
 8005828:	2001      	movmi	r0, #1
 800582a:	6013      	strmi	r3, [r2, #0]
 800582c:	bf5c      	itt	pl
 800582e:	6013      	strpl	r3, [r2, #0]
 8005830:	2002      	movpl	r0, #2
 8005832:	4770      	bx	lr
 8005834:	b299      	uxth	r1, r3
 8005836:	b909      	cbnz	r1, 800583c <__lo0bits+0x2a>
 8005838:	0c1b      	lsrs	r3, r3, #16
 800583a:	2010      	movs	r0, #16
 800583c:	b2d9      	uxtb	r1, r3
 800583e:	b909      	cbnz	r1, 8005844 <__lo0bits+0x32>
 8005840:	3008      	adds	r0, #8
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	0719      	lsls	r1, r3, #28
 8005846:	bf04      	itt	eq
 8005848:	091b      	lsreq	r3, r3, #4
 800584a:	3004      	addeq	r0, #4
 800584c:	0799      	lsls	r1, r3, #30
 800584e:	bf04      	itt	eq
 8005850:	089b      	lsreq	r3, r3, #2
 8005852:	3002      	addeq	r0, #2
 8005854:	07d9      	lsls	r1, r3, #31
 8005856:	d403      	bmi.n	8005860 <__lo0bits+0x4e>
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	f100 0001 	add.w	r0, r0, #1
 800585e:	d003      	beq.n	8005868 <__lo0bits+0x56>
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	4770      	bx	lr
 8005864:	2000      	movs	r0, #0
 8005866:	4770      	bx	lr
 8005868:	2020      	movs	r0, #32
 800586a:	4770      	bx	lr

0800586c <__i2b>:
 800586c:	b510      	push	{r4, lr}
 800586e:	460c      	mov	r4, r1
 8005870:	2101      	movs	r1, #1
 8005872:	f7ff febd 	bl	80055f0 <_Balloc>
 8005876:	4602      	mov	r2, r0
 8005878:	b928      	cbnz	r0, 8005886 <__i2b+0x1a>
 800587a:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <__i2b+0x24>)
 800587c:	4805      	ldr	r0, [pc, #20]	@ (8005894 <__i2b+0x28>)
 800587e:	f240 1145 	movw	r1, #325	@ 0x145
 8005882:	f001 fe09 	bl	8007498 <__assert_func>
 8005886:	2301      	movs	r3, #1
 8005888:	6144      	str	r4, [r0, #20]
 800588a:	6103      	str	r3, [r0, #16]
 800588c:	bd10      	pop	{r4, pc}
 800588e:	bf00      	nop
 8005890:	08007de9 	.word	0x08007de9
 8005894:	08007dfa 	.word	0x08007dfa

08005898 <__multiply>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	4614      	mov	r4, r2
 800589e:	690a      	ldr	r2, [r1, #16]
 80058a0:	6923      	ldr	r3, [r4, #16]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	bfa8      	it	ge
 80058a6:	4623      	movge	r3, r4
 80058a8:	460f      	mov	r7, r1
 80058aa:	bfa4      	itt	ge
 80058ac:	460c      	movge	r4, r1
 80058ae:	461f      	movge	r7, r3
 80058b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80058b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80058b8:	68a3      	ldr	r3, [r4, #8]
 80058ba:	6861      	ldr	r1, [r4, #4]
 80058bc:	eb0a 0609 	add.w	r6, sl, r9
 80058c0:	42b3      	cmp	r3, r6
 80058c2:	b085      	sub	sp, #20
 80058c4:	bfb8      	it	lt
 80058c6:	3101      	addlt	r1, #1
 80058c8:	f7ff fe92 	bl	80055f0 <_Balloc>
 80058cc:	b930      	cbnz	r0, 80058dc <__multiply+0x44>
 80058ce:	4602      	mov	r2, r0
 80058d0:	4b44      	ldr	r3, [pc, #272]	@ (80059e4 <__multiply+0x14c>)
 80058d2:	4845      	ldr	r0, [pc, #276]	@ (80059e8 <__multiply+0x150>)
 80058d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80058d8:	f001 fdde 	bl	8007498 <__assert_func>
 80058dc:	f100 0514 	add.w	r5, r0, #20
 80058e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80058e4:	462b      	mov	r3, r5
 80058e6:	2200      	movs	r2, #0
 80058e8:	4543      	cmp	r3, r8
 80058ea:	d321      	bcc.n	8005930 <__multiply+0x98>
 80058ec:	f107 0114 	add.w	r1, r7, #20
 80058f0:	f104 0214 	add.w	r2, r4, #20
 80058f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80058f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80058fc:	9302      	str	r3, [sp, #8]
 80058fe:	1b13      	subs	r3, r2, r4
 8005900:	3b15      	subs	r3, #21
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	3304      	adds	r3, #4
 8005908:	f104 0715 	add.w	r7, r4, #21
 800590c:	42ba      	cmp	r2, r7
 800590e:	bf38      	it	cc
 8005910:	2304      	movcc	r3, #4
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	9b02      	ldr	r3, [sp, #8]
 8005916:	9103      	str	r1, [sp, #12]
 8005918:	428b      	cmp	r3, r1
 800591a:	d80c      	bhi.n	8005936 <__multiply+0x9e>
 800591c:	2e00      	cmp	r6, #0
 800591e:	dd03      	ble.n	8005928 <__multiply+0x90>
 8005920:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005924:	2b00      	cmp	r3, #0
 8005926:	d05b      	beq.n	80059e0 <__multiply+0x148>
 8005928:	6106      	str	r6, [r0, #16]
 800592a:	b005      	add	sp, #20
 800592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005930:	f843 2b04 	str.w	r2, [r3], #4
 8005934:	e7d8      	b.n	80058e8 <__multiply+0x50>
 8005936:	f8b1 a000 	ldrh.w	sl, [r1]
 800593a:	f1ba 0f00 	cmp.w	sl, #0
 800593e:	d024      	beq.n	800598a <__multiply+0xf2>
 8005940:	f104 0e14 	add.w	lr, r4, #20
 8005944:	46a9      	mov	r9, r5
 8005946:	f04f 0c00 	mov.w	ip, #0
 800594a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800594e:	f8d9 3000 	ldr.w	r3, [r9]
 8005952:	fa1f fb87 	uxth.w	fp, r7
 8005956:	b29b      	uxth	r3, r3
 8005958:	fb0a 330b 	mla	r3, sl, fp, r3
 800595c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005960:	f8d9 7000 	ldr.w	r7, [r9]
 8005964:	4463      	add	r3, ip
 8005966:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800596a:	fb0a c70b 	mla	r7, sl, fp, ip
 800596e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005972:	b29b      	uxth	r3, r3
 8005974:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005978:	4572      	cmp	r2, lr
 800597a:	f849 3b04 	str.w	r3, [r9], #4
 800597e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005982:	d8e2      	bhi.n	800594a <__multiply+0xb2>
 8005984:	9b01      	ldr	r3, [sp, #4]
 8005986:	f845 c003 	str.w	ip, [r5, r3]
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005990:	3104      	adds	r1, #4
 8005992:	f1b9 0f00 	cmp.w	r9, #0
 8005996:	d021      	beq.n	80059dc <__multiply+0x144>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	f104 0c14 	add.w	ip, r4, #20
 800599e:	46ae      	mov	lr, r5
 80059a0:	f04f 0a00 	mov.w	sl, #0
 80059a4:	f8bc b000 	ldrh.w	fp, [ip]
 80059a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80059ac:	fb09 770b 	mla	r7, r9, fp, r7
 80059b0:	4457      	add	r7, sl
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80059b8:	f84e 3b04 	str.w	r3, [lr], #4
 80059bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059c4:	f8be 3000 	ldrh.w	r3, [lr]
 80059c8:	fb09 330a 	mla	r3, r9, sl, r3
 80059cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80059d0:	4562      	cmp	r2, ip
 80059d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059d6:	d8e5      	bhi.n	80059a4 <__multiply+0x10c>
 80059d8:	9f01      	ldr	r7, [sp, #4]
 80059da:	51eb      	str	r3, [r5, r7]
 80059dc:	3504      	adds	r5, #4
 80059de:	e799      	b.n	8005914 <__multiply+0x7c>
 80059e0:	3e01      	subs	r6, #1
 80059e2:	e79b      	b.n	800591c <__multiply+0x84>
 80059e4:	08007de9 	.word	0x08007de9
 80059e8:	08007dfa 	.word	0x08007dfa

080059ec <__pow5mult>:
 80059ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f0:	4615      	mov	r5, r2
 80059f2:	f012 0203 	ands.w	r2, r2, #3
 80059f6:	4607      	mov	r7, r0
 80059f8:	460e      	mov	r6, r1
 80059fa:	d007      	beq.n	8005a0c <__pow5mult+0x20>
 80059fc:	4c25      	ldr	r4, [pc, #148]	@ (8005a94 <__pow5mult+0xa8>)
 80059fe:	3a01      	subs	r2, #1
 8005a00:	2300      	movs	r3, #0
 8005a02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a06:	f7ff fe55 	bl	80056b4 <__multadd>
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	10ad      	asrs	r5, r5, #2
 8005a0e:	d03d      	beq.n	8005a8c <__pow5mult+0xa0>
 8005a10:	69fc      	ldr	r4, [r7, #28]
 8005a12:	b97c      	cbnz	r4, 8005a34 <__pow5mult+0x48>
 8005a14:	2010      	movs	r0, #16
 8005a16:	f7ff fd35 	bl	8005484 <malloc>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	61f8      	str	r0, [r7, #28]
 8005a1e:	b928      	cbnz	r0, 8005a2c <__pow5mult+0x40>
 8005a20:	4b1d      	ldr	r3, [pc, #116]	@ (8005a98 <__pow5mult+0xac>)
 8005a22:	481e      	ldr	r0, [pc, #120]	@ (8005a9c <__pow5mult+0xb0>)
 8005a24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005a28:	f001 fd36 	bl	8007498 <__assert_func>
 8005a2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a30:	6004      	str	r4, [r0, #0]
 8005a32:	60c4      	str	r4, [r0, #12]
 8005a34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005a38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a3c:	b94c      	cbnz	r4, 8005a52 <__pow5mult+0x66>
 8005a3e:	f240 2171 	movw	r1, #625	@ 0x271
 8005a42:	4638      	mov	r0, r7
 8005a44:	f7ff ff12 	bl	800586c <__i2b>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a4e:	4604      	mov	r4, r0
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	f04f 0900 	mov.w	r9, #0
 8005a56:	07eb      	lsls	r3, r5, #31
 8005a58:	d50a      	bpl.n	8005a70 <__pow5mult+0x84>
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f7ff ff1a 	bl	8005898 <__multiply>
 8005a64:	4631      	mov	r1, r6
 8005a66:	4680      	mov	r8, r0
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f7ff fe01 	bl	8005670 <_Bfree>
 8005a6e:	4646      	mov	r6, r8
 8005a70:	106d      	asrs	r5, r5, #1
 8005a72:	d00b      	beq.n	8005a8c <__pow5mult+0xa0>
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	b938      	cbnz	r0, 8005a88 <__pow5mult+0x9c>
 8005a78:	4622      	mov	r2, r4
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	f7ff ff0b 	bl	8005898 <__multiply>
 8005a82:	6020      	str	r0, [r4, #0]
 8005a84:	f8c0 9000 	str.w	r9, [r0]
 8005a88:	4604      	mov	r4, r0
 8005a8a:	e7e4      	b.n	8005a56 <__pow5mult+0x6a>
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a92:	bf00      	nop
 8005a94:	08007e54 	.word	0x08007e54
 8005a98:	08007d7a 	.word	0x08007d7a
 8005a9c:	08007dfa 	.word	0x08007dfa

08005aa0 <__lshift>:
 8005aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	6849      	ldr	r1, [r1, #4]
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	4691      	mov	r9, r2
 8005ab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ab8:	f108 0601 	add.w	r6, r8, #1
 8005abc:	42b3      	cmp	r3, r6
 8005abe:	db0b      	blt.n	8005ad8 <__lshift+0x38>
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f7ff fd95 	bl	80055f0 <_Balloc>
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	b948      	cbnz	r0, 8005ade <__lshift+0x3e>
 8005aca:	4602      	mov	r2, r0
 8005acc:	4b28      	ldr	r3, [pc, #160]	@ (8005b70 <__lshift+0xd0>)
 8005ace:	4829      	ldr	r0, [pc, #164]	@ (8005b74 <__lshift+0xd4>)
 8005ad0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005ad4:	f001 fce0 	bl	8007498 <__assert_func>
 8005ad8:	3101      	adds	r1, #1
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	e7ee      	b.n	8005abc <__lshift+0x1c>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f100 0114 	add.w	r1, r0, #20
 8005ae4:	f100 0210 	add.w	r2, r0, #16
 8005ae8:	4618      	mov	r0, r3
 8005aea:	4553      	cmp	r3, sl
 8005aec:	db33      	blt.n	8005b56 <__lshift+0xb6>
 8005aee:	6920      	ldr	r0, [r4, #16]
 8005af0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005af4:	f104 0314 	add.w	r3, r4, #20
 8005af8:	f019 091f 	ands.w	r9, r9, #31
 8005afc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b04:	d02b      	beq.n	8005b5e <__lshift+0xbe>
 8005b06:	f1c9 0e20 	rsb	lr, r9, #32
 8005b0a:	468a      	mov	sl, r1
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	fa00 f009 	lsl.w	r0, r0, r9
 8005b14:	4310      	orrs	r0, r2
 8005b16:	f84a 0b04 	str.w	r0, [sl], #4
 8005b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b1e:	459c      	cmp	ip, r3
 8005b20:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b24:	d8f3      	bhi.n	8005b0e <__lshift+0x6e>
 8005b26:	ebac 0304 	sub.w	r3, ip, r4
 8005b2a:	3b15      	subs	r3, #21
 8005b2c:	f023 0303 	bic.w	r3, r3, #3
 8005b30:	3304      	adds	r3, #4
 8005b32:	f104 0015 	add.w	r0, r4, #21
 8005b36:	4584      	cmp	ip, r0
 8005b38:	bf38      	it	cc
 8005b3a:	2304      	movcc	r3, #4
 8005b3c:	50ca      	str	r2, [r1, r3]
 8005b3e:	b10a      	cbz	r2, 8005b44 <__lshift+0xa4>
 8005b40:	f108 0602 	add.w	r6, r8, #2
 8005b44:	3e01      	subs	r6, #1
 8005b46:	4638      	mov	r0, r7
 8005b48:	612e      	str	r6, [r5, #16]
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	f7ff fd90 	bl	8005670 <_Bfree>
 8005b50:	4628      	mov	r0, r5
 8005b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b56:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	e7c5      	b.n	8005aea <__lshift+0x4a>
 8005b5e:	3904      	subs	r1, #4
 8005b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b64:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b68:	459c      	cmp	ip, r3
 8005b6a:	d8f9      	bhi.n	8005b60 <__lshift+0xc0>
 8005b6c:	e7ea      	b.n	8005b44 <__lshift+0xa4>
 8005b6e:	bf00      	nop
 8005b70:	08007de9 	.word	0x08007de9
 8005b74:	08007dfa 	.word	0x08007dfa

08005b78 <__mcmp>:
 8005b78:	690a      	ldr	r2, [r1, #16]
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	6900      	ldr	r0, [r0, #16]
 8005b7e:	1a80      	subs	r0, r0, r2
 8005b80:	b530      	push	{r4, r5, lr}
 8005b82:	d10e      	bne.n	8005ba2 <__mcmp+0x2a>
 8005b84:	3314      	adds	r3, #20
 8005b86:	3114      	adds	r1, #20
 8005b88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b98:	4295      	cmp	r5, r2
 8005b9a:	d003      	beq.n	8005ba4 <__mcmp+0x2c>
 8005b9c:	d205      	bcs.n	8005baa <__mcmp+0x32>
 8005b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba2:	bd30      	pop	{r4, r5, pc}
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d3f3      	bcc.n	8005b90 <__mcmp+0x18>
 8005ba8:	e7fb      	b.n	8005ba2 <__mcmp+0x2a>
 8005baa:	2001      	movs	r0, #1
 8005bac:	e7f9      	b.n	8005ba2 <__mcmp+0x2a>
	...

08005bb0 <__mdiff>:
 8005bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	4689      	mov	r9, r1
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	4611      	mov	r1, r2
 8005bba:	4648      	mov	r0, r9
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	f7ff ffdb 	bl	8005b78 <__mcmp>
 8005bc2:	1e05      	subs	r5, r0, #0
 8005bc4:	d112      	bne.n	8005bec <__mdiff+0x3c>
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f7ff fd11 	bl	80055f0 <_Balloc>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	b928      	cbnz	r0, 8005bde <__mdiff+0x2e>
 8005bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8005cd0 <__mdiff+0x120>)
 8005bd4:	f240 2137 	movw	r1, #567	@ 0x237
 8005bd8:	483e      	ldr	r0, [pc, #248]	@ (8005cd4 <__mdiff+0x124>)
 8005bda:	f001 fc5d 	bl	8007498 <__assert_func>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005be4:	4610      	mov	r0, r2
 8005be6:	b003      	add	sp, #12
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	bfbc      	itt	lt
 8005bee:	464b      	movlt	r3, r9
 8005bf0:	46a1      	movlt	r9, r4
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005bf8:	bfba      	itte	lt
 8005bfa:	461c      	movlt	r4, r3
 8005bfc:	2501      	movlt	r5, #1
 8005bfe:	2500      	movge	r5, #0
 8005c00:	f7ff fcf6 	bl	80055f0 <_Balloc>
 8005c04:	4602      	mov	r2, r0
 8005c06:	b918      	cbnz	r0, 8005c10 <__mdiff+0x60>
 8005c08:	4b31      	ldr	r3, [pc, #196]	@ (8005cd0 <__mdiff+0x120>)
 8005c0a:	f240 2145 	movw	r1, #581	@ 0x245
 8005c0e:	e7e3      	b.n	8005bd8 <__mdiff+0x28>
 8005c10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c14:	6926      	ldr	r6, [r4, #16]
 8005c16:	60c5      	str	r5, [r0, #12]
 8005c18:	f109 0310 	add.w	r3, r9, #16
 8005c1c:	f109 0514 	add.w	r5, r9, #20
 8005c20:	f104 0e14 	add.w	lr, r4, #20
 8005c24:	f100 0b14 	add.w	fp, r0, #20
 8005c28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005c2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	46d9      	mov	r9, fp
 8005c34:	f04f 0c00 	mov.w	ip, #0
 8005c38:	9b01      	ldr	r3, [sp, #4]
 8005c3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005c3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	fa1f f38a 	uxth.w	r3, sl
 8005c48:	4619      	mov	r1, r3
 8005c4a:	b283      	uxth	r3, r0
 8005c4c:	1acb      	subs	r3, r1, r3
 8005c4e:	0c00      	lsrs	r0, r0, #16
 8005c50:	4463      	add	r3, ip
 8005c52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005c56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005c60:	4576      	cmp	r6, lr
 8005c62:	f849 3b04 	str.w	r3, [r9], #4
 8005c66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c6a:	d8e5      	bhi.n	8005c38 <__mdiff+0x88>
 8005c6c:	1b33      	subs	r3, r6, r4
 8005c6e:	3b15      	subs	r3, #21
 8005c70:	f023 0303 	bic.w	r3, r3, #3
 8005c74:	3415      	adds	r4, #21
 8005c76:	3304      	adds	r3, #4
 8005c78:	42a6      	cmp	r6, r4
 8005c7a:	bf38      	it	cc
 8005c7c:	2304      	movcc	r3, #4
 8005c7e:	441d      	add	r5, r3
 8005c80:	445b      	add	r3, fp
 8005c82:	461e      	mov	r6, r3
 8005c84:	462c      	mov	r4, r5
 8005c86:	4544      	cmp	r4, r8
 8005c88:	d30e      	bcc.n	8005ca8 <__mdiff+0xf8>
 8005c8a:	f108 0103 	add.w	r1, r8, #3
 8005c8e:	1b49      	subs	r1, r1, r5
 8005c90:	f021 0103 	bic.w	r1, r1, #3
 8005c94:	3d03      	subs	r5, #3
 8005c96:	45a8      	cmp	r8, r5
 8005c98:	bf38      	it	cc
 8005c9a:	2100      	movcc	r1, #0
 8005c9c:	440b      	add	r3, r1
 8005c9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ca2:	b191      	cbz	r1, 8005cca <__mdiff+0x11a>
 8005ca4:	6117      	str	r7, [r2, #16]
 8005ca6:	e79d      	b.n	8005be4 <__mdiff+0x34>
 8005ca8:	f854 1b04 	ldr.w	r1, [r4], #4
 8005cac:	46e6      	mov	lr, ip
 8005cae:	0c08      	lsrs	r0, r1, #16
 8005cb0:	fa1c fc81 	uxtah	ip, ip, r1
 8005cb4:	4471      	add	r1, lr
 8005cb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005cba:	b289      	uxth	r1, r1
 8005cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005cc0:	f846 1b04 	str.w	r1, [r6], #4
 8005cc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cc8:	e7dd      	b.n	8005c86 <__mdiff+0xd6>
 8005cca:	3f01      	subs	r7, #1
 8005ccc:	e7e7      	b.n	8005c9e <__mdiff+0xee>
 8005cce:	bf00      	nop
 8005cd0:	08007de9 	.word	0x08007de9
 8005cd4:	08007dfa 	.word	0x08007dfa

08005cd8 <__ulp>:
 8005cd8:	b082      	sub	sp, #8
 8005cda:	ed8d 0b00 	vstr	d0, [sp]
 8005cde:	9a01      	ldr	r2, [sp, #4]
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8005d20 <__ulp+0x48>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	dc08      	bgt.n	8005cfe <__ulp+0x26>
 8005cec:	425b      	negs	r3, r3
 8005cee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005cf2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005cf6:	da04      	bge.n	8005d02 <__ulp+0x2a>
 8005cf8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005cfc:	4113      	asrs	r3, r2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	e008      	b.n	8005d14 <__ulp+0x3c>
 8005d02:	f1a2 0314 	sub.w	r3, r2, #20
 8005d06:	2b1e      	cmp	r3, #30
 8005d08:	bfda      	itte	le
 8005d0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005d0e:	40da      	lsrle	r2, r3
 8005d10:	2201      	movgt	r2, #1
 8005d12:	2300      	movs	r3, #0
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	ec41 0b10 	vmov	d0, r0, r1
 8005d1c:	b002      	add	sp, #8
 8005d1e:	4770      	bx	lr
 8005d20:	7ff00000 	.word	0x7ff00000

08005d24 <__b2d>:
 8005d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d28:	6906      	ldr	r6, [r0, #16]
 8005d2a:	f100 0814 	add.w	r8, r0, #20
 8005d2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8005d32:	1f37      	subs	r7, r6, #4
 8005d34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f7ff fd4b 	bl	80057d4 <__hi0bits>
 8005d3e:	f1c0 0320 	rsb	r3, r0, #32
 8005d42:	280a      	cmp	r0, #10
 8005d44:	600b      	str	r3, [r1, #0]
 8005d46:	491b      	ldr	r1, [pc, #108]	@ (8005db4 <__b2d+0x90>)
 8005d48:	dc15      	bgt.n	8005d76 <__b2d+0x52>
 8005d4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8005d4e:	fa22 f30c 	lsr.w	r3, r2, ip
 8005d52:	45b8      	cmp	r8, r7
 8005d54:	ea43 0501 	orr.w	r5, r3, r1
 8005d58:	bf34      	ite	cc
 8005d5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005d5e:	2300      	movcs	r3, #0
 8005d60:	3015      	adds	r0, #21
 8005d62:	fa02 f000 	lsl.w	r0, r2, r0
 8005d66:	fa23 f30c 	lsr.w	r3, r3, ip
 8005d6a:	4303      	orrs	r3, r0
 8005d6c:	461c      	mov	r4, r3
 8005d6e:	ec45 4b10 	vmov	d0, r4, r5
 8005d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d76:	45b8      	cmp	r8, r7
 8005d78:	bf3a      	itte	cc
 8005d7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005d7e:	f1a6 0708 	subcc.w	r7, r6, #8
 8005d82:	2300      	movcs	r3, #0
 8005d84:	380b      	subs	r0, #11
 8005d86:	d012      	beq.n	8005dae <__b2d+0x8a>
 8005d88:	f1c0 0120 	rsb	r1, r0, #32
 8005d8c:	fa23 f401 	lsr.w	r4, r3, r1
 8005d90:	4082      	lsls	r2, r0
 8005d92:	4322      	orrs	r2, r4
 8005d94:	4547      	cmp	r7, r8
 8005d96:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8005d9a:	bf8c      	ite	hi
 8005d9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005da0:	2200      	movls	r2, #0
 8005da2:	4083      	lsls	r3, r0
 8005da4:	40ca      	lsrs	r2, r1
 8005da6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005daa:	4313      	orrs	r3, r2
 8005dac:	e7de      	b.n	8005d6c <__b2d+0x48>
 8005dae:	ea42 0501 	orr.w	r5, r2, r1
 8005db2:	e7db      	b.n	8005d6c <__b2d+0x48>
 8005db4:	3ff00000 	.word	0x3ff00000

08005db8 <__d2b>:
 8005db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	460f      	mov	r7, r1
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	ec59 8b10 	vmov	r8, r9, d0
 8005dc4:	4616      	mov	r6, r2
 8005dc6:	f7ff fc13 	bl	80055f0 <_Balloc>
 8005dca:	4604      	mov	r4, r0
 8005dcc:	b930      	cbnz	r0, 8005ddc <__d2b+0x24>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	4b23      	ldr	r3, [pc, #140]	@ (8005e60 <__d2b+0xa8>)
 8005dd2:	4824      	ldr	r0, [pc, #144]	@ (8005e64 <__d2b+0xac>)
 8005dd4:	f240 310f 	movw	r1, #783	@ 0x30f
 8005dd8:	f001 fb5e 	bl	8007498 <__assert_func>
 8005ddc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005de4:	b10d      	cbz	r5, 8005dea <__d2b+0x32>
 8005de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dea:	9301      	str	r3, [sp, #4]
 8005dec:	f1b8 0300 	subs.w	r3, r8, #0
 8005df0:	d023      	beq.n	8005e3a <__d2b+0x82>
 8005df2:	4668      	mov	r0, sp
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	f7ff fd0c 	bl	8005812 <__lo0bits>
 8005dfa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005dfe:	b1d0      	cbz	r0, 8005e36 <__d2b+0x7e>
 8005e00:	f1c0 0320 	rsb	r3, r0, #32
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	40c2      	lsrs	r2, r0
 8005e0c:	6163      	str	r3, [r4, #20]
 8005e0e:	9201      	str	r2, [sp, #4]
 8005e10:	9b01      	ldr	r3, [sp, #4]
 8005e12:	61a3      	str	r3, [r4, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bf0c      	ite	eq
 8005e18:	2201      	moveq	r2, #1
 8005e1a:	2202      	movne	r2, #2
 8005e1c:	6122      	str	r2, [r4, #16]
 8005e1e:	b1a5      	cbz	r5, 8005e4a <__d2b+0x92>
 8005e20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005e24:	4405      	add	r5, r0
 8005e26:	603d      	str	r5, [r7, #0]
 8005e28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005e2c:	6030      	str	r0, [r6, #0]
 8005e2e:	4620      	mov	r0, r4
 8005e30:	b003      	add	sp, #12
 8005e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e36:	6161      	str	r1, [r4, #20]
 8005e38:	e7ea      	b.n	8005e10 <__d2b+0x58>
 8005e3a:	a801      	add	r0, sp, #4
 8005e3c:	f7ff fce9 	bl	8005812 <__lo0bits>
 8005e40:	9b01      	ldr	r3, [sp, #4]
 8005e42:	6163      	str	r3, [r4, #20]
 8005e44:	3020      	adds	r0, #32
 8005e46:	2201      	movs	r2, #1
 8005e48:	e7e8      	b.n	8005e1c <__d2b+0x64>
 8005e4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005e52:	6038      	str	r0, [r7, #0]
 8005e54:	6918      	ldr	r0, [r3, #16]
 8005e56:	f7ff fcbd 	bl	80057d4 <__hi0bits>
 8005e5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e5e:	e7e5      	b.n	8005e2c <__d2b+0x74>
 8005e60:	08007de9 	.word	0x08007de9
 8005e64:	08007dfa 	.word	0x08007dfa

08005e68 <__ratio>:
 8005e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	e9cd 1000 	strd	r1, r0, [sp]
 8005e72:	a902      	add	r1, sp, #8
 8005e74:	f7ff ff56 	bl	8005d24 <__b2d>
 8005e78:	9800      	ldr	r0, [sp, #0]
 8005e7a:	a903      	add	r1, sp, #12
 8005e7c:	ec55 4b10 	vmov	r4, r5, d0
 8005e80:	f7ff ff50 	bl	8005d24 <__b2d>
 8005e84:	9b01      	ldr	r3, [sp, #4]
 8005e86:	6919      	ldr	r1, [r3, #16]
 8005e88:	9b00      	ldr	r3, [sp, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	1ac9      	subs	r1, r1, r3
 8005e8e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	ec5b ab10 	vmov	sl, fp, d0
 8005e98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfce      	itee	gt
 8005ea0:	462a      	movgt	r2, r5
 8005ea2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005ea6:	465a      	movle	r2, fp
 8005ea8:	462f      	mov	r7, r5
 8005eaa:	46d9      	mov	r9, fp
 8005eac:	bfcc      	ite	gt
 8005eae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005eb2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	4652      	mov	r2, sl
 8005eba:	4620      	mov	r0, r4
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f7fa fccd 	bl	800085c <__aeabi_ddiv>
 8005ec2:	ec41 0b10 	vmov	d0, r0, r1
 8005ec6:	b005      	add	sp, #20
 8005ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ecc <__copybits>:
 8005ecc:	3901      	subs	r1, #1
 8005ece:	b570      	push	{r4, r5, r6, lr}
 8005ed0:	1149      	asrs	r1, r1, #5
 8005ed2:	6914      	ldr	r4, [r2, #16]
 8005ed4:	3101      	adds	r1, #1
 8005ed6:	f102 0314 	add.w	r3, r2, #20
 8005eda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005ede:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005ee2:	1f05      	subs	r5, r0, #4
 8005ee4:	42a3      	cmp	r3, r4
 8005ee6:	d30c      	bcc.n	8005f02 <__copybits+0x36>
 8005ee8:	1aa3      	subs	r3, r4, r2
 8005eea:	3b11      	subs	r3, #17
 8005eec:	f023 0303 	bic.w	r3, r3, #3
 8005ef0:	3211      	adds	r2, #17
 8005ef2:	42a2      	cmp	r2, r4
 8005ef4:	bf88      	it	hi
 8005ef6:	2300      	movhi	r3, #0
 8005ef8:	4418      	add	r0, r3
 8005efa:	2300      	movs	r3, #0
 8005efc:	4288      	cmp	r0, r1
 8005efe:	d305      	bcc.n	8005f0c <__copybits+0x40>
 8005f00:	bd70      	pop	{r4, r5, r6, pc}
 8005f02:	f853 6b04 	ldr.w	r6, [r3], #4
 8005f06:	f845 6f04 	str.w	r6, [r5, #4]!
 8005f0a:	e7eb      	b.n	8005ee4 <__copybits+0x18>
 8005f0c:	f840 3b04 	str.w	r3, [r0], #4
 8005f10:	e7f4      	b.n	8005efc <__copybits+0x30>

08005f12 <__any_on>:
 8005f12:	f100 0214 	add.w	r2, r0, #20
 8005f16:	6900      	ldr	r0, [r0, #16]
 8005f18:	114b      	asrs	r3, r1, #5
 8005f1a:	4298      	cmp	r0, r3
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	db11      	blt.n	8005f44 <__any_on+0x32>
 8005f20:	dd0a      	ble.n	8005f38 <__any_on+0x26>
 8005f22:	f011 011f 	ands.w	r1, r1, #31
 8005f26:	d007      	beq.n	8005f38 <__any_on+0x26>
 8005f28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005f2c:	fa24 f001 	lsr.w	r0, r4, r1
 8005f30:	fa00 f101 	lsl.w	r1, r0, r1
 8005f34:	428c      	cmp	r4, r1
 8005f36:	d10b      	bne.n	8005f50 <__any_on+0x3e>
 8005f38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d803      	bhi.n	8005f48 <__any_on+0x36>
 8005f40:	2000      	movs	r0, #0
 8005f42:	bd10      	pop	{r4, pc}
 8005f44:	4603      	mov	r3, r0
 8005f46:	e7f7      	b.n	8005f38 <__any_on+0x26>
 8005f48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d0f5      	beq.n	8005f3c <__any_on+0x2a>
 8005f50:	2001      	movs	r0, #1
 8005f52:	e7f6      	b.n	8005f42 <__any_on+0x30>

08005f54 <sulp>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4604      	mov	r4, r0
 8005f58:	460d      	mov	r5, r1
 8005f5a:	ec45 4b10 	vmov	d0, r4, r5
 8005f5e:	4616      	mov	r6, r2
 8005f60:	f7ff feba 	bl	8005cd8 <__ulp>
 8005f64:	ec51 0b10 	vmov	r0, r1, d0
 8005f68:	b17e      	cbz	r6, 8005f8a <sulp+0x36>
 8005f6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005f6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	dd09      	ble.n	8005f8a <sulp+0x36>
 8005f76:	051b      	lsls	r3, r3, #20
 8005f78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005f7c:	2400      	movs	r4, #0
 8005f7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005f82:	4622      	mov	r2, r4
 8005f84:	462b      	mov	r3, r5
 8005f86:	f7fa fb3f 	bl	8000608 <__aeabi_dmul>
 8005f8a:	ec41 0b10 	vmov	d0, r0, r1
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}

08005f90 <_strtod_l>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	b09f      	sub	sp, #124	@ 0x7c
 8005f96:	460c      	mov	r4, r1
 8005f98:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005f9e:	9005      	str	r0, [sp, #20]
 8005fa0:	f04f 0a00 	mov.w	sl, #0
 8005fa4:	f04f 0b00 	mov.w	fp, #0
 8005fa8:	460a      	mov	r2, r1
 8005faa:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fac:	7811      	ldrb	r1, [r2, #0]
 8005fae:	292b      	cmp	r1, #43	@ 0x2b
 8005fb0:	d04a      	beq.n	8006048 <_strtod_l+0xb8>
 8005fb2:	d838      	bhi.n	8006026 <_strtod_l+0x96>
 8005fb4:	290d      	cmp	r1, #13
 8005fb6:	d832      	bhi.n	800601e <_strtod_l+0x8e>
 8005fb8:	2908      	cmp	r1, #8
 8005fba:	d832      	bhi.n	8006022 <_strtod_l+0x92>
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d03b      	beq.n	8006038 <_strtod_l+0xa8>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005fc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005fc6:	782a      	ldrb	r2, [r5, #0]
 8005fc8:	2a30      	cmp	r2, #48	@ 0x30
 8005fca:	f040 80b3 	bne.w	8006134 <_strtod_l+0x1a4>
 8005fce:	786a      	ldrb	r2, [r5, #1]
 8005fd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005fd4:	2a58      	cmp	r2, #88	@ 0x58
 8005fd6:	d16e      	bne.n	80060b6 <_strtod_l+0x126>
 8005fd8:	9302      	str	r3, [sp, #8]
 8005fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	ab1a      	add	r3, sp, #104	@ 0x68
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	4a8e      	ldr	r2, [pc, #568]	@ (800621c <_strtod_l+0x28c>)
 8005fe4:	9805      	ldr	r0, [sp, #20]
 8005fe6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005fe8:	a919      	add	r1, sp, #100	@ 0x64
 8005fea:	f001 faef 	bl	80075cc <__gethex>
 8005fee:	f010 060f 	ands.w	r6, r0, #15
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	d005      	beq.n	8006002 <_strtod_l+0x72>
 8005ff6:	2e06      	cmp	r6, #6
 8005ff8:	d128      	bne.n	800604c <_strtod_l+0xbc>
 8005ffa:	3501      	adds	r5, #1
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9519      	str	r5, [sp, #100]	@ 0x64
 8006000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006002:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 858e 	bne.w	8006b26 <_strtod_l+0xb96>
 800600a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800600c:	b1cb      	cbz	r3, 8006042 <_strtod_l+0xb2>
 800600e:	4652      	mov	r2, sl
 8006010:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006014:	ec43 2b10 	vmov	d0, r2, r3
 8006018:	b01f      	add	sp, #124	@ 0x7c
 800601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	2920      	cmp	r1, #32
 8006020:	d1ce      	bne.n	8005fc0 <_strtod_l+0x30>
 8006022:	3201      	adds	r2, #1
 8006024:	e7c1      	b.n	8005faa <_strtod_l+0x1a>
 8006026:	292d      	cmp	r1, #45	@ 0x2d
 8006028:	d1ca      	bne.n	8005fc0 <_strtod_l+0x30>
 800602a:	2101      	movs	r1, #1
 800602c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800602e:	1c51      	adds	r1, r2, #1
 8006030:	9119      	str	r1, [sp, #100]	@ 0x64
 8006032:	7852      	ldrb	r2, [r2, #1]
 8006034:	2a00      	cmp	r2, #0
 8006036:	d1c5      	bne.n	8005fc4 <_strtod_l+0x34>
 8006038:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800603a:	9419      	str	r4, [sp, #100]	@ 0x64
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 8570 	bne.w	8006b22 <_strtod_l+0xb92>
 8006042:	4652      	mov	r2, sl
 8006044:	465b      	mov	r3, fp
 8006046:	e7e5      	b.n	8006014 <_strtod_l+0x84>
 8006048:	2100      	movs	r1, #0
 800604a:	e7ef      	b.n	800602c <_strtod_l+0x9c>
 800604c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800604e:	b13a      	cbz	r2, 8006060 <_strtod_l+0xd0>
 8006050:	2135      	movs	r1, #53	@ 0x35
 8006052:	a81c      	add	r0, sp, #112	@ 0x70
 8006054:	f7ff ff3a 	bl	8005ecc <__copybits>
 8006058:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800605a:	9805      	ldr	r0, [sp, #20]
 800605c:	f7ff fb08 	bl	8005670 <_Bfree>
 8006060:	3e01      	subs	r6, #1
 8006062:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006064:	2e04      	cmp	r6, #4
 8006066:	d806      	bhi.n	8006076 <_strtod_l+0xe6>
 8006068:	e8df f006 	tbb	[pc, r6]
 800606c:	201d0314 	.word	0x201d0314
 8006070:	14          	.byte	0x14
 8006071:	00          	.byte	0x00
 8006072:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006076:	05e1      	lsls	r1, r4, #23
 8006078:	bf48      	it	mi
 800607a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800607e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006082:	0d1b      	lsrs	r3, r3, #20
 8006084:	051b      	lsls	r3, r3, #20
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1bb      	bne.n	8006002 <_strtod_l+0x72>
 800608a:	f7fe fb31 	bl	80046f0 <__errno>
 800608e:	2322      	movs	r3, #34	@ 0x22
 8006090:	6003      	str	r3, [r0, #0]
 8006092:	e7b6      	b.n	8006002 <_strtod_l+0x72>
 8006094:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006098:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800609c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80060a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80060a4:	e7e7      	b.n	8006076 <_strtod_l+0xe6>
 80060a6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006224 <_strtod_l+0x294>
 80060aa:	e7e4      	b.n	8006076 <_strtod_l+0xe6>
 80060ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80060b0:	f04f 3aff 	mov.w	sl, #4294967295
 80060b4:	e7df      	b.n	8006076 <_strtod_l+0xe6>
 80060b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80060bc:	785b      	ldrb	r3, [r3, #1]
 80060be:	2b30      	cmp	r3, #48	@ 0x30
 80060c0:	d0f9      	beq.n	80060b6 <_strtod_l+0x126>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d09d      	beq.n	8006002 <_strtod_l+0x72>
 80060c6:	2301      	movs	r3, #1
 80060c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80060ce:	2300      	movs	r3, #0
 80060d0:	9308      	str	r3, [sp, #32]
 80060d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060d4:	461f      	mov	r7, r3
 80060d6:	220a      	movs	r2, #10
 80060d8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80060da:	7805      	ldrb	r5, [r0, #0]
 80060dc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80060e0:	b2d9      	uxtb	r1, r3
 80060e2:	2909      	cmp	r1, #9
 80060e4:	d928      	bls.n	8006138 <_strtod_l+0x1a8>
 80060e6:	494e      	ldr	r1, [pc, #312]	@ (8006220 <_strtod_l+0x290>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	f001 f979 	bl	80073e0 <strncmp>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d032      	beq.n	8006158 <_strtod_l+0x1c8>
 80060f2:	2000      	movs	r0, #0
 80060f4:	462a      	mov	r2, r5
 80060f6:	4681      	mov	r9, r0
 80060f8:	463d      	mov	r5, r7
 80060fa:	4603      	mov	r3, r0
 80060fc:	2a65      	cmp	r2, #101	@ 0x65
 80060fe:	d001      	beq.n	8006104 <_strtod_l+0x174>
 8006100:	2a45      	cmp	r2, #69	@ 0x45
 8006102:	d114      	bne.n	800612e <_strtod_l+0x19e>
 8006104:	b91d      	cbnz	r5, 800610e <_strtod_l+0x17e>
 8006106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006108:	4302      	orrs	r2, r0
 800610a:	d095      	beq.n	8006038 <_strtod_l+0xa8>
 800610c:	2500      	movs	r5, #0
 800610e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006110:	1c62      	adds	r2, r4, #1
 8006112:	9219      	str	r2, [sp, #100]	@ 0x64
 8006114:	7862      	ldrb	r2, [r4, #1]
 8006116:	2a2b      	cmp	r2, #43	@ 0x2b
 8006118:	d077      	beq.n	800620a <_strtod_l+0x27a>
 800611a:	2a2d      	cmp	r2, #45	@ 0x2d
 800611c:	d07b      	beq.n	8006216 <_strtod_l+0x286>
 800611e:	f04f 0c00 	mov.w	ip, #0
 8006122:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006126:	2909      	cmp	r1, #9
 8006128:	f240 8082 	bls.w	8006230 <_strtod_l+0x2a0>
 800612c:	9419      	str	r4, [sp, #100]	@ 0x64
 800612e:	f04f 0800 	mov.w	r8, #0
 8006132:	e0a2      	b.n	800627a <_strtod_l+0x2ea>
 8006134:	2300      	movs	r3, #0
 8006136:	e7c7      	b.n	80060c8 <_strtod_l+0x138>
 8006138:	2f08      	cmp	r7, #8
 800613a:	bfd5      	itete	le
 800613c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800613e:	9908      	ldrgt	r1, [sp, #32]
 8006140:	fb02 3301 	mlale	r3, r2, r1, r3
 8006144:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006148:	f100 0001 	add.w	r0, r0, #1
 800614c:	bfd4      	ite	le
 800614e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006150:	9308      	strgt	r3, [sp, #32]
 8006152:	3701      	adds	r7, #1
 8006154:	9019      	str	r0, [sp, #100]	@ 0x64
 8006156:	e7bf      	b.n	80060d8 <_strtod_l+0x148>
 8006158:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	9219      	str	r2, [sp, #100]	@ 0x64
 800615e:	785a      	ldrb	r2, [r3, #1]
 8006160:	b37f      	cbz	r7, 80061c2 <_strtod_l+0x232>
 8006162:	4681      	mov	r9, r0
 8006164:	463d      	mov	r5, r7
 8006166:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800616a:	2b09      	cmp	r3, #9
 800616c:	d912      	bls.n	8006194 <_strtod_l+0x204>
 800616e:	2301      	movs	r3, #1
 8006170:	e7c4      	b.n	80060fc <_strtod_l+0x16c>
 8006172:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	9219      	str	r2, [sp, #100]	@ 0x64
 8006178:	785a      	ldrb	r2, [r3, #1]
 800617a:	3001      	adds	r0, #1
 800617c:	2a30      	cmp	r2, #48	@ 0x30
 800617e:	d0f8      	beq.n	8006172 <_strtod_l+0x1e2>
 8006180:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006184:	2b08      	cmp	r3, #8
 8006186:	f200 84d3 	bhi.w	8006b30 <_strtod_l+0xba0>
 800618a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800618c:	930c      	str	r3, [sp, #48]	@ 0x30
 800618e:	4681      	mov	r9, r0
 8006190:	2000      	movs	r0, #0
 8006192:	4605      	mov	r5, r0
 8006194:	3a30      	subs	r2, #48	@ 0x30
 8006196:	f100 0301 	add.w	r3, r0, #1
 800619a:	d02a      	beq.n	80061f2 <_strtod_l+0x262>
 800619c:	4499      	add	r9, r3
 800619e:	eb00 0c05 	add.w	ip, r0, r5
 80061a2:	462b      	mov	r3, r5
 80061a4:	210a      	movs	r1, #10
 80061a6:	4563      	cmp	r3, ip
 80061a8:	d10d      	bne.n	80061c6 <_strtod_l+0x236>
 80061aa:	1c69      	adds	r1, r5, #1
 80061ac:	4401      	add	r1, r0
 80061ae:	4428      	add	r0, r5
 80061b0:	2808      	cmp	r0, #8
 80061b2:	dc16      	bgt.n	80061e2 <_strtod_l+0x252>
 80061b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80061b6:	230a      	movs	r3, #10
 80061b8:	fb03 2300 	mla	r3, r3, r0, r2
 80061bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80061be:	2300      	movs	r3, #0
 80061c0:	e018      	b.n	80061f4 <_strtod_l+0x264>
 80061c2:	4638      	mov	r0, r7
 80061c4:	e7da      	b.n	800617c <_strtod_l+0x1ec>
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	f103 0301 	add.w	r3, r3, #1
 80061cc:	dc03      	bgt.n	80061d6 <_strtod_l+0x246>
 80061ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80061d0:	434e      	muls	r6, r1
 80061d2:	960a      	str	r6, [sp, #40]	@ 0x28
 80061d4:	e7e7      	b.n	80061a6 <_strtod_l+0x216>
 80061d6:	2b10      	cmp	r3, #16
 80061d8:	bfde      	ittt	le
 80061da:	9e08      	ldrle	r6, [sp, #32]
 80061dc:	434e      	mulle	r6, r1
 80061de:	9608      	strle	r6, [sp, #32]
 80061e0:	e7e1      	b.n	80061a6 <_strtod_l+0x216>
 80061e2:	280f      	cmp	r0, #15
 80061e4:	dceb      	bgt.n	80061be <_strtod_l+0x22e>
 80061e6:	9808      	ldr	r0, [sp, #32]
 80061e8:	230a      	movs	r3, #10
 80061ea:	fb03 2300 	mla	r3, r3, r0, r2
 80061ee:	9308      	str	r3, [sp, #32]
 80061f0:	e7e5      	b.n	80061be <_strtod_l+0x22e>
 80061f2:	4629      	mov	r1, r5
 80061f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061f6:	1c50      	adds	r0, r2, #1
 80061f8:	9019      	str	r0, [sp, #100]	@ 0x64
 80061fa:	7852      	ldrb	r2, [r2, #1]
 80061fc:	4618      	mov	r0, r3
 80061fe:	460d      	mov	r5, r1
 8006200:	e7b1      	b.n	8006166 <_strtod_l+0x1d6>
 8006202:	f04f 0900 	mov.w	r9, #0
 8006206:	2301      	movs	r3, #1
 8006208:	e77d      	b.n	8006106 <_strtod_l+0x176>
 800620a:	f04f 0c00 	mov.w	ip, #0
 800620e:	1ca2      	adds	r2, r4, #2
 8006210:	9219      	str	r2, [sp, #100]	@ 0x64
 8006212:	78a2      	ldrb	r2, [r4, #2]
 8006214:	e785      	b.n	8006122 <_strtod_l+0x192>
 8006216:	f04f 0c01 	mov.w	ip, #1
 800621a:	e7f8      	b.n	800620e <_strtod_l+0x27e>
 800621c:	08007f68 	.word	0x08007f68
 8006220:	08007f50 	.word	0x08007f50
 8006224:	7ff00000 	.word	0x7ff00000
 8006228:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800622a:	1c51      	adds	r1, r2, #1
 800622c:	9119      	str	r1, [sp, #100]	@ 0x64
 800622e:	7852      	ldrb	r2, [r2, #1]
 8006230:	2a30      	cmp	r2, #48	@ 0x30
 8006232:	d0f9      	beq.n	8006228 <_strtod_l+0x298>
 8006234:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006238:	2908      	cmp	r1, #8
 800623a:	f63f af78 	bhi.w	800612e <_strtod_l+0x19e>
 800623e:	3a30      	subs	r2, #48	@ 0x30
 8006240:	920e      	str	r2, [sp, #56]	@ 0x38
 8006242:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006244:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006246:	f04f 080a 	mov.w	r8, #10
 800624a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800624c:	1c56      	adds	r6, r2, #1
 800624e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006250:	7852      	ldrb	r2, [r2, #1]
 8006252:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006256:	f1be 0f09 	cmp.w	lr, #9
 800625a:	d939      	bls.n	80062d0 <_strtod_l+0x340>
 800625c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800625e:	1a76      	subs	r6, r6, r1
 8006260:	2e08      	cmp	r6, #8
 8006262:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006266:	dc03      	bgt.n	8006270 <_strtod_l+0x2e0>
 8006268:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800626a:	4588      	cmp	r8, r1
 800626c:	bfa8      	it	ge
 800626e:	4688      	movge	r8, r1
 8006270:	f1bc 0f00 	cmp.w	ip, #0
 8006274:	d001      	beq.n	800627a <_strtod_l+0x2ea>
 8006276:	f1c8 0800 	rsb	r8, r8, #0
 800627a:	2d00      	cmp	r5, #0
 800627c:	d14e      	bne.n	800631c <_strtod_l+0x38c>
 800627e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006280:	4308      	orrs	r0, r1
 8006282:	f47f aebe 	bne.w	8006002 <_strtod_l+0x72>
 8006286:	2b00      	cmp	r3, #0
 8006288:	f47f aed6 	bne.w	8006038 <_strtod_l+0xa8>
 800628c:	2a69      	cmp	r2, #105	@ 0x69
 800628e:	d028      	beq.n	80062e2 <_strtod_l+0x352>
 8006290:	dc25      	bgt.n	80062de <_strtod_l+0x34e>
 8006292:	2a49      	cmp	r2, #73	@ 0x49
 8006294:	d025      	beq.n	80062e2 <_strtod_l+0x352>
 8006296:	2a4e      	cmp	r2, #78	@ 0x4e
 8006298:	f47f aece 	bne.w	8006038 <_strtod_l+0xa8>
 800629c:	499b      	ldr	r1, [pc, #620]	@ (800650c <_strtod_l+0x57c>)
 800629e:	a819      	add	r0, sp, #100	@ 0x64
 80062a0:	f001 fbb6 	bl	8007a10 <__match>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	f43f aec7 	beq.w	8006038 <_strtod_l+0xa8>
 80062aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b28      	cmp	r3, #40	@ 0x28
 80062b0:	d12e      	bne.n	8006310 <_strtod_l+0x380>
 80062b2:	4997      	ldr	r1, [pc, #604]	@ (8006510 <_strtod_l+0x580>)
 80062b4:	aa1c      	add	r2, sp, #112	@ 0x70
 80062b6:	a819      	add	r0, sp, #100	@ 0x64
 80062b8:	f001 fbbe 	bl	8007a38 <__hexnan>
 80062bc:	2805      	cmp	r0, #5
 80062be:	d127      	bne.n	8006310 <_strtod_l+0x380>
 80062c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80062c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80062c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80062ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80062ce:	e698      	b.n	8006002 <_strtod_l+0x72>
 80062d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80062d2:	fb08 2101 	mla	r1, r8, r1, r2
 80062d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80062da:	920e      	str	r2, [sp, #56]	@ 0x38
 80062dc:	e7b5      	b.n	800624a <_strtod_l+0x2ba>
 80062de:	2a6e      	cmp	r2, #110	@ 0x6e
 80062e0:	e7da      	b.n	8006298 <_strtod_l+0x308>
 80062e2:	498c      	ldr	r1, [pc, #560]	@ (8006514 <_strtod_l+0x584>)
 80062e4:	a819      	add	r0, sp, #100	@ 0x64
 80062e6:	f001 fb93 	bl	8007a10 <__match>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	f43f aea4 	beq.w	8006038 <_strtod_l+0xa8>
 80062f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062f2:	4989      	ldr	r1, [pc, #548]	@ (8006518 <_strtod_l+0x588>)
 80062f4:	3b01      	subs	r3, #1
 80062f6:	a819      	add	r0, sp, #100	@ 0x64
 80062f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80062fa:	f001 fb89 	bl	8007a10 <__match>
 80062fe:	b910      	cbnz	r0, 8006306 <_strtod_l+0x376>
 8006300:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006302:	3301      	adds	r3, #1
 8006304:	9319      	str	r3, [sp, #100]	@ 0x64
 8006306:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006528 <_strtod_l+0x598>
 800630a:	f04f 0a00 	mov.w	sl, #0
 800630e:	e678      	b.n	8006002 <_strtod_l+0x72>
 8006310:	4882      	ldr	r0, [pc, #520]	@ (800651c <_strtod_l+0x58c>)
 8006312:	f001 f8b9 	bl	8007488 <nan>
 8006316:	ec5b ab10 	vmov	sl, fp, d0
 800631a:	e672      	b.n	8006002 <_strtod_l+0x72>
 800631c:	eba8 0309 	sub.w	r3, r8, r9
 8006320:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006322:	9309      	str	r3, [sp, #36]	@ 0x24
 8006324:	2f00      	cmp	r7, #0
 8006326:	bf08      	it	eq
 8006328:	462f      	moveq	r7, r5
 800632a:	2d10      	cmp	r5, #16
 800632c:	462c      	mov	r4, r5
 800632e:	bfa8      	it	ge
 8006330:	2410      	movge	r4, #16
 8006332:	f7fa f8ef 	bl	8000514 <__aeabi_ui2d>
 8006336:	2d09      	cmp	r5, #9
 8006338:	4682      	mov	sl, r0
 800633a:	468b      	mov	fp, r1
 800633c:	dc13      	bgt.n	8006366 <_strtod_l+0x3d6>
 800633e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	f43f ae5e 	beq.w	8006002 <_strtod_l+0x72>
 8006346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006348:	dd78      	ble.n	800643c <_strtod_l+0x4ac>
 800634a:	2b16      	cmp	r3, #22
 800634c:	dc5f      	bgt.n	800640e <_strtod_l+0x47e>
 800634e:	4974      	ldr	r1, [pc, #464]	@ (8006520 <_strtod_l+0x590>)
 8006350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006354:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006358:	4652      	mov	r2, sl
 800635a:	465b      	mov	r3, fp
 800635c:	f7fa f954 	bl	8000608 <__aeabi_dmul>
 8006360:	4682      	mov	sl, r0
 8006362:	468b      	mov	fp, r1
 8006364:	e64d      	b.n	8006002 <_strtod_l+0x72>
 8006366:	4b6e      	ldr	r3, [pc, #440]	@ (8006520 <_strtod_l+0x590>)
 8006368:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800636c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006370:	f7fa f94a 	bl	8000608 <__aeabi_dmul>
 8006374:	4682      	mov	sl, r0
 8006376:	9808      	ldr	r0, [sp, #32]
 8006378:	468b      	mov	fp, r1
 800637a:	f7fa f8cb 	bl	8000514 <__aeabi_ui2d>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4650      	mov	r0, sl
 8006384:	4659      	mov	r1, fp
 8006386:	f7f9 ff89 	bl	800029c <__adddf3>
 800638a:	2d0f      	cmp	r5, #15
 800638c:	4682      	mov	sl, r0
 800638e:	468b      	mov	fp, r1
 8006390:	ddd5      	ble.n	800633e <_strtod_l+0x3ae>
 8006392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006394:	1b2c      	subs	r4, r5, r4
 8006396:	441c      	add	r4, r3
 8006398:	2c00      	cmp	r4, #0
 800639a:	f340 8096 	ble.w	80064ca <_strtod_l+0x53a>
 800639e:	f014 030f 	ands.w	r3, r4, #15
 80063a2:	d00a      	beq.n	80063ba <_strtod_l+0x42a>
 80063a4:	495e      	ldr	r1, [pc, #376]	@ (8006520 <_strtod_l+0x590>)
 80063a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b2:	f7fa f929 	bl	8000608 <__aeabi_dmul>
 80063b6:	4682      	mov	sl, r0
 80063b8:	468b      	mov	fp, r1
 80063ba:	f034 040f 	bics.w	r4, r4, #15
 80063be:	d073      	beq.n	80064a8 <_strtod_l+0x518>
 80063c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80063c4:	dd48      	ble.n	8006458 <_strtod_l+0x4c8>
 80063c6:	2400      	movs	r4, #0
 80063c8:	46a0      	mov	r8, r4
 80063ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80063cc:	46a1      	mov	r9, r4
 80063ce:	9a05      	ldr	r2, [sp, #20]
 80063d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006528 <_strtod_l+0x598>
 80063d4:	2322      	movs	r3, #34	@ 0x22
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	f04f 0a00 	mov.w	sl, #0
 80063dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f43f ae0f 	beq.w	8006002 <_strtod_l+0x72>
 80063e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063e6:	9805      	ldr	r0, [sp, #20]
 80063e8:	f7ff f942 	bl	8005670 <_Bfree>
 80063ec:	9805      	ldr	r0, [sp, #20]
 80063ee:	4649      	mov	r1, r9
 80063f0:	f7ff f93e 	bl	8005670 <_Bfree>
 80063f4:	9805      	ldr	r0, [sp, #20]
 80063f6:	4641      	mov	r1, r8
 80063f8:	f7ff f93a 	bl	8005670 <_Bfree>
 80063fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063fe:	9805      	ldr	r0, [sp, #20]
 8006400:	f7ff f936 	bl	8005670 <_Bfree>
 8006404:	9805      	ldr	r0, [sp, #20]
 8006406:	4621      	mov	r1, r4
 8006408:	f7ff f932 	bl	8005670 <_Bfree>
 800640c:	e5f9      	b.n	8006002 <_strtod_l+0x72>
 800640e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006410:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006414:	4293      	cmp	r3, r2
 8006416:	dbbc      	blt.n	8006392 <_strtod_l+0x402>
 8006418:	4c41      	ldr	r4, [pc, #260]	@ (8006520 <_strtod_l+0x590>)
 800641a:	f1c5 050f 	rsb	r5, r5, #15
 800641e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006422:	4652      	mov	r2, sl
 8006424:	465b      	mov	r3, fp
 8006426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800642a:	f7fa f8ed 	bl	8000608 <__aeabi_dmul>
 800642e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006430:	1b5d      	subs	r5, r3, r5
 8006432:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006436:	e9d4 2300 	ldrd	r2, r3, [r4]
 800643a:	e78f      	b.n	800635c <_strtod_l+0x3cc>
 800643c:	3316      	adds	r3, #22
 800643e:	dba8      	blt.n	8006392 <_strtod_l+0x402>
 8006440:	4b37      	ldr	r3, [pc, #220]	@ (8006520 <_strtod_l+0x590>)
 8006442:	eba9 0808 	sub.w	r8, r9, r8
 8006446:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800644a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800644e:	4650      	mov	r0, sl
 8006450:	4659      	mov	r1, fp
 8006452:	f7fa fa03 	bl	800085c <__aeabi_ddiv>
 8006456:	e783      	b.n	8006360 <_strtod_l+0x3d0>
 8006458:	4b32      	ldr	r3, [pc, #200]	@ (8006524 <_strtod_l+0x594>)
 800645a:	9308      	str	r3, [sp, #32]
 800645c:	2300      	movs	r3, #0
 800645e:	1124      	asrs	r4, r4, #4
 8006460:	4650      	mov	r0, sl
 8006462:	4659      	mov	r1, fp
 8006464:	461e      	mov	r6, r3
 8006466:	2c01      	cmp	r4, #1
 8006468:	dc21      	bgt.n	80064ae <_strtod_l+0x51e>
 800646a:	b10b      	cbz	r3, 8006470 <_strtod_l+0x4e0>
 800646c:	4682      	mov	sl, r0
 800646e:	468b      	mov	fp, r1
 8006470:	492c      	ldr	r1, [pc, #176]	@ (8006524 <_strtod_l+0x594>)
 8006472:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006476:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800647a:	4652      	mov	r2, sl
 800647c:	465b      	mov	r3, fp
 800647e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006482:	f7fa f8c1 	bl	8000608 <__aeabi_dmul>
 8006486:	4b28      	ldr	r3, [pc, #160]	@ (8006528 <_strtod_l+0x598>)
 8006488:	460a      	mov	r2, r1
 800648a:	400b      	ands	r3, r1
 800648c:	4927      	ldr	r1, [pc, #156]	@ (800652c <_strtod_l+0x59c>)
 800648e:	428b      	cmp	r3, r1
 8006490:	4682      	mov	sl, r0
 8006492:	d898      	bhi.n	80063c6 <_strtod_l+0x436>
 8006494:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006498:	428b      	cmp	r3, r1
 800649a:	bf86      	itte	hi
 800649c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006530 <_strtod_l+0x5a0>
 80064a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80064a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80064a8:	2300      	movs	r3, #0
 80064aa:	9308      	str	r3, [sp, #32]
 80064ac:	e07a      	b.n	80065a4 <_strtod_l+0x614>
 80064ae:	07e2      	lsls	r2, r4, #31
 80064b0:	d505      	bpl.n	80064be <_strtod_l+0x52e>
 80064b2:	9b08      	ldr	r3, [sp, #32]
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7fa f8a6 	bl	8000608 <__aeabi_dmul>
 80064bc:	2301      	movs	r3, #1
 80064be:	9a08      	ldr	r2, [sp, #32]
 80064c0:	3208      	adds	r2, #8
 80064c2:	3601      	adds	r6, #1
 80064c4:	1064      	asrs	r4, r4, #1
 80064c6:	9208      	str	r2, [sp, #32]
 80064c8:	e7cd      	b.n	8006466 <_strtod_l+0x4d6>
 80064ca:	d0ed      	beq.n	80064a8 <_strtod_l+0x518>
 80064cc:	4264      	negs	r4, r4
 80064ce:	f014 020f 	ands.w	r2, r4, #15
 80064d2:	d00a      	beq.n	80064ea <_strtod_l+0x55a>
 80064d4:	4b12      	ldr	r3, [pc, #72]	@ (8006520 <_strtod_l+0x590>)
 80064d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064da:	4650      	mov	r0, sl
 80064dc:	4659      	mov	r1, fp
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f7fa f9bb 	bl	800085c <__aeabi_ddiv>
 80064e6:	4682      	mov	sl, r0
 80064e8:	468b      	mov	fp, r1
 80064ea:	1124      	asrs	r4, r4, #4
 80064ec:	d0dc      	beq.n	80064a8 <_strtod_l+0x518>
 80064ee:	2c1f      	cmp	r4, #31
 80064f0:	dd20      	ble.n	8006534 <_strtod_l+0x5a4>
 80064f2:	2400      	movs	r4, #0
 80064f4:	46a0      	mov	r8, r4
 80064f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80064f8:	46a1      	mov	r9, r4
 80064fa:	9a05      	ldr	r2, [sp, #20]
 80064fc:	2322      	movs	r3, #34	@ 0x22
 80064fe:	f04f 0a00 	mov.w	sl, #0
 8006502:	f04f 0b00 	mov.w	fp, #0
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e768      	b.n	80063dc <_strtod_l+0x44c>
 800650a:	bf00      	nop
 800650c:	08007d41 	.word	0x08007d41
 8006510:	08007f54 	.word	0x08007f54
 8006514:	08007d39 	.word	0x08007d39
 8006518:	08007d70 	.word	0x08007d70
 800651c:	080080fd 	.word	0x080080fd
 8006520:	08007e88 	.word	0x08007e88
 8006524:	08007e60 	.word	0x08007e60
 8006528:	7ff00000 	.word	0x7ff00000
 800652c:	7ca00000 	.word	0x7ca00000
 8006530:	7fefffff 	.word	0x7fefffff
 8006534:	f014 0310 	ands.w	r3, r4, #16
 8006538:	bf18      	it	ne
 800653a:	236a      	movne	r3, #106	@ 0x6a
 800653c:	4ea9      	ldr	r6, [pc, #676]	@ (80067e4 <_strtod_l+0x854>)
 800653e:	9308      	str	r3, [sp, #32]
 8006540:	4650      	mov	r0, sl
 8006542:	4659      	mov	r1, fp
 8006544:	2300      	movs	r3, #0
 8006546:	07e2      	lsls	r2, r4, #31
 8006548:	d504      	bpl.n	8006554 <_strtod_l+0x5c4>
 800654a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800654e:	f7fa f85b 	bl	8000608 <__aeabi_dmul>
 8006552:	2301      	movs	r3, #1
 8006554:	1064      	asrs	r4, r4, #1
 8006556:	f106 0608 	add.w	r6, r6, #8
 800655a:	d1f4      	bne.n	8006546 <_strtod_l+0x5b6>
 800655c:	b10b      	cbz	r3, 8006562 <_strtod_l+0x5d2>
 800655e:	4682      	mov	sl, r0
 8006560:	468b      	mov	fp, r1
 8006562:	9b08      	ldr	r3, [sp, #32]
 8006564:	b1b3      	cbz	r3, 8006594 <_strtod_l+0x604>
 8006566:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800656a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800656e:	2b00      	cmp	r3, #0
 8006570:	4659      	mov	r1, fp
 8006572:	dd0f      	ble.n	8006594 <_strtod_l+0x604>
 8006574:	2b1f      	cmp	r3, #31
 8006576:	dd55      	ble.n	8006624 <_strtod_l+0x694>
 8006578:	2b34      	cmp	r3, #52	@ 0x34
 800657a:	bfde      	ittt	le
 800657c:	f04f 33ff 	movle.w	r3, #4294967295
 8006580:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006584:	4093      	lslle	r3, r2
 8006586:	f04f 0a00 	mov.w	sl, #0
 800658a:	bfcc      	ite	gt
 800658c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006590:	ea03 0b01 	andle.w	fp, r3, r1
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	4650      	mov	r0, sl
 800659a:	4659      	mov	r1, fp
 800659c:	f7fa fa9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d1a6      	bne.n	80064f2 <_strtod_l+0x562>
 80065a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80065aa:	9805      	ldr	r0, [sp, #20]
 80065ac:	462b      	mov	r3, r5
 80065ae:	463a      	mov	r2, r7
 80065b0:	f7ff f8c6 	bl	8005740 <__s2b>
 80065b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80065b6:	2800      	cmp	r0, #0
 80065b8:	f43f af05 	beq.w	80063c6 <_strtod_l+0x436>
 80065bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065be:	2a00      	cmp	r2, #0
 80065c0:	eba9 0308 	sub.w	r3, r9, r8
 80065c4:	bfa8      	it	ge
 80065c6:	2300      	movge	r3, #0
 80065c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80065ca:	2400      	movs	r4, #0
 80065cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80065d0:	9316      	str	r3, [sp, #88]	@ 0x58
 80065d2:	46a0      	mov	r8, r4
 80065d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065d6:	9805      	ldr	r0, [sp, #20]
 80065d8:	6859      	ldr	r1, [r3, #4]
 80065da:	f7ff f809 	bl	80055f0 <_Balloc>
 80065de:	4681      	mov	r9, r0
 80065e0:	2800      	cmp	r0, #0
 80065e2:	f43f aef4 	beq.w	80063ce <_strtod_l+0x43e>
 80065e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	3202      	adds	r2, #2
 80065ec:	f103 010c 	add.w	r1, r3, #12
 80065f0:	0092      	lsls	r2, r2, #2
 80065f2:	300c      	adds	r0, #12
 80065f4:	f000 ff38 	bl	8007468 <memcpy>
 80065f8:	ec4b ab10 	vmov	d0, sl, fp
 80065fc:	9805      	ldr	r0, [sp, #20]
 80065fe:	aa1c      	add	r2, sp, #112	@ 0x70
 8006600:	a91b      	add	r1, sp, #108	@ 0x6c
 8006602:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006606:	f7ff fbd7 	bl	8005db8 <__d2b>
 800660a:	901a      	str	r0, [sp, #104]	@ 0x68
 800660c:	2800      	cmp	r0, #0
 800660e:	f43f aede 	beq.w	80063ce <_strtod_l+0x43e>
 8006612:	9805      	ldr	r0, [sp, #20]
 8006614:	2101      	movs	r1, #1
 8006616:	f7ff f929 	bl	800586c <__i2b>
 800661a:	4680      	mov	r8, r0
 800661c:	b948      	cbnz	r0, 8006632 <_strtod_l+0x6a2>
 800661e:	f04f 0800 	mov.w	r8, #0
 8006622:	e6d4      	b.n	80063ce <_strtod_l+0x43e>
 8006624:	f04f 32ff 	mov.w	r2, #4294967295
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	ea03 0a0a 	and.w	sl, r3, sl
 8006630:	e7b0      	b.n	8006594 <_strtod_l+0x604>
 8006632:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006634:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006636:	2d00      	cmp	r5, #0
 8006638:	bfab      	itete	ge
 800663a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800663c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800663e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006640:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006642:	bfac      	ite	ge
 8006644:	18ef      	addge	r7, r5, r3
 8006646:	1b5e      	sublt	r6, r3, r5
 8006648:	9b08      	ldr	r3, [sp, #32]
 800664a:	1aed      	subs	r5, r5, r3
 800664c:	4415      	add	r5, r2
 800664e:	4b66      	ldr	r3, [pc, #408]	@ (80067e8 <_strtod_l+0x858>)
 8006650:	3d01      	subs	r5, #1
 8006652:	429d      	cmp	r5, r3
 8006654:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006658:	da50      	bge.n	80066fc <_strtod_l+0x76c>
 800665a:	1b5b      	subs	r3, r3, r5
 800665c:	2b1f      	cmp	r3, #31
 800665e:	eba2 0203 	sub.w	r2, r2, r3
 8006662:	f04f 0101 	mov.w	r1, #1
 8006666:	dc3d      	bgt.n	80066e4 <_strtod_l+0x754>
 8006668:	fa01 f303 	lsl.w	r3, r1, r3
 800666c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800666e:	2300      	movs	r3, #0
 8006670:	9310      	str	r3, [sp, #64]	@ 0x40
 8006672:	18bd      	adds	r5, r7, r2
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	42af      	cmp	r7, r5
 8006678:	4416      	add	r6, r2
 800667a:	441e      	add	r6, r3
 800667c:	463b      	mov	r3, r7
 800667e:	bfa8      	it	ge
 8006680:	462b      	movge	r3, r5
 8006682:	42b3      	cmp	r3, r6
 8006684:	bfa8      	it	ge
 8006686:	4633      	movge	r3, r6
 8006688:	2b00      	cmp	r3, #0
 800668a:	bfc2      	ittt	gt
 800668c:	1aed      	subgt	r5, r5, r3
 800668e:	1af6      	subgt	r6, r6, r3
 8006690:	1aff      	subgt	r7, r7, r3
 8006692:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006694:	2b00      	cmp	r3, #0
 8006696:	dd16      	ble.n	80066c6 <_strtod_l+0x736>
 8006698:	4641      	mov	r1, r8
 800669a:	9805      	ldr	r0, [sp, #20]
 800669c:	461a      	mov	r2, r3
 800669e:	f7ff f9a5 	bl	80059ec <__pow5mult>
 80066a2:	4680      	mov	r8, r0
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d0ba      	beq.n	800661e <_strtod_l+0x68e>
 80066a8:	4601      	mov	r1, r0
 80066aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80066ac:	9805      	ldr	r0, [sp, #20]
 80066ae:	f7ff f8f3 	bl	8005898 <__multiply>
 80066b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80066b4:	2800      	cmp	r0, #0
 80066b6:	f43f ae8a 	beq.w	80063ce <_strtod_l+0x43e>
 80066ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066bc:	9805      	ldr	r0, [sp, #20]
 80066be:	f7fe ffd7 	bl	8005670 <_Bfree>
 80066c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80066c6:	2d00      	cmp	r5, #0
 80066c8:	dc1d      	bgt.n	8006706 <_strtod_l+0x776>
 80066ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dd23      	ble.n	8006718 <_strtod_l+0x788>
 80066d0:	4649      	mov	r1, r9
 80066d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80066d4:	9805      	ldr	r0, [sp, #20]
 80066d6:	f7ff f989 	bl	80059ec <__pow5mult>
 80066da:	4681      	mov	r9, r0
 80066dc:	b9e0      	cbnz	r0, 8006718 <_strtod_l+0x788>
 80066de:	f04f 0900 	mov.w	r9, #0
 80066e2:	e674      	b.n	80063ce <_strtod_l+0x43e>
 80066e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80066e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80066ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80066f0:	35e2      	adds	r5, #226	@ 0xe2
 80066f2:	fa01 f305 	lsl.w	r3, r1, r5
 80066f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80066f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80066fa:	e7ba      	b.n	8006672 <_strtod_l+0x6e2>
 80066fc:	2300      	movs	r3, #0
 80066fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006700:	2301      	movs	r3, #1
 8006702:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006704:	e7b5      	b.n	8006672 <_strtod_l+0x6e2>
 8006706:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006708:	9805      	ldr	r0, [sp, #20]
 800670a:	462a      	mov	r2, r5
 800670c:	f7ff f9c8 	bl	8005aa0 <__lshift>
 8006710:	901a      	str	r0, [sp, #104]	@ 0x68
 8006712:	2800      	cmp	r0, #0
 8006714:	d1d9      	bne.n	80066ca <_strtod_l+0x73a>
 8006716:	e65a      	b.n	80063ce <_strtod_l+0x43e>
 8006718:	2e00      	cmp	r6, #0
 800671a:	dd07      	ble.n	800672c <_strtod_l+0x79c>
 800671c:	4649      	mov	r1, r9
 800671e:	9805      	ldr	r0, [sp, #20]
 8006720:	4632      	mov	r2, r6
 8006722:	f7ff f9bd 	bl	8005aa0 <__lshift>
 8006726:	4681      	mov	r9, r0
 8006728:	2800      	cmp	r0, #0
 800672a:	d0d8      	beq.n	80066de <_strtod_l+0x74e>
 800672c:	2f00      	cmp	r7, #0
 800672e:	dd08      	ble.n	8006742 <_strtod_l+0x7b2>
 8006730:	4641      	mov	r1, r8
 8006732:	9805      	ldr	r0, [sp, #20]
 8006734:	463a      	mov	r2, r7
 8006736:	f7ff f9b3 	bl	8005aa0 <__lshift>
 800673a:	4680      	mov	r8, r0
 800673c:	2800      	cmp	r0, #0
 800673e:	f43f ae46 	beq.w	80063ce <_strtod_l+0x43e>
 8006742:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006744:	9805      	ldr	r0, [sp, #20]
 8006746:	464a      	mov	r2, r9
 8006748:	f7ff fa32 	bl	8005bb0 <__mdiff>
 800674c:	4604      	mov	r4, r0
 800674e:	2800      	cmp	r0, #0
 8006750:	f43f ae3d 	beq.w	80063ce <_strtod_l+0x43e>
 8006754:	68c3      	ldr	r3, [r0, #12]
 8006756:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006758:	2300      	movs	r3, #0
 800675a:	60c3      	str	r3, [r0, #12]
 800675c:	4641      	mov	r1, r8
 800675e:	f7ff fa0b 	bl	8005b78 <__mcmp>
 8006762:	2800      	cmp	r0, #0
 8006764:	da46      	bge.n	80067f4 <_strtod_l+0x864>
 8006766:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006768:	ea53 030a 	orrs.w	r3, r3, sl
 800676c:	d16c      	bne.n	8006848 <_strtod_l+0x8b8>
 800676e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006772:	2b00      	cmp	r3, #0
 8006774:	d168      	bne.n	8006848 <_strtod_l+0x8b8>
 8006776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800677a:	0d1b      	lsrs	r3, r3, #20
 800677c:	051b      	lsls	r3, r3, #20
 800677e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006782:	d961      	bls.n	8006848 <_strtod_l+0x8b8>
 8006784:	6963      	ldr	r3, [r4, #20]
 8006786:	b913      	cbnz	r3, 800678e <_strtod_l+0x7fe>
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	2b01      	cmp	r3, #1
 800678c:	dd5c      	ble.n	8006848 <_strtod_l+0x8b8>
 800678e:	4621      	mov	r1, r4
 8006790:	2201      	movs	r2, #1
 8006792:	9805      	ldr	r0, [sp, #20]
 8006794:	f7ff f984 	bl	8005aa0 <__lshift>
 8006798:	4641      	mov	r1, r8
 800679a:	4604      	mov	r4, r0
 800679c:	f7ff f9ec 	bl	8005b78 <__mcmp>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	dd51      	ble.n	8006848 <_strtod_l+0x8b8>
 80067a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067a8:	9a08      	ldr	r2, [sp, #32]
 80067aa:	0d1b      	lsrs	r3, r3, #20
 80067ac:	051b      	lsls	r3, r3, #20
 80067ae:	2a00      	cmp	r2, #0
 80067b0:	d06b      	beq.n	800688a <_strtod_l+0x8fa>
 80067b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80067b6:	d868      	bhi.n	800688a <_strtod_l+0x8fa>
 80067b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80067bc:	f67f ae9d 	bls.w	80064fa <_strtod_l+0x56a>
 80067c0:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <_strtod_l+0x85c>)
 80067c2:	4650      	mov	r0, sl
 80067c4:	4659      	mov	r1, fp
 80067c6:	2200      	movs	r2, #0
 80067c8:	f7f9 ff1e 	bl	8000608 <__aeabi_dmul>
 80067cc:	4b08      	ldr	r3, [pc, #32]	@ (80067f0 <_strtod_l+0x860>)
 80067ce:	400b      	ands	r3, r1
 80067d0:	4682      	mov	sl, r0
 80067d2:	468b      	mov	fp, r1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f47f ae05 	bne.w	80063e4 <_strtod_l+0x454>
 80067da:	9a05      	ldr	r2, [sp, #20]
 80067dc:	2322      	movs	r3, #34	@ 0x22
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	e600      	b.n	80063e4 <_strtod_l+0x454>
 80067e2:	bf00      	nop
 80067e4:	08007f80 	.word	0x08007f80
 80067e8:	fffffc02 	.word	0xfffffc02
 80067ec:	39500000 	.word	0x39500000
 80067f0:	7ff00000 	.word	0x7ff00000
 80067f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80067f8:	d165      	bne.n	80068c6 <_strtod_l+0x936>
 80067fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80067fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006800:	b35a      	cbz	r2, 800685a <_strtod_l+0x8ca>
 8006802:	4a9f      	ldr	r2, [pc, #636]	@ (8006a80 <_strtod_l+0xaf0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d12b      	bne.n	8006860 <_strtod_l+0x8d0>
 8006808:	9b08      	ldr	r3, [sp, #32]
 800680a:	4651      	mov	r1, sl
 800680c:	b303      	cbz	r3, 8006850 <_strtod_l+0x8c0>
 800680e:	4b9d      	ldr	r3, [pc, #628]	@ (8006a84 <_strtod_l+0xaf4>)
 8006810:	465a      	mov	r2, fp
 8006812:	4013      	ands	r3, r2
 8006814:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006818:	f04f 32ff 	mov.w	r2, #4294967295
 800681c:	d81b      	bhi.n	8006856 <_strtod_l+0x8c6>
 800681e:	0d1b      	lsrs	r3, r3, #20
 8006820:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006824:	fa02 f303 	lsl.w	r3, r2, r3
 8006828:	4299      	cmp	r1, r3
 800682a:	d119      	bne.n	8006860 <_strtod_l+0x8d0>
 800682c:	4b96      	ldr	r3, [pc, #600]	@ (8006a88 <_strtod_l+0xaf8>)
 800682e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006830:	429a      	cmp	r2, r3
 8006832:	d102      	bne.n	800683a <_strtod_l+0x8aa>
 8006834:	3101      	adds	r1, #1
 8006836:	f43f adca 	beq.w	80063ce <_strtod_l+0x43e>
 800683a:	4b92      	ldr	r3, [pc, #584]	@ (8006a84 <_strtod_l+0xaf4>)
 800683c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800683e:	401a      	ands	r2, r3
 8006840:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006844:	f04f 0a00 	mov.w	sl, #0
 8006848:	9b08      	ldr	r3, [sp, #32]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1b8      	bne.n	80067c0 <_strtod_l+0x830>
 800684e:	e5c9      	b.n	80063e4 <_strtod_l+0x454>
 8006850:	f04f 33ff 	mov.w	r3, #4294967295
 8006854:	e7e8      	b.n	8006828 <_strtod_l+0x898>
 8006856:	4613      	mov	r3, r2
 8006858:	e7e6      	b.n	8006828 <_strtod_l+0x898>
 800685a:	ea53 030a 	orrs.w	r3, r3, sl
 800685e:	d0a1      	beq.n	80067a4 <_strtod_l+0x814>
 8006860:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006862:	b1db      	cbz	r3, 800689c <_strtod_l+0x90c>
 8006864:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006866:	4213      	tst	r3, r2
 8006868:	d0ee      	beq.n	8006848 <_strtod_l+0x8b8>
 800686a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800686c:	9a08      	ldr	r2, [sp, #32]
 800686e:	4650      	mov	r0, sl
 8006870:	4659      	mov	r1, fp
 8006872:	b1bb      	cbz	r3, 80068a4 <_strtod_l+0x914>
 8006874:	f7ff fb6e 	bl	8005f54 <sulp>
 8006878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800687c:	ec53 2b10 	vmov	r2, r3, d0
 8006880:	f7f9 fd0c 	bl	800029c <__adddf3>
 8006884:	4682      	mov	sl, r0
 8006886:	468b      	mov	fp, r1
 8006888:	e7de      	b.n	8006848 <_strtod_l+0x8b8>
 800688a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800688e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006892:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006896:	f04f 3aff 	mov.w	sl, #4294967295
 800689a:	e7d5      	b.n	8006848 <_strtod_l+0x8b8>
 800689c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800689e:	ea13 0f0a 	tst.w	r3, sl
 80068a2:	e7e1      	b.n	8006868 <_strtod_l+0x8d8>
 80068a4:	f7ff fb56 	bl	8005f54 <sulp>
 80068a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ac:	ec53 2b10 	vmov	r2, r3, d0
 80068b0:	f7f9 fcf2 	bl	8000298 <__aeabi_dsub>
 80068b4:	2200      	movs	r2, #0
 80068b6:	2300      	movs	r3, #0
 80068b8:	4682      	mov	sl, r0
 80068ba:	468b      	mov	fp, r1
 80068bc:	f7fa f90c 	bl	8000ad8 <__aeabi_dcmpeq>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d0c1      	beq.n	8006848 <_strtod_l+0x8b8>
 80068c4:	e619      	b.n	80064fa <_strtod_l+0x56a>
 80068c6:	4641      	mov	r1, r8
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7ff facd 	bl	8005e68 <__ratio>
 80068ce:	ec57 6b10 	vmov	r6, r7, d0
 80068d2:	2200      	movs	r2, #0
 80068d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80068d8:	4630      	mov	r0, r6
 80068da:	4639      	mov	r1, r7
 80068dc:	f7fa f910 	bl	8000b00 <__aeabi_dcmple>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d06f      	beq.n	80069c4 <_strtod_l+0xa34>
 80068e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d17a      	bne.n	80069e0 <_strtod_l+0xa50>
 80068ea:	f1ba 0f00 	cmp.w	sl, #0
 80068ee:	d158      	bne.n	80069a2 <_strtod_l+0xa12>
 80068f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d15a      	bne.n	80069b0 <_strtod_l+0xa20>
 80068fa:	4b64      	ldr	r3, [pc, #400]	@ (8006a8c <_strtod_l+0xafc>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	4630      	mov	r0, r6
 8006900:	4639      	mov	r1, r7
 8006902:	f7fa f8f3 	bl	8000aec <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	d159      	bne.n	80069be <_strtod_l+0xa2e>
 800690a:	4630      	mov	r0, r6
 800690c:	4639      	mov	r1, r7
 800690e:	4b60      	ldr	r3, [pc, #384]	@ (8006a90 <_strtod_l+0xb00>)
 8006910:	2200      	movs	r2, #0
 8006912:	f7f9 fe79 	bl	8000608 <__aeabi_dmul>
 8006916:	4606      	mov	r6, r0
 8006918:	460f      	mov	r7, r1
 800691a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800691e:	9606      	str	r6, [sp, #24]
 8006920:	9307      	str	r3, [sp, #28]
 8006922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006926:	4d57      	ldr	r5, [pc, #348]	@ (8006a84 <_strtod_l+0xaf4>)
 8006928:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800692c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800692e:	401d      	ands	r5, r3
 8006930:	4b58      	ldr	r3, [pc, #352]	@ (8006a94 <_strtod_l+0xb04>)
 8006932:	429d      	cmp	r5, r3
 8006934:	f040 80b2 	bne.w	8006a9c <_strtod_l+0xb0c>
 8006938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800693a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800693e:	ec4b ab10 	vmov	d0, sl, fp
 8006942:	f7ff f9c9 	bl	8005cd8 <__ulp>
 8006946:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800694a:	ec51 0b10 	vmov	r0, r1, d0
 800694e:	f7f9 fe5b 	bl	8000608 <__aeabi_dmul>
 8006952:	4652      	mov	r2, sl
 8006954:	465b      	mov	r3, fp
 8006956:	f7f9 fca1 	bl	800029c <__adddf3>
 800695a:	460b      	mov	r3, r1
 800695c:	4949      	ldr	r1, [pc, #292]	@ (8006a84 <_strtod_l+0xaf4>)
 800695e:	4a4e      	ldr	r2, [pc, #312]	@ (8006a98 <_strtod_l+0xb08>)
 8006960:	4019      	ands	r1, r3
 8006962:	4291      	cmp	r1, r2
 8006964:	4682      	mov	sl, r0
 8006966:	d942      	bls.n	80069ee <_strtod_l+0xa5e>
 8006968:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800696a:	4b47      	ldr	r3, [pc, #284]	@ (8006a88 <_strtod_l+0xaf8>)
 800696c:	429a      	cmp	r2, r3
 800696e:	d103      	bne.n	8006978 <_strtod_l+0x9e8>
 8006970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006972:	3301      	adds	r3, #1
 8006974:	f43f ad2b 	beq.w	80063ce <_strtod_l+0x43e>
 8006978:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006a88 <_strtod_l+0xaf8>
 800697c:	f04f 3aff 	mov.w	sl, #4294967295
 8006980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006982:	9805      	ldr	r0, [sp, #20]
 8006984:	f7fe fe74 	bl	8005670 <_Bfree>
 8006988:	9805      	ldr	r0, [sp, #20]
 800698a:	4649      	mov	r1, r9
 800698c:	f7fe fe70 	bl	8005670 <_Bfree>
 8006990:	9805      	ldr	r0, [sp, #20]
 8006992:	4641      	mov	r1, r8
 8006994:	f7fe fe6c 	bl	8005670 <_Bfree>
 8006998:	9805      	ldr	r0, [sp, #20]
 800699a:	4621      	mov	r1, r4
 800699c:	f7fe fe68 	bl	8005670 <_Bfree>
 80069a0:	e618      	b.n	80065d4 <_strtod_l+0x644>
 80069a2:	f1ba 0f01 	cmp.w	sl, #1
 80069a6:	d103      	bne.n	80069b0 <_strtod_l+0xa20>
 80069a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f43f ada5 	beq.w	80064fa <_strtod_l+0x56a>
 80069b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006a60 <_strtod_l+0xad0>
 80069b4:	4f35      	ldr	r7, [pc, #212]	@ (8006a8c <_strtod_l+0xafc>)
 80069b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80069ba:	2600      	movs	r6, #0
 80069bc:	e7b1      	b.n	8006922 <_strtod_l+0x992>
 80069be:	4f34      	ldr	r7, [pc, #208]	@ (8006a90 <_strtod_l+0xb00>)
 80069c0:	2600      	movs	r6, #0
 80069c2:	e7aa      	b.n	800691a <_strtod_l+0x98a>
 80069c4:	4b32      	ldr	r3, [pc, #200]	@ (8006a90 <_strtod_l+0xb00>)
 80069c6:	4630      	mov	r0, r6
 80069c8:	4639      	mov	r1, r7
 80069ca:	2200      	movs	r2, #0
 80069cc:	f7f9 fe1c 	bl	8000608 <__aeabi_dmul>
 80069d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069d2:	4606      	mov	r6, r0
 80069d4:	460f      	mov	r7, r1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d09f      	beq.n	800691a <_strtod_l+0x98a>
 80069da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80069de:	e7a0      	b.n	8006922 <_strtod_l+0x992>
 80069e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006a68 <_strtod_l+0xad8>
 80069e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80069e8:	ec57 6b17 	vmov	r6, r7, d7
 80069ec:	e799      	b.n	8006922 <_strtod_l+0x992>
 80069ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80069f2:	9b08      	ldr	r3, [sp, #32]
 80069f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1c1      	bne.n	8006980 <_strtod_l+0x9f0>
 80069fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006a00:	0d1b      	lsrs	r3, r3, #20
 8006a02:	051b      	lsls	r3, r3, #20
 8006a04:	429d      	cmp	r5, r3
 8006a06:	d1bb      	bne.n	8006980 <_strtod_l+0x9f0>
 8006a08:	4630      	mov	r0, r6
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	f7fa f95c 	bl	8000cc8 <__aeabi_d2lz>
 8006a10:	f7f9 fdcc 	bl	80005ac <__aeabi_l2d>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f7f9 fc3c 	bl	8000298 <__aeabi_dsub>
 8006a20:	460b      	mov	r3, r1
 8006a22:	4602      	mov	r2, r0
 8006a24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006a28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a2e:	ea46 060a 	orr.w	r6, r6, sl
 8006a32:	431e      	orrs	r6, r3
 8006a34:	d06f      	beq.n	8006b16 <_strtod_l+0xb86>
 8006a36:	a30e      	add	r3, pc, #56	@ (adr r3, 8006a70 <_strtod_l+0xae0>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f7fa f856 	bl	8000aec <__aeabi_dcmplt>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	f47f accf 	bne.w	80063e4 <_strtod_l+0x454>
 8006a46:	a30c      	add	r3, pc, #48	@ (adr r3, 8006a78 <_strtod_l+0xae8>)
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a50:	f7fa f86a 	bl	8000b28 <__aeabi_dcmpgt>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d093      	beq.n	8006980 <_strtod_l+0x9f0>
 8006a58:	e4c4      	b.n	80063e4 <_strtod_l+0x454>
 8006a5a:	bf00      	nop
 8006a5c:	f3af 8000 	nop.w
 8006a60:	00000000 	.word	0x00000000
 8006a64:	bff00000 	.word	0xbff00000
 8006a68:	00000000 	.word	0x00000000
 8006a6c:	3ff00000 	.word	0x3ff00000
 8006a70:	94a03595 	.word	0x94a03595
 8006a74:	3fdfffff 	.word	0x3fdfffff
 8006a78:	35afe535 	.word	0x35afe535
 8006a7c:	3fe00000 	.word	0x3fe00000
 8006a80:	000fffff 	.word	0x000fffff
 8006a84:	7ff00000 	.word	0x7ff00000
 8006a88:	7fefffff 	.word	0x7fefffff
 8006a8c:	3ff00000 	.word	0x3ff00000
 8006a90:	3fe00000 	.word	0x3fe00000
 8006a94:	7fe00000 	.word	0x7fe00000
 8006a98:	7c9fffff 	.word	0x7c9fffff
 8006a9c:	9b08      	ldr	r3, [sp, #32]
 8006a9e:	b323      	cbz	r3, 8006aea <_strtod_l+0xb5a>
 8006aa0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006aa4:	d821      	bhi.n	8006aea <_strtod_l+0xb5a>
 8006aa6:	a328      	add	r3, pc, #160	@ (adr r3, 8006b48 <_strtod_l+0xbb8>)
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7fa f826 	bl	8000b00 <__aeabi_dcmple>
 8006ab4:	b1a0      	cbz	r0, 8006ae0 <_strtod_l+0xb50>
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7fa f87d 	bl	8000bb8 <__aeabi_d2uiz>
 8006abe:	2801      	cmp	r0, #1
 8006ac0:	bf38      	it	cc
 8006ac2:	2001      	movcc	r0, #1
 8006ac4:	f7f9 fd26 	bl	8000514 <__aeabi_ui2d>
 8006ac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006aca:	4606      	mov	r6, r0
 8006acc:	460f      	mov	r7, r1
 8006ace:	b9fb      	cbnz	r3, 8006b10 <_strtod_l+0xb80>
 8006ad0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ad4:	9014      	str	r0, [sp, #80]	@ 0x50
 8006ad6:	9315      	str	r3, [sp, #84]	@ 0x54
 8006ad8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006adc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006ae0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ae2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006ae6:	1b5b      	subs	r3, r3, r5
 8006ae8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006aea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006aee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006af2:	f7ff f8f1 	bl	8005cd8 <__ulp>
 8006af6:	4650      	mov	r0, sl
 8006af8:	ec53 2b10 	vmov	r2, r3, d0
 8006afc:	4659      	mov	r1, fp
 8006afe:	f7f9 fd83 	bl	8000608 <__aeabi_dmul>
 8006b02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006b06:	f7f9 fbc9 	bl	800029c <__adddf3>
 8006b0a:	4682      	mov	sl, r0
 8006b0c:	468b      	mov	fp, r1
 8006b0e:	e770      	b.n	80069f2 <_strtod_l+0xa62>
 8006b10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006b14:	e7e0      	b.n	8006ad8 <_strtod_l+0xb48>
 8006b16:	a30e      	add	r3, pc, #56	@ (adr r3, 8006b50 <_strtod_l+0xbc0>)
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f7f9 ffe6 	bl	8000aec <__aeabi_dcmplt>
 8006b20:	e798      	b.n	8006a54 <_strtod_l+0xac4>
 8006b22:	2300      	movs	r3, #0
 8006b24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006b28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	f7ff ba6d 	b.w	800600a <_strtod_l+0x7a>
 8006b30:	2a65      	cmp	r2, #101	@ 0x65
 8006b32:	f43f ab66 	beq.w	8006202 <_strtod_l+0x272>
 8006b36:	2a45      	cmp	r2, #69	@ 0x45
 8006b38:	f43f ab63 	beq.w	8006202 <_strtod_l+0x272>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f7ff bb9e 	b.w	800627e <_strtod_l+0x2ee>
 8006b42:	bf00      	nop
 8006b44:	f3af 8000 	nop.w
 8006b48:	ffc00000 	.word	0xffc00000
 8006b4c:	41dfffff 	.word	0x41dfffff
 8006b50:	94a03595 	.word	0x94a03595
 8006b54:	3fcfffff 	.word	0x3fcfffff

08006b58 <_strtod_r>:
 8006b58:	4b01      	ldr	r3, [pc, #4]	@ (8006b60 <_strtod_r+0x8>)
 8006b5a:	f7ff ba19 	b.w	8005f90 <_strtod_l>
 8006b5e:	bf00      	nop
 8006b60:	20000068 	.word	0x20000068

08006b64 <_strtol_l.constprop.0>:
 8006b64:	2b24      	cmp	r3, #36	@ 0x24
 8006b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6a:	4686      	mov	lr, r0
 8006b6c:	4690      	mov	r8, r2
 8006b6e:	d801      	bhi.n	8006b74 <_strtol_l.constprop.0+0x10>
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d106      	bne.n	8006b82 <_strtol_l.constprop.0+0x1e>
 8006b74:	f7fd fdbc 	bl	80046f0 <__errno>
 8006b78:	2316      	movs	r3, #22
 8006b7a:	6003      	str	r3, [r0, #0]
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b82:	4834      	ldr	r0, [pc, #208]	@ (8006c54 <_strtol_l.constprop.0+0xf0>)
 8006b84:	460d      	mov	r5, r1
 8006b86:	462a      	mov	r2, r5
 8006b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b8c:	5d06      	ldrb	r6, [r0, r4]
 8006b8e:	f016 0608 	ands.w	r6, r6, #8
 8006b92:	d1f8      	bne.n	8006b86 <_strtol_l.constprop.0+0x22>
 8006b94:	2c2d      	cmp	r4, #45	@ 0x2d
 8006b96:	d12d      	bne.n	8006bf4 <_strtol_l.constprop.0+0x90>
 8006b98:	782c      	ldrb	r4, [r5, #0]
 8006b9a:	2601      	movs	r6, #1
 8006b9c:	1c95      	adds	r5, r2, #2
 8006b9e:	f033 0210 	bics.w	r2, r3, #16
 8006ba2:	d109      	bne.n	8006bb8 <_strtol_l.constprop.0+0x54>
 8006ba4:	2c30      	cmp	r4, #48	@ 0x30
 8006ba6:	d12a      	bne.n	8006bfe <_strtol_l.constprop.0+0x9a>
 8006ba8:	782a      	ldrb	r2, [r5, #0]
 8006baa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006bae:	2a58      	cmp	r2, #88	@ 0x58
 8006bb0:	d125      	bne.n	8006bfe <_strtol_l.constprop.0+0x9a>
 8006bb2:	786c      	ldrb	r4, [r5, #1]
 8006bb4:	2310      	movs	r3, #16
 8006bb6:	3502      	adds	r5, #2
 8006bb8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006bbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	fbbc f9f3 	udiv	r9, ip, r3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	fb03 ca19 	mls	sl, r3, r9, ip
 8006bcc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006bd0:	2f09      	cmp	r7, #9
 8006bd2:	d81b      	bhi.n	8006c0c <_strtol_l.constprop.0+0xa8>
 8006bd4:	463c      	mov	r4, r7
 8006bd6:	42a3      	cmp	r3, r4
 8006bd8:	dd27      	ble.n	8006c2a <_strtol_l.constprop.0+0xc6>
 8006bda:	1c57      	adds	r7, r2, #1
 8006bdc:	d007      	beq.n	8006bee <_strtol_l.constprop.0+0x8a>
 8006bde:	4581      	cmp	r9, r0
 8006be0:	d320      	bcc.n	8006c24 <_strtol_l.constprop.0+0xc0>
 8006be2:	d101      	bne.n	8006be8 <_strtol_l.constprop.0+0x84>
 8006be4:	45a2      	cmp	sl, r4
 8006be6:	db1d      	blt.n	8006c24 <_strtol_l.constprop.0+0xc0>
 8006be8:	fb00 4003 	mla	r0, r0, r3, r4
 8006bec:	2201      	movs	r2, #1
 8006bee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bf2:	e7eb      	b.n	8006bcc <_strtol_l.constprop.0+0x68>
 8006bf4:	2c2b      	cmp	r4, #43	@ 0x2b
 8006bf6:	bf04      	itt	eq
 8006bf8:	782c      	ldrbeq	r4, [r5, #0]
 8006bfa:	1c95      	addeq	r5, r2, #2
 8006bfc:	e7cf      	b.n	8006b9e <_strtol_l.constprop.0+0x3a>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1da      	bne.n	8006bb8 <_strtol_l.constprop.0+0x54>
 8006c02:	2c30      	cmp	r4, #48	@ 0x30
 8006c04:	bf0c      	ite	eq
 8006c06:	2308      	moveq	r3, #8
 8006c08:	230a      	movne	r3, #10
 8006c0a:	e7d5      	b.n	8006bb8 <_strtol_l.constprop.0+0x54>
 8006c0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006c10:	2f19      	cmp	r7, #25
 8006c12:	d801      	bhi.n	8006c18 <_strtol_l.constprop.0+0xb4>
 8006c14:	3c37      	subs	r4, #55	@ 0x37
 8006c16:	e7de      	b.n	8006bd6 <_strtol_l.constprop.0+0x72>
 8006c18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006c1c:	2f19      	cmp	r7, #25
 8006c1e:	d804      	bhi.n	8006c2a <_strtol_l.constprop.0+0xc6>
 8006c20:	3c57      	subs	r4, #87	@ 0x57
 8006c22:	e7d8      	b.n	8006bd6 <_strtol_l.constprop.0+0x72>
 8006c24:	f04f 32ff 	mov.w	r2, #4294967295
 8006c28:	e7e1      	b.n	8006bee <_strtol_l.constprop.0+0x8a>
 8006c2a:	1c53      	adds	r3, r2, #1
 8006c2c:	d108      	bne.n	8006c40 <_strtol_l.constprop.0+0xdc>
 8006c2e:	2322      	movs	r3, #34	@ 0x22
 8006c30:	f8ce 3000 	str.w	r3, [lr]
 8006c34:	4660      	mov	r0, ip
 8006c36:	f1b8 0f00 	cmp.w	r8, #0
 8006c3a:	d0a0      	beq.n	8006b7e <_strtol_l.constprop.0+0x1a>
 8006c3c:	1e69      	subs	r1, r5, #1
 8006c3e:	e006      	b.n	8006c4e <_strtol_l.constprop.0+0xea>
 8006c40:	b106      	cbz	r6, 8006c44 <_strtol_l.constprop.0+0xe0>
 8006c42:	4240      	negs	r0, r0
 8006c44:	f1b8 0f00 	cmp.w	r8, #0
 8006c48:	d099      	beq.n	8006b7e <_strtol_l.constprop.0+0x1a>
 8006c4a:	2a00      	cmp	r2, #0
 8006c4c:	d1f6      	bne.n	8006c3c <_strtol_l.constprop.0+0xd8>
 8006c4e:	f8c8 1000 	str.w	r1, [r8]
 8006c52:	e794      	b.n	8006b7e <_strtol_l.constprop.0+0x1a>
 8006c54:	08007fa9 	.word	0x08007fa9

08006c58 <_strtol_r>:
 8006c58:	f7ff bf84 	b.w	8006b64 <_strtol_l.constprop.0>

08006c5c <__ssputs_r>:
 8006c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c60:	688e      	ldr	r6, [r1, #8]
 8006c62:	461f      	mov	r7, r3
 8006c64:	42be      	cmp	r6, r7
 8006c66:	680b      	ldr	r3, [r1, #0]
 8006c68:	4682      	mov	sl, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	4690      	mov	r8, r2
 8006c6e:	d82d      	bhi.n	8006ccc <__ssputs_r+0x70>
 8006c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c78:	d026      	beq.n	8006cc8 <__ssputs_r+0x6c>
 8006c7a:	6965      	ldr	r5, [r4, #20]
 8006c7c:	6909      	ldr	r1, [r1, #16]
 8006c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c82:	eba3 0901 	sub.w	r9, r3, r1
 8006c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c8a:	1c7b      	adds	r3, r7, #1
 8006c8c:	444b      	add	r3, r9
 8006c8e:	106d      	asrs	r5, r5, #1
 8006c90:	429d      	cmp	r5, r3
 8006c92:	bf38      	it	cc
 8006c94:	461d      	movcc	r5, r3
 8006c96:	0553      	lsls	r3, r2, #21
 8006c98:	d527      	bpl.n	8006cea <__ssputs_r+0x8e>
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	f7fe fc1c 	bl	80054d8 <_malloc_r>
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	b360      	cbz	r0, 8006cfe <__ssputs_r+0xa2>
 8006ca4:	6921      	ldr	r1, [r4, #16]
 8006ca6:	464a      	mov	r2, r9
 8006ca8:	f000 fbde 	bl	8007468 <memcpy>
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	6126      	str	r6, [r4, #16]
 8006cba:	6165      	str	r5, [r4, #20]
 8006cbc:	444e      	add	r6, r9
 8006cbe:	eba5 0509 	sub.w	r5, r5, r9
 8006cc2:	6026      	str	r6, [r4, #0]
 8006cc4:	60a5      	str	r5, [r4, #8]
 8006cc6:	463e      	mov	r6, r7
 8006cc8:	42be      	cmp	r6, r7
 8006cca:	d900      	bls.n	8006cce <__ssputs_r+0x72>
 8006ccc:	463e      	mov	r6, r7
 8006cce:	6820      	ldr	r0, [r4, #0]
 8006cd0:	4632      	mov	r2, r6
 8006cd2:	4641      	mov	r1, r8
 8006cd4:	f000 fb6a 	bl	80073ac <memmove>
 8006cd8:	68a3      	ldr	r3, [r4, #8]
 8006cda:	1b9b      	subs	r3, r3, r6
 8006cdc:	60a3      	str	r3, [r4, #8]
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	4433      	add	r3, r6
 8006ce2:	6023      	str	r3, [r4, #0]
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cea:	462a      	mov	r2, r5
 8006cec:	f000 ff51 	bl	8007b92 <_realloc_r>
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d1e0      	bne.n	8006cb8 <__ssputs_r+0x5c>
 8006cf6:	6921      	ldr	r1, [r4, #16]
 8006cf8:	4650      	mov	r0, sl
 8006cfa:	f7fe fb79 	bl	80053f0 <_free_r>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	f8ca 3000 	str.w	r3, [sl]
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	e7e9      	b.n	8006ce6 <__ssputs_r+0x8a>
	...

08006d14 <_svfiprintf_r>:
 8006d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	4698      	mov	r8, r3
 8006d1a:	898b      	ldrh	r3, [r1, #12]
 8006d1c:	061b      	lsls	r3, r3, #24
 8006d1e:	b09d      	sub	sp, #116	@ 0x74
 8006d20:	4607      	mov	r7, r0
 8006d22:	460d      	mov	r5, r1
 8006d24:	4614      	mov	r4, r2
 8006d26:	d510      	bpl.n	8006d4a <_svfiprintf_r+0x36>
 8006d28:	690b      	ldr	r3, [r1, #16]
 8006d2a:	b973      	cbnz	r3, 8006d4a <_svfiprintf_r+0x36>
 8006d2c:	2140      	movs	r1, #64	@ 0x40
 8006d2e:	f7fe fbd3 	bl	80054d8 <_malloc_r>
 8006d32:	6028      	str	r0, [r5, #0]
 8006d34:	6128      	str	r0, [r5, #16]
 8006d36:	b930      	cbnz	r0, 8006d46 <_svfiprintf_r+0x32>
 8006d38:	230c      	movs	r3, #12
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	b01d      	add	sp, #116	@ 0x74
 8006d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d46:	2340      	movs	r3, #64	@ 0x40
 8006d48:	616b      	str	r3, [r5, #20]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d4e:	2320      	movs	r3, #32
 8006d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d58:	2330      	movs	r3, #48	@ 0x30
 8006d5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ef8 <_svfiprintf_r+0x1e4>
 8006d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d62:	f04f 0901 	mov.w	r9, #1
 8006d66:	4623      	mov	r3, r4
 8006d68:	469a      	mov	sl, r3
 8006d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d6e:	b10a      	cbz	r2, 8006d74 <_svfiprintf_r+0x60>
 8006d70:	2a25      	cmp	r2, #37	@ 0x25
 8006d72:	d1f9      	bne.n	8006d68 <_svfiprintf_r+0x54>
 8006d74:	ebba 0b04 	subs.w	fp, sl, r4
 8006d78:	d00b      	beq.n	8006d92 <_svfiprintf_r+0x7e>
 8006d7a:	465b      	mov	r3, fp
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	4638      	mov	r0, r7
 8006d82:	f7ff ff6b 	bl	8006c5c <__ssputs_r>
 8006d86:	3001      	adds	r0, #1
 8006d88:	f000 80a7 	beq.w	8006eda <_svfiprintf_r+0x1c6>
 8006d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d8e:	445a      	add	r2, fp
 8006d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d92:	f89a 3000 	ldrb.w	r3, [sl]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 809f 	beq.w	8006eda <_svfiprintf_r+0x1c6>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006da6:	f10a 0a01 	add.w	sl, sl, #1
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	9307      	str	r3, [sp, #28]
 8006dae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006db4:	4654      	mov	r4, sl
 8006db6:	2205      	movs	r2, #5
 8006db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbc:	484e      	ldr	r0, [pc, #312]	@ (8006ef8 <_svfiprintf_r+0x1e4>)
 8006dbe:	f7f9 fa0f 	bl	80001e0 <memchr>
 8006dc2:	9a04      	ldr	r2, [sp, #16]
 8006dc4:	b9d8      	cbnz	r0, 8006dfe <_svfiprintf_r+0xea>
 8006dc6:	06d0      	lsls	r0, r2, #27
 8006dc8:	bf44      	itt	mi
 8006dca:	2320      	movmi	r3, #32
 8006dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dd0:	0711      	lsls	r1, r2, #28
 8006dd2:	bf44      	itt	mi
 8006dd4:	232b      	movmi	r3, #43	@ 0x2b
 8006dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dda:	f89a 3000 	ldrb.w	r3, [sl]
 8006dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8006de0:	d015      	beq.n	8006e0e <_svfiprintf_r+0xfa>
 8006de2:	9a07      	ldr	r2, [sp, #28]
 8006de4:	4654      	mov	r4, sl
 8006de6:	2000      	movs	r0, #0
 8006de8:	f04f 0c0a 	mov.w	ip, #10
 8006dec:	4621      	mov	r1, r4
 8006dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df2:	3b30      	subs	r3, #48	@ 0x30
 8006df4:	2b09      	cmp	r3, #9
 8006df6:	d94b      	bls.n	8006e90 <_svfiprintf_r+0x17c>
 8006df8:	b1b0      	cbz	r0, 8006e28 <_svfiprintf_r+0x114>
 8006dfa:	9207      	str	r2, [sp, #28]
 8006dfc:	e014      	b.n	8006e28 <_svfiprintf_r+0x114>
 8006dfe:	eba0 0308 	sub.w	r3, r0, r8
 8006e02:	fa09 f303 	lsl.w	r3, r9, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	46a2      	mov	sl, r4
 8006e0c:	e7d2      	b.n	8006db4 <_svfiprintf_r+0xa0>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	1d19      	adds	r1, r3, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	9103      	str	r1, [sp, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bfbb      	ittet	lt
 8006e1a:	425b      	neglt	r3, r3
 8006e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e20:	9307      	strge	r3, [sp, #28]
 8006e22:	9307      	strlt	r3, [sp, #28]
 8006e24:	bfb8      	it	lt
 8006e26:	9204      	strlt	r2, [sp, #16]
 8006e28:	7823      	ldrb	r3, [r4, #0]
 8006e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e2c:	d10a      	bne.n	8006e44 <_svfiprintf_r+0x130>
 8006e2e:	7863      	ldrb	r3, [r4, #1]
 8006e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e32:	d132      	bne.n	8006e9a <_svfiprintf_r+0x186>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	9203      	str	r2, [sp, #12]
 8006e3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e40:	3402      	adds	r4, #2
 8006e42:	9305      	str	r3, [sp, #20]
 8006e44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f08 <_svfiprintf_r+0x1f4>
 8006e48:	7821      	ldrb	r1, [r4, #0]
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	f7f9 f9c7 	bl	80001e0 <memchr>
 8006e52:	b138      	cbz	r0, 8006e64 <_svfiprintf_r+0x150>
 8006e54:	9b04      	ldr	r3, [sp, #16]
 8006e56:	eba0 000a 	sub.w	r0, r0, sl
 8006e5a:	2240      	movs	r2, #64	@ 0x40
 8006e5c:	4082      	lsls	r2, r0
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	3401      	adds	r4, #1
 8006e62:	9304      	str	r3, [sp, #16]
 8006e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e68:	4824      	ldr	r0, [pc, #144]	@ (8006efc <_svfiprintf_r+0x1e8>)
 8006e6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e6e:	2206      	movs	r2, #6
 8006e70:	f7f9 f9b6 	bl	80001e0 <memchr>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d036      	beq.n	8006ee6 <_svfiprintf_r+0x1d2>
 8006e78:	4b21      	ldr	r3, [pc, #132]	@ (8006f00 <_svfiprintf_r+0x1ec>)
 8006e7a:	bb1b      	cbnz	r3, 8006ec4 <_svfiprintf_r+0x1b0>
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	3307      	adds	r3, #7
 8006e80:	f023 0307 	bic.w	r3, r3, #7
 8006e84:	3308      	adds	r3, #8
 8006e86:	9303      	str	r3, [sp, #12]
 8006e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e8a:	4433      	add	r3, r6
 8006e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e8e:	e76a      	b.n	8006d66 <_svfiprintf_r+0x52>
 8006e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e94:	460c      	mov	r4, r1
 8006e96:	2001      	movs	r0, #1
 8006e98:	e7a8      	b.n	8006dec <_svfiprintf_r+0xd8>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	3401      	adds	r4, #1
 8006e9e:	9305      	str	r3, [sp, #20]
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	f04f 0c0a 	mov.w	ip, #10
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eac:	3a30      	subs	r2, #48	@ 0x30
 8006eae:	2a09      	cmp	r2, #9
 8006eb0:	d903      	bls.n	8006eba <_svfiprintf_r+0x1a6>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0c6      	beq.n	8006e44 <_svfiprintf_r+0x130>
 8006eb6:	9105      	str	r1, [sp, #20]
 8006eb8:	e7c4      	b.n	8006e44 <_svfiprintf_r+0x130>
 8006eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e7f0      	b.n	8006ea6 <_svfiprintf_r+0x192>
 8006ec4:	ab03      	add	r3, sp, #12
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	462a      	mov	r2, r5
 8006eca:	4b0e      	ldr	r3, [pc, #56]	@ (8006f04 <_svfiprintf_r+0x1f0>)
 8006ecc:	a904      	add	r1, sp, #16
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f7fc fc24 	bl	800371c <_printf_float>
 8006ed4:	1c42      	adds	r2, r0, #1
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	d1d6      	bne.n	8006e88 <_svfiprintf_r+0x174>
 8006eda:	89ab      	ldrh	r3, [r5, #12]
 8006edc:	065b      	lsls	r3, r3, #25
 8006ede:	f53f af2d 	bmi.w	8006d3c <_svfiprintf_r+0x28>
 8006ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ee4:	e72c      	b.n	8006d40 <_svfiprintf_r+0x2c>
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	462a      	mov	r2, r5
 8006eec:	4b05      	ldr	r3, [pc, #20]	@ (8006f04 <_svfiprintf_r+0x1f0>)
 8006eee:	a904      	add	r1, sp, #16
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	f7fc feab 	bl	8003c4c <_printf_i>
 8006ef6:	e7ed      	b.n	8006ed4 <_svfiprintf_r+0x1c0>
 8006ef8:	080080a9 	.word	0x080080a9
 8006efc:	080080b3 	.word	0x080080b3
 8006f00:	0800371d 	.word	0x0800371d
 8006f04:	08006c5d 	.word	0x08006c5d
 8006f08:	080080af 	.word	0x080080af

08006f0c <__sfputc_r>:
 8006f0c:	6893      	ldr	r3, [r2, #8]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	b410      	push	{r4}
 8006f14:	6093      	str	r3, [r2, #8]
 8006f16:	da08      	bge.n	8006f2a <__sfputc_r+0x1e>
 8006f18:	6994      	ldr	r4, [r2, #24]
 8006f1a:	42a3      	cmp	r3, r4
 8006f1c:	db01      	blt.n	8006f22 <__sfputc_r+0x16>
 8006f1e:	290a      	cmp	r1, #10
 8006f20:	d103      	bne.n	8006f2a <__sfputc_r+0x1e>
 8006f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f26:	f7fd bafc 	b.w	8004522 <__swbuf_r>
 8006f2a:	6813      	ldr	r3, [r2, #0]
 8006f2c:	1c58      	adds	r0, r3, #1
 8006f2e:	6010      	str	r0, [r2, #0]
 8006f30:	7019      	strb	r1, [r3, #0]
 8006f32:	4608      	mov	r0, r1
 8006f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <__sfputs_r>:
 8006f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	460f      	mov	r7, r1
 8006f40:	4614      	mov	r4, r2
 8006f42:	18d5      	adds	r5, r2, r3
 8006f44:	42ac      	cmp	r4, r5
 8006f46:	d101      	bne.n	8006f4c <__sfputs_r+0x12>
 8006f48:	2000      	movs	r0, #0
 8006f4a:	e007      	b.n	8006f5c <__sfputs_r+0x22>
 8006f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f50:	463a      	mov	r2, r7
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7ff ffda 	bl	8006f0c <__sfputc_r>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d1f3      	bne.n	8006f44 <__sfputs_r+0xa>
 8006f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f60 <_vfiprintf_r>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	460d      	mov	r5, r1
 8006f66:	b09d      	sub	sp, #116	@ 0x74
 8006f68:	4614      	mov	r4, r2
 8006f6a:	4698      	mov	r8, r3
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	b118      	cbz	r0, 8006f78 <_vfiprintf_r+0x18>
 8006f70:	6a03      	ldr	r3, [r0, #32]
 8006f72:	b90b      	cbnz	r3, 8006f78 <_vfiprintf_r+0x18>
 8006f74:	f7fd fa2a 	bl	80043cc <__sinit>
 8006f78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f7a:	07d9      	lsls	r1, r3, #31
 8006f7c:	d405      	bmi.n	8006f8a <_vfiprintf_r+0x2a>
 8006f7e:	89ab      	ldrh	r3, [r5, #12]
 8006f80:	059a      	lsls	r2, r3, #22
 8006f82:	d402      	bmi.n	8006f8a <_vfiprintf_r+0x2a>
 8006f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f86:	f7fd fbde 	bl	8004746 <__retarget_lock_acquire_recursive>
 8006f8a:	89ab      	ldrh	r3, [r5, #12]
 8006f8c:	071b      	lsls	r3, r3, #28
 8006f8e:	d501      	bpl.n	8006f94 <_vfiprintf_r+0x34>
 8006f90:	692b      	ldr	r3, [r5, #16]
 8006f92:	b99b      	cbnz	r3, 8006fbc <_vfiprintf_r+0x5c>
 8006f94:	4629      	mov	r1, r5
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7fd fb02 	bl	80045a0 <__swsetup_r>
 8006f9c:	b170      	cbz	r0, 8006fbc <_vfiprintf_r+0x5c>
 8006f9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fa0:	07dc      	lsls	r4, r3, #31
 8006fa2:	d504      	bpl.n	8006fae <_vfiprintf_r+0x4e>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa8:	b01d      	add	sp, #116	@ 0x74
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	89ab      	ldrh	r3, [r5, #12]
 8006fb0:	0598      	lsls	r0, r3, #22
 8006fb2:	d4f7      	bmi.n	8006fa4 <_vfiprintf_r+0x44>
 8006fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fb6:	f7fd fbc7 	bl	8004748 <__retarget_lock_release_recursive>
 8006fba:	e7f3      	b.n	8006fa4 <_vfiprintf_r+0x44>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fca:	2330      	movs	r3, #48	@ 0x30
 8006fcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800717c <_vfiprintf_r+0x21c>
 8006fd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fd4:	f04f 0901 	mov.w	r9, #1
 8006fd8:	4623      	mov	r3, r4
 8006fda:	469a      	mov	sl, r3
 8006fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe0:	b10a      	cbz	r2, 8006fe6 <_vfiprintf_r+0x86>
 8006fe2:	2a25      	cmp	r2, #37	@ 0x25
 8006fe4:	d1f9      	bne.n	8006fda <_vfiprintf_r+0x7a>
 8006fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8006fea:	d00b      	beq.n	8007004 <_vfiprintf_r+0xa4>
 8006fec:	465b      	mov	r3, fp
 8006fee:	4622      	mov	r2, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7ff ffa1 	bl	8006f3a <__sfputs_r>
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f000 80a7 	beq.w	800714c <_vfiprintf_r+0x1ec>
 8006ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007000:	445a      	add	r2, fp
 8007002:	9209      	str	r2, [sp, #36]	@ 0x24
 8007004:	f89a 3000 	ldrb.w	r3, [sl]
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 809f 	beq.w	800714c <_vfiprintf_r+0x1ec>
 800700e:	2300      	movs	r3, #0
 8007010:	f04f 32ff 	mov.w	r2, #4294967295
 8007014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007018:	f10a 0a01 	add.w	sl, sl, #1
 800701c:	9304      	str	r3, [sp, #16]
 800701e:	9307      	str	r3, [sp, #28]
 8007020:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007024:	931a      	str	r3, [sp, #104]	@ 0x68
 8007026:	4654      	mov	r4, sl
 8007028:	2205      	movs	r2, #5
 800702a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800702e:	4853      	ldr	r0, [pc, #332]	@ (800717c <_vfiprintf_r+0x21c>)
 8007030:	f7f9 f8d6 	bl	80001e0 <memchr>
 8007034:	9a04      	ldr	r2, [sp, #16]
 8007036:	b9d8      	cbnz	r0, 8007070 <_vfiprintf_r+0x110>
 8007038:	06d1      	lsls	r1, r2, #27
 800703a:	bf44      	itt	mi
 800703c:	2320      	movmi	r3, #32
 800703e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007042:	0713      	lsls	r3, r2, #28
 8007044:	bf44      	itt	mi
 8007046:	232b      	movmi	r3, #43	@ 0x2b
 8007048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800704c:	f89a 3000 	ldrb.w	r3, [sl]
 8007050:	2b2a      	cmp	r3, #42	@ 0x2a
 8007052:	d015      	beq.n	8007080 <_vfiprintf_r+0x120>
 8007054:	9a07      	ldr	r2, [sp, #28]
 8007056:	4654      	mov	r4, sl
 8007058:	2000      	movs	r0, #0
 800705a:	f04f 0c0a 	mov.w	ip, #10
 800705e:	4621      	mov	r1, r4
 8007060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007064:	3b30      	subs	r3, #48	@ 0x30
 8007066:	2b09      	cmp	r3, #9
 8007068:	d94b      	bls.n	8007102 <_vfiprintf_r+0x1a2>
 800706a:	b1b0      	cbz	r0, 800709a <_vfiprintf_r+0x13a>
 800706c:	9207      	str	r2, [sp, #28]
 800706e:	e014      	b.n	800709a <_vfiprintf_r+0x13a>
 8007070:	eba0 0308 	sub.w	r3, r0, r8
 8007074:	fa09 f303 	lsl.w	r3, r9, r3
 8007078:	4313      	orrs	r3, r2
 800707a:	9304      	str	r3, [sp, #16]
 800707c:	46a2      	mov	sl, r4
 800707e:	e7d2      	b.n	8007026 <_vfiprintf_r+0xc6>
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	1d19      	adds	r1, r3, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	9103      	str	r1, [sp, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	bfbb      	ittet	lt
 800708c:	425b      	neglt	r3, r3
 800708e:	f042 0202 	orrlt.w	r2, r2, #2
 8007092:	9307      	strge	r3, [sp, #28]
 8007094:	9307      	strlt	r3, [sp, #28]
 8007096:	bfb8      	it	lt
 8007098:	9204      	strlt	r2, [sp, #16]
 800709a:	7823      	ldrb	r3, [r4, #0]
 800709c:	2b2e      	cmp	r3, #46	@ 0x2e
 800709e:	d10a      	bne.n	80070b6 <_vfiprintf_r+0x156>
 80070a0:	7863      	ldrb	r3, [r4, #1]
 80070a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80070a4:	d132      	bne.n	800710c <_vfiprintf_r+0x1ac>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	1d1a      	adds	r2, r3, #4
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	9203      	str	r2, [sp, #12]
 80070ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070b2:	3402      	adds	r4, #2
 80070b4:	9305      	str	r3, [sp, #20]
 80070b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800718c <_vfiprintf_r+0x22c>
 80070ba:	7821      	ldrb	r1, [r4, #0]
 80070bc:	2203      	movs	r2, #3
 80070be:	4650      	mov	r0, sl
 80070c0:	f7f9 f88e 	bl	80001e0 <memchr>
 80070c4:	b138      	cbz	r0, 80070d6 <_vfiprintf_r+0x176>
 80070c6:	9b04      	ldr	r3, [sp, #16]
 80070c8:	eba0 000a 	sub.w	r0, r0, sl
 80070cc:	2240      	movs	r2, #64	@ 0x40
 80070ce:	4082      	lsls	r2, r0
 80070d0:	4313      	orrs	r3, r2
 80070d2:	3401      	adds	r4, #1
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070da:	4829      	ldr	r0, [pc, #164]	@ (8007180 <_vfiprintf_r+0x220>)
 80070dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070e0:	2206      	movs	r2, #6
 80070e2:	f7f9 f87d 	bl	80001e0 <memchr>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d03f      	beq.n	800716a <_vfiprintf_r+0x20a>
 80070ea:	4b26      	ldr	r3, [pc, #152]	@ (8007184 <_vfiprintf_r+0x224>)
 80070ec:	bb1b      	cbnz	r3, 8007136 <_vfiprintf_r+0x1d6>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	3307      	adds	r3, #7
 80070f2:	f023 0307 	bic.w	r3, r3, #7
 80070f6:	3308      	adds	r3, #8
 80070f8:	9303      	str	r3, [sp, #12]
 80070fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070fc:	443b      	add	r3, r7
 80070fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007100:	e76a      	b.n	8006fd8 <_vfiprintf_r+0x78>
 8007102:	fb0c 3202 	mla	r2, ip, r2, r3
 8007106:	460c      	mov	r4, r1
 8007108:	2001      	movs	r0, #1
 800710a:	e7a8      	b.n	800705e <_vfiprintf_r+0xfe>
 800710c:	2300      	movs	r3, #0
 800710e:	3401      	adds	r4, #1
 8007110:	9305      	str	r3, [sp, #20]
 8007112:	4619      	mov	r1, r3
 8007114:	f04f 0c0a 	mov.w	ip, #10
 8007118:	4620      	mov	r0, r4
 800711a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800711e:	3a30      	subs	r2, #48	@ 0x30
 8007120:	2a09      	cmp	r2, #9
 8007122:	d903      	bls.n	800712c <_vfiprintf_r+0x1cc>
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0c6      	beq.n	80070b6 <_vfiprintf_r+0x156>
 8007128:	9105      	str	r1, [sp, #20]
 800712a:	e7c4      	b.n	80070b6 <_vfiprintf_r+0x156>
 800712c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007130:	4604      	mov	r4, r0
 8007132:	2301      	movs	r3, #1
 8007134:	e7f0      	b.n	8007118 <_vfiprintf_r+0x1b8>
 8007136:	ab03      	add	r3, sp, #12
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	462a      	mov	r2, r5
 800713c:	4b12      	ldr	r3, [pc, #72]	@ (8007188 <_vfiprintf_r+0x228>)
 800713e:	a904      	add	r1, sp, #16
 8007140:	4630      	mov	r0, r6
 8007142:	f7fc faeb 	bl	800371c <_printf_float>
 8007146:	4607      	mov	r7, r0
 8007148:	1c78      	adds	r0, r7, #1
 800714a:	d1d6      	bne.n	80070fa <_vfiprintf_r+0x19a>
 800714c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800714e:	07d9      	lsls	r1, r3, #31
 8007150:	d405      	bmi.n	800715e <_vfiprintf_r+0x1fe>
 8007152:	89ab      	ldrh	r3, [r5, #12]
 8007154:	059a      	lsls	r2, r3, #22
 8007156:	d402      	bmi.n	800715e <_vfiprintf_r+0x1fe>
 8007158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800715a:	f7fd faf5 	bl	8004748 <__retarget_lock_release_recursive>
 800715e:	89ab      	ldrh	r3, [r5, #12]
 8007160:	065b      	lsls	r3, r3, #25
 8007162:	f53f af1f 	bmi.w	8006fa4 <_vfiprintf_r+0x44>
 8007166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007168:	e71e      	b.n	8006fa8 <_vfiprintf_r+0x48>
 800716a:	ab03      	add	r3, sp, #12
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	462a      	mov	r2, r5
 8007170:	4b05      	ldr	r3, [pc, #20]	@ (8007188 <_vfiprintf_r+0x228>)
 8007172:	a904      	add	r1, sp, #16
 8007174:	4630      	mov	r0, r6
 8007176:	f7fc fd69 	bl	8003c4c <_printf_i>
 800717a:	e7e4      	b.n	8007146 <_vfiprintf_r+0x1e6>
 800717c:	080080a9 	.word	0x080080a9
 8007180:	080080b3 	.word	0x080080b3
 8007184:	0800371d 	.word	0x0800371d
 8007188:	08006f3b 	.word	0x08006f3b
 800718c:	080080af 	.word	0x080080af

08007190 <__sflush_r>:
 8007190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007198:	0716      	lsls	r6, r2, #28
 800719a:	4605      	mov	r5, r0
 800719c:	460c      	mov	r4, r1
 800719e:	d454      	bmi.n	800724a <__sflush_r+0xba>
 80071a0:	684b      	ldr	r3, [r1, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dc02      	bgt.n	80071ac <__sflush_r+0x1c>
 80071a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	dd48      	ble.n	800723e <__sflush_r+0xae>
 80071ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071ae:	2e00      	cmp	r6, #0
 80071b0:	d045      	beq.n	800723e <__sflush_r+0xae>
 80071b2:	2300      	movs	r3, #0
 80071b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071b8:	682f      	ldr	r7, [r5, #0]
 80071ba:	6a21      	ldr	r1, [r4, #32]
 80071bc:	602b      	str	r3, [r5, #0]
 80071be:	d030      	beq.n	8007222 <__sflush_r+0x92>
 80071c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	0759      	lsls	r1, r3, #29
 80071c6:	d505      	bpl.n	80071d4 <__sflush_r+0x44>
 80071c8:	6863      	ldr	r3, [r4, #4]
 80071ca:	1ad2      	subs	r2, r2, r3
 80071cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071ce:	b10b      	cbz	r3, 80071d4 <__sflush_r+0x44>
 80071d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071d2:	1ad2      	subs	r2, r2, r3
 80071d4:	2300      	movs	r3, #0
 80071d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071d8:	6a21      	ldr	r1, [r4, #32]
 80071da:	4628      	mov	r0, r5
 80071dc:	47b0      	blx	r6
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	d106      	bne.n	80071f2 <__sflush_r+0x62>
 80071e4:	6829      	ldr	r1, [r5, #0]
 80071e6:	291d      	cmp	r1, #29
 80071e8:	d82b      	bhi.n	8007242 <__sflush_r+0xb2>
 80071ea:	4a2a      	ldr	r2, [pc, #168]	@ (8007294 <__sflush_r+0x104>)
 80071ec:	410a      	asrs	r2, r1
 80071ee:	07d6      	lsls	r6, r2, #31
 80071f0:	d427      	bmi.n	8007242 <__sflush_r+0xb2>
 80071f2:	2200      	movs	r2, #0
 80071f4:	6062      	str	r2, [r4, #4]
 80071f6:	04d9      	lsls	r1, r3, #19
 80071f8:	6922      	ldr	r2, [r4, #16]
 80071fa:	6022      	str	r2, [r4, #0]
 80071fc:	d504      	bpl.n	8007208 <__sflush_r+0x78>
 80071fe:	1c42      	adds	r2, r0, #1
 8007200:	d101      	bne.n	8007206 <__sflush_r+0x76>
 8007202:	682b      	ldr	r3, [r5, #0]
 8007204:	b903      	cbnz	r3, 8007208 <__sflush_r+0x78>
 8007206:	6560      	str	r0, [r4, #84]	@ 0x54
 8007208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800720a:	602f      	str	r7, [r5, #0]
 800720c:	b1b9      	cbz	r1, 800723e <__sflush_r+0xae>
 800720e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007212:	4299      	cmp	r1, r3
 8007214:	d002      	beq.n	800721c <__sflush_r+0x8c>
 8007216:	4628      	mov	r0, r5
 8007218:	f7fe f8ea 	bl	80053f0 <_free_r>
 800721c:	2300      	movs	r3, #0
 800721e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007220:	e00d      	b.n	800723e <__sflush_r+0xae>
 8007222:	2301      	movs	r3, #1
 8007224:	4628      	mov	r0, r5
 8007226:	47b0      	blx	r6
 8007228:	4602      	mov	r2, r0
 800722a:	1c50      	adds	r0, r2, #1
 800722c:	d1c9      	bne.n	80071c2 <__sflush_r+0x32>
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0c6      	beq.n	80071c2 <__sflush_r+0x32>
 8007234:	2b1d      	cmp	r3, #29
 8007236:	d001      	beq.n	800723c <__sflush_r+0xac>
 8007238:	2b16      	cmp	r3, #22
 800723a:	d11e      	bne.n	800727a <__sflush_r+0xea>
 800723c:	602f      	str	r7, [r5, #0]
 800723e:	2000      	movs	r0, #0
 8007240:	e022      	b.n	8007288 <__sflush_r+0xf8>
 8007242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007246:	b21b      	sxth	r3, r3
 8007248:	e01b      	b.n	8007282 <__sflush_r+0xf2>
 800724a:	690f      	ldr	r7, [r1, #16]
 800724c:	2f00      	cmp	r7, #0
 800724e:	d0f6      	beq.n	800723e <__sflush_r+0xae>
 8007250:	0793      	lsls	r3, r2, #30
 8007252:	680e      	ldr	r6, [r1, #0]
 8007254:	bf08      	it	eq
 8007256:	694b      	ldreq	r3, [r1, #20]
 8007258:	600f      	str	r7, [r1, #0]
 800725a:	bf18      	it	ne
 800725c:	2300      	movne	r3, #0
 800725e:	eba6 0807 	sub.w	r8, r6, r7
 8007262:	608b      	str	r3, [r1, #8]
 8007264:	f1b8 0f00 	cmp.w	r8, #0
 8007268:	dde9      	ble.n	800723e <__sflush_r+0xae>
 800726a:	6a21      	ldr	r1, [r4, #32]
 800726c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800726e:	4643      	mov	r3, r8
 8007270:	463a      	mov	r2, r7
 8007272:	4628      	mov	r0, r5
 8007274:	47b0      	blx	r6
 8007276:	2800      	cmp	r0, #0
 8007278:	dc08      	bgt.n	800728c <__sflush_r+0xfc>
 800727a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800727e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007282:	81a3      	strh	r3, [r4, #12]
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800728c:	4407      	add	r7, r0
 800728e:	eba8 0800 	sub.w	r8, r8, r0
 8007292:	e7e7      	b.n	8007264 <__sflush_r+0xd4>
 8007294:	dfbffffe 	.word	0xdfbffffe

08007298 <_fflush_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	690b      	ldr	r3, [r1, #16]
 800729c:	4605      	mov	r5, r0
 800729e:	460c      	mov	r4, r1
 80072a0:	b913      	cbnz	r3, 80072a8 <_fflush_r+0x10>
 80072a2:	2500      	movs	r5, #0
 80072a4:	4628      	mov	r0, r5
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	b118      	cbz	r0, 80072b2 <_fflush_r+0x1a>
 80072aa:	6a03      	ldr	r3, [r0, #32]
 80072ac:	b90b      	cbnz	r3, 80072b2 <_fflush_r+0x1a>
 80072ae:	f7fd f88d 	bl	80043cc <__sinit>
 80072b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d0f3      	beq.n	80072a2 <_fflush_r+0xa>
 80072ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072bc:	07d0      	lsls	r0, r2, #31
 80072be:	d404      	bmi.n	80072ca <_fflush_r+0x32>
 80072c0:	0599      	lsls	r1, r3, #22
 80072c2:	d402      	bmi.n	80072ca <_fflush_r+0x32>
 80072c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072c6:	f7fd fa3e 	bl	8004746 <__retarget_lock_acquire_recursive>
 80072ca:	4628      	mov	r0, r5
 80072cc:	4621      	mov	r1, r4
 80072ce:	f7ff ff5f 	bl	8007190 <__sflush_r>
 80072d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072d4:	07da      	lsls	r2, r3, #31
 80072d6:	4605      	mov	r5, r0
 80072d8:	d4e4      	bmi.n	80072a4 <_fflush_r+0xc>
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	059b      	lsls	r3, r3, #22
 80072de:	d4e1      	bmi.n	80072a4 <_fflush_r+0xc>
 80072e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072e2:	f7fd fa31 	bl	8004748 <__retarget_lock_release_recursive>
 80072e6:	e7dd      	b.n	80072a4 <_fflush_r+0xc>

080072e8 <__swhatbuf_r>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	460c      	mov	r4, r1
 80072ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f0:	2900      	cmp	r1, #0
 80072f2:	b096      	sub	sp, #88	@ 0x58
 80072f4:	4615      	mov	r5, r2
 80072f6:	461e      	mov	r6, r3
 80072f8:	da0d      	bge.n	8007316 <__swhatbuf_r+0x2e>
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	bf14      	ite	ne
 8007306:	2340      	movne	r3, #64	@ 0x40
 8007308:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800730c:	2000      	movs	r0, #0
 800730e:	6031      	str	r1, [r6, #0]
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	b016      	add	sp, #88	@ 0x58
 8007314:	bd70      	pop	{r4, r5, r6, pc}
 8007316:	466a      	mov	r2, sp
 8007318:	f000 f874 	bl	8007404 <_fstat_r>
 800731c:	2800      	cmp	r0, #0
 800731e:	dbec      	blt.n	80072fa <__swhatbuf_r+0x12>
 8007320:	9901      	ldr	r1, [sp, #4]
 8007322:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007326:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800732a:	4259      	negs	r1, r3
 800732c:	4159      	adcs	r1, r3
 800732e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007332:	e7eb      	b.n	800730c <__swhatbuf_r+0x24>

08007334 <__smakebuf_r>:
 8007334:	898b      	ldrh	r3, [r1, #12]
 8007336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007338:	079d      	lsls	r5, r3, #30
 800733a:	4606      	mov	r6, r0
 800733c:	460c      	mov	r4, r1
 800733e:	d507      	bpl.n	8007350 <__smakebuf_r+0x1c>
 8007340:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	2301      	movs	r3, #1
 800734a:	6163      	str	r3, [r4, #20]
 800734c:	b003      	add	sp, #12
 800734e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007350:	ab01      	add	r3, sp, #4
 8007352:	466a      	mov	r2, sp
 8007354:	f7ff ffc8 	bl	80072e8 <__swhatbuf_r>
 8007358:	9f00      	ldr	r7, [sp, #0]
 800735a:	4605      	mov	r5, r0
 800735c:	4639      	mov	r1, r7
 800735e:	4630      	mov	r0, r6
 8007360:	f7fe f8ba 	bl	80054d8 <_malloc_r>
 8007364:	b948      	cbnz	r0, 800737a <__smakebuf_r+0x46>
 8007366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800736a:	059a      	lsls	r2, r3, #22
 800736c:	d4ee      	bmi.n	800734c <__smakebuf_r+0x18>
 800736e:	f023 0303 	bic.w	r3, r3, #3
 8007372:	f043 0302 	orr.w	r3, r3, #2
 8007376:	81a3      	strh	r3, [r4, #12]
 8007378:	e7e2      	b.n	8007340 <__smakebuf_r+0xc>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	6020      	str	r0, [r4, #0]
 800737e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007382:	81a3      	strh	r3, [r4, #12]
 8007384:	9b01      	ldr	r3, [sp, #4]
 8007386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800738a:	b15b      	cbz	r3, 80073a4 <__smakebuf_r+0x70>
 800738c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007390:	4630      	mov	r0, r6
 8007392:	f000 f849 	bl	8007428 <_isatty_r>
 8007396:	b128      	cbz	r0, 80073a4 <__smakebuf_r+0x70>
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	f023 0303 	bic.w	r3, r3, #3
 800739e:	f043 0301 	orr.w	r3, r3, #1
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	431d      	orrs	r5, r3
 80073a8:	81a5      	strh	r5, [r4, #12]
 80073aa:	e7cf      	b.n	800734c <__smakebuf_r+0x18>

080073ac <memmove>:
 80073ac:	4288      	cmp	r0, r1
 80073ae:	b510      	push	{r4, lr}
 80073b0:	eb01 0402 	add.w	r4, r1, r2
 80073b4:	d902      	bls.n	80073bc <memmove+0x10>
 80073b6:	4284      	cmp	r4, r0
 80073b8:	4623      	mov	r3, r4
 80073ba:	d807      	bhi.n	80073cc <memmove+0x20>
 80073bc:	1e43      	subs	r3, r0, #1
 80073be:	42a1      	cmp	r1, r4
 80073c0:	d008      	beq.n	80073d4 <memmove+0x28>
 80073c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ca:	e7f8      	b.n	80073be <memmove+0x12>
 80073cc:	4402      	add	r2, r0
 80073ce:	4601      	mov	r1, r0
 80073d0:	428a      	cmp	r2, r1
 80073d2:	d100      	bne.n	80073d6 <memmove+0x2a>
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073de:	e7f7      	b.n	80073d0 <memmove+0x24>

080073e0 <strncmp>:
 80073e0:	b510      	push	{r4, lr}
 80073e2:	b16a      	cbz	r2, 8007400 <strncmp+0x20>
 80073e4:	3901      	subs	r1, #1
 80073e6:	1884      	adds	r4, r0, r2
 80073e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d103      	bne.n	80073fc <strncmp+0x1c>
 80073f4:	42a0      	cmp	r0, r4
 80073f6:	d001      	beq.n	80073fc <strncmp+0x1c>
 80073f8:	2a00      	cmp	r2, #0
 80073fa:	d1f5      	bne.n	80073e8 <strncmp+0x8>
 80073fc:	1ad0      	subs	r0, r2, r3
 80073fe:	bd10      	pop	{r4, pc}
 8007400:	4610      	mov	r0, r2
 8007402:	e7fc      	b.n	80073fe <strncmp+0x1e>

08007404 <_fstat_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4d07      	ldr	r5, [pc, #28]	@ (8007424 <_fstat_r+0x20>)
 8007408:	2300      	movs	r3, #0
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	4611      	mov	r1, r2
 8007410:	602b      	str	r3, [r5, #0]
 8007412:	f7fa f96c 	bl	80016ee <_fstat>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	d102      	bne.n	8007420 <_fstat_r+0x1c>
 800741a:	682b      	ldr	r3, [r5, #0]
 800741c:	b103      	cbz	r3, 8007420 <_fstat_r+0x1c>
 800741e:	6023      	str	r3, [r4, #0]
 8007420:	bd38      	pop	{r3, r4, r5, pc}
 8007422:	bf00      	nop
 8007424:	200003c4 	.word	0x200003c4

08007428 <_isatty_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d06      	ldr	r5, [pc, #24]	@ (8007444 <_isatty_r+0x1c>)
 800742c:	2300      	movs	r3, #0
 800742e:	4604      	mov	r4, r0
 8007430:	4608      	mov	r0, r1
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	f7fa f96b 	bl	800170e <_isatty>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_isatty_r+0x1a>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_isatty_r+0x1a>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	200003c4 	.word	0x200003c4

08007448 <_sbrk_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4d06      	ldr	r5, [pc, #24]	@ (8007464 <_sbrk_r+0x1c>)
 800744c:	2300      	movs	r3, #0
 800744e:	4604      	mov	r4, r0
 8007450:	4608      	mov	r0, r1
 8007452:	602b      	str	r3, [r5, #0]
 8007454:	f7fa f974 	bl	8001740 <_sbrk>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_sbrk_r+0x1a>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_sbrk_r+0x1a>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	200003c4 	.word	0x200003c4

08007468 <memcpy>:
 8007468:	440a      	add	r2, r1
 800746a:	4291      	cmp	r1, r2
 800746c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007470:	d100      	bne.n	8007474 <memcpy+0xc>
 8007472:	4770      	bx	lr
 8007474:	b510      	push	{r4, lr}
 8007476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800747a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800747e:	4291      	cmp	r1, r2
 8007480:	d1f9      	bne.n	8007476 <memcpy+0xe>
 8007482:	bd10      	pop	{r4, pc}
 8007484:	0000      	movs	r0, r0
	...

08007488 <nan>:
 8007488:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007490 <nan+0x8>
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	00000000 	.word	0x00000000
 8007494:	7ff80000 	.word	0x7ff80000

08007498 <__assert_func>:
 8007498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800749a:	4614      	mov	r4, r2
 800749c:	461a      	mov	r2, r3
 800749e:	4b09      	ldr	r3, [pc, #36]	@ (80074c4 <__assert_func+0x2c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4605      	mov	r5, r0
 80074a4:	68d8      	ldr	r0, [r3, #12]
 80074a6:	b954      	cbnz	r4, 80074be <__assert_func+0x26>
 80074a8:	4b07      	ldr	r3, [pc, #28]	@ (80074c8 <__assert_func+0x30>)
 80074aa:	461c      	mov	r4, r3
 80074ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074b0:	9100      	str	r1, [sp, #0]
 80074b2:	462b      	mov	r3, r5
 80074b4:	4905      	ldr	r1, [pc, #20]	@ (80074cc <__assert_func+0x34>)
 80074b6:	f000 fba7 	bl	8007c08 <fiprintf>
 80074ba:	f000 fbb7 	bl	8007c2c <abort>
 80074be:	4b04      	ldr	r3, [pc, #16]	@ (80074d0 <__assert_func+0x38>)
 80074c0:	e7f4      	b.n	80074ac <__assert_func+0x14>
 80074c2:	bf00      	nop
 80074c4:	20000018 	.word	0x20000018
 80074c8:	080080fd 	.word	0x080080fd
 80074cc:	080080cf 	.word	0x080080cf
 80074d0:	080080c2 	.word	0x080080c2

080074d4 <_calloc_r>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	fba1 5402 	umull	r5, r4, r1, r2
 80074da:	b93c      	cbnz	r4, 80074ec <_calloc_r+0x18>
 80074dc:	4629      	mov	r1, r5
 80074de:	f7fd fffb 	bl	80054d8 <_malloc_r>
 80074e2:	4606      	mov	r6, r0
 80074e4:	b928      	cbnz	r0, 80074f2 <_calloc_r+0x1e>
 80074e6:	2600      	movs	r6, #0
 80074e8:	4630      	mov	r0, r6
 80074ea:	bd70      	pop	{r4, r5, r6, pc}
 80074ec:	220c      	movs	r2, #12
 80074ee:	6002      	str	r2, [r0, #0]
 80074f0:	e7f9      	b.n	80074e6 <_calloc_r+0x12>
 80074f2:	462a      	mov	r2, r5
 80074f4:	4621      	mov	r1, r4
 80074f6:	f7fd f8a9 	bl	800464c <memset>
 80074fa:	e7f5      	b.n	80074e8 <_calloc_r+0x14>

080074fc <rshift>:
 80074fc:	6903      	ldr	r3, [r0, #16]
 80074fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007502:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007506:	ea4f 1261 	mov.w	r2, r1, asr #5
 800750a:	f100 0414 	add.w	r4, r0, #20
 800750e:	dd45      	ble.n	800759c <rshift+0xa0>
 8007510:	f011 011f 	ands.w	r1, r1, #31
 8007514:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007518:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800751c:	d10c      	bne.n	8007538 <rshift+0x3c>
 800751e:	f100 0710 	add.w	r7, r0, #16
 8007522:	4629      	mov	r1, r5
 8007524:	42b1      	cmp	r1, r6
 8007526:	d334      	bcc.n	8007592 <rshift+0x96>
 8007528:	1a9b      	subs	r3, r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	1eea      	subs	r2, r5, #3
 800752e:	4296      	cmp	r6, r2
 8007530:	bf38      	it	cc
 8007532:	2300      	movcc	r3, #0
 8007534:	4423      	add	r3, r4
 8007536:	e015      	b.n	8007564 <rshift+0x68>
 8007538:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800753c:	f1c1 0820 	rsb	r8, r1, #32
 8007540:	40cf      	lsrs	r7, r1
 8007542:	f105 0e04 	add.w	lr, r5, #4
 8007546:	46a1      	mov	r9, r4
 8007548:	4576      	cmp	r6, lr
 800754a:	46f4      	mov	ip, lr
 800754c:	d815      	bhi.n	800757a <rshift+0x7e>
 800754e:	1a9a      	subs	r2, r3, r2
 8007550:	0092      	lsls	r2, r2, #2
 8007552:	3a04      	subs	r2, #4
 8007554:	3501      	adds	r5, #1
 8007556:	42ae      	cmp	r6, r5
 8007558:	bf38      	it	cc
 800755a:	2200      	movcc	r2, #0
 800755c:	18a3      	adds	r3, r4, r2
 800755e:	50a7      	str	r7, [r4, r2]
 8007560:	b107      	cbz	r7, 8007564 <rshift+0x68>
 8007562:	3304      	adds	r3, #4
 8007564:	1b1a      	subs	r2, r3, r4
 8007566:	42a3      	cmp	r3, r4
 8007568:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800756c:	bf08      	it	eq
 800756e:	2300      	moveq	r3, #0
 8007570:	6102      	str	r2, [r0, #16]
 8007572:	bf08      	it	eq
 8007574:	6143      	streq	r3, [r0, #20]
 8007576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800757a:	f8dc c000 	ldr.w	ip, [ip]
 800757e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007582:	ea4c 0707 	orr.w	r7, ip, r7
 8007586:	f849 7b04 	str.w	r7, [r9], #4
 800758a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800758e:	40cf      	lsrs	r7, r1
 8007590:	e7da      	b.n	8007548 <rshift+0x4c>
 8007592:	f851 cb04 	ldr.w	ip, [r1], #4
 8007596:	f847 cf04 	str.w	ip, [r7, #4]!
 800759a:	e7c3      	b.n	8007524 <rshift+0x28>
 800759c:	4623      	mov	r3, r4
 800759e:	e7e1      	b.n	8007564 <rshift+0x68>

080075a0 <__hexdig_fun>:
 80075a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80075a4:	2b09      	cmp	r3, #9
 80075a6:	d802      	bhi.n	80075ae <__hexdig_fun+0xe>
 80075a8:	3820      	subs	r0, #32
 80075aa:	b2c0      	uxtb	r0, r0
 80075ac:	4770      	bx	lr
 80075ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	d801      	bhi.n	80075ba <__hexdig_fun+0x1a>
 80075b6:	3847      	subs	r0, #71	@ 0x47
 80075b8:	e7f7      	b.n	80075aa <__hexdig_fun+0xa>
 80075ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d801      	bhi.n	80075c6 <__hexdig_fun+0x26>
 80075c2:	3827      	subs	r0, #39	@ 0x27
 80075c4:	e7f1      	b.n	80075aa <__hexdig_fun+0xa>
 80075c6:	2000      	movs	r0, #0
 80075c8:	4770      	bx	lr
	...

080075cc <__gethex>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	b085      	sub	sp, #20
 80075d2:	468a      	mov	sl, r1
 80075d4:	9302      	str	r3, [sp, #8]
 80075d6:	680b      	ldr	r3, [r1, #0]
 80075d8:	9001      	str	r0, [sp, #4]
 80075da:	4690      	mov	r8, r2
 80075dc:	1c9c      	adds	r4, r3, #2
 80075de:	46a1      	mov	r9, r4
 80075e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80075e4:	2830      	cmp	r0, #48	@ 0x30
 80075e6:	d0fa      	beq.n	80075de <__gethex+0x12>
 80075e8:	eba9 0303 	sub.w	r3, r9, r3
 80075ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80075f0:	f7ff ffd6 	bl	80075a0 <__hexdig_fun>
 80075f4:	4605      	mov	r5, r0
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d168      	bne.n	80076cc <__gethex+0x100>
 80075fa:	49a0      	ldr	r1, [pc, #640]	@ (800787c <__gethex+0x2b0>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	4648      	mov	r0, r9
 8007600:	f7ff feee 	bl	80073e0 <strncmp>
 8007604:	4607      	mov	r7, r0
 8007606:	2800      	cmp	r0, #0
 8007608:	d167      	bne.n	80076da <__gethex+0x10e>
 800760a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800760e:	4626      	mov	r6, r4
 8007610:	f7ff ffc6 	bl	80075a0 <__hexdig_fun>
 8007614:	2800      	cmp	r0, #0
 8007616:	d062      	beq.n	80076de <__gethex+0x112>
 8007618:	4623      	mov	r3, r4
 800761a:	7818      	ldrb	r0, [r3, #0]
 800761c:	2830      	cmp	r0, #48	@ 0x30
 800761e:	4699      	mov	r9, r3
 8007620:	f103 0301 	add.w	r3, r3, #1
 8007624:	d0f9      	beq.n	800761a <__gethex+0x4e>
 8007626:	f7ff ffbb 	bl	80075a0 <__hexdig_fun>
 800762a:	fab0 f580 	clz	r5, r0
 800762e:	096d      	lsrs	r5, r5, #5
 8007630:	f04f 0b01 	mov.w	fp, #1
 8007634:	464a      	mov	r2, r9
 8007636:	4616      	mov	r6, r2
 8007638:	3201      	adds	r2, #1
 800763a:	7830      	ldrb	r0, [r6, #0]
 800763c:	f7ff ffb0 	bl	80075a0 <__hexdig_fun>
 8007640:	2800      	cmp	r0, #0
 8007642:	d1f8      	bne.n	8007636 <__gethex+0x6a>
 8007644:	498d      	ldr	r1, [pc, #564]	@ (800787c <__gethex+0x2b0>)
 8007646:	2201      	movs	r2, #1
 8007648:	4630      	mov	r0, r6
 800764a:	f7ff fec9 	bl	80073e0 <strncmp>
 800764e:	2800      	cmp	r0, #0
 8007650:	d13f      	bne.n	80076d2 <__gethex+0x106>
 8007652:	b944      	cbnz	r4, 8007666 <__gethex+0x9a>
 8007654:	1c74      	adds	r4, r6, #1
 8007656:	4622      	mov	r2, r4
 8007658:	4616      	mov	r6, r2
 800765a:	3201      	adds	r2, #1
 800765c:	7830      	ldrb	r0, [r6, #0]
 800765e:	f7ff ff9f 	bl	80075a0 <__hexdig_fun>
 8007662:	2800      	cmp	r0, #0
 8007664:	d1f8      	bne.n	8007658 <__gethex+0x8c>
 8007666:	1ba4      	subs	r4, r4, r6
 8007668:	00a7      	lsls	r7, r4, #2
 800766a:	7833      	ldrb	r3, [r6, #0]
 800766c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007670:	2b50      	cmp	r3, #80	@ 0x50
 8007672:	d13e      	bne.n	80076f2 <__gethex+0x126>
 8007674:	7873      	ldrb	r3, [r6, #1]
 8007676:	2b2b      	cmp	r3, #43	@ 0x2b
 8007678:	d033      	beq.n	80076e2 <__gethex+0x116>
 800767a:	2b2d      	cmp	r3, #45	@ 0x2d
 800767c:	d034      	beq.n	80076e8 <__gethex+0x11c>
 800767e:	1c71      	adds	r1, r6, #1
 8007680:	2400      	movs	r4, #0
 8007682:	7808      	ldrb	r0, [r1, #0]
 8007684:	f7ff ff8c 	bl	80075a0 <__hexdig_fun>
 8007688:	1e43      	subs	r3, r0, #1
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b18      	cmp	r3, #24
 800768e:	d830      	bhi.n	80076f2 <__gethex+0x126>
 8007690:	f1a0 0210 	sub.w	r2, r0, #16
 8007694:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007698:	f7ff ff82 	bl	80075a0 <__hexdig_fun>
 800769c:	f100 3cff 	add.w	ip, r0, #4294967295
 80076a0:	fa5f fc8c 	uxtb.w	ip, ip
 80076a4:	f1bc 0f18 	cmp.w	ip, #24
 80076a8:	f04f 030a 	mov.w	r3, #10
 80076ac:	d91e      	bls.n	80076ec <__gethex+0x120>
 80076ae:	b104      	cbz	r4, 80076b2 <__gethex+0xe6>
 80076b0:	4252      	negs	r2, r2
 80076b2:	4417      	add	r7, r2
 80076b4:	f8ca 1000 	str.w	r1, [sl]
 80076b8:	b1ed      	cbz	r5, 80076f6 <__gethex+0x12a>
 80076ba:	f1bb 0f00 	cmp.w	fp, #0
 80076be:	bf0c      	ite	eq
 80076c0:	2506      	moveq	r5, #6
 80076c2:	2500      	movne	r5, #0
 80076c4:	4628      	mov	r0, r5
 80076c6:	b005      	add	sp, #20
 80076c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076cc:	2500      	movs	r5, #0
 80076ce:	462c      	mov	r4, r5
 80076d0:	e7b0      	b.n	8007634 <__gethex+0x68>
 80076d2:	2c00      	cmp	r4, #0
 80076d4:	d1c7      	bne.n	8007666 <__gethex+0x9a>
 80076d6:	4627      	mov	r7, r4
 80076d8:	e7c7      	b.n	800766a <__gethex+0x9e>
 80076da:	464e      	mov	r6, r9
 80076dc:	462f      	mov	r7, r5
 80076de:	2501      	movs	r5, #1
 80076e0:	e7c3      	b.n	800766a <__gethex+0x9e>
 80076e2:	2400      	movs	r4, #0
 80076e4:	1cb1      	adds	r1, r6, #2
 80076e6:	e7cc      	b.n	8007682 <__gethex+0xb6>
 80076e8:	2401      	movs	r4, #1
 80076ea:	e7fb      	b.n	80076e4 <__gethex+0x118>
 80076ec:	fb03 0002 	mla	r0, r3, r2, r0
 80076f0:	e7ce      	b.n	8007690 <__gethex+0xc4>
 80076f2:	4631      	mov	r1, r6
 80076f4:	e7de      	b.n	80076b4 <__gethex+0xe8>
 80076f6:	eba6 0309 	sub.w	r3, r6, r9
 80076fa:	3b01      	subs	r3, #1
 80076fc:	4629      	mov	r1, r5
 80076fe:	2b07      	cmp	r3, #7
 8007700:	dc0a      	bgt.n	8007718 <__gethex+0x14c>
 8007702:	9801      	ldr	r0, [sp, #4]
 8007704:	f7fd ff74 	bl	80055f0 <_Balloc>
 8007708:	4604      	mov	r4, r0
 800770a:	b940      	cbnz	r0, 800771e <__gethex+0x152>
 800770c:	4b5c      	ldr	r3, [pc, #368]	@ (8007880 <__gethex+0x2b4>)
 800770e:	4602      	mov	r2, r0
 8007710:	21e4      	movs	r1, #228	@ 0xe4
 8007712:	485c      	ldr	r0, [pc, #368]	@ (8007884 <__gethex+0x2b8>)
 8007714:	f7ff fec0 	bl	8007498 <__assert_func>
 8007718:	3101      	adds	r1, #1
 800771a:	105b      	asrs	r3, r3, #1
 800771c:	e7ef      	b.n	80076fe <__gethex+0x132>
 800771e:	f100 0a14 	add.w	sl, r0, #20
 8007722:	2300      	movs	r3, #0
 8007724:	4655      	mov	r5, sl
 8007726:	469b      	mov	fp, r3
 8007728:	45b1      	cmp	r9, r6
 800772a:	d337      	bcc.n	800779c <__gethex+0x1d0>
 800772c:	f845 bb04 	str.w	fp, [r5], #4
 8007730:	eba5 050a 	sub.w	r5, r5, sl
 8007734:	10ad      	asrs	r5, r5, #2
 8007736:	6125      	str	r5, [r4, #16]
 8007738:	4658      	mov	r0, fp
 800773a:	f7fe f84b 	bl	80057d4 <__hi0bits>
 800773e:	016d      	lsls	r5, r5, #5
 8007740:	f8d8 6000 	ldr.w	r6, [r8]
 8007744:	1a2d      	subs	r5, r5, r0
 8007746:	42b5      	cmp	r5, r6
 8007748:	dd54      	ble.n	80077f4 <__gethex+0x228>
 800774a:	1bad      	subs	r5, r5, r6
 800774c:	4629      	mov	r1, r5
 800774e:	4620      	mov	r0, r4
 8007750:	f7fe fbdf 	bl	8005f12 <__any_on>
 8007754:	4681      	mov	r9, r0
 8007756:	b178      	cbz	r0, 8007778 <__gethex+0x1ac>
 8007758:	1e6b      	subs	r3, r5, #1
 800775a:	1159      	asrs	r1, r3, #5
 800775c:	f003 021f 	and.w	r2, r3, #31
 8007760:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007764:	f04f 0901 	mov.w	r9, #1
 8007768:	fa09 f202 	lsl.w	r2, r9, r2
 800776c:	420a      	tst	r2, r1
 800776e:	d003      	beq.n	8007778 <__gethex+0x1ac>
 8007770:	454b      	cmp	r3, r9
 8007772:	dc36      	bgt.n	80077e2 <__gethex+0x216>
 8007774:	f04f 0902 	mov.w	r9, #2
 8007778:	4629      	mov	r1, r5
 800777a:	4620      	mov	r0, r4
 800777c:	f7ff febe 	bl	80074fc <rshift>
 8007780:	442f      	add	r7, r5
 8007782:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007786:	42bb      	cmp	r3, r7
 8007788:	da42      	bge.n	8007810 <__gethex+0x244>
 800778a:	9801      	ldr	r0, [sp, #4]
 800778c:	4621      	mov	r1, r4
 800778e:	f7fd ff6f 	bl	8005670 <_Bfree>
 8007792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007794:	2300      	movs	r3, #0
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	25a3      	movs	r5, #163	@ 0xa3
 800779a:	e793      	b.n	80076c4 <__gethex+0xf8>
 800779c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80077a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80077a2:	d012      	beq.n	80077ca <__gethex+0x1fe>
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d104      	bne.n	80077b2 <__gethex+0x1e6>
 80077a8:	f845 bb04 	str.w	fp, [r5], #4
 80077ac:	f04f 0b00 	mov.w	fp, #0
 80077b0:	465b      	mov	r3, fp
 80077b2:	7830      	ldrb	r0, [r6, #0]
 80077b4:	9303      	str	r3, [sp, #12]
 80077b6:	f7ff fef3 	bl	80075a0 <__hexdig_fun>
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	f000 000f 	and.w	r0, r0, #15
 80077c0:	4098      	lsls	r0, r3
 80077c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80077c6:	3304      	adds	r3, #4
 80077c8:	e7ae      	b.n	8007728 <__gethex+0x15c>
 80077ca:	45b1      	cmp	r9, r6
 80077cc:	d8ea      	bhi.n	80077a4 <__gethex+0x1d8>
 80077ce:	492b      	ldr	r1, [pc, #172]	@ (800787c <__gethex+0x2b0>)
 80077d0:	9303      	str	r3, [sp, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7ff fe03 	bl	80073e0 <strncmp>
 80077da:	9b03      	ldr	r3, [sp, #12]
 80077dc:	2800      	cmp	r0, #0
 80077de:	d1e1      	bne.n	80077a4 <__gethex+0x1d8>
 80077e0:	e7a2      	b.n	8007728 <__gethex+0x15c>
 80077e2:	1ea9      	subs	r1, r5, #2
 80077e4:	4620      	mov	r0, r4
 80077e6:	f7fe fb94 	bl	8005f12 <__any_on>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d0c2      	beq.n	8007774 <__gethex+0x1a8>
 80077ee:	f04f 0903 	mov.w	r9, #3
 80077f2:	e7c1      	b.n	8007778 <__gethex+0x1ac>
 80077f4:	da09      	bge.n	800780a <__gethex+0x23e>
 80077f6:	1b75      	subs	r5, r6, r5
 80077f8:	4621      	mov	r1, r4
 80077fa:	9801      	ldr	r0, [sp, #4]
 80077fc:	462a      	mov	r2, r5
 80077fe:	f7fe f94f 	bl	8005aa0 <__lshift>
 8007802:	1b7f      	subs	r7, r7, r5
 8007804:	4604      	mov	r4, r0
 8007806:	f100 0a14 	add.w	sl, r0, #20
 800780a:	f04f 0900 	mov.w	r9, #0
 800780e:	e7b8      	b.n	8007782 <__gethex+0x1b6>
 8007810:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007814:	42bd      	cmp	r5, r7
 8007816:	dd6f      	ble.n	80078f8 <__gethex+0x32c>
 8007818:	1bed      	subs	r5, r5, r7
 800781a:	42ae      	cmp	r6, r5
 800781c:	dc34      	bgt.n	8007888 <__gethex+0x2bc>
 800781e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d022      	beq.n	800786c <__gethex+0x2a0>
 8007826:	2b03      	cmp	r3, #3
 8007828:	d024      	beq.n	8007874 <__gethex+0x2a8>
 800782a:	2b01      	cmp	r3, #1
 800782c:	d115      	bne.n	800785a <__gethex+0x28e>
 800782e:	42ae      	cmp	r6, r5
 8007830:	d113      	bne.n	800785a <__gethex+0x28e>
 8007832:	2e01      	cmp	r6, #1
 8007834:	d10b      	bne.n	800784e <__gethex+0x282>
 8007836:	9a02      	ldr	r2, [sp, #8]
 8007838:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	2301      	movs	r3, #1
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	f8ca 3000 	str.w	r3, [sl]
 8007846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007848:	2562      	movs	r5, #98	@ 0x62
 800784a:	601c      	str	r4, [r3, #0]
 800784c:	e73a      	b.n	80076c4 <__gethex+0xf8>
 800784e:	1e71      	subs	r1, r6, #1
 8007850:	4620      	mov	r0, r4
 8007852:	f7fe fb5e 	bl	8005f12 <__any_on>
 8007856:	2800      	cmp	r0, #0
 8007858:	d1ed      	bne.n	8007836 <__gethex+0x26a>
 800785a:	9801      	ldr	r0, [sp, #4]
 800785c:	4621      	mov	r1, r4
 800785e:	f7fd ff07 	bl	8005670 <_Bfree>
 8007862:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007864:	2300      	movs	r3, #0
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	2550      	movs	r5, #80	@ 0x50
 800786a:	e72b      	b.n	80076c4 <__gethex+0xf8>
 800786c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1f3      	bne.n	800785a <__gethex+0x28e>
 8007872:	e7e0      	b.n	8007836 <__gethex+0x26a>
 8007874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1dd      	bne.n	8007836 <__gethex+0x26a>
 800787a:	e7ee      	b.n	800785a <__gethex+0x28e>
 800787c:	08007f50 	.word	0x08007f50
 8007880:	08007de9 	.word	0x08007de9
 8007884:	080080fe 	.word	0x080080fe
 8007888:	1e6f      	subs	r7, r5, #1
 800788a:	f1b9 0f00 	cmp.w	r9, #0
 800788e:	d130      	bne.n	80078f2 <__gethex+0x326>
 8007890:	b127      	cbz	r7, 800789c <__gethex+0x2d0>
 8007892:	4639      	mov	r1, r7
 8007894:	4620      	mov	r0, r4
 8007896:	f7fe fb3c 	bl	8005f12 <__any_on>
 800789a:	4681      	mov	r9, r0
 800789c:	117a      	asrs	r2, r7, #5
 800789e:	2301      	movs	r3, #1
 80078a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80078a4:	f007 071f 	and.w	r7, r7, #31
 80078a8:	40bb      	lsls	r3, r7
 80078aa:	4213      	tst	r3, r2
 80078ac:	4629      	mov	r1, r5
 80078ae:	4620      	mov	r0, r4
 80078b0:	bf18      	it	ne
 80078b2:	f049 0902 	orrne.w	r9, r9, #2
 80078b6:	f7ff fe21 	bl	80074fc <rshift>
 80078ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80078be:	1b76      	subs	r6, r6, r5
 80078c0:	2502      	movs	r5, #2
 80078c2:	f1b9 0f00 	cmp.w	r9, #0
 80078c6:	d047      	beq.n	8007958 <__gethex+0x38c>
 80078c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d015      	beq.n	80078fc <__gethex+0x330>
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d017      	beq.n	8007904 <__gethex+0x338>
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d109      	bne.n	80078ec <__gethex+0x320>
 80078d8:	f019 0f02 	tst.w	r9, #2
 80078dc:	d006      	beq.n	80078ec <__gethex+0x320>
 80078de:	f8da 3000 	ldr.w	r3, [sl]
 80078e2:	ea49 0903 	orr.w	r9, r9, r3
 80078e6:	f019 0f01 	tst.w	r9, #1
 80078ea:	d10e      	bne.n	800790a <__gethex+0x33e>
 80078ec:	f045 0510 	orr.w	r5, r5, #16
 80078f0:	e032      	b.n	8007958 <__gethex+0x38c>
 80078f2:	f04f 0901 	mov.w	r9, #1
 80078f6:	e7d1      	b.n	800789c <__gethex+0x2d0>
 80078f8:	2501      	movs	r5, #1
 80078fa:	e7e2      	b.n	80078c2 <__gethex+0x2f6>
 80078fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078fe:	f1c3 0301 	rsb	r3, r3, #1
 8007902:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0f0      	beq.n	80078ec <__gethex+0x320>
 800790a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800790e:	f104 0314 	add.w	r3, r4, #20
 8007912:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007916:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800791a:	f04f 0c00 	mov.w	ip, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f853 2b04 	ldr.w	r2, [r3], #4
 8007924:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007928:	d01b      	beq.n	8007962 <__gethex+0x396>
 800792a:	3201      	adds	r2, #1
 800792c:	6002      	str	r2, [r0, #0]
 800792e:	2d02      	cmp	r5, #2
 8007930:	f104 0314 	add.w	r3, r4, #20
 8007934:	d13c      	bne.n	80079b0 <__gethex+0x3e4>
 8007936:	f8d8 2000 	ldr.w	r2, [r8]
 800793a:	3a01      	subs	r2, #1
 800793c:	42b2      	cmp	r2, r6
 800793e:	d109      	bne.n	8007954 <__gethex+0x388>
 8007940:	1171      	asrs	r1, r6, #5
 8007942:	2201      	movs	r2, #1
 8007944:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007948:	f006 061f 	and.w	r6, r6, #31
 800794c:	fa02 f606 	lsl.w	r6, r2, r6
 8007950:	421e      	tst	r6, r3
 8007952:	d13a      	bne.n	80079ca <__gethex+0x3fe>
 8007954:	f045 0520 	orr.w	r5, r5, #32
 8007958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800795a:	601c      	str	r4, [r3, #0]
 800795c:	9b02      	ldr	r3, [sp, #8]
 800795e:	601f      	str	r7, [r3, #0]
 8007960:	e6b0      	b.n	80076c4 <__gethex+0xf8>
 8007962:	4299      	cmp	r1, r3
 8007964:	f843 cc04 	str.w	ip, [r3, #-4]
 8007968:	d8d9      	bhi.n	800791e <__gethex+0x352>
 800796a:	68a3      	ldr	r3, [r4, #8]
 800796c:	459b      	cmp	fp, r3
 800796e:	db17      	blt.n	80079a0 <__gethex+0x3d4>
 8007970:	6861      	ldr	r1, [r4, #4]
 8007972:	9801      	ldr	r0, [sp, #4]
 8007974:	3101      	adds	r1, #1
 8007976:	f7fd fe3b 	bl	80055f0 <_Balloc>
 800797a:	4681      	mov	r9, r0
 800797c:	b918      	cbnz	r0, 8007986 <__gethex+0x3ba>
 800797e:	4b1a      	ldr	r3, [pc, #104]	@ (80079e8 <__gethex+0x41c>)
 8007980:	4602      	mov	r2, r0
 8007982:	2184      	movs	r1, #132	@ 0x84
 8007984:	e6c5      	b.n	8007712 <__gethex+0x146>
 8007986:	6922      	ldr	r2, [r4, #16]
 8007988:	3202      	adds	r2, #2
 800798a:	f104 010c 	add.w	r1, r4, #12
 800798e:	0092      	lsls	r2, r2, #2
 8007990:	300c      	adds	r0, #12
 8007992:	f7ff fd69 	bl	8007468 <memcpy>
 8007996:	4621      	mov	r1, r4
 8007998:	9801      	ldr	r0, [sp, #4]
 800799a:	f7fd fe69 	bl	8005670 <_Bfree>
 800799e:	464c      	mov	r4, r9
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079a8:	6122      	str	r2, [r4, #16]
 80079aa:	2201      	movs	r2, #1
 80079ac:	615a      	str	r2, [r3, #20]
 80079ae:	e7be      	b.n	800792e <__gethex+0x362>
 80079b0:	6922      	ldr	r2, [r4, #16]
 80079b2:	455a      	cmp	r2, fp
 80079b4:	dd0b      	ble.n	80079ce <__gethex+0x402>
 80079b6:	2101      	movs	r1, #1
 80079b8:	4620      	mov	r0, r4
 80079ba:	f7ff fd9f 	bl	80074fc <rshift>
 80079be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079c2:	3701      	adds	r7, #1
 80079c4:	42bb      	cmp	r3, r7
 80079c6:	f6ff aee0 	blt.w	800778a <__gethex+0x1be>
 80079ca:	2501      	movs	r5, #1
 80079cc:	e7c2      	b.n	8007954 <__gethex+0x388>
 80079ce:	f016 061f 	ands.w	r6, r6, #31
 80079d2:	d0fa      	beq.n	80079ca <__gethex+0x3fe>
 80079d4:	4453      	add	r3, sl
 80079d6:	f1c6 0620 	rsb	r6, r6, #32
 80079da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80079de:	f7fd fef9 	bl	80057d4 <__hi0bits>
 80079e2:	42b0      	cmp	r0, r6
 80079e4:	dbe7      	blt.n	80079b6 <__gethex+0x3ea>
 80079e6:	e7f0      	b.n	80079ca <__gethex+0x3fe>
 80079e8:	08007de9 	.word	0x08007de9

080079ec <L_shift>:
 80079ec:	f1c2 0208 	rsb	r2, r2, #8
 80079f0:	0092      	lsls	r2, r2, #2
 80079f2:	b570      	push	{r4, r5, r6, lr}
 80079f4:	f1c2 0620 	rsb	r6, r2, #32
 80079f8:	6843      	ldr	r3, [r0, #4]
 80079fa:	6804      	ldr	r4, [r0, #0]
 80079fc:	fa03 f506 	lsl.w	r5, r3, r6
 8007a00:	432c      	orrs	r4, r5
 8007a02:	40d3      	lsrs	r3, r2
 8007a04:	6004      	str	r4, [r0, #0]
 8007a06:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a0a:	4288      	cmp	r0, r1
 8007a0c:	d3f4      	bcc.n	80079f8 <L_shift+0xc>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}

08007a10 <__match>:
 8007a10:	b530      	push	{r4, r5, lr}
 8007a12:	6803      	ldr	r3, [r0, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a1a:	b914      	cbnz	r4, 8007a22 <__match+0x12>
 8007a1c:	6003      	str	r3, [r0, #0]
 8007a1e:	2001      	movs	r0, #1
 8007a20:	bd30      	pop	{r4, r5, pc}
 8007a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007a2a:	2d19      	cmp	r5, #25
 8007a2c:	bf98      	it	ls
 8007a2e:	3220      	addls	r2, #32
 8007a30:	42a2      	cmp	r2, r4
 8007a32:	d0f0      	beq.n	8007a16 <__match+0x6>
 8007a34:	2000      	movs	r0, #0
 8007a36:	e7f3      	b.n	8007a20 <__match+0x10>

08007a38 <__hexnan>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	680b      	ldr	r3, [r1, #0]
 8007a3e:	6801      	ldr	r1, [r0, #0]
 8007a40:	115e      	asrs	r6, r3, #5
 8007a42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a46:	f013 031f 	ands.w	r3, r3, #31
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	bf18      	it	ne
 8007a4e:	3604      	addne	r6, #4
 8007a50:	2500      	movs	r5, #0
 8007a52:	1f37      	subs	r7, r6, #4
 8007a54:	4682      	mov	sl, r0
 8007a56:	4690      	mov	r8, r2
 8007a58:	9301      	str	r3, [sp, #4]
 8007a5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a5e:	46b9      	mov	r9, r7
 8007a60:	463c      	mov	r4, r7
 8007a62:	9502      	str	r5, [sp, #8]
 8007a64:	46ab      	mov	fp, r5
 8007a66:	784a      	ldrb	r2, [r1, #1]
 8007a68:	1c4b      	adds	r3, r1, #1
 8007a6a:	9303      	str	r3, [sp, #12]
 8007a6c:	b342      	cbz	r2, 8007ac0 <__hexnan+0x88>
 8007a6e:	4610      	mov	r0, r2
 8007a70:	9105      	str	r1, [sp, #20]
 8007a72:	9204      	str	r2, [sp, #16]
 8007a74:	f7ff fd94 	bl	80075a0 <__hexdig_fun>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d151      	bne.n	8007b20 <__hexnan+0xe8>
 8007a7c:	9a04      	ldr	r2, [sp, #16]
 8007a7e:	9905      	ldr	r1, [sp, #20]
 8007a80:	2a20      	cmp	r2, #32
 8007a82:	d818      	bhi.n	8007ab6 <__hexnan+0x7e>
 8007a84:	9b02      	ldr	r3, [sp, #8]
 8007a86:	459b      	cmp	fp, r3
 8007a88:	dd13      	ble.n	8007ab2 <__hexnan+0x7a>
 8007a8a:	454c      	cmp	r4, r9
 8007a8c:	d206      	bcs.n	8007a9c <__hexnan+0x64>
 8007a8e:	2d07      	cmp	r5, #7
 8007a90:	dc04      	bgt.n	8007a9c <__hexnan+0x64>
 8007a92:	462a      	mov	r2, r5
 8007a94:	4649      	mov	r1, r9
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7ff ffa8 	bl	80079ec <L_shift>
 8007a9c:	4544      	cmp	r4, r8
 8007a9e:	d952      	bls.n	8007b46 <__hexnan+0x10e>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f1a4 0904 	sub.w	r9, r4, #4
 8007aa6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007aaa:	f8cd b008 	str.w	fp, [sp, #8]
 8007aae:	464c      	mov	r4, r9
 8007ab0:	461d      	mov	r5, r3
 8007ab2:	9903      	ldr	r1, [sp, #12]
 8007ab4:	e7d7      	b.n	8007a66 <__hexnan+0x2e>
 8007ab6:	2a29      	cmp	r2, #41	@ 0x29
 8007ab8:	d157      	bne.n	8007b6a <__hexnan+0x132>
 8007aba:	3102      	adds	r1, #2
 8007abc:	f8ca 1000 	str.w	r1, [sl]
 8007ac0:	f1bb 0f00 	cmp.w	fp, #0
 8007ac4:	d051      	beq.n	8007b6a <__hexnan+0x132>
 8007ac6:	454c      	cmp	r4, r9
 8007ac8:	d206      	bcs.n	8007ad8 <__hexnan+0xa0>
 8007aca:	2d07      	cmp	r5, #7
 8007acc:	dc04      	bgt.n	8007ad8 <__hexnan+0xa0>
 8007ace:	462a      	mov	r2, r5
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7ff ff8a 	bl	80079ec <L_shift>
 8007ad8:	4544      	cmp	r4, r8
 8007ada:	d936      	bls.n	8007b4a <__hexnan+0x112>
 8007adc:	f1a8 0204 	sub.w	r2, r8, #4
 8007ae0:	4623      	mov	r3, r4
 8007ae2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007ae6:	f842 1f04 	str.w	r1, [r2, #4]!
 8007aea:	429f      	cmp	r7, r3
 8007aec:	d2f9      	bcs.n	8007ae2 <__hexnan+0xaa>
 8007aee:	1b3b      	subs	r3, r7, r4
 8007af0:	f023 0303 	bic.w	r3, r3, #3
 8007af4:	3304      	adds	r3, #4
 8007af6:	3401      	adds	r4, #1
 8007af8:	3e03      	subs	r6, #3
 8007afa:	42b4      	cmp	r4, r6
 8007afc:	bf88      	it	hi
 8007afe:	2304      	movhi	r3, #4
 8007b00:	4443      	add	r3, r8
 8007b02:	2200      	movs	r2, #0
 8007b04:	f843 2b04 	str.w	r2, [r3], #4
 8007b08:	429f      	cmp	r7, r3
 8007b0a:	d2fb      	bcs.n	8007b04 <__hexnan+0xcc>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	b91b      	cbnz	r3, 8007b18 <__hexnan+0xe0>
 8007b10:	4547      	cmp	r7, r8
 8007b12:	d128      	bne.n	8007b66 <__hexnan+0x12e>
 8007b14:	2301      	movs	r3, #1
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	2005      	movs	r0, #5
 8007b1a:	b007      	add	sp, #28
 8007b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b20:	3501      	adds	r5, #1
 8007b22:	2d08      	cmp	r5, #8
 8007b24:	f10b 0b01 	add.w	fp, fp, #1
 8007b28:	dd06      	ble.n	8007b38 <__hexnan+0x100>
 8007b2a:	4544      	cmp	r4, r8
 8007b2c:	d9c1      	bls.n	8007ab2 <__hexnan+0x7a>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b34:	2501      	movs	r5, #1
 8007b36:	3c04      	subs	r4, #4
 8007b38:	6822      	ldr	r2, [r4, #0]
 8007b3a:	f000 000f 	and.w	r0, r0, #15
 8007b3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007b42:	6020      	str	r0, [r4, #0]
 8007b44:	e7b5      	b.n	8007ab2 <__hexnan+0x7a>
 8007b46:	2508      	movs	r5, #8
 8007b48:	e7b3      	b.n	8007ab2 <__hexnan+0x7a>
 8007b4a:	9b01      	ldr	r3, [sp, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0dd      	beq.n	8007b0c <__hexnan+0xd4>
 8007b50:	f1c3 0320 	rsb	r3, r3, #32
 8007b54:	f04f 32ff 	mov.w	r2, #4294967295
 8007b58:	40da      	lsrs	r2, r3
 8007b5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	f846 3c04 	str.w	r3, [r6, #-4]
 8007b64:	e7d2      	b.n	8007b0c <__hexnan+0xd4>
 8007b66:	3f04      	subs	r7, #4
 8007b68:	e7d0      	b.n	8007b0c <__hexnan+0xd4>
 8007b6a:	2004      	movs	r0, #4
 8007b6c:	e7d5      	b.n	8007b1a <__hexnan+0xe2>

08007b6e <__ascii_mbtowc>:
 8007b6e:	b082      	sub	sp, #8
 8007b70:	b901      	cbnz	r1, 8007b74 <__ascii_mbtowc+0x6>
 8007b72:	a901      	add	r1, sp, #4
 8007b74:	b142      	cbz	r2, 8007b88 <__ascii_mbtowc+0x1a>
 8007b76:	b14b      	cbz	r3, 8007b8c <__ascii_mbtowc+0x1e>
 8007b78:	7813      	ldrb	r3, [r2, #0]
 8007b7a:	600b      	str	r3, [r1, #0]
 8007b7c:	7812      	ldrb	r2, [r2, #0]
 8007b7e:	1e10      	subs	r0, r2, #0
 8007b80:	bf18      	it	ne
 8007b82:	2001      	movne	r0, #1
 8007b84:	b002      	add	sp, #8
 8007b86:	4770      	bx	lr
 8007b88:	4610      	mov	r0, r2
 8007b8a:	e7fb      	b.n	8007b84 <__ascii_mbtowc+0x16>
 8007b8c:	f06f 0001 	mvn.w	r0, #1
 8007b90:	e7f8      	b.n	8007b84 <__ascii_mbtowc+0x16>

08007b92 <_realloc_r>:
 8007b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b96:	4680      	mov	r8, r0
 8007b98:	4615      	mov	r5, r2
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	b921      	cbnz	r1, 8007ba8 <_realloc_r+0x16>
 8007b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	f7fd bc98 	b.w	80054d8 <_malloc_r>
 8007ba8:	b92a      	cbnz	r2, 8007bb6 <_realloc_r+0x24>
 8007baa:	f7fd fc21 	bl	80053f0 <_free_r>
 8007bae:	2400      	movs	r4, #0
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb6:	f000 f840 	bl	8007c3a <_malloc_usable_size_r>
 8007bba:	4285      	cmp	r5, r0
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	d802      	bhi.n	8007bc6 <_realloc_r+0x34>
 8007bc0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007bc4:	d8f4      	bhi.n	8007bb0 <_realloc_r+0x1e>
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4640      	mov	r0, r8
 8007bca:	f7fd fc85 	bl	80054d8 <_malloc_r>
 8007bce:	4607      	mov	r7, r0
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d0ec      	beq.n	8007bae <_realloc_r+0x1c>
 8007bd4:	42b5      	cmp	r5, r6
 8007bd6:	462a      	mov	r2, r5
 8007bd8:	4621      	mov	r1, r4
 8007bda:	bf28      	it	cs
 8007bdc:	4632      	movcs	r2, r6
 8007bde:	f7ff fc43 	bl	8007468 <memcpy>
 8007be2:	4621      	mov	r1, r4
 8007be4:	4640      	mov	r0, r8
 8007be6:	f7fd fc03 	bl	80053f0 <_free_r>
 8007bea:	463c      	mov	r4, r7
 8007bec:	e7e0      	b.n	8007bb0 <_realloc_r+0x1e>

08007bee <__ascii_wctomb>:
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	b141      	cbz	r1, 8007c06 <__ascii_wctomb+0x18>
 8007bf4:	2aff      	cmp	r2, #255	@ 0xff
 8007bf6:	d904      	bls.n	8007c02 <__ascii_wctomb+0x14>
 8007bf8:	228a      	movs	r2, #138	@ 0x8a
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007c00:	4770      	bx	lr
 8007c02:	700a      	strb	r2, [r1, #0]
 8007c04:	2001      	movs	r0, #1
 8007c06:	4770      	bx	lr

08007c08 <fiprintf>:
 8007c08:	b40e      	push	{r1, r2, r3}
 8007c0a:	b503      	push	{r0, r1, lr}
 8007c0c:	4601      	mov	r1, r0
 8007c0e:	ab03      	add	r3, sp, #12
 8007c10:	4805      	ldr	r0, [pc, #20]	@ (8007c28 <fiprintf+0x20>)
 8007c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c16:	6800      	ldr	r0, [r0, #0]
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	f7ff f9a1 	bl	8006f60 <_vfiprintf_r>
 8007c1e:	b002      	add	sp, #8
 8007c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c24:	b003      	add	sp, #12
 8007c26:	4770      	bx	lr
 8007c28:	20000018 	.word	0x20000018

08007c2c <abort>:
 8007c2c:	b508      	push	{r3, lr}
 8007c2e:	2006      	movs	r0, #6
 8007c30:	f000 f834 	bl	8007c9c <raise>
 8007c34:	2001      	movs	r0, #1
 8007c36:	f7f9 fd0a 	bl	800164e <_exit>

08007c3a <_malloc_usable_size_r>:
 8007c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c3e:	1f18      	subs	r0, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bfbc      	itt	lt
 8007c44:	580b      	ldrlt	r3, [r1, r0]
 8007c46:	18c0      	addlt	r0, r0, r3
 8007c48:	4770      	bx	lr

08007c4a <_raise_r>:
 8007c4a:	291f      	cmp	r1, #31
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4605      	mov	r5, r0
 8007c50:	460c      	mov	r4, r1
 8007c52:	d904      	bls.n	8007c5e <_raise_r+0x14>
 8007c54:	2316      	movs	r3, #22
 8007c56:	6003      	str	r3, [r0, #0]
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c60:	b112      	cbz	r2, 8007c68 <_raise_r+0x1e>
 8007c62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c66:	b94b      	cbnz	r3, 8007c7c <_raise_r+0x32>
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 f831 	bl	8007cd0 <_getpid_r>
 8007c6e:	4622      	mov	r2, r4
 8007c70:	4601      	mov	r1, r0
 8007c72:	4628      	mov	r0, r5
 8007c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c78:	f000 b818 	b.w	8007cac <_kill_r>
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d00a      	beq.n	8007c96 <_raise_r+0x4c>
 8007c80:	1c59      	adds	r1, r3, #1
 8007c82:	d103      	bne.n	8007c8c <_raise_r+0x42>
 8007c84:	2316      	movs	r3, #22
 8007c86:	6003      	str	r3, [r0, #0]
 8007c88:	2001      	movs	r0, #1
 8007c8a:	e7e7      	b.n	8007c5c <_raise_r+0x12>
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c92:	4620      	mov	r0, r4
 8007c94:	4798      	blx	r3
 8007c96:	2000      	movs	r0, #0
 8007c98:	e7e0      	b.n	8007c5c <_raise_r+0x12>
	...

08007c9c <raise>:
 8007c9c:	4b02      	ldr	r3, [pc, #8]	@ (8007ca8 <raise+0xc>)
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	f7ff bfd2 	b.w	8007c4a <_raise_r>
 8007ca6:	bf00      	nop
 8007ca8:	20000018 	.word	0x20000018

08007cac <_kill_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4d07      	ldr	r5, [pc, #28]	@ (8007ccc <_kill_r+0x20>)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	602b      	str	r3, [r5, #0]
 8007cba:	f7f9 fcb8 	bl	800162e <_kill>
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	d102      	bne.n	8007cc8 <_kill_r+0x1c>
 8007cc2:	682b      	ldr	r3, [r5, #0]
 8007cc4:	b103      	cbz	r3, 8007cc8 <_kill_r+0x1c>
 8007cc6:	6023      	str	r3, [r4, #0]
 8007cc8:	bd38      	pop	{r3, r4, r5, pc}
 8007cca:	bf00      	nop
 8007ccc:	200003c4 	.word	0x200003c4

08007cd0 <_getpid_r>:
 8007cd0:	f7f9 bca5 	b.w	800161e <_getpid>

08007cd4 <_init>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	bf00      	nop
 8007cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cda:	bc08      	pop	{r3}
 8007cdc:	469e      	mov	lr, r3
 8007cde:	4770      	bx	lr

08007ce0 <_fini>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr
