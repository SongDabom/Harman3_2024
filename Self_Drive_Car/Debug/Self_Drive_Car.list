
Self_Drive_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ffc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  080081a0  080081a0  000091a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c8  080085c8  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080085c8  080085c8  000095c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d0  080085d0  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d0  080085d0  000095d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085d4  080085d4  000095d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080085d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  200001d8  080087b0  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  080087b0  0000a578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe74  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002452  00000000  00000000  0001a07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  0001c4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c02  00000000  00000000  0001d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e32  00000000  00000000  0001e02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119e1  00000000  00000000  00020e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009205c  00000000  00000000  0003283d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4899  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005170  00000000  00000000  000c48dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c9a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008184 	.word	0x08008184

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008184 	.word	0x08008184

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_UART_RxCpltCallback>:
 int Turn_Flag = 0;

 unsigned int handle_flag = 0;
 int cnt = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)  // BT input
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a9c      	ldr	r2, [pc, #624]	@ (8001124 <HAL_UART_RxCpltCallback+0x27c>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	f040 8131 	bne.w	800111c <HAL_UART_RxCpltCallback+0x274>
    {
		if(strncmp(buf1,"A0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	499a      	ldr	r1, [pc, #616]	@ (8001128 <HAL_UART_RxCpltCallback+0x280>)
 8000ebe:	489b      	ldr	r0, [pc, #620]	@ (800112c <HAL_UART_RxCpltCallback+0x284>)
 8000ec0:	f005 fac6 	bl	8006450 <strncmp>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d115      	bne.n	8000ef6 <HAL_UART_RxCpltCallback+0x4e>
		{
			handle_flag = 1;
 8000eca:	4b99      	ldr	r3, [pc, #612]	@ (8001130 <HAL_UART_RxCpltCallback+0x288>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
			htim1.Instance->CCR1 = 0;
 8000ed0:	4b98      	ldr	r3, [pc, #608]	@ (8001134 <HAL_UART_RxCpltCallback+0x28c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	635a      	str	r2, [r3, #52]	@ 0x34
			htim1.Instance->CCR4 = 0;
 8000ed8:	4b96      	ldr	r3, [pc, #600]	@ (8001134 <HAL_UART_RxCpltCallback+0x28c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	641a      	str	r2, [r3, #64]	@ 0x40
			htim3.Instance->CCR1 = 0;
 8000ee0:	4b95      	ldr	r3, [pc, #596]	@ (8001138 <HAL_UART_RxCpltCallback+0x290>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	635a      	str	r2, [r3, #52]	@ 0x34
			htim3.Instance->CCR3 = 0;
 8000ee8:	4b93      	ldr	r3, [pc, #588]	@ (8001138 <HAL_UART_RxCpltCallback+0x290>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2200      	movs	r2, #0
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_Delay(10);
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f001 fc79 	bl	80027e8 <HAL_Delay>

		}
		if(strncmp(buf1,"P0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4990      	ldr	r1, [pc, #576]	@ (800113c <HAL_UART_RxCpltCallback+0x294>)
 8000efa:	488c      	ldr	r0, [pc, #560]	@ (800112c <HAL_UART_RxCpltCallback+0x284>)
 8000efc:	f005 faa8 	bl	8006450 <strncmp>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d106      	bne.n	8000f14 <HAL_UART_RxCpltCallback+0x6c>
		{
			handle_flag = 0;
 8000f06:	4b8a      	ldr	r3, [pc, #552]	@ (8001130 <HAL_UART_RxCpltCallback+0x288>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
			MaxSpeed = 8000;
 8000f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 8000f0e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000f12:	601a      	str	r2, [r3, #0]
		}
		if(handle_flag == 1)
 8000f14:	4b86      	ldr	r3, [pc, #536]	@ (8001130 <HAL_UART_RxCpltCallback+0x288>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	f040 80c2 	bne.w	80010a2 <HAL_UART_RxCpltCallback+0x1fa>
		{
			if(strncmp(buf1,"F0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8000f1e:	2202      	movs	r2, #2
 8000f20:	4988      	ldr	r1, [pc, #544]	@ (8001144 <HAL_UART_RxCpltCallback+0x29c>)
 8000f22:	4882      	ldr	r0, [pc, #520]	@ (800112c <HAL_UART_RxCpltCallback+0x284>)
 8000f24:	f005 fa94 	bl	8006450 <strncmp>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d13e      	bne.n	8000fac <HAL_UART_RxCpltCallback+0x104>
					{
					  // forward
					  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f34:	4884      	ldr	r0, [pc, #528]	@ (8001148 <HAL_UART_RxCpltCallback+0x2a0>)
 8000f36:	f001 ffbb 	bl	8002eb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	4883      	ldr	r0, [pc, #524]	@ (800114c <HAL_UART_RxCpltCallback+0x2a4>)
 8000f40:	f001 ffb6 	bl	8002eb0 <HAL_GPIO_WritePin>
					  //LEFT FRONT
					  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2120      	movs	r1, #32
 8000f48:	4880      	ldr	r0, [pc, #512]	@ (800114c <HAL_UART_RxCpltCallback+0x2a4>)
 8000f4a:	f001 ffb1 	bl	8002eb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2110      	movs	r1, #16
 8000f52:	487e      	ldr	r0, [pc, #504]	@ (800114c <HAL_UART_RxCpltCallback+0x2a4>)
 8000f54:	f001 ffac 	bl	8002eb0 <HAL_GPIO_WritePin>
					  //LEFT BACK
					  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f5e:	487b      	ldr	r0, [pc, #492]	@ (800114c <HAL_UART_RxCpltCallback+0x2a4>)
 8000f60:	f001 ffa6 	bl	8002eb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f6a:	4877      	ldr	r0, [pc, #476]	@ (8001148 <HAL_UART_RxCpltCallback+0x2a0>)
 8000f6c:	f001 ffa0 	bl	8002eb0 <HAL_GPIO_WritePin>
					  //RIGHT FRONT
					  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2180      	movs	r1, #128	@ 0x80
 8000f74:	4876      	ldr	r0, [pc, #472]	@ (8001150 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f76:	f001 ff9b 	bl	8002eb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2180      	movs	r1, #128	@ 0x80
 8000f7e:	4872      	ldr	r0, [pc, #456]	@ (8001148 <HAL_UART_RxCpltCallback+0x2a0>)
 8000f80:	f001 ff96 	bl	8002eb0 <HAL_GPIO_WritePin>

					  htim1.Instance->CCR1 = MaxSpeed;
 8000f84:	4b6e      	ldr	r3, [pc, #440]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b6a      	ldr	r3, [pc, #424]	@ (8001134 <HAL_UART_RxCpltCallback+0x28c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	635a      	str	r2, [r3, #52]	@ 0x34
					  htim1.Instance->CCR4 = MaxSpeed;
 8000f8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b68      	ldr	r3, [pc, #416]	@ (8001134 <HAL_UART_RxCpltCallback+0x28c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	641a      	str	r2, [r3, #64]	@ 0x40
					  htim3.Instance->CCR1 = MaxSpeed;
 8000f98:	4b69      	ldr	r3, [pc, #420]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b66      	ldr	r3, [pc, #408]	@ (8001138 <HAL_UART_RxCpltCallback+0x290>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	635a      	str	r2, [r3, #52]	@ 0x34
					  htim3.Instance->CCR3 = MaxSpeed;
 8000fa2:	4b67      	ldr	r3, [pc, #412]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b64      	ldr	r3, [pc, #400]	@ (8001138 <HAL_UART_RxCpltCallback+0x290>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	63da      	str	r2, [r3, #60]	@ 0x3c

					}
					if(strncmp(buf1,"B0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 8000fac:	2202      	movs	r2, #2
 8000fae:	4969      	ldr	r1, [pc, #420]	@ (8001154 <HAL_UART_RxCpltCallback+0x2ac>)
 8000fb0:	485e      	ldr	r0, [pc, #376]	@ (800112c <HAL_UART_RxCpltCallback+0x284>)
 8000fb2:	f005 fa4d 	bl	8006450 <strncmp>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d13e      	bne.n	800103a <HAL_UART_RxCpltCallback+0x192>
					{
					  // forward
					  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fc2:	4861      	ldr	r0, [pc, #388]	@ (8001148 <HAL_UART_RxCpltCallback+0x2a0>)
 8000fc4:	f001 ff74 	bl	8002eb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2108      	movs	r1, #8
 8000fcc:	485f      	ldr	r0, [pc, #380]	@ (800114c <HAL_UART_RxCpltCallback+0x2a4>)
 8000fce:	f001 ff6f 	bl	8002eb0 <HAL_GPIO_WritePin>
					  //LEFT FRONT
					  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	485d      	ldr	r0, [pc, #372]	@ (800114c <HAL_UART_RxCpltCallback+0x2a4>)
 8000fd8:	f001 ff6a 	bl	8002eb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2110      	movs	r1, #16
 8000fe0:	485a      	ldr	r0, [pc, #360]	@ (800114c <HAL_UART_RxCpltCallback+0x2a4>)
 8000fe2:	f001 ff65 	bl	8002eb0 <HAL_GPIO_WritePin>
					  //LEFT BACK
					  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fec:	4857      	ldr	r0, [pc, #348]	@ (800114c <HAL_UART_RxCpltCallback+0x2a4>)
 8000fee:	f001 ff5f 	bl	8002eb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ff8:	4853      	ldr	r0, [pc, #332]	@ (8001148 <HAL_UART_RxCpltCallback+0x2a0>)
 8000ffa:	f001 ff59 	bl	8002eb0 <HAL_GPIO_WritePin>
					  //RIGHT FRONT
					  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, 1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2180      	movs	r1, #128	@ 0x80
 8001002:	4853      	ldr	r0, [pc, #332]	@ (8001150 <HAL_UART_RxCpltCallback+0x2a8>)
 8001004:	f001 ff54 	bl	8002eb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2180      	movs	r1, #128	@ 0x80
 800100c:	484e      	ldr	r0, [pc, #312]	@ (8001148 <HAL_UART_RxCpltCallback+0x2a0>)
 800100e:	f001 ff4f 	bl	8002eb0 <HAL_GPIO_WritePin>

					  htim1.Instance->CCR1 = MaxSpeed;
 8001012:	4b4b      	ldr	r3, [pc, #300]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b47      	ldr	r3, [pc, #284]	@ (8001134 <HAL_UART_RxCpltCallback+0x28c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	635a      	str	r2, [r3, #52]	@ 0x34
					  htim1.Instance->CCR4 = MaxSpeed;
 800101c:	4b48      	ldr	r3, [pc, #288]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b44      	ldr	r3, [pc, #272]	@ (8001134 <HAL_UART_RxCpltCallback+0x28c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	641a      	str	r2, [r3, #64]	@ 0x40
					  htim3.Instance->CCR1 = MaxSpeed;
 8001026:	4b46      	ldr	r3, [pc, #280]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4b43      	ldr	r3, [pc, #268]	@ (8001138 <HAL_UART_RxCpltCallback+0x290>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	635a      	str	r2, [r3, #52]	@ 0x34
					  htim3.Instance->CCR3 = MaxSpeed;
 8001030:	4b43      	ldr	r3, [pc, #268]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b40      	ldr	r3, [pc, #256]	@ (8001138 <HAL_UART_RxCpltCallback+0x290>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	63da      	str	r2, [r3, #60]	@ 0x3c

					}
					if(strncmp(buf1,"L0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 800103a:	2202      	movs	r2, #2
 800103c:	4946      	ldr	r1, [pc, #280]	@ (8001158 <HAL_UART_RxCpltCallback+0x2b0>)
 800103e:	483b      	ldr	r0, [pc, #236]	@ (800112c <HAL_UART_RxCpltCallback+0x284>)
 8001040:	f005 fa06 	bl	8006450 <strncmp>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d111      	bne.n	800106e <HAL_UART_RxCpltCallback+0x1c6>
					{

					  htim1.Instance->CCR1 = MaxSpeed;
 800104a:	4b3d      	ldr	r3, [pc, #244]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b39      	ldr	r3, [pc, #228]	@ (8001134 <HAL_UART_RxCpltCallback+0x28c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34
					  htim1.Instance->CCR4 = MaxSpeed;
 8001054:	4b3a      	ldr	r3, [pc, #232]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <HAL_UART_RxCpltCallback+0x28c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	641a      	str	r2, [r3, #64]	@ 0x40
					  htim3.Instance->CCR1 = 0;
 800105e:	4b36      	ldr	r3, [pc, #216]	@ (8001138 <HAL_UART_RxCpltCallback+0x290>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
					  htim3.Instance->CCR3 = 0;
 8001066:	4b34      	ldr	r3, [pc, #208]	@ (8001138 <HAL_UART_RxCpltCallback+0x290>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	63da      	str	r2, [r3, #60]	@ 0x3c

					}
					if(strncmp(buf1,"R0",2) == 0)      //string , if you input "FAST" on phone (3 = 3 character)
 800106e:	2202      	movs	r2, #2
 8001070:	493a      	ldr	r1, [pc, #232]	@ (800115c <HAL_UART_RxCpltCallback+0x2b4>)
 8001072:	482e      	ldr	r0, [pc, #184]	@ (800112c <HAL_UART_RxCpltCallback+0x284>)
 8001074:	f005 f9ec 	bl	8006450 <strncmp>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d111      	bne.n	80010a2 <HAL_UART_RxCpltCallback+0x1fa>
					{

					  htim1.Instance->CCR1 = 0;
 800107e:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <HAL_UART_RxCpltCallback+0x28c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	635a      	str	r2, [r3, #52]	@ 0x34
					  htim1.Instance->CCR4 = 0;
 8001086:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <HAL_UART_RxCpltCallback+0x28c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2200      	movs	r2, #0
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
					  htim3.Instance->CCR1 = MaxSpeed;
 800108e:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <HAL_UART_RxCpltCallback+0x290>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	635a      	str	r2, [r3, #52]	@ 0x34
					  htim3.Instance->CCR3 = MaxSpeed;
 8001098:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <HAL_UART_RxCpltCallback+0x290>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	63da      	str	r2, [r3, #60]	@ 0x3c

					}
		}

		if(strncmp(buf1,"T0",2) == 0)
 80010a2:	2202      	movs	r2, #2
 80010a4:	492e      	ldr	r1, [pc, #184]	@ (8001160 <HAL_UART_RxCpltCallback+0x2b8>)
 80010a6:	4821      	ldr	r0, [pc, #132]	@ (800112c <HAL_UART_RxCpltCallback+0x284>)
 80010a8:	f005 f9d2 	bl	8006450 <strncmp>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d110      	bne.n	80010d4 <HAL_UART_RxCpltCallback+0x22c>
		{
		   if(MaxSpeed == 25000) MaxSpeed = 25000;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d104      	bne.n	80010c8 <HAL_UART_RxCpltCallback+0x220>
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 80010c0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e005      	b.n	80010d4 <HAL_UART_RxCpltCallback+0x22c>
		   else MaxSpeed += 1000;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80010d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 80010d2:	6013      	str	r3, [r2, #0]
		}
		if(strncmp(buf1,"X0",2) == 0)
 80010d4:	2202      	movs	r2, #2
 80010d6:	4923      	ldr	r1, [pc, #140]	@ (8001164 <HAL_UART_RxCpltCallback+0x2bc>)
 80010d8:	4814      	ldr	r0, [pc, #80]	@ (800112c <HAL_UART_RxCpltCallback+0x284>)
 80010da:	f005 f9b9 	bl	8006450 <strncmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10d      	bne.n	8001100 <HAL_UART_RxCpltCallback+0x258>
		{
		   if(MaxSpeed == 0) MaxSpeed = 0;
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d103      	bne.n	80010f4 <HAL_UART_RxCpltCallback+0x24c>
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e005      	b.n	8001100 <HAL_UART_RxCpltCallback+0x258>
		   else MaxSpeed -= 1000;
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010fc:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <HAL_UART_RxCpltCallback+0x298>)
 80010fe:	6013      	str	r3, [r2, #0]
}

       buf1[idx1++] = dum1;
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <HAL_UART_RxCpltCallback+0x2c0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	4918      	ldr	r1, [pc, #96]	@ (8001168 <HAL_UART_RxCpltCallback+0x2c0>)
 8001108:	600a      	str	r2, [r1, #0]
 800110a:	4a18      	ldr	r2, [pc, #96]	@ (800116c <HAL_UART_RxCpltCallback+0x2c4>)
 800110c:	7811      	ldrb	r1, [r2, #0]
 800110e:	4a07      	ldr	r2, [pc, #28]	@ (800112c <HAL_UART_RxCpltCallback+0x284>)
 8001110:	54d1      	strb	r1, [r2, r3]
       HAL_UART_Receive_IT(&huart1, &dum1, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	4915      	ldr	r1, [pc, #84]	@ (800116c <HAL_UART_RxCpltCallback+0x2c4>)
 8001116:	4803      	ldr	r0, [pc, #12]	@ (8001124 <HAL_UART_RxCpltCallback+0x27c>)
 8001118:	f003 fbb5 	bl	8004886 <HAL_UART_Receive_IT>

    }
 }
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000324 	.word	0x20000324
 8001128:	080081a0 	.word	0x080081a0
 800112c:	200003b4 	.word	0x200003b4
 8001130:	20000420 	.word	0x20000420
 8001134:	2000024c 	.word	0x2000024c
 8001138:	200002dc 	.word	0x200002dc
 800113c:	080081a4 	.word	0x080081a4
 8001140:	20000000 	.word	0x20000000
 8001144:	080081a8 	.word	0x080081a8
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400
 8001150:	40020800 	.word	0x40020800
 8001154:	080081ac 	.word	0x080081ac
 8001158:	080081b0 	.word	0x080081b0
 800115c:	080081b4 	.word	0x080081b4
 8001160:	080081b8 	.word	0x080081b8
 8001164:	080081bc 	.word	0x080081bc
 8001168:	2000041c 	.word	0x2000041c
 800116c:	20000418 	.word	0x20000418

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f001 fac5 	bl	8002704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117a:	f000 fa0f 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117e:	f000 fc7d 	bl	8001a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001182:	f000 fc51 	bl	8001a28 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001186:	f000 fba3 	bl	80018d0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800118a:	f000 fb53 	bl	8001834 <MX_TIM2_Init>
  MX_TIM1_Init();
 800118e:	f000 faa5 	bl	80016dc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001192:	f000 fc1f 	bl	80019d4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001196:	f000 fa6b 	bl	8001670 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart();
 800119a:	f000 fd3d 	bl	8001c18 <ProgramStart>
  HAL_UART_Receive_IT(&huart1, &dum1, 1);
 800119e:	2201      	movs	r2, #1
 80011a0:	49b3      	ldr	r1, [pc, #716]	@ (8001470 <main+0x300>)
 80011a2:	48b4      	ldr	r0, [pc, #720]	@ (8001474 <main+0x304>)
 80011a4:	f003 fb6f 	bl	8004886 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim2);
 80011a8:	48b3      	ldr	r0, [pc, #716]	@ (8001478 <main+0x308>)
 80011aa:	f002 fc0b 	bl	80039c4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011ae:	2100      	movs	r1, #0
 80011b0:	48b2      	ldr	r0, [pc, #712]	@ (800147c <main+0x30c>)
 80011b2:	f002 fcbb 	bl	8003b2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011b6:	210c      	movs	r1, #12
 80011b8:	48b0      	ldr	r0, [pc, #704]	@ (800147c <main+0x30c>)
 80011ba:	f002 fcb7 	bl	8003b2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011be:	2100      	movs	r1, #0
 80011c0:	48af      	ldr	r0, [pc, #700]	@ (8001480 <main+0x310>)
 80011c2:	f002 fcb3 	bl	8003b2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011c6:	2108      	movs	r1, #8
 80011c8:	48ad      	ldr	r0, [pc, #692]	@ (8001480 <main+0x310>)
 80011ca:	f002 fcaf 	bl	8003b2c <HAL_TIM_PWM_Start>
	  //TurnSpeed = MaxSpeed + 2000;
	  //HAL_UART_RxCpltCallback(&huart1);
	  //HAL_TIM_PeriodElapsedCallback(&htim2);
	  //if(handle_flag == 0)
	  //{
	  int num1 = usDist1() * 100;
 80011ce:	f000 fd73 	bl	8001cb8 <usDist1>
 80011d2:	ec51 0b10 	vmov	r0, r1, d0
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4baa      	ldr	r3, [pc, #680]	@ (8001484 <main+0x314>)
 80011dc:	f7ff fa14 	bl	8000608 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fcbe 	bl	8000b68 <__aeabi_d2iz>
 80011ec:	4603      	mov	r3, r0
 80011ee:	617b      	str	r3, [r7, #20]
	  	//HAL_Delay(10);
	  	int num2 = usDist2() * 100;
 80011f0:	f000 fdbe 	bl	8001d70 <usDist2>
 80011f4:	ec51 0b10 	vmov	r0, r1, d0
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4ba1      	ldr	r3, [pc, #644]	@ (8001484 <main+0x314>)
 80011fe:	f7ff fa03 	bl	8000608 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fcad 	bl	8000b68 <__aeabi_d2iz>
 800120e:	4603      	mov	r3, r0
 8001210:	613b      	str	r3, [r7, #16]
	  	//HAL_Delay(10);
	  	int num3 = usDist3() * 100;
 8001212:	f000 fe09 	bl	8001e28 <usDist3>
 8001216:	ec51 0b10 	vmov	r0, r1, d0
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b99      	ldr	r3, [pc, #612]	@ (8001484 <main+0x314>)
 8001220:	f7ff f9f2 	bl	8000608 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fc9c 	bl	8000b68 <__aeabi_d2iz>
 8001230:	4603      	mov	r3, r0
 8001232:	60fb      	str	r3, [r7, #12]
	  	//HAL_Delay(10);

	  	int num4 = usDist4() * 100;
 8001234:	f000 fe58 	bl	8001ee8 <usDist4>
 8001238:	ec51 0b10 	vmov	r0, r1, d0
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b90      	ldr	r3, [pc, #576]	@ (8001484 <main+0x314>)
 8001242:	f7ff f9e1 	bl	8000608 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fc8b 	bl	8000b68 <__aeabi_d2iz>
 8001252:	4603      	mov	r3, r0
 8001254:	60bb      	str	r3, [r7, #8]
	  	//HAL_Delay(10);
	  	int num5 = usDist5() * 100;
 8001256:	f000 feab 	bl	8001fb0 <usDist5>
 800125a:	ec51 0b10 	vmov	r0, r1, d0
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b88      	ldr	r3, [pc, #544]	@ (8001484 <main+0x314>)
 8001264:	f7ff f9d0 	bl	8000608 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fc7a 	bl	8000b68 <__aeabi_d2iz>
 8001274:	4603      	mov	r3, r0
 8001276:	607b      	str	r3, [r7, #4]
	  	//HAL_Delay(10);



	  	while(num1 < 0)
 8001278:	e010      	b.n	800129c <main+0x12c>
	  	{
	  	  num1 = usDist1() * 100;
 800127a:	f000 fd1d 	bl	8001cb8 <usDist1>
 800127e:	ec51 0b10 	vmov	r0, r1, d0
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b7f      	ldr	r3, [pc, #508]	@ (8001484 <main+0x314>)
 8001288:	f7ff f9be 	bl	8000608 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fc68 	bl	8000b68 <__aeabi_d2iz>
 8001298:	4603      	mov	r3, r0
 800129a:	617b      	str	r3, [r7, #20]
	  	while(num1 < 0)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	dbeb      	blt.n	800127a <main+0x10a>
	  	}

	  	//printf("check num1 %d\r\n", num1);
	  	//HAL_Delay(500);
	  	while(num2 < 0)
 80012a2:	e010      	b.n	80012c6 <main+0x156>
	  	{
	  	  num2 = usDist2() * 100;
 80012a4:	f000 fd64 	bl	8001d70 <usDist2>
 80012a8:	ec51 0b10 	vmov	r0, r1, d0
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b74      	ldr	r3, [pc, #464]	@ (8001484 <main+0x314>)
 80012b2:	f7ff f9a9 	bl	8000608 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fc53 	bl	8000b68 <__aeabi_d2iz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	613b      	str	r3, [r7, #16]
	  	while(num2 < 0)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dbeb      	blt.n	80012a4 <main+0x134>
	  	}
	  	//printf("check num2 %d\r\n", num2);
	  	//HAL_Delay(500);
	  	while(num3 < 0)
 80012cc:	e010      	b.n	80012f0 <main+0x180>
	  	{
	  	  num3 = usDist3() * 100;
 80012ce:	f000 fdab 	bl	8001e28 <usDist3>
 80012d2:	ec51 0b10 	vmov	r0, r1, d0
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b6a      	ldr	r3, [pc, #424]	@ (8001484 <main+0x314>)
 80012dc:	f7ff f994 	bl	8000608 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc3e 	bl	8000b68 <__aeabi_d2iz>
 80012ec:	4603      	mov	r3, r0
 80012ee:	60fb      	str	r3, [r7, #12]
	  	while(num3 < 0)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dbeb      	blt.n	80012ce <main+0x15e>
	  	}

	  	while(num4 < 0)
 80012f6:	e010      	b.n	800131a <main+0x1aa>
	  	{
	  	  num4 = usDist4() * 100;
 80012f8:	f000 fdf6 	bl	8001ee8 <usDist4>
 80012fc:	ec51 0b10 	vmov	r0, r1, d0
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b5f      	ldr	r3, [pc, #380]	@ (8001484 <main+0x314>)
 8001306:	f7ff f97f 	bl	8000608 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc29 	bl	8000b68 <__aeabi_d2iz>
 8001316:	4603      	mov	r3, r0
 8001318:	60bb      	str	r3, [r7, #8]
	  	while(num4 < 0)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	dbeb      	blt.n	80012f8 <main+0x188>
	  	}

	  	 num5 = usDist5() * 100;
 8001320:	f000 fe46 	bl	8001fb0 <usDist5>
 8001324:	ec51 0b10 	vmov	r0, r1, d0
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b55      	ldr	r3, [pc, #340]	@ (8001484 <main+0x314>)
 800132e:	f7ff f96b 	bl	8000608 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc15 	bl	8000b68 <__aeabi_d2iz>
 800133e:	4603      	mov	r3, r0
 8001340:	607b      	str	r3, [r7, #4]

	  	while(num5 < 0)
 8001342:	e010      	b.n	8001366 <main+0x1f6>
	  	{
	  	  num5 = usDist5() * 100;
 8001344:	f000 fe34 	bl	8001fb0 <usDist5>
 8001348:	ec51 0b10 	vmov	r0, r1, d0
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b4c      	ldr	r3, [pc, #304]	@ (8001484 <main+0x314>)
 8001352:	f7ff f959 	bl	8000608 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc03 	bl	8000b68 <__aeabi_d2iz>
 8001362:	4603      	mov	r3, r0
 8001364:	607b      	str	r3, [r7, #4]
	  	while(num5 < 0)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	dbeb      	blt.n	8001344 <main+0x1d4>
	  	}

	  	//printf("1CCR1 = %d 	1CCR4 = %d	3CCR1 = %d, 3CCR3 = %d	\r\n", htim1.Instance->CCR1, htim1.Instance->CCR4, htim3.Instance->CCR1, htim3.Instance->CCR3);
	  	printf("num1 = %d 	num2 = %d	num3 = %d	num4 = %d	num5 = %d	\r\n", num1, num2, num3, num4, num5);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	6979      	ldr	r1, [r7, #20]
 800137a:	4843      	ldr	r0, [pc, #268]	@ (8001488 <main+0x318>)
 800137c:	f004 ff18 	bl	80061b0 <iprintf>
	  	 if(num1 >= 15)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2b0e      	cmp	r3, #14
 8001384:	f340 808a 	ble.w	800149c <main+0x32c>
	  	 {

	  		  // forward
	  		  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800138e:	483f      	ldr	r0, [pc, #252]	@ (800148c <main+0x31c>)
 8001390:	f001 fd8e 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	2108      	movs	r1, #8
 8001398:	483d      	ldr	r0, [pc, #244]	@ (8001490 <main+0x320>)
 800139a:	f001 fd89 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  //LEFT FRONT
	  		  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2120      	movs	r1, #32
 80013a2:	483b      	ldr	r0, [pc, #236]	@ (8001490 <main+0x320>)
 80013a4:	f001 fd84 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2110      	movs	r1, #16
 80013ac:	4838      	ldr	r0, [pc, #224]	@ (8001490 <main+0x320>)
 80013ae:	f001 fd7f 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  //LEFT BACK
	  		  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013b8:	4835      	ldr	r0, [pc, #212]	@ (8001490 <main+0x320>)
 80013ba:	f001 fd79 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c4:	4831      	ldr	r0, [pc, #196]	@ (800148c <main+0x31c>)
 80013c6:	f001 fd73 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  //RIGHT FRONT
	  		  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, 1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	4831      	ldr	r0, [pc, #196]	@ (8001494 <main+0x324>)
 80013d0:	f001 fd6e 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2180      	movs	r1, #128	@ 0x80
 80013d8:	482c      	ldr	r0, [pc, #176]	@ (800148c <main+0x31c>)
 80013da:	f001 fd69 	bl	8002eb0 <HAL_GPIO_WritePin>
	  			htim1.Instance->CCR1 = MaxSpeed;
 80013de:	4b2e      	ldr	r3, [pc, #184]	@ (8001498 <main+0x328>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <main+0x30c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	635a      	str	r2, [r3, #52]	@ 0x34
	  			htim1.Instance->CCR4 = MaxSpeed;
 80013e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001498 <main+0x328>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b23      	ldr	r3, [pc, #140]	@ (800147c <main+0x30c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	641a      	str	r2, [r3, #64]	@ 0x40
	  			htim3.Instance->CCR1 = MaxSpeed;
 80013f2:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <main+0x328>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <main+0x310>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	635a      	str	r2, [r3, #52]	@ 0x34
	  			htim3.Instance->CCR3 = MaxSpeed;
 80013fc:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <main+0x328>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <main+0x310>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	63da      	str	r2, [r3, #60]	@ 0x3c


	  		  //RIGHT BACK

	  		 if((num3 > 13 && num2 <= 13)) // cornering
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b0d      	cmp	r3, #13
 800140a:	dd15      	ble.n	8001438 <main+0x2c8>
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b0d      	cmp	r3, #13
 8001410:	dc12      	bgt.n	8001438 <main+0x2c8>
	  		 {


	  			  htim1.Instance->CCR1 = MaxSpeed;
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <main+0x328>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <main+0x30c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  htim1.Instance->CCR4 = MaxSpeed;
 800141c:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <main+0x328>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <main+0x30c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	641a      	str	r2, [r3, #64]	@ 0x40
	  			  htim3.Instance->CCR1 = 0;
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <main+0x310>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2200      	movs	r2, #0
 800142c:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  htim3.Instance->CCR3 = 0;
 800142e:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <main+0x310>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001436:	e0a4      	b.n	8001582 <main+0x412>



	  		 }
	  		 else if((num2 > 13 && num3 <= 13)) // cornering
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	2b0d      	cmp	r3, #13
 800143c:	f77f aec7 	ble.w	80011ce <main+0x5e>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b0d      	cmp	r3, #13
 8001444:	f73f aec3 	bgt.w	80011ce <main+0x5e>
	  		 {



	  			  htim1.Instance->CCR1 = 0;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <main+0x30c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  htim1.Instance->CCR4 = 0;
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <main+0x30c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	641a      	str	r2, [r3, #64]	@ 0x40
	  			  htim3.Instance->CCR1 = MaxSpeed;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <main+0x328>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <main+0x310>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  htim3.Instance->CCR3 = MaxSpeed;
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <main+0x328>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <main+0x310>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800146c:	e6af      	b.n	80011ce <main+0x5e>
 800146e:	bf00      	nop
 8001470:	20000418 	.word	0x20000418
 8001474:	20000324 	.word	0x20000324
 8001478:	20000294 	.word	0x20000294
 800147c:	2000024c 	.word	0x2000024c
 8001480:	200002dc 	.word	0x200002dc
 8001484:	40590000 	.word	0x40590000
 8001488:	080081c0 	.word	0x080081c0
 800148c:	40020000 	.word	0x40020000
 8001490:	40020400 	.word	0x40020400
 8001494:	40020800 	.word	0x40020800
 8001498:	20000000 	.word	0x20000000

	  	 else
	  	 {

	  		  // forward
	  		  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014a2:	4838      	ldr	r0, [pc, #224]	@ (8001584 <main+0x414>)
 80014a4:	f001 fd04 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2108      	movs	r1, #8
 80014ac:	4836      	ldr	r0, [pc, #216]	@ (8001588 <main+0x418>)
 80014ae:	f001 fcff 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  //LEFT FRONT
	  		  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2120      	movs	r1, #32
 80014b6:	4834      	ldr	r0, [pc, #208]	@ (8001588 <main+0x418>)
 80014b8:	f001 fcfa 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 80014bc:	2201      	movs	r2, #1
 80014be:	2110      	movs	r1, #16
 80014c0:	4831      	ldr	r0, [pc, #196]	@ (8001588 <main+0x418>)
 80014c2:	f001 fcf5 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  //LEFT BACK
	  		  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014cc:	482e      	ldr	r0, [pc, #184]	@ (8001588 <main+0x418>)
 80014ce:	f001 fcef 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, 1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d8:	482a      	ldr	r0, [pc, #168]	@ (8001584 <main+0x414>)
 80014da:	f001 fce9 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  //RIGHT FRONT
	  		  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2180      	movs	r1, #128	@ 0x80
 80014e2:	482a      	ldr	r0, [pc, #168]	@ (800158c <main+0x41c>)
 80014e4:	f001 fce4 	bl	8002eb0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, 1);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2180      	movs	r1, #128	@ 0x80
 80014ec:	4825      	ldr	r0, [pc, #148]	@ (8001584 <main+0x414>)
 80014ee:	f001 fcdf 	bl	8002eb0 <HAL_GPIO_WritePin>

	  			htim1.Instance->CCR1 = MaxSpeed;
 80014f2:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <main+0x420>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <main+0x424>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	635a      	str	r2, [r3, #52]	@ 0x34
	  			htim1.Instance->CCR4 = MaxSpeed;
 80014fc:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <main+0x420>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <main+0x424>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	641a      	str	r2, [r3, #64]	@ 0x40
	  			htim3.Instance->CCR1 = MaxSpeed;
 8001506:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <main+0x420>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <main+0x428>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	635a      	str	r2, [r3, #52]	@ 0x34
	  			htim3.Instance->CCR3 = MaxSpeed;
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <main+0x420>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <main+0x428>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	63da      	str	r2, [r3, #60]	@ 0x3c

	  		  //RIGHT BACK
	  		 HAL_Delay(1000);
 800151a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800151e:	f001 f963 	bl	80027e8 <HAL_Delay>

	  		  if(num4 > num5)
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	dd11      	ble.n	800154e <main+0x3de>
	  		  {
	  			  htim1.Instance->CCR1 = 0;
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <main+0x424>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2200      	movs	r2, #0
 8001530:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  htim1.Instance->CCR4 = 0;
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <main+0x424>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	641a      	str	r2, [r3, #64]	@ 0x40
	  			  htim3.Instance->CCR1 = MaxSpeed;
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <main+0x420>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <main+0x428>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  htim3.Instance->CCR3 = MaxSpeed;
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <main+0x420>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <main+0x428>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	63da      	str	r2, [r3, #60]	@ 0x3c

	  		  }
	  		  if(num5 > num4)
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	429a      	cmp	r2, r3
 8001554:	dd11      	ble.n	800157a <main+0x40a>
	  		  {
	  			  htim1.Instance->CCR1 = MaxSpeed;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <main+0x420>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <main+0x424>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  htim1.Instance->CCR4 = MaxSpeed;
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <main+0x420>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <main+0x424>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
	  			  htim3.Instance->CCR1 = 0;
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <main+0x428>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  htim3.Instance->CCR3 = 0;
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <main+0x428>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	63da      	str	r2, [r3, #60]	@ 0x3c

	  		  }


	  		  HAL_Delay(2000);
 800157a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800157e:	f001 f933 	bl	80027e8 <HAL_Delay>
  {
 8001582:	e624      	b.n	80011ce <main+0x5e>
 8001584:	40020000 	.word	0x40020000
 8001588:	40020400 	.word	0x40020400
 800158c:	40020800 	.word	0x40020800
 8001590:	20000000 	.word	0x20000000
 8001594:	2000024c 	.word	0x2000024c
 8001598:	200002dc 	.word	0x200002dc

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b094      	sub	sp, #80	@ 0x50
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	2230      	movs	r2, #48	@ 0x30
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f004 ff48 	bl	8006440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <SystemClock_Config+0xcc>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	4a27      	ldr	r2, [pc, #156]	@ (8001668 <SystemClock_Config+0xcc>)
 80015ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d0:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <SystemClock_Config+0xcc>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	4b22      	ldr	r3, [pc, #136]	@ (800166c <SystemClock_Config+0xd0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a21      	ldr	r2, [pc, #132]	@ (800166c <SystemClock_Config+0xd0>)
 80015e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <SystemClock_Config+0xd0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f8:	2302      	movs	r3, #2
 80015fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001600:	2310      	movs	r3, #16
 8001602:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001604:	2302      	movs	r3, #2
 8001606:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001608:	2300      	movs	r3, #0
 800160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800160c:	2310      	movs	r3, #16
 800160e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001610:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001614:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001616:	2304      	movs	r3, #4
 8001618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800161a:	2304      	movs	r3, #4
 800161c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	4618      	mov	r0, r3
 8001624:	f001 fc5e 	bl	8002ee4 <HAL_RCC_OscConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800162e:	f000 fadb 	bl	8001be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001632:	230f      	movs	r3, #15
 8001634:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001636:	2302      	movs	r3, #2
 8001638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800163e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2102      	movs	r1, #2
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fec0 	bl	80033d4 <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800165a:	f000 fac5 	bl	8001be8 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	3750      	adds	r7, #80	@ 0x50
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000

08001670 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001674:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <MX_SPI2_Init+0x64>)
 8001676:	4a18      	ldr	r2, [pc, #96]	@ (80016d8 <MX_SPI2_Init+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800167a:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <MX_SPI2_Init+0x64>)
 800167c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001680:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001682:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <MX_SPI2_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <MX_SPI2_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_SPI2_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001694:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <MX_SPI2_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_SPI2_Init+0x64>)
 800169c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_SPI2_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <MX_SPI2_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_SPI2_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b4:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <MX_SPI2_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_SPI2_Init+0x64>)
 80016bc:	220a      	movs	r2, #10
 80016be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <MX_SPI2_Init+0x64>)
 80016c2:	f002 f8a7 	bl	8003814 <HAL_SPI_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016cc:	f000 fa8c 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200001f4 	.word	0x200001f4
 80016d8:	40003800 	.word	0x40003800

080016dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b096      	sub	sp, #88	@ 0x58
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2220      	movs	r2, #32
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f004 fe93 	bl	8006440 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800171a:	4b44      	ldr	r3, [pc, #272]	@ (800182c <MX_TIM1_Init+0x150>)
 800171c:	4a44      	ldr	r2, [pc, #272]	@ (8001830 <MX_TIM1_Init+0x154>)
 800171e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001720:	4b42      	ldr	r3, [pc, #264]	@ (800182c <MX_TIM1_Init+0x150>)
 8001722:	2253      	movs	r2, #83	@ 0x53
 8001724:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b41      	ldr	r3, [pc, #260]	@ (800182c <MX_TIM1_Init+0x150>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 800172c:	4b3f      	ldr	r3, [pc, #252]	@ (800182c <MX_TIM1_Init+0x150>)
 800172e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001732:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001734:	4b3d      	ldr	r3, [pc, #244]	@ (800182c <MX_TIM1_Init+0x150>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800173a:	4b3c      	ldr	r3, [pc, #240]	@ (800182c <MX_TIM1_Init+0x150>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b3a      	ldr	r3, [pc, #232]	@ (800182c <MX_TIM1_Init+0x150>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001746:	4839      	ldr	r0, [pc, #228]	@ (800182c <MX_TIM1_Init+0x150>)
 8001748:	f002 f8ed 	bl	8003926 <HAL_TIM_Base_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001752:	f000 fa49 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800175c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001760:	4619      	mov	r1, r3
 8001762:	4832      	ldr	r0, [pc, #200]	@ (800182c <MX_TIM1_Init+0x150>)
 8001764:	f002 fb54 	bl	8003e10 <HAL_TIM_ConfigClockSource>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800176e:	f000 fa3b 	bl	8001be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001772:	482e      	ldr	r0, [pc, #184]	@ (800182c <MX_TIM1_Init+0x150>)
 8001774:	f002 f980 	bl	8003a78 <HAL_TIM_PWM_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800177e:	f000 fa33 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800178a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800178e:	4619      	mov	r1, r3
 8001790:	4826      	ldr	r0, [pc, #152]	@ (800182c <MX_TIM1_Init+0x150>)
 8001792:	f002 fedd 	bl	8004550 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800179c:	f000 fa24 	bl	8001be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a0:	2360      	movs	r3, #96	@ 0x60
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	2200      	movs	r2, #0
 80017c2:	4619      	mov	r1, r3
 80017c4:	4819      	ldr	r0, [pc, #100]	@ (800182c <MX_TIM1_Init+0x150>)
 80017c6:	f002 fa61 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80017d0:	f000 fa0a 	bl	8001be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d8:	220c      	movs	r2, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	4813      	ldr	r0, [pc, #76]	@ (800182c <MX_TIM1_Init+0x150>)
 80017de:	f002 fa55 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80017e8:	f000 f9fe 	bl	8001be8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001804:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	@ (800182c <MX_TIM1_Init+0x150>)
 8001810:	f002 ff0c 	bl	800462c <HAL_TIMEx_ConfigBreakDeadTime>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800181a:	f000 f9e5 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800181e:	4803      	ldr	r0, [pc, #12]	@ (800182c <MX_TIM1_Init+0x150>)
 8001820:	f000 fcfe 	bl	8002220 <HAL_TIM_MspPostInit>

}
 8001824:	bf00      	nop
 8001826:	3758      	adds	r7, #88	@ 0x58
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000024c 	.word	0x2000024c
 8001830:	40010000 	.word	0x40010000

08001834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0308 	add.w	r3, r7, #8
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001850:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <MX_TIM2_Init+0x94>)
 8001852:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <MX_TIM2_Init+0x94>)
 800185a:	2253      	movs	r2, #83	@ 0x53
 800185c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_TIM2_Init+0x94>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000-1;
 8001864:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <MX_TIM2_Init+0x94>)
 8001866:	4a19      	ldr	r2, [pc, #100]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186a:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <MX_TIM2_Init+0x94>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <MX_TIM2_Init+0x94>)
 8001872:	2200      	movs	r2, #0
 8001874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001876:	4814      	ldr	r0, [pc, #80]	@ (80018c8 <MX_TIM2_Init+0x94>)
 8001878:	f002 f855 	bl	8003926 <HAL_TIM_Base_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001882:	f000 f9b1 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4619      	mov	r1, r3
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <MX_TIM2_Init+0x94>)
 8001894:	f002 fabc 	bl	8003e10 <HAL_TIM_ConfigClockSource>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800189e:	f000 f9a3 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018aa:	463b      	mov	r3, r7
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	@ (80018c8 <MX_TIM2_Init+0x94>)
 80018b0:	f002 fe4e 	bl	8004550 <HAL_TIMEx_MasterConfigSynchronization>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80018ba:	f000 f995 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000294 	.word	0x20000294
 80018cc:	0001387f 	.word	0x0001387f

080018d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	@ 0x38
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001900:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <MX_TIM3_Init+0xfc>)
 8001902:	4a33      	ldr	r2, [pc, #204]	@ (80019d0 <MX_TIM3_Init+0x100>)
 8001904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001906:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <MX_TIM3_Init+0xfc>)
 8001908:	2253      	movs	r2, #83	@ 0x53
 800190a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <MX_TIM3_Init+0xfc>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001912:	4b2e      	ldr	r3, [pc, #184]	@ (80019cc <MX_TIM3_Init+0xfc>)
 8001914:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001918:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b2c      	ldr	r3, [pc, #176]	@ (80019cc <MX_TIM3_Init+0xfc>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b2a      	ldr	r3, [pc, #168]	@ (80019cc <MX_TIM3_Init+0xfc>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001926:	4829      	ldr	r0, [pc, #164]	@ (80019cc <MX_TIM3_Init+0xfc>)
 8001928:	f001 fffd 	bl	8003926 <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001932:	f000 f959 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800193c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001940:	4619      	mov	r1, r3
 8001942:	4822      	ldr	r0, [pc, #136]	@ (80019cc <MX_TIM3_Init+0xfc>)
 8001944:	f002 fa64 	bl	8003e10 <HAL_TIM_ConfigClockSource>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800194e:	f000 f94b 	bl	8001be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001952:	481e      	ldr	r0, [pc, #120]	@ (80019cc <MX_TIM3_Init+0xfc>)
 8001954:	f002 f890 	bl	8003a78 <HAL_TIM_PWM_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800195e:	f000 f943 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	4619      	mov	r1, r3
 8001970:	4816      	ldr	r0, [pc, #88]	@ (80019cc <MX_TIM3_Init+0xfc>)
 8001972:	f002 fded 	bl	8004550 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800197c:	f000 f934 	bl	8001be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001980:	2360      	movs	r3, #96	@ 0x60
 8001982:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	480d      	ldr	r0, [pc, #52]	@ (80019cc <MX_TIM3_Init+0xfc>)
 8001998:	f002 f978 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019a2:	f000 f921 	bl	8001be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2208      	movs	r2, #8
 80019aa:	4619      	mov	r1, r3
 80019ac:	4807      	ldr	r0, [pc, #28]	@ (80019cc <MX_TIM3_Init+0xfc>)
 80019ae:	f002 f96d 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80019b8:	f000 f916 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <MX_TIM3_Init+0xfc>)
 80019be:	f000 fc2f 	bl	8002220 <HAL_TIM_MspPostInit>

}
 80019c2:	bf00      	nop
 80019c4:	3738      	adds	r7, #56	@ 0x38
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200002dc 	.word	0x200002dc
 80019d0:	40000400 	.word	0x40000400

080019d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019da:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <MX_USART1_UART_Init+0x50>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a0c:	f002 fe60 	bl	80046d0 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a16:	f000 f8e7 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000324 	.word	0x20000324
 8001a24:	40011000 	.word	0x40011000

08001a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <MX_USART2_UART_Init+0x4c>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <MX_USART2_UART_Init+0x50>)
 8001a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <MX_USART2_UART_Init+0x4c>)
 8001a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <MX_USART2_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <MX_USART2_UART_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <MX_USART2_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001a52:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <MX_USART2_UART_Init+0x4c>)
 8001a54:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001a58:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	@ (8001a74 <MX_USART2_UART_Init+0x4c>)
 8001a62:	f002 fe35 	bl	80046d0 <HAL_UART_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001a6c:	f000 f8bc 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000036c 	.word	0x2000036c
 8001a78:	40004400 	.word	0x40004400

08001a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	@ 0x28
 8001a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b50      	ldr	r3, [pc, #320]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b49      	ldr	r3, [pc, #292]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a48      	ldr	r2, [pc, #288]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b46      	ldr	r3, [pc, #280]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b42      	ldr	r3, [pc, #264]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a41      	ldr	r2, [pc, #260]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a3a      	ldr	r2, [pc, #232]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b38      	ldr	r3, [pc, #224]	@ (8001bd8 <MX_GPIO_Init+0x15c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIG5_Pin|TRIG1_Pin|D9_Pin|TRIG3_Pin
 8001b02:	2200      	movs	r2, #0
 8001b04:	f640 41c1 	movw	r1, #3265	@ 0xcc1
 8001b08:	4834      	ldr	r0, [pc, #208]	@ (8001bdc <MX_GPIO_Init+0x160>)
 8001b0a:	f001 f9d1 	bl	8002eb0 <HAL_GPIO_WritePin>
                          |RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D11_Pin|D8_Pin|D2_Pin
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 51b5 	mov.w	r1, #5792	@ 0x16a0
 8001b14:	4832      	ldr	r0, [pc, #200]	@ (8001be0 <MX_GPIO_Init+0x164>)
 8001b16:	f001 f9cb 	bl	8002eb0 <HAL_GPIO_WritePin>
                          |TRIG4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG2_Pin|D6_Pin|D3_Pin|D5_Pin
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f240 713c 	movw	r1, #1852	@ 0x73c
 8001b20:	4830      	ldr	r0, [pc, #192]	@ (8001be4 <MX_GPIO_Init+0x168>)
 8001b22:	f001 f9c5 	bl	8002eb0 <HAL_GPIO_WritePin>
                          |D4_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b2c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4827      	ldr	r0, [pc, #156]	@ (8001bdc <MX_GPIO_Init+0x160>)
 8001b3e:	f001 f81b 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG5_Pin TRIG1_Pin D9_Pin TRIG3_Pin
                           RST_Pin */
  GPIO_InitStruct.Pin = TRIG5_Pin|TRIG1_Pin|D9_Pin|TRIG3_Pin
 8001b42:	f640 43c1 	movw	r3, #3265	@ 0xcc1
 8001b46:	617b      	str	r3, [r7, #20]
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4820      	ldr	r0, [pc, #128]	@ (8001bdc <MX_GPIO_Init+0x160>)
 8001b5c:	f001 f80c 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO5_Pin ECHO1_Pin ECHO3_Pin */
  GPIO_InitStruct.Pin = ECHO5_Pin|ECHO1_Pin|ECHO3_Pin;
 8001b60:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4819      	ldr	r0, [pc, #100]	@ (8001bdc <MX_GPIO_Init+0x160>)
 8001b76:	f000 ffff 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D11_Pin D8_Pin D2_Pin
                           TRIG4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D11_Pin|D8_Pin|D2_Pin
 8001b7a:	f44f 53b5 	mov.w	r3, #5792	@ 0x16a0
 8001b7e:	617b      	str	r3, [r7, #20]
                          |TRIG4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4813      	ldr	r0, [pc, #76]	@ (8001be0 <MX_GPIO_Init+0x164>)
 8001b94:	f000 fff0 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO2_Pin ECHO4_Pin */
  GPIO_InitStruct.Pin = ECHO2_Pin|ECHO4_Pin;
 8001b98:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <MX_GPIO_Init+0x168>)
 8001bae:	f000 ffe3 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG2_Pin D6_Pin D3_Pin D5_Pin
                           D4_Pin DC_Pin CS_Pin */
  GPIO_InitStruct.Pin = TRIG2_Pin|D6_Pin|D3_Pin|D5_Pin
 8001bb2:	f240 733c 	movw	r3, #1852	@ 0x73c
 8001bb6:	617b      	str	r3, [r7, #20]
                          |D4_Pin|DC_Pin|CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4806      	ldr	r0, [pc, #24]	@ (8001be4 <MX_GPIO_Init+0x168>)
 8001bcc:	f000 ffd4 	bl	8002b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	@ 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020400 	.word	0x40020400

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <Error_Handler+0x8>

08001bf4 <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim2;

int __io_putchar(int ch)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8001bfc:	1d39      	adds	r1, r7, #4
 8001bfe:	230a      	movs	r3, #10
 8001c00:	2201      	movs	r2, #1
 8001c02:	4804      	ldr	r0, [pc, #16]	@ (8001c14 <__io_putchar+0x20>)
 8001c04:	f002 fdb4 	bl	8004770 <HAL_UART_Transmit>
   return ch;
 8001c08:	687b      	ldr	r3, [r7, #4]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000036c 	.word	0x2000036c

08001c18 <ProgramStart>:
{

   while(*s) (*s != '\r') ? __io_putchar(*s++) : (__io_putchar(*s++), __io_putchar('\n'));         //enable Enter key
}

void ProgramStart(){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
   printf("\033[2J");   // screen clear
 8001c1c:	4808      	ldr	r0, [pc, #32]	@ (8001c40 <ProgramStart+0x28>)
 8001c1e:	f004 fac7 	bl	80061b0 <iprintf>
   printf("\033[1;1H");   // Move cursor pos to (1,1)
 8001c22:	4808      	ldr	r0, [pc, #32]	@ (8001c44 <ProgramStart+0x2c>)
 8001c24:	f004 fac4 	bl	80061b0 <iprintf>
   printf("Program Started ");
 8001c28:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <ProgramStart+0x30>)
 8001c2a:	f004 fac1 	bl	80061b0 <iprintf>
   Wait(1);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f000 f80c 	bl	8001c4c <Wait>
   printf("\033[2J");   // screen clear
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <ProgramStart+0x28>)
 8001c36:	f004 fabb 	bl	80061b0 <iprintf>
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	080081f8 	.word	0x080081f8
 8001c44:	08008200 	.word	0x08008200
 8001c48:	08008208 	.word	0x08008208

08001c4c <Wait>:

void Wait(int o)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	   printf("Press Blue button to continue\r\n");
 8001c54:	4808      	ldr	r0, [pc, #32]	@ (8001c78 <Wait+0x2c>)
 8001c56:	f004 fb13 	bl	8006280 <puts>
	   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 8001c5a:	bf00      	nop
 8001c5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c60:	4806      	ldr	r0, [pc, #24]	@ (8001c7c <Wait+0x30>)
 8001c62:	f001 f90d 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f7      	bne.n	8001c5c <Wait+0x10>

}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	0800821c 	.word	0x0800821c
 8001c7c:	40020800 	.word	0x40020800

08001c80 <usDelay>:


void usDelay(int us) // micro-second based Delay
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	volatile uint32_t t1 = htim2.Instance->CNT;
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <usDelay+0x30>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	60fb      	str	r3, [r7, #12]
	while((htim2.Instance->CNT -t1) < us);
 8001c90:	bf00      	nop
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <usDelay+0x30>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad2      	subs	r2, r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3f7      	bcc.n	8001c92 <usDelay+0x12>
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	20000294 	.word	0x20000294
 8001cb4:	00000000 	.word	0x00000000

08001cb8 <usDist1>:

double usDist1()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2140      	movs	r1, #64	@ 0x40
 8001cc2:	4829      	ldr	r0, [pc, #164]	@ (8001d68 <usDist1+0xb0>)
 8001cc4:	f001 f8f4 	bl	8002eb0 <HAL_GPIO_WritePin>
	usDelay(10);
 8001cc8:	200a      	movs	r0, #10
 8001cca:	f7ff ffd9 	bl	8001c80 <usDelay>
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 1);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2140      	movs	r1, #64	@ 0x40
 8001cd2:	4825      	ldr	r0, [pc, #148]	@ (8001d68 <usDist1+0xb0>)
 8001cd4:	f001 f8ec 	bl	8002eb0 <HAL_GPIO_WritePin>
	usDelay(10);
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f7ff ffd1 	bl	8001c80 <usDelay>
	HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2140      	movs	r1, #64	@ 0x40
 8001ce2:	4821      	ldr	r0, [pc, #132]	@ (8001d68 <usDist1+0xb0>)
 8001ce4:	f001 f8e4 	bl	8002eb0 <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8001ce8:	20c8      	movs	r0, #200	@ 0xc8
 8001cea:	f7ff ffc9 	bl	8001c80 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) != 1);
 8001cee:	bf00      	nop
 8001cf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf4:	481c      	ldr	r0, [pc, #112]	@ (8001d68 <usDist1+0xb0>)
 8001cf6:	f001 f8c3 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d1f7      	bne.n	8001cf0 <usDist1+0x38>
	volatile uint32_t t1 = htim2.Instance->CNT;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <usDist1+0xb4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d06:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) != 0);
 8001d08:	bf00      	nop
 8001d0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d0e:	4816      	ldr	r0, [pc, #88]	@ (8001d68 <usDist1+0xb0>)
 8001d10:	f001 f8b6 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f7      	bne.n	8001d0a <usDist1+0x52>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <usDist1+0xb4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8001d2a:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001d2e:	f7ff ffa7 	bl	8001c80 <usDelay>

	double Dist = 0.0001715 * dt;
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f7fe fbfe 	bl	8000534 <__aeabi_i2d>
 8001d38:	a309      	add	r3, pc, #36	@ (adr r3, 8001d60 <usDist1+0xa8>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe fc63 	bl	8000608 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8001d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d4e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d52:	eeb0 0a47 	vmov.f32	s0, s14
 8001d56:	eef0 0a67 	vmov.f32	s1, s15
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	c853c148 	.word	0xc853c148
 8001d64:	3f267a95 	.word	0x3f267a95
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	20000294 	.word	0x20000294

08001d70 <usDist2>:

double usDist2()
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2104      	movs	r1, #4
 8001d7a:	4829      	ldr	r0, [pc, #164]	@ (8001e20 <usDist2+0xb0>)
 8001d7c:	f001 f898 	bl	8002eb0 <HAL_GPIO_WritePin>
	usDelay(10);
 8001d80:	200a      	movs	r0, #10
 8001d82:	f7ff ff7d 	bl	8001c80 <usDelay>
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 1);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2104      	movs	r1, #4
 8001d8a:	4825      	ldr	r0, [pc, #148]	@ (8001e20 <usDist2+0xb0>)
 8001d8c:	f001 f890 	bl	8002eb0 <HAL_GPIO_WritePin>
	usDelay(10);
 8001d90:	200a      	movs	r0, #10
 8001d92:	f7ff ff75 	bl	8001c80 <usDelay>
	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2104      	movs	r1, #4
 8001d9a:	4821      	ldr	r0, [pc, #132]	@ (8001e20 <usDist2+0xb0>)
 8001d9c:	f001 f888 	bl	8002eb0 <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8001da0:	20c8      	movs	r0, #200	@ 0xc8
 8001da2:	f7ff ff6d 	bl	8001c80 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin) != 1);
 8001da6:	bf00      	nop
 8001da8:	2102      	movs	r1, #2
 8001daa:	481d      	ldr	r0, [pc, #116]	@ (8001e20 <usDist2+0xb0>)
 8001dac:	f001 f868 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d1f8      	bne.n	8001da8 <usDist2+0x38>
	volatile uint32_t t1 = htim2.Instance->CNT;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <usDist2+0xb4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin) != 0);
 8001dbe:	bf00      	nop
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	4817      	ldr	r0, [pc, #92]	@ (8001e20 <usDist2+0xb0>)
 8001dc4:	f001 f85c 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f8      	bne.n	8001dc0 <usDist2+0x50>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <usDist2+0xb4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8001dde:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001de2:	f7ff ff4d 	bl	8001c80 <usDelay>

	double Dist = 0.0001715 * dt;
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7fe fba4 	bl	8000534 <__aeabi_i2d>
 8001dec:	a30a      	add	r3, pc, #40	@ (adr r3, 8001e18 <usDist2+0xa8>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fc09 	bl	8000608 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8001dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e02:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e06:	eeb0 0a47 	vmov.f32	s0, s14
 8001e0a:	eef0 0a67 	vmov.f32	s1, s15
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	f3af 8000 	nop.w
 8001e18:	c853c148 	.word	0xc853c148
 8001e1c:	3f267a95 	.word	0x3f267a95
 8001e20:	40020400 	.word	0x40020400
 8001e24:	20000294 	.word	0x20000294

08001e28 <usDist3>:

double usDist3()
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e34:	482a      	ldr	r0, [pc, #168]	@ (8001ee0 <usDist3+0xb8>)
 8001e36:	f001 f83b 	bl	8002eb0 <HAL_GPIO_WritePin>
	usDelay(10);
 8001e3a:	200a      	movs	r0, #10
 8001e3c:	f7ff ff20 	bl	8001c80 <usDelay>
	HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 1);
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e46:	4826      	ldr	r0, [pc, #152]	@ (8001ee0 <usDist3+0xb8>)
 8001e48:	f001 f832 	bl	8002eb0 <HAL_GPIO_WritePin>
	usDelay(10);
 8001e4c:	200a      	movs	r0, #10
 8001e4e:	f7ff ff17 	bl	8001c80 <usDelay>
	HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e58:	4821      	ldr	r0, [pc, #132]	@ (8001ee0 <usDist3+0xb8>)
 8001e5a:	f001 f829 	bl	8002eb0 <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8001e5e:	20c8      	movs	r0, #200	@ 0xc8
 8001e60:	f7ff ff0e 	bl	8001c80 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO3_GPIO_Port, ECHO3_Pin) != 1);
 8001e64:	bf00      	nop
 8001e66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e6a:	481d      	ldr	r0, [pc, #116]	@ (8001ee0 <usDist3+0xb8>)
 8001e6c:	f001 f808 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d1f7      	bne.n	8001e66 <usDist3+0x3e>
	volatile uint32_t t1 = htim2.Instance->CNT;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <usDist3+0xbc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO3_GPIO_Port, ECHO3_Pin) != 0);
 8001e7e:	bf00      	nop
 8001e80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e84:	4816      	ldr	r0, [pc, #88]	@ (8001ee0 <usDist3+0xb8>)
 8001e86:	f000 fffb 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f7      	bne.n	8001e80 <usDist3+0x58>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <usDist3+0xbc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8001ea0:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001ea4:	f7ff feec 	bl	8001c80 <usDelay>
	double Dist = 0.0001715 * dt;
 8001ea8:	6978      	ldr	r0, [r7, #20]
 8001eaa:	f7fe fb43 	bl	8000534 <__aeabi_i2d>
 8001eae:	a30a      	add	r3, pc, #40	@ (adr r3, 8001ed8 <usDist3+0xb0>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fba8 	bl	8000608 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8001ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ec4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ec8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ecc:	eef0 0a67 	vmov.f32	s1, s15
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	c853c148 	.word	0xc853c148
 8001edc:	3f267a95 	.word	0x3f267a95
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	20000294 	.word	0x20000294

08001ee8 <usDist4>:

double usDist4()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG4_GPIO_Port, TRIG4_Pin, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ef4:	482a      	ldr	r0, [pc, #168]	@ (8001fa0 <usDist4+0xb8>)
 8001ef6:	f000 ffdb 	bl	8002eb0 <HAL_GPIO_WritePin>
	usDelay(10);
 8001efa:	200a      	movs	r0, #10
 8001efc:	f7ff fec0 	bl	8001c80 <usDelay>
	HAL_GPIO_WritePin(TRIG4_GPIO_Port, TRIG4_Pin, 1);
 8001f00:	2201      	movs	r2, #1
 8001f02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f06:	4826      	ldr	r0, [pc, #152]	@ (8001fa0 <usDist4+0xb8>)
 8001f08:	f000 ffd2 	bl	8002eb0 <HAL_GPIO_WritePin>
	usDelay(10);
 8001f0c:	200a      	movs	r0, #10
 8001f0e:	f7ff feb7 	bl	8001c80 <usDelay>
	HAL_GPIO_WritePin(TRIG4_GPIO_Port, TRIG4_Pin, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f18:	4821      	ldr	r0, [pc, #132]	@ (8001fa0 <usDist4+0xb8>)
 8001f1a:	f000 ffc9 	bl	8002eb0 <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8001f1e:	20c8      	movs	r0, #200	@ 0xc8
 8001f20:	f7ff feae 	bl	8001c80 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO4_GPIO_Port, ECHO4_Pin) != 1);
 8001f24:	bf00      	nop
 8001f26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f2a:	481e      	ldr	r0, [pc, #120]	@ (8001fa4 <usDist4+0xbc>)
 8001f2c:	f000 ffa8 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d1f7      	bne.n	8001f26 <usDist4+0x3e>
	volatile uint32_t t1 = htim2.Instance->CNT;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa8 <usDist4+0xc0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO4_GPIO_Port, ECHO4_Pin) != 0);
 8001f3e:	bf00      	nop
 8001f40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f44:	4817      	ldr	r0, [pc, #92]	@ (8001fa4 <usDist4+0xbc>)
 8001f46:	f000 ff9b 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f7      	bne.n	8001f40 <usDist4+0x58>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8001f50:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <usDist4+0xc0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 8001f60:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001f64:	f7ff fe8c 	bl	8001c80 <usDelay>
	double Dist = 0.0001715 * dt;
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f7fe fae3 	bl	8000534 <__aeabi_i2d>
 8001f6e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001f98 <usDist4+0xb0>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fb48 	bl	8000608 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 8001f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f84:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f88:	eeb0 0a47 	vmov.f32	s0, s14
 8001f8c:	eef0 0a67 	vmov.f32	s1, s15
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	c853c148 	.word	0xc853c148
 8001f9c:	3f267a95 	.word	0x3f267a95
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	20000294 	.word	0x20000294
 8001fac:	00000000 	.word	0x00000000

08001fb0 <usDist5>:

double usDist5()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG5_GPIO_Port, TRIG5_Pin, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4829      	ldr	r0, [pc, #164]	@ (8002060 <usDist5+0xb0>)
 8001fbc:	f000 ff78 	bl	8002eb0 <HAL_GPIO_WritePin>
	usDelay(10);
 8001fc0:	200a      	movs	r0, #10
 8001fc2:	f7ff fe5d 	bl	8001c80 <usDelay>
	HAL_GPIO_WritePin(TRIG5_GPIO_Port, TRIG5_Pin, 1);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4825      	ldr	r0, [pc, #148]	@ (8002060 <usDist5+0xb0>)
 8001fcc:	f000 ff70 	bl	8002eb0 <HAL_GPIO_WritePin>
	usDelay(10);
 8001fd0:	200a      	movs	r0, #10
 8001fd2:	f7ff fe55 	bl	8001c80 <usDelay>
	HAL_GPIO_WritePin(TRIG5_GPIO_Port, TRIG5_Pin, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4821      	ldr	r0, [pc, #132]	@ (8002060 <usDist5+0xb0>)
 8001fdc:	f000 ff68 	bl	8002eb0 <HAL_GPIO_WritePin>
	//	Wait for burst
	usDelay(200);
 8001fe0:	20c8      	movs	r0, #200	@ 0xc8
 8001fe2:	f7ff fe4d 	bl	8001c80 <usDelay>
	//	Wait for Echo Low

	//	Start count
	while(HAL_GPIO_ReadPin(ECHO5_GPIO_Port, ECHO5_Pin) != 1);
 8001fe6:	bf00      	nop
 8001fe8:	2102      	movs	r1, #2
 8001fea:	481d      	ldr	r0, [pc, #116]	@ (8002060 <usDist5+0xb0>)
 8001fec:	f000 ff48 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d1f8      	bne.n	8001fe8 <usDist5+0x38>
	volatile uint32_t t1 = htim2.Instance->CNT;
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <usDist5+0xb4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO5_GPIO_Port, ECHO5_Pin) != 0);
 8001ffe:	bf00      	nop
 8002000:	2102      	movs	r1, #2
 8002002:	4817      	ldr	r0, [pc, #92]	@ (8002060 <usDist5+0xb0>)
 8002004:	f000 ff3c 	bl	8002e80 <HAL_GPIO_ReadPin>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f8      	bne.n	8002000 <usDist5+0x50>
	volatile uint32_t t2 = htim2.Instance->CNT;
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <usDist5+0xb4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	603b      	str	r3, [r7, #0]

	int dt = t2 - t1;	//	micro-second sonic speed
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
	usDelay(60000);	//	minimum delay for next time
 800201e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8002022:	f7ff fe2d 	bl	8001c80 <usDelay>
	double Dist = 0.0001715 * dt;
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7fe fa84 	bl	8000534 <__aeabi_i2d>
 800202c:	a30a      	add	r3, pc, #40	@ (adr r3, 8002058 <usDist5+0xa8>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fae9 	bl	8000608 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return Dist;
 800203e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002042:	ec43 2b17 	vmov	d7, r2, r3
}
 8002046:	eeb0 0a47 	vmov.f32	s0, s14
 800204a:	eef0 0a67 	vmov.f32	s1, s15
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	f3af 8000 	nop.w
 8002058:	c853c148 	.word	0xc853c148
 800205c:	3f267a95 	.word	0x3f267a95
 8002060:	40020800 	.word	0x40020800
 8002064:	20000294 	.word	0x20000294

08002068 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <HAL_MspInit+0x4c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	4a0f      	ldr	r2, [pc, #60]	@ (80020b4 <HAL_MspInit+0x4c>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800207c:	6453      	str	r3, [r2, #68]	@ 0x44
 800207e:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <HAL_MspInit+0x4c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <HAL_MspInit+0x4c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	4a08      	ldr	r2, [pc, #32]	@ (80020b4 <HAL_MspInit+0x4c>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	@ 0x40
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_MspInit+0x4c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020a6:	2007      	movs	r0, #7
 80020a8:	f000 fc92 	bl	80029d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800

080020b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a28      	ldr	r2, [pc, #160]	@ (8002178 <HAL_SPI_MspInit+0xc0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d14a      	bne.n	8002170 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b27      	ldr	r3, [pc, #156]	@ (800217c <HAL_SPI_MspInit+0xc4>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a26      	ldr	r2, [pc, #152]	@ (800217c <HAL_SPI_MspInit+0xc4>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b24      	ldr	r3, [pc, #144]	@ (800217c <HAL_SPI_MspInit+0xc4>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b20      	ldr	r3, [pc, #128]	@ (800217c <HAL_SPI_MspInit+0xc4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a1f      	ldr	r2, [pc, #124]	@ (800217c <HAL_SPI_MspInit+0xc4>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <HAL_SPI_MspInit+0xc4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_SPI_MspInit+0xc4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a18      	ldr	r2, [pc, #96]	@ (800217c <HAL_SPI_MspInit+0xc4>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b16      	ldr	r3, [pc, #88]	@ (800217c <HAL_SPI_MspInit+0xc4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800212e:	2308      	movs	r3, #8
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800213e:	2305      	movs	r3, #5
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	480d      	ldr	r0, [pc, #52]	@ (8002180 <HAL_SPI_MspInit+0xc8>)
 800214a:	f000 fd15 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800214e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002160:	2305      	movs	r3, #5
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	4806      	ldr	r0, [pc, #24]	@ (8002184 <HAL_SPI_MspInit+0xcc>)
 800216c:	f000 fd04 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	3728      	adds	r7, #40	@ 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40003800 	.word	0x40003800
 800217c:	40023800 	.word	0x40023800
 8002180:	40020800 	.word	0x40020800
 8002184:	40020400 	.word	0x40020400

08002188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1f      	ldr	r2, [pc, #124]	@ (8002214 <HAL_TIM_Base_MspInit+0x8c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	4b1e      	ldr	r3, [pc, #120]	@ (8002218 <HAL_TIM_Base_MspInit+0x90>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002218 <HAL_TIM_Base_MspInit+0x90>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <HAL_TIM_Base_MspInit+0x90>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021b6:	e026      	b.n	8002206 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c0:	d10e      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_TIM_Base_MspInit+0x90>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	4a13      	ldr	r2, [pc, #76]	@ (8002218 <HAL_TIM_Base_MspInit+0x90>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_TIM_Base_MspInit+0x90>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
}
 80021de:	e012      	b.n	8002206 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <HAL_TIM_Base_MspInit+0x94>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10d      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_TIM_Base_MspInit+0x90>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	4a09      	ldr	r2, [pc, #36]	@ (8002218 <HAL_TIM_Base_MspInit+0x90>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fa:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <HAL_TIM_Base_MspInit+0x90>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000
 8002218:	40023800 	.word	0x40023800
 800221c:	40000400 	.word	0x40000400

08002220 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	@ 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a33      	ldr	r2, [pc, #204]	@ (800230c <HAL_TIM_MspPostInit+0xec>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d11f      	bne.n	8002282 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <HAL_TIM_MspPostInit+0xf0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a31      	ldr	r2, [pc, #196]	@ (8002310 <HAL_TIM_MspPostInit+0xf0>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <HAL_TIM_MspPostInit+0xf0>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800225e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8002262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002270:	2301      	movs	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	4826      	ldr	r0, [pc, #152]	@ (8002314 <HAL_TIM_MspPostInit+0xf4>)
 800227c:	f000 fc7c 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002280:	e040      	b.n	8002304 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a24      	ldr	r2, [pc, #144]	@ (8002318 <HAL_TIM_MspPostInit+0xf8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d13b      	bne.n	8002304 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <HAL_TIM_MspPostInit+0xf0>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	4a1e      	ldr	r2, [pc, #120]	@ (8002310 <HAL_TIM_MspPostInit+0xf0>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6313      	str	r3, [r2, #48]	@ 0x30
 800229c:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <HAL_TIM_MspPostInit+0xf0>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <HAL_TIM_MspPostInit+0xf0>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <HAL_TIM_MspPostInit+0xf0>)
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b8:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <HAL_TIM_MspPostInit+0xf0>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022c4:	2340      	movs	r3, #64	@ 0x40
 80022c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022d4:	2302      	movs	r3, #2
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4619      	mov	r1, r3
 80022de:	480d      	ldr	r0, [pc, #52]	@ (8002314 <HAL_TIM_MspPostInit+0xf4>)
 80022e0:	f000 fc4a 	bl	8002b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022e4:	2301      	movs	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022f4:	2302      	movs	r3, #2
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4807      	ldr	r0, [pc, #28]	@ (800231c <HAL_TIM_MspPostInit+0xfc>)
 8002300:	f000 fc3a 	bl	8002b78 <HAL_GPIO_Init>
}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	@ 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40010000 	.word	0x40010000
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000
 8002318:	40000400 	.word	0x40000400
 800231c:	40020400 	.word	0x40020400

08002320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	@ 0x30
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a49      	ldr	r2, [pc, #292]	@ (8002464 <HAL_UART_MspInit+0x144>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d153      	bne.n	80023ea <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	4b48      	ldr	r3, [pc, #288]	@ (8002468 <HAL_UART_MspInit+0x148>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	4a47      	ldr	r2, [pc, #284]	@ (8002468 <HAL_UART_MspInit+0x148>)
 800234c:	f043 0310 	orr.w	r3, r3, #16
 8002350:	6453      	str	r3, [r2, #68]	@ 0x44
 8002352:	4b45      	ldr	r3, [pc, #276]	@ (8002468 <HAL_UART_MspInit+0x148>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <HAL_UART_MspInit+0x148>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a40      	ldr	r2, [pc, #256]	@ (8002468 <HAL_UART_MspInit+0x148>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <HAL_UART_MspInit+0x148>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	4b3a      	ldr	r3, [pc, #232]	@ (8002468 <HAL_UART_MspInit+0x148>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a39      	ldr	r2, [pc, #228]	@ (8002468 <HAL_UART_MspInit+0x148>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b37      	ldr	r3, [pc, #220]	@ (8002468 <HAL_UART_MspInit+0x148>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023a8:	2307      	movs	r3, #7
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	4619      	mov	r1, r3
 80023b2:	482e      	ldr	r0, [pc, #184]	@ (800246c <HAL_UART_MspInit+0x14c>)
 80023b4:	f000 fbe0 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023b8:	2380      	movs	r3, #128	@ 0x80
 80023ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c8:	2307      	movs	r3, #7
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4619      	mov	r1, r3
 80023d2:	4827      	ldr	r0, [pc, #156]	@ (8002470 <HAL_UART_MspInit+0x150>)
 80023d4:	f000 fbd0 	bl	8002b78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	2025      	movs	r0, #37	@ 0x25
 80023de:	f000 fb02 	bl	80029e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023e2:	2025      	movs	r0, #37	@ 0x25
 80023e4:	f000 fb1b 	bl	8002a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023e8:	e038      	b.n	800245c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a21      	ldr	r2, [pc, #132]	@ (8002474 <HAL_UART_MspInit+0x154>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d133      	bne.n	800245c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_UART_MspInit+0x148>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002468 <HAL_UART_MspInit+0x148>)
 80023fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002402:	6413      	str	r3, [r2, #64]	@ 0x40
 8002404:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <HAL_UART_MspInit+0x148>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <HAL_UART_MspInit+0x148>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002418:	4a13      	ldr	r2, [pc, #76]	@ (8002468 <HAL_UART_MspInit+0x148>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002420:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <HAL_UART_MspInit+0x148>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800242c:	230f      	movs	r3, #15
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800243c:	2307      	movs	r3, #7
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4619      	mov	r1, r3
 8002446:	4809      	ldr	r0, [pc, #36]	@ (800246c <HAL_UART_MspInit+0x14c>)
 8002448:	f000 fb96 	bl	8002b78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	2026      	movs	r0, #38	@ 0x26
 8002452:	f000 fac8 	bl	80029e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002456:	2026      	movs	r0, #38	@ 0x26
 8002458:	f000 fae1 	bl	8002a1e <HAL_NVIC_EnableIRQ>
}
 800245c:	bf00      	nop
 800245e:	3730      	adds	r7, #48	@ 0x30
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40011000 	.word	0x40011000
 8002468:	40023800 	.word	0x40023800
 800246c:	40020000 	.word	0x40020000
 8002470:	40020400 	.word	0x40020400
 8002474:	40004400 	.word	0x40004400

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <NMI_Handler+0x4>

08002480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <HardFault_Handler+0x4>

08002488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <MemManage_Handler+0x4>

08002490 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <BusFault_Handler+0x4>

08002498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <UsageFault_Handler+0x4>

080024a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ce:	f000 f96b 	bl	80027a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024dc:	4802      	ldr	r0, [pc, #8]	@ (80024e8 <USART1_IRQHandler+0x10>)
 80024de:	f002 f9f7 	bl	80048d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000324 	.word	0x20000324

080024ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024f0:	4802      	ldr	r0, [pc, #8]	@ (80024fc <USART2_IRQHandler+0x10>)
 80024f2:	f002 f9ed 	bl	80048d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000036c 	.word	0x2000036c

08002500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return 1;
 8002504:	2301      	movs	r3, #1
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_kill>:

int _kill(int pid, int sig)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800251a:	f003 fff5 	bl	8006508 <__errno>
 800251e:	4603      	mov	r3, r0
 8002520:	2216      	movs	r2, #22
 8002522:	601a      	str	r2, [r3, #0]
  return -1;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_exit>:

void _exit (int status)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ffe7 	bl	8002510 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002542:	bf00      	nop
 8002544:	e7fd      	b.n	8002542 <_exit+0x12>

08002546 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e00a      	b.n	800256e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002558:	f3af 8000 	nop.w
 800255c:	4601      	mov	r1, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	60ba      	str	r2, [r7, #8]
 8002564:	b2ca      	uxtb	r2, r1
 8002566:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	dbf0      	blt.n	8002558 <_read+0x12>
  }

  return len;
 8002576:	687b      	ldr	r3, [r7, #4]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e009      	b.n	80025a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	60ba      	str	r2, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fb2a 	bl	8001bf4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	dbf1      	blt.n	8002592 <_write+0x12>
  }
  return len;
 80025ae:	687b      	ldr	r3, [r7, #4]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <_close>:

int _close(int file)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e0:	605a      	str	r2, [r3, #4]
  return 0;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <_isatty>:

int _isatty(int file)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025f8:	2301      	movs	r3, #1
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002628:	4a14      	ldr	r2, [pc, #80]	@ (800267c <_sbrk+0x5c>)
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <_sbrk+0x60>)
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002634:	4b13      	ldr	r3, [pc, #76]	@ (8002684 <_sbrk+0x64>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <_sbrk+0x64>)
 800263e:	4a12      	ldr	r2, [pc, #72]	@ (8002688 <_sbrk+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <_sbrk+0x64>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d207      	bcs.n	8002660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002650:	f003 ff5a 	bl	8006508 <__errno>
 8002654:	4603      	mov	r3, r0
 8002656:	220c      	movs	r2, #12
 8002658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	e009      	b.n	8002674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002660:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <_sbrk+0x64>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <_sbrk+0x64>)
 8002670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002672:	68fb      	ldr	r3, [r7, #12]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20020000 	.word	0x20020000
 8002680:	00000400 	.word	0x00000400
 8002684:	20000424 	.word	0x20000424
 8002688:	20000578 	.word	0x20000578

0800268c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <SystemInit+0x20>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002696:	4a05      	ldr	r2, [pc, #20]	@ (80026ac <SystemInit+0x20>)
 8002698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800269c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 80026b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026b4:	f7ff ffea 	bl	800268c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b8:	480c      	ldr	r0, [pc, #48]	@ (80026ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ba:	490d      	ldr	r1, [pc, #52]	@ (80026f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026bc:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0a      	ldr	r2, [pc, #40]	@ (80026f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026d0:	4c0a      	ldr	r4, [pc, #40]	@ (80026fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026de:	f003 ff19 	bl	8006514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e2:	f7fe fd45 	bl	8001170 <main>
  bx  lr    
 80026e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80026f4:	080085d8 	.word	0x080085d8
  ldr r2, =_sbss
 80026f8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80026fc:	20000578 	.word	0x20000578

08002700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC_IRQHandler>
	...

08002704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002708:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <HAL_Init+0x40>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <HAL_Init+0x40>)
 800270e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_Init+0x40>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <HAL_Init+0x40>)
 800271a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800271e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002720:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <HAL_Init+0x40>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <HAL_Init+0x40>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800272c:	2003      	movs	r0, #3
 800272e:	f000 f94f 	bl	80029d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002732:	2000      	movs	r0, #0
 8002734:	f000 f808 	bl	8002748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002738:	f7ff fc96 	bl	8002068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00

08002748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <HAL_InitTick+0x54>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <HAL_InitTick+0x58>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800275e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f967 	bl	8002a3a <HAL_SYSTICK_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e00e      	b.n	8002794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b0f      	cmp	r3, #15
 800277a:	d80a      	bhi.n	8002792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800277c:	2200      	movs	r2, #0
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f000 f92f 	bl	80029e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002788:	4a06      	ldr	r2, [pc, #24]	@ (80027a4 <HAL_InitTick+0x5c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000004 	.word	0x20000004
 80027a0:	2000000c 	.word	0x2000000c
 80027a4:	20000008 	.word	0x20000008

080027a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ac:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_IncTick+0x20>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_IncTick+0x24>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <HAL_IncTick+0x24>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	2000000c 	.word	0x2000000c
 80027cc:	20000428 	.word	0x20000428

080027d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return uwTick;
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <HAL_GetTick+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000428 	.word	0x20000428

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff ffee 	bl	80027d0 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d005      	beq.n	800280e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <HAL_Delay+0x44>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800280e:	bf00      	nop
 8002810:	f7ff ffde 	bl	80027d0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d8f7      	bhi.n	8002810 <HAL_Delay+0x28>
  {
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2000000c 	.word	0x2000000c

08002830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800284c:	4013      	ands	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800285c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <__NVIC_GetPriorityGrouping+0x18>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0307 	and.w	r3, r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	db0b      	blt.n	80028be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	4907      	ldr	r1, [pc, #28]	@ (80028cc <__NVIC_EnableIRQ+0x38>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2001      	movs	r0, #1
 80028b6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000e100 	.word	0xe000e100

080028d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	6039      	str	r1, [r7, #0]
 80028da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	db0a      	blt.n	80028fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	490c      	ldr	r1, [pc, #48]	@ (800291c <__NVIC_SetPriority+0x4c>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	0112      	lsls	r2, r2, #4
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	440b      	add	r3, r1
 80028f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f8:	e00a      	b.n	8002910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4908      	ldr	r1, [pc, #32]	@ (8002920 <__NVIC_SetPriority+0x50>)
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	3b04      	subs	r3, #4
 8002908:	0112      	lsls	r2, r2, #4
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	440b      	add	r3, r1
 800290e:	761a      	strb	r2, [r3, #24]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000e100 	.word	0xe000e100
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002924:	b480      	push	{r7}
 8002926:	b089      	sub	sp, #36	@ 0x24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f1c3 0307 	rsb	r3, r3, #7
 800293e:	2b04      	cmp	r3, #4
 8002940:	bf28      	it	cs
 8002942:	2304      	movcs	r3, #4
 8002944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3304      	adds	r3, #4
 800294a:	2b06      	cmp	r3, #6
 800294c:	d902      	bls.n	8002954 <NVIC_EncodePriority+0x30>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3b03      	subs	r3, #3
 8002952:	e000      	b.n	8002956 <NVIC_EncodePriority+0x32>
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	f04f 32ff 	mov.w	r2, #4294967295
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	401a      	ands	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800296c:	f04f 31ff 	mov.w	r1, #4294967295
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	43d9      	mvns	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	4313      	orrs	r3, r2
         );
}
 800297e:	4618      	mov	r0, r3
 8002980:	3724      	adds	r7, #36	@ 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800299c:	d301      	bcc.n	80029a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299e:	2301      	movs	r3, #1
 80029a0:	e00f      	b.n	80029c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a2:	4a0a      	ldr	r2, [pc, #40]	@ (80029cc <SysTick_Config+0x40>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029aa:	210f      	movs	r1, #15
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f7ff ff8e 	bl	80028d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b4:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <SysTick_Config+0x40>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ba:	4b04      	ldr	r3, [pc, #16]	@ (80029cc <SysTick_Config+0x40>)
 80029bc:	2207      	movs	r2, #7
 80029be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	e000e010 	.word	0xe000e010

080029d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff29 	bl	8002830 <__NVIC_SetPriorityGrouping>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f8:	f7ff ff3e 	bl	8002878 <__NVIC_GetPriorityGrouping>
 80029fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	6978      	ldr	r0, [r7, #20]
 8002a04:	f7ff ff8e 	bl	8002924 <NVIC_EncodePriority>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff5d 	bl	80028d0 <__NVIC_SetPriority>
}
 8002a16:	bf00      	nop
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff31 	bl	8002894 <__NVIC_EnableIRQ>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ffa2 	bl	800298c <SysTick_Config>
 8002a48:	4603      	mov	r3, r0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff feb6 	bl	80027d0 <HAL_GetTick>
 8002a64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d008      	beq.n	8002a84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2280      	movs	r2, #128	@ 0x80
 8002a76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e052      	b.n	8002b2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0216 	bic.w	r2, r2, #22
 8002a92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aa2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <HAL_DMA_Abort+0x62>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0208 	bic.w	r2, r2, #8
 8002ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad4:	e013      	b.n	8002afe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ad6:	f7ff fe7b 	bl	80027d0 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d90c      	bls.n	8002afe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2203      	movs	r2, #3
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e015      	b.n	8002b2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e4      	bne.n	8002ad6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	223f      	movs	r2, #63	@ 0x3f
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d004      	beq.n	8002b50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2280      	movs	r2, #128	@ 0x80
 8002b4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e00c      	b.n	8002b6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2205      	movs	r2, #5
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e159      	b.n	8002e48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f040 8148 	bne.w	8002e42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d005      	beq.n	8002bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d130      	bne.n	8002c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0201 	and.w	r2, r3, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d017      	beq.n	8002c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d123      	bne.n	8002cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0203 	and.w	r2, r3, #3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a2 	beq.w	8002e42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b57      	ldr	r3, [pc, #348]	@ (8002e60 <HAL_GPIO_Init+0x2e8>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	4a56      	ldr	r2, [pc, #344]	@ (8002e60 <HAL_GPIO_Init+0x2e8>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d0e:	4b54      	ldr	r3, [pc, #336]	@ (8002e60 <HAL_GPIO_Init+0x2e8>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1a:	4a52      	ldr	r2, [pc, #328]	@ (8002e64 <HAL_GPIO_Init+0x2ec>)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	3302      	adds	r3, #2
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a49      	ldr	r2, [pc, #292]	@ (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x202>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a48      	ldr	r2, [pc, #288]	@ (8002e6c <HAL_GPIO_Init+0x2f4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x1fe>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a47      	ldr	r2, [pc, #284]	@ (8002e70 <HAL_GPIO_Init+0x2f8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x1fa>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a46      	ldr	r2, [pc, #280]	@ (8002e74 <HAL_GPIO_Init+0x2fc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x1f6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a45      	ldr	r2, [pc, #276]	@ (8002e78 <HAL_GPIO_Init+0x300>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x1f2>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e008      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	e006      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e004      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e002      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	f002 0203 	and.w	r2, r2, #3
 8002d82:	0092      	lsls	r2, r2, #2
 8002d84:	4093      	lsls	r3, r2
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d8c:	4935      	ldr	r1, [pc, #212]	@ (8002e64 <HAL_GPIO_Init+0x2ec>)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	089b      	lsrs	r3, r3, #2
 8002d92:	3302      	adds	r3, #2
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d9a:	4b38      	ldr	r3, [pc, #224]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de8:	4a24      	ldr	r2, [pc, #144]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dee:	4b23      	ldr	r3, [pc, #140]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e12:	4a1a      	ldr	r2, [pc, #104]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e18:	4b18      	ldr	r3, [pc, #96]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3301      	adds	r3, #1
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	f67f aea2 	bls.w	8002b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	3724      	adds	r7, #36	@ 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40013800 	.word	0x40013800
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020800 	.word	0x40020800
 8002e74:	40020c00 	.word	0x40020c00
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40013c00 	.word	0x40013c00

08002e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	887b      	ldrh	r3, [r7, #2]
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e001      	b.n	8002ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec0:	787b      	ldrb	r3, [r7, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ecc:	e003      	b.n	8002ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	041a      	lsls	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	619a      	str	r2, [r3, #24]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e267      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d075      	beq.n	8002fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f02:	4b88      	ldr	r3, [pc, #544]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d00c      	beq.n	8002f28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0e:	4b85      	ldr	r3, [pc, #532]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d112      	bne.n	8002f40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4b82      	ldr	r3, [pc, #520]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	4b7e      	ldr	r3, [pc, #504]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d05b      	beq.n	8002fec <HAL_RCC_OscConfig+0x108>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d157      	bne.n	8002fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e242      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f48:	d106      	bne.n	8002f58 <HAL_RCC_OscConfig+0x74>
 8002f4a:	4b76      	ldr	r3, [pc, #472]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a75      	ldr	r2, [pc, #468]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xb0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x98>
 8002f62:	4b70      	ldr	r3, [pc, #448]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6f      	ldr	r2, [pc, #444]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6c      	ldr	r2, [pc, #432]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xb0>
 8002f7c:	4b69      	ldr	r3, [pc, #420]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a68      	ldr	r2, [pc, #416]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b66      	ldr	r3, [pc, #408]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a65      	ldr	r2, [pc, #404]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7ff fc18 	bl	80027d0 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7ff fc14 	bl	80027d0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e207      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xc0>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7ff fc04 	bl	80027d0 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7ff fc00 	bl	80027d0 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	@ 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1f3      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	4b51      	ldr	r3, [pc, #324]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0xe8>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d063      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b47      	ldr	r3, [pc, #284]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300e:	2b08      	cmp	r3, #8
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b44      	ldr	r3, [pc, #272]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b41      	ldr	r3, [pc, #260]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x152>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1c7      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4937      	ldr	r1, [pc, #220]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b34      	ldr	r3, [pc, #208]	@ (8003128 <HAL_RCC_OscConfig+0x244>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7ff fbb9 	bl	80027d0 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003062:	f7ff fbb5 	bl	80027d0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e1a8      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4925      	ldr	r1, [pc, #148]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <HAL_RCC_OscConfig+0x244>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7ff fb98 	bl	80027d0 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a4:	f7ff fb94 	bl	80027d0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e187      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d036      	beq.n	800313c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d6:	4b15      	ldr	r3, [pc, #84]	@ (800312c <HAL_RCC_OscConfig+0x248>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7ff fb78 	bl	80027d0 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e4:	f7ff fb74 	bl	80027d0 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e167      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 80030f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x200>
 8003102:	e01b      	b.n	800313c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003104:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_RCC_OscConfig+0x248>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310a:	f7ff fb61 	bl	80027d0 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003110:	e00e      	b.n	8003130 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003112:	f7ff fb5d 	bl	80027d0 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d907      	bls.n	8003130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e150      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
 8003124:	40023800 	.word	0x40023800
 8003128:	42470000 	.word	0x42470000
 800312c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b88      	ldr	r3, [pc, #544]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ea      	bne.n	8003112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8097 	beq.w	8003278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4b81      	ldr	r3, [pc, #516]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b7d      	ldr	r3, [pc, #500]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4a7c      	ldr	r2, [pc, #496]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	@ 0x40
 800316a:	4b7a      	ldr	r3, [pc, #488]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b77      	ldr	r3, [pc, #476]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d118      	bne.n	80031b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003186:	4b74      	ldr	r3, [pc, #464]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a73      	ldr	r2, [pc, #460]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7ff fb1d 	bl	80027d0 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319a:	f7ff fb19 	bl	80027d0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e10c      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x2ea>
 80031c0:	4b64      	ldr	r3, [pc, #400]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	4a63      	ldr	r2, [pc, #396]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80031cc:	e01c      	b.n	8003208 <HAL_RCC_OscConfig+0x324>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x30c>
 80031d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a5e      	ldr	r2, [pc, #376]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0x324>
 80031f0:	4b58      	ldr	r3, [pc, #352]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a57      	ldr	r2, [pc, #348]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fc:	4b55      	ldr	r3, [pc, #340]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003200:	4a54      	ldr	r2, [pc, #336]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003202:	f023 0304 	bic.w	r3, r3, #4
 8003206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7ff fade 	bl	80027d0 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7ff fada 	bl	80027d0 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0cb      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	4b49      	ldr	r3, [pc, #292]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0ee      	beq.n	8003218 <HAL_RCC_OscConfig+0x334>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323c:	f7ff fac8 	bl	80027d0 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7ff fac4 	bl	80027d0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0b5      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325a:	4b3e      	ldr	r3, [pc, #248]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ee      	bne.n	8003244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b39      	ldr	r3, [pc, #228]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	4a38      	ldr	r2, [pc, #224]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80a1 	beq.w	80033c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003282:	4b34      	ldr	r3, [pc, #208]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b08      	cmp	r3, #8
 800328c:	d05c      	beq.n	8003348 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d141      	bne.n	800331a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b31      	ldr	r3, [pc, #196]	@ (800335c <HAL_RCC_OscConfig+0x478>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7ff fa98 	bl	80027d0 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a4:	f7ff fa94 	bl	80027d0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e087      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b27      	ldr	r3, [pc, #156]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	491b      	ldr	r1, [pc, #108]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ec:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x478>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7ff fa6d 	bl	80027d0 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fa:	f7ff fa69 	bl	80027d0 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e05c      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330c:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x416>
 8003318:	e054      	b.n	80033c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331a:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_RCC_OscConfig+0x478>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7ff fa56 	bl	80027d0 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003328:	f7ff fa52 	bl	80027d0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e045      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x444>
 8003346:	e03d      	b.n	80033c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d107      	bne.n	8003360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e038      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
 8003354:	40023800 	.word	0x40023800
 8003358:	40007000 	.word	0x40007000
 800335c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003360:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <HAL_RCC_OscConfig+0x4ec>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d028      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d121      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d11a      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003390:	4013      	ands	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003398:	4293      	cmp	r3, r2
 800339a:	d111      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	3b01      	subs	r3, #1
 80033aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800

080033d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0cc      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b68      	ldr	r3, [pc, #416]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d90c      	bls.n	8003410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b65      	ldr	r3, [pc, #404]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b63      	ldr	r3, [pc, #396]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0b8      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003428:	4b59      	ldr	r3, [pc, #356]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a58      	ldr	r2, [pc, #352]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003440:	4b53      	ldr	r3, [pc, #332]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a52      	ldr	r2, [pc, #328]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800344a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344c:	4b50      	ldr	r3, [pc, #320]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	494d      	ldr	r1, [pc, #308]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d044      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b47      	ldr	r3, [pc, #284]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d119      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e07f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d003      	beq.n	8003492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348e:	2b03      	cmp	r3, #3
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	4b3f      	ldr	r3, [pc, #252]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e067      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b37      	ldr	r3, [pc, #220]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4934      	ldr	r1, [pc, #208]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c4:	f7ff f984 	bl	80027d0 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7ff f980 	bl	80027d0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e04f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f4:	4b25      	ldr	r3, [pc, #148]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d20c      	bcs.n	800351c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b22      	ldr	r3, [pc, #136]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e032      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003528:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4916      	ldr	r1, [pc, #88]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003546:	4b12      	ldr	r3, [pc, #72]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	490e      	ldr	r1, [pc, #56]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800355a:	f000 f821 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800355e:	4602      	mov	r2, r0
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	490a      	ldr	r1, [pc, #40]	@ (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 800356c:	5ccb      	ldrb	r3, [r1, r3]
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	4a09      	ldr	r2, [pc, #36]	@ (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003576:	4b09      	ldr	r3, [pc, #36]	@ (800359c <HAL_RCC_ClockConfig+0x1c8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f8e4 	bl	8002748 <HAL_InitTick>

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023c00 	.word	0x40023c00
 8003590:	40023800 	.word	0x40023800
 8003594:	0800823c 	.word	0x0800823c
 8003598:	20000004 	.word	0x20000004
 800359c:	20000008 	.word	0x20000008

080035a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a4:	b094      	sub	sp, #80	@ 0x50
 80035a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ac:	2300      	movs	r3, #0
 80035ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b0:	2300      	movs	r3, #0
 80035b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b8:	4b79      	ldr	r3, [pc, #484]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d00d      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x40>
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	f200 80e1 	bhi.w	800378c <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x34>
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d003      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x3a>
 80035d2:	e0db      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d4:	4b73      	ldr	r3, [pc, #460]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035d6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80035d8:	e0db      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035da:	4b73      	ldr	r3, [pc, #460]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80035dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035de:	e0d8      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e0:	4b6f      	ldr	r3, [pc, #444]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ea:	4b6d      	ldr	r3, [pc, #436]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d063      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f6:	4b6a      	ldr	r3, [pc, #424]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	2200      	movs	r2, #0
 80035fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003600:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003608:	633b      	str	r3, [r7, #48]	@ 0x30
 800360a:	2300      	movs	r3, #0
 800360c:	637b      	str	r3, [r7, #52]	@ 0x34
 800360e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	f04f 0000 	mov.w	r0, #0
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	0159      	lsls	r1, r3, #5
 8003620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003624:	0150      	lsls	r0, r2, #5
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4621      	mov	r1, r4
 800362c:	1a51      	subs	r1, r2, r1
 800362e:	6139      	str	r1, [r7, #16]
 8003630:	4629      	mov	r1, r5
 8003632:	eb63 0301 	sbc.w	r3, r3, r1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003644:	4659      	mov	r1, fp
 8003646:	018b      	lsls	r3, r1, #6
 8003648:	4651      	mov	r1, sl
 800364a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800364e:	4651      	mov	r1, sl
 8003650:	018a      	lsls	r2, r1, #6
 8003652:	4651      	mov	r1, sl
 8003654:	ebb2 0801 	subs.w	r8, r2, r1
 8003658:	4659      	mov	r1, fp
 800365a:	eb63 0901 	sbc.w	r9, r3, r1
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800366a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800366e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003672:	4690      	mov	r8, r2
 8003674:	4699      	mov	r9, r3
 8003676:	4623      	mov	r3, r4
 8003678:	eb18 0303 	adds.w	r3, r8, r3
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	462b      	mov	r3, r5
 8003680:	eb49 0303 	adc.w	r3, r9, r3
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003692:	4629      	mov	r1, r5
 8003694:	024b      	lsls	r3, r1, #9
 8003696:	4621      	mov	r1, r4
 8003698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800369c:	4621      	mov	r1, r4
 800369e:	024a      	lsls	r2, r1, #9
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a6:	2200      	movs	r2, #0
 80036a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036b0:	f7fd fa82 	bl	8000bb8 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4613      	mov	r3, r2
 80036ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036bc:	e058      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b38      	ldr	r3, [pc, #224]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2200      	movs	r2, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	4611      	mov	r1, r2
 80036ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036d8:	4642      	mov	r2, r8
 80036da:	464b      	mov	r3, r9
 80036dc:	f04f 0000 	mov.w	r0, #0
 80036e0:	f04f 0100 	mov.w	r1, #0
 80036e4:	0159      	lsls	r1, r3, #5
 80036e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ea:	0150      	lsls	r0, r2, #5
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4641      	mov	r1, r8
 80036f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036f6:	4649      	mov	r1, r9
 80036f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800370c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003710:	ebb2 040a 	subs.w	r4, r2, sl
 8003714:	eb63 050b 	sbc.w	r5, r3, fp
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	00eb      	lsls	r3, r5, #3
 8003722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003726:	00e2      	lsls	r2, r4, #3
 8003728:	4614      	mov	r4, r2
 800372a:	461d      	mov	r5, r3
 800372c:	4643      	mov	r3, r8
 800372e:	18e3      	adds	r3, r4, r3
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	464b      	mov	r3, r9
 8003734:	eb45 0303 	adc.w	r3, r5, r3
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003746:	4629      	mov	r1, r5
 8003748:	028b      	lsls	r3, r1, #10
 800374a:	4621      	mov	r1, r4
 800374c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003750:	4621      	mov	r1, r4
 8003752:	028a      	lsls	r2, r1, #10
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800375a:	2200      	movs	r2, #0
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	61fa      	str	r2, [r7, #28]
 8003760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003764:	f7fd fa28 	bl	8000bb8 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4613      	mov	r3, r2
 800376e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003770:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800378a:	e002      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800378e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003794:	4618      	mov	r0, r3
 8003796:	3750      	adds	r7, #80	@ 0x50
 8003798:	46bd      	mov	sp, r7
 800379a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	007a1200 	.word	0x007a1200

080037ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b0:	4b03      	ldr	r3, [pc, #12]	@ (80037c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000004 	.word	0x20000004

080037c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037c8:	f7ff fff0 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4903      	ldr	r1, [pc, #12]	@ (80037e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	0800824c 	.word	0x0800824c

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037f0:	f7ff ffdc 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	@ (800380c <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0b5b      	lsrs	r3, r3, #13
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	@ (8003810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40023800 	.word	0x40023800
 8003810:	0800824c 	.word	0x0800824c

08003814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e07b      	b.n	800391e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003836:	d009      	beq.n	800384c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	61da      	str	r2, [r3, #28]
 800383e:	e005      	b.n	800384c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fe fc26 	bl	80020b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d0:	ea42 0103 	orr.w	r1, r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	f003 0104 	and.w	r1, r3, #4
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	f003 0210 	and.w	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800390c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e041      	b.n	80039bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fe fc1b 	bl	8002188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f000 fb1b 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d001      	beq.n	80039dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e03c      	b.n	8003a56 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a64 <HAL_TIM_Base_Start+0xa0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d018      	beq.n	8003a20 <HAL_TIM_Base_Start+0x5c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f6:	d013      	beq.n	8003a20 <HAL_TIM_Base_Start+0x5c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a68 <HAL_TIM_Base_Start+0xa4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_TIM_Base_Start+0x5c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a19      	ldr	r2, [pc, #100]	@ (8003a6c <HAL_TIM_Base_Start+0xa8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_TIM_Base_Start+0x5c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a17      	ldr	r2, [pc, #92]	@ (8003a70 <HAL_TIM_Base_Start+0xac>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_TIM_Base_Start+0x5c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <HAL_TIM_Base_Start+0xb0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d111      	bne.n	8003a44 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d010      	beq.n	8003a54 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a42:	e007      	b.n	8003a54 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40014000 	.word	0x40014000

08003a78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e041      	b.n	8003b0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f839 	bl	8003b16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f000 fa72 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_TIM_PWM_Start+0x24>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e022      	b.n	8003b96 <HAL_TIM_PWM_Start+0x6a>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d109      	bne.n	8003b6a <HAL_TIM_PWM_Start+0x3e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	bf14      	ite	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	2300      	moveq	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	e015      	b.n	8003b96 <HAL_TIM_PWM_Start+0x6a>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d109      	bne.n	8003b84 <HAL_TIM_PWM_Start+0x58>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e008      	b.n	8003b96 <HAL_TIM_PWM_Start+0x6a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e068      	b.n	8003c70 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <HAL_TIM_PWM_Start+0x82>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bac:	e013      	b.n	8003bd6 <HAL_TIM_PWM_Start+0xaa>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_PWM_Start+0x92>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bbc:	e00b      	b.n	8003bd6 <HAL_TIM_PWM_Start+0xaa>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Start+0xa2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bcc:	e003      	b.n	8003bd6 <HAL_TIM_PWM_Start+0xaa>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	6839      	ldr	r1, [r7, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fc90 	bl	8004504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a23      	ldr	r2, [pc, #140]	@ (8003c78 <HAL_TIM_PWM_Start+0x14c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d107      	bne.n	8003bfe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1d      	ldr	r2, [pc, #116]	@ (8003c78 <HAL_TIM_PWM_Start+0x14c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x10e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c10:	d013      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x10e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a19      	ldr	r2, [pc, #100]	@ (8003c7c <HAL_TIM_PWM_Start+0x150>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x10e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a17      	ldr	r2, [pc, #92]	@ (8003c80 <HAL_TIM_PWM_Start+0x154>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x10e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a16      	ldr	r2, [pc, #88]	@ (8003c84 <HAL_TIM_PWM_Start+0x158>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x10e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a14      	ldr	r2, [pc, #80]	@ (8003c88 <HAL_TIM_PWM_Start+0x15c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d111      	bne.n	8003c5e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b06      	cmp	r3, #6
 8003c4a:	d010      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5c:	e007      	b.n	8003c6e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0201 	orr.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40000800 	.word	0x40000800
 8003c84:	40000c00 	.word	0x40000c00
 8003c88:	40014000 	.word	0x40014000

08003c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0ae      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	f200 809f 	bhi.w	8003df8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cba:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003df9 	.word	0x08003df9
 8003cc8:	08003df9 	.word	0x08003df9
 8003ccc:	08003df9 	.word	0x08003df9
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003df9 	.word	0x08003df9
 8003cd8:	08003df9 	.word	0x08003df9
 8003cdc:	08003df9 	.word	0x08003df9
 8003ce0:	08003d77 	.word	0x08003d77
 8003ce4:	08003df9 	.word	0x08003df9
 8003ce8:	08003df9 	.word	0x08003df9
 8003cec:	08003df9 	.word	0x08003df9
 8003cf0:	08003db7 	.word	0x08003db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f9dc 	bl	80040b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
      break;
 8003d32:	e064      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fa22 	bl	8004184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
      break;
 8003d74:	e043      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fa6d 	bl	800425c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0204 	bic.w	r2, r2, #4
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
      break;
 8003db4:	e023      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fab7 	bl	8004330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69d9      	ldr	r1, [r3, #28]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIM_ConfigClockSource+0x1c>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e0b4      	b.n	8003f96 <HAL_TIM_ConfigClockSource+0x186>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e64:	d03e      	beq.n	8003ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e6a:	f200 8087 	bhi.w	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e72:	f000 8086 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x172>
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7a:	d87f      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b70      	cmp	r3, #112	@ 0x70
 8003e7e:	d01a      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0xa6>
 8003e80:	2b70      	cmp	r3, #112	@ 0x70
 8003e82:	d87b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b60      	cmp	r3, #96	@ 0x60
 8003e86:	d050      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x11a>
 8003e88:	2b60      	cmp	r3, #96	@ 0x60
 8003e8a:	d877      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b50      	cmp	r3, #80	@ 0x50
 8003e8e:	d03c      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0xfa>
 8003e90:	2b50      	cmp	r3, #80	@ 0x50
 8003e92:	d873      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b40      	cmp	r3, #64	@ 0x40
 8003e96:	d058      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x13a>
 8003e98:	2b40      	cmp	r3, #64	@ 0x40
 8003e9a:	d86f      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b30      	cmp	r3, #48	@ 0x30
 8003e9e:	d064      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea0:	2b30      	cmp	r3, #48	@ 0x30
 8003ea2:	d86b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d060      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d867      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05c      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d05a      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	e062      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ec6:	f000 fafd 	bl	80044c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	609a      	str	r2, [r3, #8]
      break;
 8003ee2:	e04f      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ef4:	f000 fae6 	bl	80044c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f06:	609a      	str	r2, [r3, #8]
      break;
 8003f08:	e03c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 fa5a 	bl	80043d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2150      	movs	r1, #80	@ 0x50
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fab3 	bl	800448e <TIM_ITRx_SetConfig>
      break;
 8003f28:	e02c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 fa79 	bl	800442e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2160      	movs	r1, #96	@ 0x60
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 faa3 	bl	800448e <TIM_ITRx_SetConfig>
      break;
 8003f48:	e01c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f56:	461a      	mov	r2, r3
 8003f58:	f000 fa3a 	bl	80043d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2140      	movs	r1, #64	@ 0x40
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fa93 	bl	800448e <TIM_ITRx_SetConfig>
      break;
 8003f68:	e00c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f000 fa8a 	bl	800448e <TIM_ITRx_SetConfig>
      break;
 8003f7a:	e003      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f80:	e000      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800409c <TIM_Base_SetConfig+0xfc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00f      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fbe:	d00b      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a37      	ldr	r2, [pc, #220]	@ (80040a0 <TIM_Base_SetConfig+0x100>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a36      	ldr	r2, [pc, #216]	@ (80040a4 <TIM_Base_SetConfig+0x104>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a35      	ldr	r2, [pc, #212]	@ (80040a8 <TIM_Base_SetConfig+0x108>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d108      	bne.n	8003fea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a2b      	ldr	r2, [pc, #172]	@ (800409c <TIM_Base_SetConfig+0xfc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01b      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff8:	d017      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a28      	ldr	r2, [pc, #160]	@ (80040a0 <TIM_Base_SetConfig+0x100>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a27      	ldr	r2, [pc, #156]	@ (80040a4 <TIM_Base_SetConfig+0x104>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00f      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a26      	ldr	r2, [pc, #152]	@ (80040a8 <TIM_Base_SetConfig+0x108>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00b      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a25      	ldr	r2, [pc, #148]	@ (80040ac <TIM_Base_SetConfig+0x10c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d007      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a24      	ldr	r2, [pc, #144]	@ (80040b0 <TIM_Base_SetConfig+0x110>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a23      	ldr	r2, [pc, #140]	@ (80040b4 <TIM_Base_SetConfig+0x114>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d108      	bne.n	800403c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a0e      	ldr	r2, [pc, #56]	@ (800409c <TIM_Base_SetConfig+0xfc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d103      	bne.n	8004070 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b01      	cmp	r3, #1
 8004080:	d105      	bne.n	800408e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f023 0201 	bic.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	611a      	str	r2, [r3, #16]
  }
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40010000 	.word	0x40010000
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40000c00 	.word	0x40000c00
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400
 80040b4:	40014800 	.word	0x40014800

080040b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f023 0201 	bic.w	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 0302 	bic.w	r3, r3, #2
 8004100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <TIM_OC1_SetConfig+0xc8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10c      	bne.n	800412e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0308 	bic.w	r3, r3, #8
 800411a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f023 0304 	bic.w	r3, r3, #4
 800412c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a13      	ldr	r2, [pc, #76]	@ (8004180 <TIM_OC1_SetConfig+0xc8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d111      	bne.n	800415a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800413c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	621a      	str	r2, [r3, #32]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40010000 	.word	0x40010000

08004184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f023 0210 	bic.w	r2, r3, #16
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0320 	bic.w	r3, r3, #32
 80041ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a1e      	ldr	r2, [pc, #120]	@ (8004258 <TIM_OC2_SetConfig+0xd4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10d      	bne.n	8004200 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a15      	ldr	r2, [pc, #84]	@ (8004258 <TIM_OC2_SetConfig+0xd4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d113      	bne.n	8004230 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800420e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000

0800425c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <TIM_OC3_SetConfig+0xd0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10d      	bne.n	80042d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a14      	ldr	r2, [pc, #80]	@ (800432c <TIM_OC3_SetConfig+0xd0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d113      	bne.n	8004306 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40010000 	.word	0x40010000

08004330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800437a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	031b      	lsls	r3, r3, #12
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a10      	ldr	r2, [pc, #64]	@ (80043cc <TIM_OC4_SetConfig+0x9c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d109      	bne.n	80043a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	019b      	lsls	r3, r3, #6
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40010000 	.word	0x40010000

080043d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f023 0201 	bic.w	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 030a 	bic.w	r3, r3, #10
 800440c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800442e:	b480      	push	{r7}
 8004430:	b087      	sub	sp, #28
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f023 0210 	bic.w	r2, r3, #16
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	031b      	lsls	r3, r3, #12
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800446a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	bf00      	nop
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f043 0307 	orr.w	r3, r3, #7
 80044b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	609a      	str	r2, [r3, #8]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	021a      	lsls	r2, r3, #8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	2201      	movs	r2, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1a      	ldr	r2, [r3, #32]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	43db      	mvns	r3, r3
 8004526:	401a      	ands	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a1a      	ldr	r2, [r3, #32]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	431a      	orrs	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004564:	2302      	movs	r3, #2
 8004566:	e050      	b.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d018      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b4:	d013      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a18      	ldr	r2, [pc, #96]	@ (800461c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a16      	ldr	r2, [pc, #88]	@ (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a15      	ldr	r2, [pc, #84]	@ (8004624 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a13      	ldr	r2, [pc, #76]	@ (8004628 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d10c      	bne.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40010000 	.word	0x40010000
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40000c00 	.word	0x40000c00
 8004628:	40014000 	.word	0x40014000

0800462c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004644:	2302      	movs	r3, #2
 8004646:	e03d      	b.n	80046c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e042      	b.n	8004768 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fd fe12 	bl	8002320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2224      	movs	r2, #36	@ 0x24
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fdbd 	bl	8005294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	@ 0x28
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b20      	cmp	r3, #32
 800478e:	d175      	bne.n	800487c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_UART_Transmit+0x2c>
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e06e      	b.n	800487e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2221      	movs	r2, #33	@ 0x21
 80047aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ae:	f7fe f80f 	bl	80027d0 <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	88fa      	ldrh	r2, [r7, #6]
 80047b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c8:	d108      	bne.n	80047dc <HAL_UART_Transmit+0x6c>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e003      	b.n	80047e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047e4:	e02e      	b.n	8004844 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2200      	movs	r2, #0
 80047ee:	2180      	movs	r1, #128	@ 0x80
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fb1f 	bl	8004e34 <UART_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e03a      	b.n	800487e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800481c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	3302      	adds	r3, #2
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	e007      	b.n	8004836 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	3301      	adds	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1cb      	bne.n	80047e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2200      	movs	r2, #0
 8004856:	2140      	movs	r1, #64	@ 0x40
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 faeb 	bl	8004e34 <UART_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e006      	b.n	800487e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	e000      	b.n	800487e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800487c:	2302      	movs	r3, #2
  }
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	4613      	mov	r3, r2
 8004892:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b20      	cmp	r3, #32
 800489e:	d112      	bne.n	80048c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_UART_Receive_IT+0x26>
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e00b      	b.n	80048c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	461a      	mov	r2, r3
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fb12 	bl	8004ee6 <UART_Start_Receive_IT>
 80048c2:	4603      	mov	r3, r0
 80048c4:	e000      	b.n	80048c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
  }
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b0ba      	sub	sp, #232	@ 0xe8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800490e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <HAL_UART_IRQHandler+0x66>
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fbf2 	bl	8005118 <UART_Receive_IT>
      return;
 8004934:	e25b      	b.n	8004dee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80de 	beq.w	8004afc <HAL_UART_IRQHandler+0x22c>
 8004940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004950:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80d1 	beq.w	8004afc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800495a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00b      	beq.n	800497e <HAL_UART_IRQHandler+0xae>
 8004966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800496a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800497e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_UART_IRQHandler+0xd2>
 800498a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499a:	f043 0202 	orr.w	r2, r3, #2
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_UART_IRQHandler+0xf6>
 80049ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049be:	f043 0204 	orr.w	r2, r3, #4
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d011      	beq.n	80049f6 <HAL_UART_IRQHandler+0x126>
 80049d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d105      	bne.n	80049ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ee:	f043 0208 	orr.w	r2, r3, #8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 81f2 	beq.w	8004de4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_UART_IRQHandler+0x14e>
 8004a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fb7d 	bl	8005118 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a28:	2b40      	cmp	r3, #64	@ 0x40
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d103      	bne.n	8004a4a <HAL_UART_IRQHandler+0x17a>
 8004a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d04f      	beq.n	8004aea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fa85 	bl	8004f5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5a:	2b40      	cmp	r3, #64	@ 0x40
 8004a5c:	d141      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3314      	adds	r3, #20
 8004a64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3314      	adds	r3, #20
 8004a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1d9      	bne.n	8004a5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d013      	beq.n	8004ada <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8004cb0 <HAL_UART_IRQHandler+0x3e0>)
 8004ab8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe f837 	bl	8002b32 <HAL_DMA_Abort_IT>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d016      	beq.n	8004af8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	e00e      	b.n	8004af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f994 	bl	8004e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e00a      	b.n	8004af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f990 	bl	8004e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	e006      	b.n	8004af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f98c 	bl	8004e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004af6:	e175      	b.n	8004de4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af8:	bf00      	nop
    return;
 8004afa:	e173      	b.n	8004de4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	f040 814f 	bne.w	8004da4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8148 	beq.w	8004da4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8141 	beq.w	8004da4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b22:	2300      	movs	r3, #0
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b42:	2b40      	cmp	r3, #64	@ 0x40
 8004b44:	f040 80b6 	bne.w	8004cb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 8145 	beq.w	8004de8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b66:	429a      	cmp	r2, r3
 8004b68:	f080 813e 	bcs.w	8004de8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b7e:	f000 8088 	beq.w	8004c92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	330c      	adds	r3, #12
 8004b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004bae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1d9      	bne.n	8004b82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3314      	adds	r3, #20
 8004bd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bf2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e1      	bne.n	8004bce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3314      	adds	r3, #20
 8004c10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3314      	adds	r3, #20
 8004c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e3      	bne.n	8004c0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c62:	f023 0310 	bic.w	r3, r3, #16
 8004c66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	330c      	adds	r3, #12
 8004c70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e3      	bne.n	8004c50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fd fee0 	bl	8002a52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f8b7 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cae:	e09b      	b.n	8004de8 <HAL_UART_IRQHandler+0x518>
 8004cb0:	08005021 	.word	0x08005021
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 808e 	beq.w	8004dec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8089 	beq.w	8004dec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004cfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e3      	bne.n	8004cda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3314      	adds	r3, #20
 8004d18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	623b      	str	r3, [r7, #32]
   return(result);
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3314      	adds	r3, #20
 8004d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d36:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e3      	bne.n	8004d12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0310 	bic.w	r3, r3, #16
 8004d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	330c      	adds	r3, #12
 8004d78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d7c:	61fa      	str	r2, [r7, #28]
 8004d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	69b9      	ldr	r1, [r7, #24]
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	617b      	str	r3, [r7, #20]
   return(result);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e3      	bne.n	8004d58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f83d 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004da2:	e023      	b.n	8004dec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <HAL_UART_IRQHandler+0x4f4>
 8004db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f943 	bl	8005048 <UART_Transmit_IT>
    return;
 8004dc2:	e014      	b.n	8004dee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00e      	beq.n	8004dee <HAL_UART_IRQHandler+0x51e>
 8004dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f983 	bl	80050e8 <UART_EndTransmit_IT>
    return;
 8004de2:	e004      	b.n	8004dee <HAL_UART_IRQHandler+0x51e>
    return;
 8004de4:	bf00      	nop
 8004de6:	e002      	b.n	8004dee <HAL_UART_IRQHandler+0x51e>
      return;
 8004de8:	bf00      	nop
 8004dea:	e000      	b.n	8004dee <HAL_UART_IRQHandler+0x51e>
      return;
 8004dec:	bf00      	nop
  }
}
 8004dee:	37e8      	adds	r7, #232	@ 0xe8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e44:	e03b      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d037      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4e:	f7fd fcbf 	bl	80027d0 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	6a3a      	ldr	r2, [r7, #32]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d302      	bcc.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e03a      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d023      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b80      	cmp	r3, #128	@ 0x80
 8004e7a:	d020      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b40      	cmp	r3, #64	@ 0x40
 8004e80:	d01d      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d116      	bne.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f857 	bl	8004f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2208      	movs	r2, #8
 8004eb0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e00f      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	bf0c      	ite	eq
 8004ece:	2301      	moveq	r3, #1
 8004ed0:	2300      	movne	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d0b4      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	88fa      	ldrh	r2, [r7, #6]
 8004efe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	88fa      	ldrh	r2, [r7, #6]
 8004f04:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2222      	movs	r2, #34	@ 0x22
 8004f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f2a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0220 	orr.w	r2, r2, #32
 8004f4a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b095      	sub	sp, #84	@ 0x54
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f82:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e5      	bne.n	8004f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3314      	adds	r3, #20
 8004f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3314      	adds	r3, #20
 8004fb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e5      	bne.n	8004f96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d119      	bne.n	8005006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f023 0310 	bic.w	r3, r3, #16
 8004fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ff2:	61ba      	str	r2, [r7, #24]
 8004ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	6979      	ldr	r1, [r7, #20]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e5      	bne.n	8004fd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005014:	bf00      	nop
 8005016:	3754      	adds	r7, #84	@ 0x54
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f7ff fee4 	bl	8004e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b21      	cmp	r3, #33	@ 0x21
 800505a:	d13e      	bne.n	80050da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005064:	d114      	bne.n	8005090 <UART_Transmit_IT+0x48>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d110      	bne.n	8005090 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005082:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	1c9a      	adds	r2, r3, #2
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]
 800508e:	e008      	b.n	80050a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	1c59      	adds	r1, r3, #1
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6211      	str	r1, [r2, #32]
 800509a:	781a      	ldrb	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4619      	mov	r1, r3
 80050b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10f      	bne.n	80050d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff fe73 	bl	8004df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08c      	sub	sp, #48	@ 0x30
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b22      	cmp	r3, #34	@ 0x22
 800512a:	f040 80ae 	bne.w	800528a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005136:	d117      	bne.n	8005168 <UART_Receive_IT+0x50>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d113      	bne.n	8005168 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005140:	2300      	movs	r3, #0
 8005142:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005156:	b29a      	uxth	r2, r3
 8005158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	1c9a      	adds	r2, r3, #2
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	629a      	str	r2, [r3, #40]	@ 0x28
 8005166:	e026      	b.n	80051b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800517a:	d007      	beq.n	800518c <UART_Receive_IT+0x74>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <UART_Receive_IT+0x82>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	b2da      	uxtb	r2, r3
 8005194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e008      	b.n	80051ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29b      	uxth	r3, r3
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4619      	mov	r1, r3
 80051c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d15d      	bne.n	8005286 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0220 	bic.w	r2, r2, #32
 80051d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520c:	2b01      	cmp	r3, #1
 800520e:	d135      	bne.n	800527c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	330c      	adds	r3, #12
 800521c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	613b      	str	r3, [r7, #16]
   return(result);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f023 0310 	bic.w	r3, r3, #16
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005236:	623a      	str	r2, [r7, #32]
 8005238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	69f9      	ldr	r1, [r7, #28]
 800523c:	6a3a      	ldr	r2, [r7, #32]
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	61bb      	str	r3, [r7, #24]
   return(result);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e5      	bne.n	8005216 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b10      	cmp	r3, #16
 8005256:	d10a      	bne.n	800526e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff fdd1 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
 800527a:	e002      	b.n	8005282 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fb fe13 	bl	8000ea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e002      	b.n	800528c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e000      	b.n	800528c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800528a:	2302      	movs	r3, #2
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3730      	adds	r7, #48	@ 0x30
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005298:	b0c0      	sub	sp, #256	@ 0x100
 800529a:	af00      	add	r7, sp, #0
 800529c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b0:	68d9      	ldr	r1, [r3, #12]
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	ea40 0301 	orr.w	r3, r0, r1
 80052bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052ec:	f021 010c 	bic.w	r1, r1, #12
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052fa:	430b      	orrs	r3, r1
 80052fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530e:	6999      	ldr	r1, [r3, #24]
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	ea40 0301 	orr.w	r3, r0, r1
 800531a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b8f      	ldr	r3, [pc, #572]	@ (8005560 <UART_SetConfig+0x2cc>)
 8005324:	429a      	cmp	r2, r3
 8005326:	d005      	beq.n	8005334 <UART_SetConfig+0xa0>
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b8d      	ldr	r3, [pc, #564]	@ (8005564 <UART_SetConfig+0x2d0>)
 8005330:	429a      	cmp	r2, r3
 8005332:	d104      	bne.n	800533e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7fe fa5a 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8005338:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800533c:	e003      	b.n	8005346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800533e:	f7fe fa41 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8005342:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005350:	f040 810c 	bne.w	800556c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005358:	2200      	movs	r2, #0
 800535a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800535e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005366:	4622      	mov	r2, r4
 8005368:	462b      	mov	r3, r5
 800536a:	1891      	adds	r1, r2, r2
 800536c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800536e:	415b      	adcs	r3, r3
 8005370:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005376:	4621      	mov	r1, r4
 8005378:	eb12 0801 	adds.w	r8, r2, r1
 800537c:	4629      	mov	r1, r5
 800537e:	eb43 0901 	adc.w	r9, r3, r1
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800538e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005396:	4690      	mov	r8, r2
 8005398:	4699      	mov	r9, r3
 800539a:	4623      	mov	r3, r4
 800539c:	eb18 0303 	adds.w	r3, r8, r3
 80053a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053a4:	462b      	mov	r3, r5
 80053a6:	eb49 0303 	adc.w	r3, r9, r3
 80053aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053c2:	460b      	mov	r3, r1
 80053c4:	18db      	adds	r3, r3, r3
 80053c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053c8:	4613      	mov	r3, r2
 80053ca:	eb42 0303 	adc.w	r3, r2, r3
 80053ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80053d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053d8:	f7fb fbee 	bl	8000bb8 <__aeabi_uldivmod>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4b61      	ldr	r3, [pc, #388]	@ (8005568 <UART_SetConfig+0x2d4>)
 80053e2:	fba3 2302 	umull	r2, r3, r3, r2
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	011c      	lsls	r4, r3, #4
 80053ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053fc:	4642      	mov	r2, r8
 80053fe:	464b      	mov	r3, r9
 8005400:	1891      	adds	r1, r2, r2
 8005402:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005404:	415b      	adcs	r3, r3
 8005406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800540c:	4641      	mov	r1, r8
 800540e:	eb12 0a01 	adds.w	sl, r2, r1
 8005412:	4649      	mov	r1, r9
 8005414:	eb43 0b01 	adc.w	fp, r3, r1
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800542c:	4692      	mov	sl, r2
 800542e:	469b      	mov	fp, r3
 8005430:	4643      	mov	r3, r8
 8005432:	eb1a 0303 	adds.w	r3, sl, r3
 8005436:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800543a:	464b      	mov	r3, r9
 800543c:	eb4b 0303 	adc.w	r3, fp, r3
 8005440:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005450:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005458:	460b      	mov	r3, r1
 800545a:	18db      	adds	r3, r3, r3
 800545c:	643b      	str	r3, [r7, #64]	@ 0x40
 800545e:	4613      	mov	r3, r2
 8005460:	eb42 0303 	adc.w	r3, r2, r3
 8005464:	647b      	str	r3, [r7, #68]	@ 0x44
 8005466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800546a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800546e:	f7fb fba3 	bl	8000bb8 <__aeabi_uldivmod>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4611      	mov	r1, r2
 8005478:	4b3b      	ldr	r3, [pc, #236]	@ (8005568 <UART_SetConfig+0x2d4>)
 800547a:	fba3 2301 	umull	r2, r3, r3, r1
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	2264      	movs	r2, #100	@ 0x64
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	1acb      	subs	r3, r1, r3
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800548e:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <UART_SetConfig+0x2d4>)
 8005490:	fba3 2302 	umull	r2, r3, r3, r2
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800549c:	441c      	add	r4, r3
 800549e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	1891      	adds	r1, r2, r2
 80054b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054b8:	415b      	adcs	r3, r3
 80054ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054c0:	4641      	mov	r1, r8
 80054c2:	1851      	adds	r1, r2, r1
 80054c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80054c6:	4649      	mov	r1, r9
 80054c8:	414b      	adcs	r3, r1
 80054ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054d8:	4659      	mov	r1, fp
 80054da:	00cb      	lsls	r3, r1, #3
 80054dc:	4651      	mov	r1, sl
 80054de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054e2:	4651      	mov	r1, sl
 80054e4:	00ca      	lsls	r2, r1, #3
 80054e6:	4610      	mov	r0, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	4642      	mov	r2, r8
 80054ee:	189b      	adds	r3, r3, r2
 80054f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054f4:	464b      	mov	r3, r9
 80054f6:	460a      	mov	r2, r1
 80054f8:	eb42 0303 	adc.w	r3, r2, r3
 80054fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800550c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005514:	460b      	mov	r3, r1
 8005516:	18db      	adds	r3, r3, r3
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800551a:	4613      	mov	r3, r2
 800551c:	eb42 0303 	adc.w	r3, r2, r3
 8005520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800552a:	f7fb fb45 	bl	8000bb8 <__aeabi_uldivmod>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <UART_SetConfig+0x2d4>)
 8005534:	fba3 1302 	umull	r1, r3, r3, r2
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	2164      	movs	r1, #100	@ 0x64
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	3332      	adds	r3, #50	@ 0x32
 8005546:	4a08      	ldr	r2, [pc, #32]	@ (8005568 <UART_SetConfig+0x2d4>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	f003 0207 	and.w	r2, r3, #7
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4422      	add	r2, r4
 800555a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800555c:	e106      	b.n	800576c <UART_SetConfig+0x4d8>
 800555e:	bf00      	nop
 8005560:	40011000 	.word	0x40011000
 8005564:	40011400 	.word	0x40011400
 8005568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800556c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005570:	2200      	movs	r2, #0
 8005572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005576:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800557a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800557e:	4642      	mov	r2, r8
 8005580:	464b      	mov	r3, r9
 8005582:	1891      	adds	r1, r2, r2
 8005584:	6239      	str	r1, [r7, #32]
 8005586:	415b      	adcs	r3, r3
 8005588:	627b      	str	r3, [r7, #36]	@ 0x24
 800558a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800558e:	4641      	mov	r1, r8
 8005590:	1854      	adds	r4, r2, r1
 8005592:	4649      	mov	r1, r9
 8005594:	eb43 0501 	adc.w	r5, r3, r1
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	00eb      	lsls	r3, r5, #3
 80055a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055a6:	00e2      	lsls	r2, r4, #3
 80055a8:	4614      	mov	r4, r2
 80055aa:	461d      	mov	r5, r3
 80055ac:	4643      	mov	r3, r8
 80055ae:	18e3      	adds	r3, r4, r3
 80055b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055b4:	464b      	mov	r3, r9
 80055b6:	eb45 0303 	adc.w	r3, r5, r3
 80055ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055da:	4629      	mov	r1, r5
 80055dc:	008b      	lsls	r3, r1, #2
 80055de:	4621      	mov	r1, r4
 80055e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e4:	4621      	mov	r1, r4
 80055e6:	008a      	lsls	r2, r1, #2
 80055e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055ec:	f7fb fae4 	bl	8000bb8 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4b60      	ldr	r3, [pc, #384]	@ (8005778 <UART_SetConfig+0x4e4>)
 80055f6:	fba3 2302 	umull	r2, r3, r3, r2
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	011c      	lsls	r4, r3, #4
 80055fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005602:	2200      	movs	r2, #0
 8005604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005608:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800560c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005610:	4642      	mov	r2, r8
 8005612:	464b      	mov	r3, r9
 8005614:	1891      	adds	r1, r2, r2
 8005616:	61b9      	str	r1, [r7, #24]
 8005618:	415b      	adcs	r3, r3
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005620:	4641      	mov	r1, r8
 8005622:	1851      	adds	r1, r2, r1
 8005624:	6139      	str	r1, [r7, #16]
 8005626:	4649      	mov	r1, r9
 8005628:	414b      	adcs	r3, r1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005638:	4659      	mov	r1, fp
 800563a:	00cb      	lsls	r3, r1, #3
 800563c:	4651      	mov	r1, sl
 800563e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005642:	4651      	mov	r1, sl
 8005644:	00ca      	lsls	r2, r1, #3
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	4603      	mov	r3, r0
 800564c:	4642      	mov	r2, r8
 800564e:	189b      	adds	r3, r3, r2
 8005650:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005654:	464b      	mov	r3, r9
 8005656:	460a      	mov	r2, r1
 8005658:	eb42 0303 	adc.w	r3, r2, r3
 800565c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	67bb      	str	r3, [r7, #120]	@ 0x78
 800566a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005678:	4649      	mov	r1, r9
 800567a:	008b      	lsls	r3, r1, #2
 800567c:	4641      	mov	r1, r8
 800567e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005682:	4641      	mov	r1, r8
 8005684:	008a      	lsls	r2, r1, #2
 8005686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800568a:	f7fb fa95 	bl	8000bb8 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4611      	mov	r1, r2
 8005694:	4b38      	ldr	r3, [pc, #224]	@ (8005778 <UART_SetConfig+0x4e4>)
 8005696:	fba3 2301 	umull	r2, r3, r3, r1
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	2264      	movs	r2, #100	@ 0x64
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	1acb      	subs	r3, r1, r3
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	3332      	adds	r3, #50	@ 0x32
 80056a8:	4a33      	ldr	r2, [pc, #204]	@ (8005778 <UART_SetConfig+0x4e4>)
 80056aa:	fba2 2303 	umull	r2, r3, r2, r3
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056b4:	441c      	add	r4, r3
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ba:	2200      	movs	r2, #0
 80056bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80056be:	677a      	str	r2, [r7, #116]	@ 0x74
 80056c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056c4:	4642      	mov	r2, r8
 80056c6:	464b      	mov	r3, r9
 80056c8:	1891      	adds	r1, r2, r2
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	415b      	adcs	r3, r3
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056d4:	4641      	mov	r1, r8
 80056d6:	1851      	adds	r1, r2, r1
 80056d8:	6039      	str	r1, [r7, #0]
 80056da:	4649      	mov	r1, r9
 80056dc:	414b      	adcs	r3, r1
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056ec:	4659      	mov	r1, fp
 80056ee:	00cb      	lsls	r3, r1, #3
 80056f0:	4651      	mov	r1, sl
 80056f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f6:	4651      	mov	r1, sl
 80056f8:	00ca      	lsls	r2, r1, #3
 80056fa:	4610      	mov	r0, r2
 80056fc:	4619      	mov	r1, r3
 80056fe:	4603      	mov	r3, r0
 8005700:	4642      	mov	r2, r8
 8005702:	189b      	adds	r3, r3, r2
 8005704:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005706:	464b      	mov	r3, r9
 8005708:	460a      	mov	r2, r1
 800570a:	eb42 0303 	adc.w	r3, r2, r3
 800570e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	663b      	str	r3, [r7, #96]	@ 0x60
 800571a:	667a      	str	r2, [r7, #100]	@ 0x64
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005728:	4649      	mov	r1, r9
 800572a:	008b      	lsls	r3, r1, #2
 800572c:	4641      	mov	r1, r8
 800572e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005732:	4641      	mov	r1, r8
 8005734:	008a      	lsls	r2, r1, #2
 8005736:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800573a:	f7fb fa3d 	bl	8000bb8 <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4b0d      	ldr	r3, [pc, #52]	@ (8005778 <UART_SetConfig+0x4e4>)
 8005744:	fba3 1302 	umull	r1, r3, r3, r2
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	2164      	movs	r1, #100	@ 0x64
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	3332      	adds	r3, #50	@ 0x32
 8005756:	4a08      	ldr	r2, [pc, #32]	@ (8005778 <UART_SetConfig+0x4e4>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f003 020f 	and.w	r2, r3, #15
 8005762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4422      	add	r2, r4
 800576a:	609a      	str	r2, [r3, #8]
}
 800576c:	bf00      	nop
 800576e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005772:	46bd      	mov	sp, r7
 8005774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005778:	51eb851f 	.word	0x51eb851f

0800577c <__cvt>:
 800577c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	ec57 6b10 	vmov	r6, r7, d0
 8005784:	2f00      	cmp	r7, #0
 8005786:	460c      	mov	r4, r1
 8005788:	4619      	mov	r1, r3
 800578a:	463b      	mov	r3, r7
 800578c:	bfbb      	ittet	lt
 800578e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005792:	461f      	movlt	r7, r3
 8005794:	2300      	movge	r3, #0
 8005796:	232d      	movlt	r3, #45	@ 0x2d
 8005798:	700b      	strb	r3, [r1, #0]
 800579a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800579c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80057a0:	4691      	mov	r9, r2
 80057a2:	f023 0820 	bic.w	r8, r3, #32
 80057a6:	bfbc      	itt	lt
 80057a8:	4632      	movlt	r2, r6
 80057aa:	4616      	movlt	r6, r2
 80057ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057b0:	d005      	beq.n	80057be <__cvt+0x42>
 80057b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80057b6:	d100      	bne.n	80057ba <__cvt+0x3e>
 80057b8:	3401      	adds	r4, #1
 80057ba:	2102      	movs	r1, #2
 80057bc:	e000      	b.n	80057c0 <__cvt+0x44>
 80057be:	2103      	movs	r1, #3
 80057c0:	ab03      	add	r3, sp, #12
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	ab02      	add	r3, sp, #8
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	ec47 6b10 	vmov	d0, r6, r7
 80057cc:	4653      	mov	r3, sl
 80057ce:	4622      	mov	r2, r4
 80057d0:	f000 ff52 	bl	8006678 <_dtoa_r>
 80057d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80057d8:	4605      	mov	r5, r0
 80057da:	d119      	bne.n	8005810 <__cvt+0x94>
 80057dc:	f019 0f01 	tst.w	r9, #1
 80057e0:	d00e      	beq.n	8005800 <__cvt+0x84>
 80057e2:	eb00 0904 	add.w	r9, r0, r4
 80057e6:	2200      	movs	r2, #0
 80057e8:	2300      	movs	r3, #0
 80057ea:	4630      	mov	r0, r6
 80057ec:	4639      	mov	r1, r7
 80057ee:	f7fb f973 	bl	8000ad8 <__aeabi_dcmpeq>
 80057f2:	b108      	cbz	r0, 80057f8 <__cvt+0x7c>
 80057f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80057f8:	2230      	movs	r2, #48	@ 0x30
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	454b      	cmp	r3, r9
 80057fe:	d31e      	bcc.n	800583e <__cvt+0xc2>
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005804:	1b5b      	subs	r3, r3, r5
 8005806:	4628      	mov	r0, r5
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	b004      	add	sp, #16
 800580c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005810:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005814:	eb00 0904 	add.w	r9, r0, r4
 8005818:	d1e5      	bne.n	80057e6 <__cvt+0x6a>
 800581a:	7803      	ldrb	r3, [r0, #0]
 800581c:	2b30      	cmp	r3, #48	@ 0x30
 800581e:	d10a      	bne.n	8005836 <__cvt+0xba>
 8005820:	2200      	movs	r2, #0
 8005822:	2300      	movs	r3, #0
 8005824:	4630      	mov	r0, r6
 8005826:	4639      	mov	r1, r7
 8005828:	f7fb f956 	bl	8000ad8 <__aeabi_dcmpeq>
 800582c:	b918      	cbnz	r0, 8005836 <__cvt+0xba>
 800582e:	f1c4 0401 	rsb	r4, r4, #1
 8005832:	f8ca 4000 	str.w	r4, [sl]
 8005836:	f8da 3000 	ldr.w	r3, [sl]
 800583a:	4499      	add	r9, r3
 800583c:	e7d3      	b.n	80057e6 <__cvt+0x6a>
 800583e:	1c59      	adds	r1, r3, #1
 8005840:	9103      	str	r1, [sp, #12]
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	e7d9      	b.n	80057fa <__cvt+0x7e>

08005846 <__exponent>:
 8005846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005848:	2900      	cmp	r1, #0
 800584a:	bfba      	itte	lt
 800584c:	4249      	neglt	r1, r1
 800584e:	232d      	movlt	r3, #45	@ 0x2d
 8005850:	232b      	movge	r3, #43	@ 0x2b
 8005852:	2909      	cmp	r1, #9
 8005854:	7002      	strb	r2, [r0, #0]
 8005856:	7043      	strb	r3, [r0, #1]
 8005858:	dd29      	ble.n	80058ae <__exponent+0x68>
 800585a:	f10d 0307 	add.w	r3, sp, #7
 800585e:	461d      	mov	r5, r3
 8005860:	270a      	movs	r7, #10
 8005862:	461a      	mov	r2, r3
 8005864:	fbb1 f6f7 	udiv	r6, r1, r7
 8005868:	fb07 1416 	mls	r4, r7, r6, r1
 800586c:	3430      	adds	r4, #48	@ 0x30
 800586e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005872:	460c      	mov	r4, r1
 8005874:	2c63      	cmp	r4, #99	@ 0x63
 8005876:	f103 33ff 	add.w	r3, r3, #4294967295
 800587a:	4631      	mov	r1, r6
 800587c:	dcf1      	bgt.n	8005862 <__exponent+0x1c>
 800587e:	3130      	adds	r1, #48	@ 0x30
 8005880:	1e94      	subs	r4, r2, #2
 8005882:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005886:	1c41      	adds	r1, r0, #1
 8005888:	4623      	mov	r3, r4
 800588a:	42ab      	cmp	r3, r5
 800588c:	d30a      	bcc.n	80058a4 <__exponent+0x5e>
 800588e:	f10d 0309 	add.w	r3, sp, #9
 8005892:	1a9b      	subs	r3, r3, r2
 8005894:	42ac      	cmp	r4, r5
 8005896:	bf88      	it	hi
 8005898:	2300      	movhi	r3, #0
 800589a:	3302      	adds	r3, #2
 800589c:	4403      	add	r3, r0
 800589e:	1a18      	subs	r0, r3, r0
 80058a0:	b003      	add	sp, #12
 80058a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058ac:	e7ed      	b.n	800588a <__exponent+0x44>
 80058ae:	2330      	movs	r3, #48	@ 0x30
 80058b0:	3130      	adds	r1, #48	@ 0x30
 80058b2:	7083      	strb	r3, [r0, #2]
 80058b4:	70c1      	strb	r1, [r0, #3]
 80058b6:	1d03      	adds	r3, r0, #4
 80058b8:	e7f1      	b.n	800589e <__exponent+0x58>
	...

080058bc <_printf_float>:
 80058bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c0:	b08d      	sub	sp, #52	@ 0x34
 80058c2:	460c      	mov	r4, r1
 80058c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80058c8:	4616      	mov	r6, r2
 80058ca:	461f      	mov	r7, r3
 80058cc:	4605      	mov	r5, r0
 80058ce:	f000 fdd1 	bl	8006474 <_localeconv_r>
 80058d2:	6803      	ldr	r3, [r0, #0]
 80058d4:	9304      	str	r3, [sp, #16]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fa fcd2 	bl	8000280 <strlen>
 80058dc:	2300      	movs	r3, #0
 80058de:	930a      	str	r3, [sp, #40]	@ 0x28
 80058e0:	f8d8 3000 	ldr.w	r3, [r8]
 80058e4:	9005      	str	r0, [sp, #20]
 80058e6:	3307      	adds	r3, #7
 80058e8:	f023 0307 	bic.w	r3, r3, #7
 80058ec:	f103 0208 	add.w	r2, r3, #8
 80058f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058f4:	f8d4 b000 	ldr.w	fp, [r4]
 80058f8:	f8c8 2000 	str.w	r2, [r8]
 80058fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005900:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005904:	9307      	str	r3, [sp, #28]
 8005906:	f8cd 8018 	str.w	r8, [sp, #24]
 800590a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800590e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005912:	4b9c      	ldr	r3, [pc, #624]	@ (8005b84 <_printf_float+0x2c8>)
 8005914:	f04f 32ff 	mov.w	r2, #4294967295
 8005918:	f7fb f910 	bl	8000b3c <__aeabi_dcmpun>
 800591c:	bb70      	cbnz	r0, 800597c <_printf_float+0xc0>
 800591e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005922:	4b98      	ldr	r3, [pc, #608]	@ (8005b84 <_printf_float+0x2c8>)
 8005924:	f04f 32ff 	mov.w	r2, #4294967295
 8005928:	f7fb f8ea 	bl	8000b00 <__aeabi_dcmple>
 800592c:	bb30      	cbnz	r0, 800597c <_printf_float+0xc0>
 800592e:	2200      	movs	r2, #0
 8005930:	2300      	movs	r3, #0
 8005932:	4640      	mov	r0, r8
 8005934:	4649      	mov	r1, r9
 8005936:	f7fb f8d9 	bl	8000aec <__aeabi_dcmplt>
 800593a:	b110      	cbz	r0, 8005942 <_printf_float+0x86>
 800593c:	232d      	movs	r3, #45	@ 0x2d
 800593e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005942:	4a91      	ldr	r2, [pc, #580]	@ (8005b88 <_printf_float+0x2cc>)
 8005944:	4b91      	ldr	r3, [pc, #580]	@ (8005b8c <_printf_float+0x2d0>)
 8005946:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800594a:	bf94      	ite	ls
 800594c:	4690      	movls	r8, r2
 800594e:	4698      	movhi	r8, r3
 8005950:	2303      	movs	r3, #3
 8005952:	6123      	str	r3, [r4, #16]
 8005954:	f02b 0304 	bic.w	r3, fp, #4
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	f04f 0900 	mov.w	r9, #0
 800595e:	9700      	str	r7, [sp, #0]
 8005960:	4633      	mov	r3, r6
 8005962:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005964:	4621      	mov	r1, r4
 8005966:	4628      	mov	r0, r5
 8005968:	f000 f9d2 	bl	8005d10 <_printf_common>
 800596c:	3001      	adds	r0, #1
 800596e:	f040 808d 	bne.w	8005a8c <_printf_float+0x1d0>
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	b00d      	add	sp, #52	@ 0x34
 8005978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597c:	4642      	mov	r2, r8
 800597e:	464b      	mov	r3, r9
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	f7fb f8da 	bl	8000b3c <__aeabi_dcmpun>
 8005988:	b140      	cbz	r0, 800599c <_printf_float+0xe0>
 800598a:	464b      	mov	r3, r9
 800598c:	2b00      	cmp	r3, #0
 800598e:	bfbc      	itt	lt
 8005990:	232d      	movlt	r3, #45	@ 0x2d
 8005992:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005996:	4a7e      	ldr	r2, [pc, #504]	@ (8005b90 <_printf_float+0x2d4>)
 8005998:	4b7e      	ldr	r3, [pc, #504]	@ (8005b94 <_printf_float+0x2d8>)
 800599a:	e7d4      	b.n	8005946 <_printf_float+0x8a>
 800599c:	6863      	ldr	r3, [r4, #4]
 800599e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80059a2:	9206      	str	r2, [sp, #24]
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	d13b      	bne.n	8005a20 <_printf_float+0x164>
 80059a8:	2306      	movs	r3, #6
 80059aa:	6063      	str	r3, [r4, #4]
 80059ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80059b0:	2300      	movs	r3, #0
 80059b2:	6022      	str	r2, [r4, #0]
 80059b4:	9303      	str	r3, [sp, #12]
 80059b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80059b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80059bc:	ab09      	add	r3, sp, #36	@ 0x24
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	6861      	ldr	r1, [r4, #4]
 80059c2:	ec49 8b10 	vmov	d0, r8, r9
 80059c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80059ca:	4628      	mov	r0, r5
 80059cc:	f7ff fed6 	bl	800577c <__cvt>
 80059d0:	9b06      	ldr	r3, [sp, #24]
 80059d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059d4:	2b47      	cmp	r3, #71	@ 0x47
 80059d6:	4680      	mov	r8, r0
 80059d8:	d129      	bne.n	8005a2e <_printf_float+0x172>
 80059da:	1cc8      	adds	r0, r1, #3
 80059dc:	db02      	blt.n	80059e4 <_printf_float+0x128>
 80059de:	6863      	ldr	r3, [r4, #4]
 80059e0:	4299      	cmp	r1, r3
 80059e2:	dd41      	ble.n	8005a68 <_printf_float+0x1ac>
 80059e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80059e8:	fa5f fa8a 	uxtb.w	sl, sl
 80059ec:	3901      	subs	r1, #1
 80059ee:	4652      	mov	r2, sl
 80059f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80059f6:	f7ff ff26 	bl	8005846 <__exponent>
 80059fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059fc:	1813      	adds	r3, r2, r0
 80059fe:	2a01      	cmp	r2, #1
 8005a00:	4681      	mov	r9, r0
 8005a02:	6123      	str	r3, [r4, #16]
 8005a04:	dc02      	bgt.n	8005a0c <_printf_float+0x150>
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	07d2      	lsls	r2, r2, #31
 8005a0a:	d501      	bpl.n	8005a10 <_printf_float+0x154>
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	6123      	str	r3, [r4, #16]
 8005a10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0a2      	beq.n	800595e <_printf_float+0xa2>
 8005a18:	232d      	movs	r3, #45	@ 0x2d
 8005a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a1e:	e79e      	b.n	800595e <_printf_float+0xa2>
 8005a20:	9a06      	ldr	r2, [sp, #24]
 8005a22:	2a47      	cmp	r2, #71	@ 0x47
 8005a24:	d1c2      	bne.n	80059ac <_printf_float+0xf0>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1c0      	bne.n	80059ac <_printf_float+0xf0>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e7bd      	b.n	80059aa <_printf_float+0xee>
 8005a2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a32:	d9db      	bls.n	80059ec <_printf_float+0x130>
 8005a34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a38:	d118      	bne.n	8005a6c <_printf_float+0x1b0>
 8005a3a:	2900      	cmp	r1, #0
 8005a3c:	6863      	ldr	r3, [r4, #4]
 8005a3e:	dd0b      	ble.n	8005a58 <_printf_float+0x19c>
 8005a40:	6121      	str	r1, [r4, #16]
 8005a42:	b913      	cbnz	r3, 8005a4a <_printf_float+0x18e>
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	07d0      	lsls	r0, r2, #31
 8005a48:	d502      	bpl.n	8005a50 <_printf_float+0x194>
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	440b      	add	r3, r1
 8005a4e:	6123      	str	r3, [r4, #16]
 8005a50:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a52:	f04f 0900 	mov.w	r9, #0
 8005a56:	e7db      	b.n	8005a10 <_printf_float+0x154>
 8005a58:	b913      	cbnz	r3, 8005a60 <_printf_float+0x1a4>
 8005a5a:	6822      	ldr	r2, [r4, #0]
 8005a5c:	07d2      	lsls	r2, r2, #31
 8005a5e:	d501      	bpl.n	8005a64 <_printf_float+0x1a8>
 8005a60:	3302      	adds	r3, #2
 8005a62:	e7f4      	b.n	8005a4e <_printf_float+0x192>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e7f2      	b.n	8005a4e <_printf_float+0x192>
 8005a68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a6e:	4299      	cmp	r1, r3
 8005a70:	db05      	blt.n	8005a7e <_printf_float+0x1c2>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	6121      	str	r1, [r4, #16]
 8005a76:	07d8      	lsls	r0, r3, #31
 8005a78:	d5ea      	bpl.n	8005a50 <_printf_float+0x194>
 8005a7a:	1c4b      	adds	r3, r1, #1
 8005a7c:	e7e7      	b.n	8005a4e <_printf_float+0x192>
 8005a7e:	2900      	cmp	r1, #0
 8005a80:	bfd4      	ite	le
 8005a82:	f1c1 0202 	rsble	r2, r1, #2
 8005a86:	2201      	movgt	r2, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	e7e0      	b.n	8005a4e <_printf_float+0x192>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	055a      	lsls	r2, r3, #21
 8005a90:	d407      	bmi.n	8005aa2 <_printf_float+0x1e6>
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	4642      	mov	r2, r8
 8005a96:	4631      	mov	r1, r6
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d12b      	bne.n	8005af8 <_printf_float+0x23c>
 8005aa0:	e767      	b.n	8005972 <_printf_float+0xb6>
 8005aa2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005aa6:	f240 80dd 	bls.w	8005c64 <_printf_float+0x3a8>
 8005aaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f7fb f811 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d033      	beq.n	8005b22 <_printf_float+0x266>
 8005aba:	4a37      	ldr	r2, [pc, #220]	@ (8005b98 <_printf_float+0x2dc>)
 8005abc:	2301      	movs	r3, #1
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b8      	blx	r7
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	f43f af54 	beq.w	8005972 <_printf_float+0xb6>
 8005aca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005ace:	4543      	cmp	r3, r8
 8005ad0:	db02      	blt.n	8005ad8 <_printf_float+0x21c>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	07d8      	lsls	r0, r3, #31
 8005ad6:	d50f      	bpl.n	8005af8 <_printf_float+0x23c>
 8005ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	f43f af45 	beq.w	8005972 <_printf_float+0xb6>
 8005ae8:	f04f 0900 	mov.w	r9, #0
 8005aec:	f108 38ff 	add.w	r8, r8, #4294967295
 8005af0:	f104 0a1a 	add.w	sl, r4, #26
 8005af4:	45c8      	cmp	r8, r9
 8005af6:	dc09      	bgt.n	8005b0c <_printf_float+0x250>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	079b      	lsls	r3, r3, #30
 8005afc:	f100 8103 	bmi.w	8005d06 <_printf_float+0x44a>
 8005b00:	68e0      	ldr	r0, [r4, #12]
 8005b02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b04:	4298      	cmp	r0, r3
 8005b06:	bfb8      	it	lt
 8005b08:	4618      	movlt	r0, r3
 8005b0a:	e734      	b.n	8005976 <_printf_float+0xba>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4652      	mov	r2, sl
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	f43f af2b 	beq.w	8005972 <_printf_float+0xb6>
 8005b1c:	f109 0901 	add.w	r9, r9, #1
 8005b20:	e7e8      	b.n	8005af4 <_printf_float+0x238>
 8005b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	dc39      	bgt.n	8005b9c <_printf_float+0x2e0>
 8005b28:	4a1b      	ldr	r2, [pc, #108]	@ (8005b98 <_printf_float+0x2dc>)
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4628      	mov	r0, r5
 8005b30:	47b8      	blx	r7
 8005b32:	3001      	adds	r0, #1
 8005b34:	f43f af1d 	beq.w	8005972 <_printf_float+0xb6>
 8005b38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b3c:	ea59 0303 	orrs.w	r3, r9, r3
 8005b40:	d102      	bne.n	8005b48 <_printf_float+0x28c>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	07d9      	lsls	r1, r3, #31
 8005b46:	d5d7      	bpl.n	8005af8 <_printf_float+0x23c>
 8005b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b8      	blx	r7
 8005b52:	3001      	adds	r0, #1
 8005b54:	f43f af0d 	beq.w	8005972 <_printf_float+0xb6>
 8005b58:	f04f 0a00 	mov.w	sl, #0
 8005b5c:	f104 0b1a 	add.w	fp, r4, #26
 8005b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b62:	425b      	negs	r3, r3
 8005b64:	4553      	cmp	r3, sl
 8005b66:	dc01      	bgt.n	8005b6c <_printf_float+0x2b0>
 8005b68:	464b      	mov	r3, r9
 8005b6a:	e793      	b.n	8005a94 <_printf_float+0x1d8>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	465a      	mov	r2, fp
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	f43f aefb 	beq.w	8005972 <_printf_float+0xb6>
 8005b7c:	f10a 0a01 	add.w	sl, sl, #1
 8005b80:	e7ee      	b.n	8005b60 <_printf_float+0x2a4>
 8005b82:	bf00      	nop
 8005b84:	7fefffff 	.word	0x7fefffff
 8005b88:	08008254 	.word	0x08008254
 8005b8c:	08008258 	.word	0x08008258
 8005b90:	0800825c 	.word	0x0800825c
 8005b94:	08008260 	.word	0x08008260
 8005b98:	08008264 	.word	0x08008264
 8005b9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ba2:	4553      	cmp	r3, sl
 8005ba4:	bfa8      	it	ge
 8005ba6:	4653      	movge	r3, sl
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	4699      	mov	r9, r3
 8005bac:	dc36      	bgt.n	8005c1c <_printf_float+0x360>
 8005bae:	f04f 0b00 	mov.w	fp, #0
 8005bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bb6:	f104 021a 	add.w	r2, r4, #26
 8005bba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bbc:	9306      	str	r3, [sp, #24]
 8005bbe:	eba3 0309 	sub.w	r3, r3, r9
 8005bc2:	455b      	cmp	r3, fp
 8005bc4:	dc31      	bgt.n	8005c2a <_printf_float+0x36e>
 8005bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc8:	459a      	cmp	sl, r3
 8005bca:	dc3a      	bgt.n	8005c42 <_printf_float+0x386>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07da      	lsls	r2, r3, #31
 8005bd0:	d437      	bmi.n	8005c42 <_printf_float+0x386>
 8005bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd4:	ebaa 0903 	sub.w	r9, sl, r3
 8005bd8:	9b06      	ldr	r3, [sp, #24]
 8005bda:	ebaa 0303 	sub.w	r3, sl, r3
 8005bde:	4599      	cmp	r9, r3
 8005be0:	bfa8      	it	ge
 8005be2:	4699      	movge	r9, r3
 8005be4:	f1b9 0f00 	cmp.w	r9, #0
 8005be8:	dc33      	bgt.n	8005c52 <_printf_float+0x396>
 8005bea:	f04f 0800 	mov.w	r8, #0
 8005bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bf2:	f104 0b1a 	add.w	fp, r4, #26
 8005bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf8:	ebaa 0303 	sub.w	r3, sl, r3
 8005bfc:	eba3 0309 	sub.w	r3, r3, r9
 8005c00:	4543      	cmp	r3, r8
 8005c02:	f77f af79 	ble.w	8005af8 <_printf_float+0x23c>
 8005c06:	2301      	movs	r3, #1
 8005c08:	465a      	mov	r2, fp
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f aeae 	beq.w	8005972 <_printf_float+0xb6>
 8005c16:	f108 0801 	add.w	r8, r8, #1
 8005c1a:	e7ec      	b.n	8005bf6 <_printf_float+0x33a>
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	d1c2      	bne.n	8005bae <_printf_float+0x2f2>
 8005c28:	e6a3      	b.n	8005972 <_printf_float+0xb6>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	9206      	str	r2, [sp, #24]
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	f43f ae9c 	beq.w	8005972 <_printf_float+0xb6>
 8005c3a:	9a06      	ldr	r2, [sp, #24]
 8005c3c:	f10b 0b01 	add.w	fp, fp, #1
 8005c40:	e7bb      	b.n	8005bba <_printf_float+0x2fe>
 8005c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d1c0      	bne.n	8005bd2 <_printf_float+0x316>
 8005c50:	e68f      	b.n	8005972 <_printf_float+0xb6>
 8005c52:	9a06      	ldr	r2, [sp, #24]
 8005c54:	464b      	mov	r3, r9
 8005c56:	4442      	add	r2, r8
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d1c3      	bne.n	8005bea <_printf_float+0x32e>
 8005c62:	e686      	b.n	8005972 <_printf_float+0xb6>
 8005c64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c68:	f1ba 0f01 	cmp.w	sl, #1
 8005c6c:	dc01      	bgt.n	8005c72 <_printf_float+0x3b6>
 8005c6e:	07db      	lsls	r3, r3, #31
 8005c70:	d536      	bpl.n	8005ce0 <_printf_float+0x424>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4642      	mov	r2, r8
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	47b8      	blx	r7
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	f43f ae78 	beq.w	8005972 <_printf_float+0xb6>
 8005c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	47b8      	blx	r7
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	f43f ae70 	beq.w	8005972 <_printf_float+0xb6>
 8005c92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c96:	2200      	movs	r2, #0
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c9e:	f7fa ff1b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ca2:	b9c0      	cbnz	r0, 8005cd6 <_printf_float+0x41a>
 8005ca4:	4653      	mov	r3, sl
 8005ca6:	f108 0201 	add.w	r2, r8, #1
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b8      	blx	r7
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d10c      	bne.n	8005cce <_printf_float+0x412>
 8005cb4:	e65d      	b.n	8005972 <_printf_float+0xb6>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	465a      	mov	r2, fp
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	f43f ae56 	beq.w	8005972 <_printf_float+0xb6>
 8005cc6:	f108 0801 	add.w	r8, r8, #1
 8005cca:	45d0      	cmp	r8, sl
 8005ccc:	dbf3      	blt.n	8005cb6 <_printf_float+0x3fa>
 8005cce:	464b      	mov	r3, r9
 8005cd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005cd4:	e6df      	b.n	8005a96 <_printf_float+0x1da>
 8005cd6:	f04f 0800 	mov.w	r8, #0
 8005cda:	f104 0b1a 	add.w	fp, r4, #26
 8005cde:	e7f4      	b.n	8005cca <_printf_float+0x40e>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4642      	mov	r2, r8
 8005ce4:	e7e1      	b.n	8005caa <_printf_float+0x3ee>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	464a      	mov	r2, r9
 8005cea:	4631      	mov	r1, r6
 8005cec:	4628      	mov	r0, r5
 8005cee:	47b8      	blx	r7
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	f43f ae3e 	beq.w	8005972 <_printf_float+0xb6>
 8005cf6:	f108 0801 	add.w	r8, r8, #1
 8005cfa:	68e3      	ldr	r3, [r4, #12]
 8005cfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cfe:	1a5b      	subs	r3, r3, r1
 8005d00:	4543      	cmp	r3, r8
 8005d02:	dcf0      	bgt.n	8005ce6 <_printf_float+0x42a>
 8005d04:	e6fc      	b.n	8005b00 <_printf_float+0x244>
 8005d06:	f04f 0800 	mov.w	r8, #0
 8005d0a:	f104 0919 	add.w	r9, r4, #25
 8005d0e:	e7f4      	b.n	8005cfa <_printf_float+0x43e>

08005d10 <_printf_common>:
 8005d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d14:	4616      	mov	r6, r2
 8005d16:	4698      	mov	r8, r3
 8005d18:	688a      	ldr	r2, [r1, #8]
 8005d1a:	690b      	ldr	r3, [r1, #16]
 8005d1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d20:	4293      	cmp	r3, r2
 8005d22:	bfb8      	it	lt
 8005d24:	4613      	movlt	r3, r2
 8005d26:	6033      	str	r3, [r6, #0]
 8005d28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	b10a      	cbz	r2, 8005d36 <_printf_common+0x26>
 8005d32:	3301      	adds	r3, #1
 8005d34:	6033      	str	r3, [r6, #0]
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	0699      	lsls	r1, r3, #26
 8005d3a:	bf42      	ittt	mi
 8005d3c:	6833      	ldrmi	r3, [r6, #0]
 8005d3e:	3302      	addmi	r3, #2
 8005d40:	6033      	strmi	r3, [r6, #0]
 8005d42:	6825      	ldr	r5, [r4, #0]
 8005d44:	f015 0506 	ands.w	r5, r5, #6
 8005d48:	d106      	bne.n	8005d58 <_printf_common+0x48>
 8005d4a:	f104 0a19 	add.w	sl, r4, #25
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	6832      	ldr	r2, [r6, #0]
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	42ab      	cmp	r3, r5
 8005d56:	dc26      	bgt.n	8005da6 <_printf_common+0x96>
 8005d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d5c:	6822      	ldr	r2, [r4, #0]
 8005d5e:	3b00      	subs	r3, #0
 8005d60:	bf18      	it	ne
 8005d62:	2301      	movne	r3, #1
 8005d64:	0692      	lsls	r2, r2, #26
 8005d66:	d42b      	bmi.n	8005dc0 <_printf_common+0xb0>
 8005d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	4638      	mov	r0, r7
 8005d70:	47c8      	blx	r9
 8005d72:	3001      	adds	r0, #1
 8005d74:	d01e      	beq.n	8005db4 <_printf_common+0xa4>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	6922      	ldr	r2, [r4, #16]
 8005d7a:	f003 0306 	and.w	r3, r3, #6
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	bf02      	ittt	eq
 8005d82:	68e5      	ldreq	r5, [r4, #12]
 8005d84:	6833      	ldreq	r3, [r6, #0]
 8005d86:	1aed      	subeq	r5, r5, r3
 8005d88:	68a3      	ldr	r3, [r4, #8]
 8005d8a:	bf0c      	ite	eq
 8005d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d90:	2500      	movne	r5, #0
 8005d92:	4293      	cmp	r3, r2
 8005d94:	bfc4      	itt	gt
 8005d96:	1a9b      	subgt	r3, r3, r2
 8005d98:	18ed      	addgt	r5, r5, r3
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	341a      	adds	r4, #26
 8005d9e:	42b5      	cmp	r5, r6
 8005da0:	d11a      	bne.n	8005dd8 <_printf_common+0xc8>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e008      	b.n	8005db8 <_printf_common+0xa8>
 8005da6:	2301      	movs	r3, #1
 8005da8:	4652      	mov	r2, sl
 8005daa:	4641      	mov	r1, r8
 8005dac:	4638      	mov	r0, r7
 8005dae:	47c8      	blx	r9
 8005db0:	3001      	adds	r0, #1
 8005db2:	d103      	bne.n	8005dbc <_printf_common+0xac>
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	e7c6      	b.n	8005d4e <_printf_common+0x3e>
 8005dc0:	18e1      	adds	r1, r4, r3
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	2030      	movs	r0, #48	@ 0x30
 8005dc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dca:	4422      	add	r2, r4
 8005dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	e7c7      	b.n	8005d68 <_printf_common+0x58>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4622      	mov	r2, r4
 8005ddc:	4641      	mov	r1, r8
 8005dde:	4638      	mov	r0, r7
 8005de0:	47c8      	blx	r9
 8005de2:	3001      	adds	r0, #1
 8005de4:	d0e6      	beq.n	8005db4 <_printf_common+0xa4>
 8005de6:	3601      	adds	r6, #1
 8005de8:	e7d9      	b.n	8005d9e <_printf_common+0x8e>
	...

08005dec <_printf_i>:
 8005dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	7e0f      	ldrb	r7, [r1, #24]
 8005df2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005df4:	2f78      	cmp	r7, #120	@ 0x78
 8005df6:	4691      	mov	r9, r2
 8005df8:	4680      	mov	r8, r0
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	469a      	mov	sl, r3
 8005dfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e02:	d807      	bhi.n	8005e14 <_printf_i+0x28>
 8005e04:	2f62      	cmp	r7, #98	@ 0x62
 8005e06:	d80a      	bhi.n	8005e1e <_printf_i+0x32>
 8005e08:	2f00      	cmp	r7, #0
 8005e0a:	f000 80d2 	beq.w	8005fb2 <_printf_i+0x1c6>
 8005e0e:	2f58      	cmp	r7, #88	@ 0x58
 8005e10:	f000 80b9 	beq.w	8005f86 <_printf_i+0x19a>
 8005e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e1c:	e03a      	b.n	8005e94 <_printf_i+0xa8>
 8005e1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e22:	2b15      	cmp	r3, #21
 8005e24:	d8f6      	bhi.n	8005e14 <_printf_i+0x28>
 8005e26:	a101      	add	r1, pc, #4	@ (adr r1, 8005e2c <_printf_i+0x40>)
 8005e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e2c:	08005e85 	.word	0x08005e85
 8005e30:	08005e99 	.word	0x08005e99
 8005e34:	08005e15 	.word	0x08005e15
 8005e38:	08005e15 	.word	0x08005e15
 8005e3c:	08005e15 	.word	0x08005e15
 8005e40:	08005e15 	.word	0x08005e15
 8005e44:	08005e99 	.word	0x08005e99
 8005e48:	08005e15 	.word	0x08005e15
 8005e4c:	08005e15 	.word	0x08005e15
 8005e50:	08005e15 	.word	0x08005e15
 8005e54:	08005e15 	.word	0x08005e15
 8005e58:	08005f99 	.word	0x08005f99
 8005e5c:	08005ec3 	.word	0x08005ec3
 8005e60:	08005f53 	.word	0x08005f53
 8005e64:	08005e15 	.word	0x08005e15
 8005e68:	08005e15 	.word	0x08005e15
 8005e6c:	08005fbb 	.word	0x08005fbb
 8005e70:	08005e15 	.word	0x08005e15
 8005e74:	08005ec3 	.word	0x08005ec3
 8005e78:	08005e15 	.word	0x08005e15
 8005e7c:	08005e15 	.word	0x08005e15
 8005e80:	08005f5b 	.word	0x08005f5b
 8005e84:	6833      	ldr	r3, [r6, #0]
 8005e86:	1d1a      	adds	r2, r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6032      	str	r2, [r6, #0]
 8005e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e94:	2301      	movs	r3, #1
 8005e96:	e09d      	b.n	8005fd4 <_printf_i+0x1e8>
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	6820      	ldr	r0, [r4, #0]
 8005e9c:	1d19      	adds	r1, r3, #4
 8005e9e:	6031      	str	r1, [r6, #0]
 8005ea0:	0606      	lsls	r6, r0, #24
 8005ea2:	d501      	bpl.n	8005ea8 <_printf_i+0xbc>
 8005ea4:	681d      	ldr	r5, [r3, #0]
 8005ea6:	e003      	b.n	8005eb0 <_printf_i+0xc4>
 8005ea8:	0645      	lsls	r5, r0, #25
 8005eaa:	d5fb      	bpl.n	8005ea4 <_printf_i+0xb8>
 8005eac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005eb0:	2d00      	cmp	r5, #0
 8005eb2:	da03      	bge.n	8005ebc <_printf_i+0xd0>
 8005eb4:	232d      	movs	r3, #45	@ 0x2d
 8005eb6:	426d      	negs	r5, r5
 8005eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ebc:	4859      	ldr	r0, [pc, #356]	@ (8006024 <_printf_i+0x238>)
 8005ebe:	230a      	movs	r3, #10
 8005ec0:	e011      	b.n	8005ee6 <_printf_i+0xfa>
 8005ec2:	6821      	ldr	r1, [r4, #0]
 8005ec4:	6833      	ldr	r3, [r6, #0]
 8005ec6:	0608      	lsls	r0, r1, #24
 8005ec8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ecc:	d402      	bmi.n	8005ed4 <_printf_i+0xe8>
 8005ece:	0649      	lsls	r1, r1, #25
 8005ed0:	bf48      	it	mi
 8005ed2:	b2ad      	uxthmi	r5, r5
 8005ed4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ed6:	4853      	ldr	r0, [pc, #332]	@ (8006024 <_printf_i+0x238>)
 8005ed8:	6033      	str	r3, [r6, #0]
 8005eda:	bf14      	ite	ne
 8005edc:	230a      	movne	r3, #10
 8005ede:	2308      	moveq	r3, #8
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ee6:	6866      	ldr	r6, [r4, #4]
 8005ee8:	60a6      	str	r6, [r4, #8]
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	bfa2      	ittt	ge
 8005eee:	6821      	ldrge	r1, [r4, #0]
 8005ef0:	f021 0104 	bicge.w	r1, r1, #4
 8005ef4:	6021      	strge	r1, [r4, #0]
 8005ef6:	b90d      	cbnz	r5, 8005efc <_printf_i+0x110>
 8005ef8:	2e00      	cmp	r6, #0
 8005efa:	d04b      	beq.n	8005f94 <_printf_i+0x1a8>
 8005efc:	4616      	mov	r6, r2
 8005efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f02:	fb03 5711 	mls	r7, r3, r1, r5
 8005f06:	5dc7      	ldrb	r7, [r0, r7]
 8005f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f0c:	462f      	mov	r7, r5
 8005f0e:	42bb      	cmp	r3, r7
 8005f10:	460d      	mov	r5, r1
 8005f12:	d9f4      	bls.n	8005efe <_printf_i+0x112>
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d10b      	bne.n	8005f30 <_printf_i+0x144>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	07df      	lsls	r7, r3, #31
 8005f1c:	d508      	bpl.n	8005f30 <_printf_i+0x144>
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	6861      	ldr	r1, [r4, #4]
 8005f22:	4299      	cmp	r1, r3
 8005f24:	bfde      	ittt	le
 8005f26:	2330      	movle	r3, #48	@ 0x30
 8005f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f30:	1b92      	subs	r2, r2, r6
 8005f32:	6122      	str	r2, [r4, #16]
 8005f34:	f8cd a000 	str.w	sl, [sp]
 8005f38:	464b      	mov	r3, r9
 8005f3a:	aa03      	add	r2, sp, #12
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f7ff fee6 	bl	8005d10 <_printf_common>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d14a      	bne.n	8005fde <_printf_i+0x1f2>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	b004      	add	sp, #16
 8005f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	f043 0320 	orr.w	r3, r3, #32
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	4833      	ldr	r0, [pc, #204]	@ (8006028 <_printf_i+0x23c>)
 8005f5c:	2778      	movs	r7, #120	@ 0x78
 8005f5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	6831      	ldr	r1, [r6, #0]
 8005f66:	061f      	lsls	r7, r3, #24
 8005f68:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f6c:	d402      	bmi.n	8005f74 <_printf_i+0x188>
 8005f6e:	065f      	lsls	r7, r3, #25
 8005f70:	bf48      	it	mi
 8005f72:	b2ad      	uxthmi	r5, r5
 8005f74:	6031      	str	r1, [r6, #0]
 8005f76:	07d9      	lsls	r1, r3, #31
 8005f78:	bf44      	itt	mi
 8005f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f7e:	6023      	strmi	r3, [r4, #0]
 8005f80:	b11d      	cbz	r5, 8005f8a <_printf_i+0x19e>
 8005f82:	2310      	movs	r3, #16
 8005f84:	e7ac      	b.n	8005ee0 <_printf_i+0xf4>
 8005f86:	4827      	ldr	r0, [pc, #156]	@ (8006024 <_printf_i+0x238>)
 8005f88:	e7e9      	b.n	8005f5e <_printf_i+0x172>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	f023 0320 	bic.w	r3, r3, #32
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	e7f6      	b.n	8005f82 <_printf_i+0x196>
 8005f94:	4616      	mov	r6, r2
 8005f96:	e7bd      	b.n	8005f14 <_printf_i+0x128>
 8005f98:	6833      	ldr	r3, [r6, #0]
 8005f9a:	6825      	ldr	r5, [r4, #0]
 8005f9c:	6961      	ldr	r1, [r4, #20]
 8005f9e:	1d18      	adds	r0, r3, #4
 8005fa0:	6030      	str	r0, [r6, #0]
 8005fa2:	062e      	lsls	r6, r5, #24
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	d501      	bpl.n	8005fac <_printf_i+0x1c0>
 8005fa8:	6019      	str	r1, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <_printf_i+0x1c6>
 8005fac:	0668      	lsls	r0, r5, #25
 8005fae:	d5fb      	bpl.n	8005fa8 <_printf_i+0x1bc>
 8005fb0:	8019      	strh	r1, [r3, #0]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6123      	str	r3, [r4, #16]
 8005fb6:	4616      	mov	r6, r2
 8005fb8:	e7bc      	b.n	8005f34 <_printf_i+0x148>
 8005fba:	6833      	ldr	r3, [r6, #0]
 8005fbc:	1d1a      	adds	r2, r3, #4
 8005fbe:	6032      	str	r2, [r6, #0]
 8005fc0:	681e      	ldr	r6, [r3, #0]
 8005fc2:	6862      	ldr	r2, [r4, #4]
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f7fa f90a 	bl	80001e0 <memchr>
 8005fcc:	b108      	cbz	r0, 8005fd2 <_printf_i+0x1e6>
 8005fce:	1b80      	subs	r0, r0, r6
 8005fd0:	6060      	str	r0, [r4, #4]
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	6123      	str	r3, [r4, #16]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fdc:	e7aa      	b.n	8005f34 <_printf_i+0x148>
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	47d0      	blx	sl
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d0ad      	beq.n	8005f48 <_printf_i+0x15c>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	079b      	lsls	r3, r3, #30
 8005ff0:	d413      	bmi.n	800601a <_printf_i+0x22e>
 8005ff2:	68e0      	ldr	r0, [r4, #12]
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	4298      	cmp	r0, r3
 8005ff8:	bfb8      	it	lt
 8005ffa:	4618      	movlt	r0, r3
 8005ffc:	e7a6      	b.n	8005f4c <_printf_i+0x160>
 8005ffe:	2301      	movs	r3, #1
 8006000:	4632      	mov	r2, r6
 8006002:	4649      	mov	r1, r9
 8006004:	4640      	mov	r0, r8
 8006006:	47d0      	blx	sl
 8006008:	3001      	adds	r0, #1
 800600a:	d09d      	beq.n	8005f48 <_printf_i+0x15c>
 800600c:	3501      	adds	r5, #1
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	9903      	ldr	r1, [sp, #12]
 8006012:	1a5b      	subs	r3, r3, r1
 8006014:	42ab      	cmp	r3, r5
 8006016:	dcf2      	bgt.n	8005ffe <_printf_i+0x212>
 8006018:	e7eb      	b.n	8005ff2 <_printf_i+0x206>
 800601a:	2500      	movs	r5, #0
 800601c:	f104 0619 	add.w	r6, r4, #25
 8006020:	e7f5      	b.n	800600e <_printf_i+0x222>
 8006022:	bf00      	nop
 8006024:	08008266 	.word	0x08008266
 8006028:	08008277 	.word	0x08008277

0800602c <std>:
 800602c:	2300      	movs	r3, #0
 800602e:	b510      	push	{r4, lr}
 8006030:	4604      	mov	r4, r0
 8006032:	e9c0 3300 	strd	r3, r3, [r0]
 8006036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800603a:	6083      	str	r3, [r0, #8]
 800603c:	8181      	strh	r1, [r0, #12]
 800603e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006040:	81c2      	strh	r2, [r0, #14]
 8006042:	6183      	str	r3, [r0, #24]
 8006044:	4619      	mov	r1, r3
 8006046:	2208      	movs	r2, #8
 8006048:	305c      	adds	r0, #92	@ 0x5c
 800604a:	f000 f9f9 	bl	8006440 <memset>
 800604e:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <std+0x58>)
 8006050:	6263      	str	r3, [r4, #36]	@ 0x24
 8006052:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <std+0x5c>)
 8006054:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006056:	4b0d      	ldr	r3, [pc, #52]	@ (800608c <std+0x60>)
 8006058:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800605a:	4b0d      	ldr	r3, [pc, #52]	@ (8006090 <std+0x64>)
 800605c:	6323      	str	r3, [r4, #48]	@ 0x30
 800605e:	4b0d      	ldr	r3, [pc, #52]	@ (8006094 <std+0x68>)
 8006060:	6224      	str	r4, [r4, #32]
 8006062:	429c      	cmp	r4, r3
 8006064:	d006      	beq.n	8006074 <std+0x48>
 8006066:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800606a:	4294      	cmp	r4, r2
 800606c:	d002      	beq.n	8006074 <std+0x48>
 800606e:	33d0      	adds	r3, #208	@ 0xd0
 8006070:	429c      	cmp	r4, r3
 8006072:	d105      	bne.n	8006080 <std+0x54>
 8006074:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800607c:	f000 ba6e 	b.w	800655c <__retarget_lock_init_recursive>
 8006080:	bd10      	pop	{r4, pc}
 8006082:	bf00      	nop
 8006084:	08006291 	.word	0x08006291
 8006088:	080062b3 	.word	0x080062b3
 800608c:	080062eb 	.word	0x080062eb
 8006090:	0800630f 	.word	0x0800630f
 8006094:	2000042c 	.word	0x2000042c

08006098 <stdio_exit_handler>:
 8006098:	4a02      	ldr	r2, [pc, #8]	@ (80060a4 <stdio_exit_handler+0xc>)
 800609a:	4903      	ldr	r1, [pc, #12]	@ (80060a8 <stdio_exit_handler+0x10>)
 800609c:	4803      	ldr	r0, [pc, #12]	@ (80060ac <stdio_exit_handler+0x14>)
 800609e:	f000 b869 	b.w	8006174 <_fwalk_sglue>
 80060a2:	bf00      	nop
 80060a4:	20000010 	.word	0x20000010
 80060a8:	08007e91 	.word	0x08007e91
 80060ac:	20000020 	.word	0x20000020

080060b0 <cleanup_stdio>:
 80060b0:	6841      	ldr	r1, [r0, #4]
 80060b2:	4b0c      	ldr	r3, [pc, #48]	@ (80060e4 <cleanup_stdio+0x34>)
 80060b4:	4299      	cmp	r1, r3
 80060b6:	b510      	push	{r4, lr}
 80060b8:	4604      	mov	r4, r0
 80060ba:	d001      	beq.n	80060c0 <cleanup_stdio+0x10>
 80060bc:	f001 fee8 	bl	8007e90 <_fflush_r>
 80060c0:	68a1      	ldr	r1, [r4, #8]
 80060c2:	4b09      	ldr	r3, [pc, #36]	@ (80060e8 <cleanup_stdio+0x38>)
 80060c4:	4299      	cmp	r1, r3
 80060c6:	d002      	beq.n	80060ce <cleanup_stdio+0x1e>
 80060c8:	4620      	mov	r0, r4
 80060ca:	f001 fee1 	bl	8007e90 <_fflush_r>
 80060ce:	68e1      	ldr	r1, [r4, #12]
 80060d0:	4b06      	ldr	r3, [pc, #24]	@ (80060ec <cleanup_stdio+0x3c>)
 80060d2:	4299      	cmp	r1, r3
 80060d4:	d004      	beq.n	80060e0 <cleanup_stdio+0x30>
 80060d6:	4620      	mov	r0, r4
 80060d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060dc:	f001 bed8 	b.w	8007e90 <_fflush_r>
 80060e0:	bd10      	pop	{r4, pc}
 80060e2:	bf00      	nop
 80060e4:	2000042c 	.word	0x2000042c
 80060e8:	20000494 	.word	0x20000494
 80060ec:	200004fc 	.word	0x200004fc

080060f0 <global_stdio_init.part.0>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006120 <global_stdio_init.part.0+0x30>)
 80060f4:	4c0b      	ldr	r4, [pc, #44]	@ (8006124 <global_stdio_init.part.0+0x34>)
 80060f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006128 <global_stdio_init.part.0+0x38>)
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	4620      	mov	r0, r4
 80060fc:	2200      	movs	r2, #0
 80060fe:	2104      	movs	r1, #4
 8006100:	f7ff ff94 	bl	800602c <std>
 8006104:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006108:	2201      	movs	r2, #1
 800610a:	2109      	movs	r1, #9
 800610c:	f7ff ff8e 	bl	800602c <std>
 8006110:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006114:	2202      	movs	r2, #2
 8006116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800611a:	2112      	movs	r1, #18
 800611c:	f7ff bf86 	b.w	800602c <std>
 8006120:	20000564 	.word	0x20000564
 8006124:	2000042c 	.word	0x2000042c
 8006128:	08006099 	.word	0x08006099

0800612c <__sfp_lock_acquire>:
 800612c:	4801      	ldr	r0, [pc, #4]	@ (8006134 <__sfp_lock_acquire+0x8>)
 800612e:	f000 ba16 	b.w	800655e <__retarget_lock_acquire_recursive>
 8006132:	bf00      	nop
 8006134:	2000056d 	.word	0x2000056d

08006138 <__sfp_lock_release>:
 8006138:	4801      	ldr	r0, [pc, #4]	@ (8006140 <__sfp_lock_release+0x8>)
 800613a:	f000 ba11 	b.w	8006560 <__retarget_lock_release_recursive>
 800613e:	bf00      	nop
 8006140:	2000056d 	.word	0x2000056d

08006144 <__sinit>:
 8006144:	b510      	push	{r4, lr}
 8006146:	4604      	mov	r4, r0
 8006148:	f7ff fff0 	bl	800612c <__sfp_lock_acquire>
 800614c:	6a23      	ldr	r3, [r4, #32]
 800614e:	b11b      	cbz	r3, 8006158 <__sinit+0x14>
 8006150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006154:	f7ff bff0 	b.w	8006138 <__sfp_lock_release>
 8006158:	4b04      	ldr	r3, [pc, #16]	@ (800616c <__sinit+0x28>)
 800615a:	6223      	str	r3, [r4, #32]
 800615c:	4b04      	ldr	r3, [pc, #16]	@ (8006170 <__sinit+0x2c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f5      	bne.n	8006150 <__sinit+0xc>
 8006164:	f7ff ffc4 	bl	80060f0 <global_stdio_init.part.0>
 8006168:	e7f2      	b.n	8006150 <__sinit+0xc>
 800616a:	bf00      	nop
 800616c:	080060b1 	.word	0x080060b1
 8006170:	20000564 	.word	0x20000564

08006174 <_fwalk_sglue>:
 8006174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006178:	4607      	mov	r7, r0
 800617a:	4688      	mov	r8, r1
 800617c:	4614      	mov	r4, r2
 800617e:	2600      	movs	r6, #0
 8006180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006184:	f1b9 0901 	subs.w	r9, r9, #1
 8006188:	d505      	bpl.n	8006196 <_fwalk_sglue+0x22>
 800618a:	6824      	ldr	r4, [r4, #0]
 800618c:	2c00      	cmp	r4, #0
 800618e:	d1f7      	bne.n	8006180 <_fwalk_sglue+0xc>
 8006190:	4630      	mov	r0, r6
 8006192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006196:	89ab      	ldrh	r3, [r5, #12]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d907      	bls.n	80061ac <_fwalk_sglue+0x38>
 800619c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061a0:	3301      	adds	r3, #1
 80061a2:	d003      	beq.n	80061ac <_fwalk_sglue+0x38>
 80061a4:	4629      	mov	r1, r5
 80061a6:	4638      	mov	r0, r7
 80061a8:	47c0      	blx	r8
 80061aa:	4306      	orrs	r6, r0
 80061ac:	3568      	adds	r5, #104	@ 0x68
 80061ae:	e7e9      	b.n	8006184 <_fwalk_sglue+0x10>

080061b0 <iprintf>:
 80061b0:	b40f      	push	{r0, r1, r2, r3}
 80061b2:	b507      	push	{r0, r1, r2, lr}
 80061b4:	4906      	ldr	r1, [pc, #24]	@ (80061d0 <iprintf+0x20>)
 80061b6:	ab04      	add	r3, sp, #16
 80061b8:	6808      	ldr	r0, [r1, #0]
 80061ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80061be:	6881      	ldr	r1, [r0, #8]
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	f001 fcc9 	bl	8007b58 <_vfiprintf_r>
 80061c6:	b003      	add	sp, #12
 80061c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061cc:	b004      	add	sp, #16
 80061ce:	4770      	bx	lr
 80061d0:	2000001c 	.word	0x2000001c

080061d4 <_puts_r>:
 80061d4:	6a03      	ldr	r3, [r0, #32]
 80061d6:	b570      	push	{r4, r5, r6, lr}
 80061d8:	6884      	ldr	r4, [r0, #8]
 80061da:	4605      	mov	r5, r0
 80061dc:	460e      	mov	r6, r1
 80061de:	b90b      	cbnz	r3, 80061e4 <_puts_r+0x10>
 80061e0:	f7ff ffb0 	bl	8006144 <__sinit>
 80061e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061e6:	07db      	lsls	r3, r3, #31
 80061e8:	d405      	bmi.n	80061f6 <_puts_r+0x22>
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	0598      	lsls	r0, r3, #22
 80061ee:	d402      	bmi.n	80061f6 <_puts_r+0x22>
 80061f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061f2:	f000 f9b4 	bl	800655e <__retarget_lock_acquire_recursive>
 80061f6:	89a3      	ldrh	r3, [r4, #12]
 80061f8:	0719      	lsls	r1, r3, #28
 80061fa:	d502      	bpl.n	8006202 <_puts_r+0x2e>
 80061fc:	6923      	ldr	r3, [r4, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d135      	bne.n	800626e <_puts_r+0x9a>
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 f8c5 	bl	8006394 <__swsetup_r>
 800620a:	b380      	cbz	r0, 800626e <_puts_r+0x9a>
 800620c:	f04f 35ff 	mov.w	r5, #4294967295
 8006210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006212:	07da      	lsls	r2, r3, #31
 8006214:	d405      	bmi.n	8006222 <_puts_r+0x4e>
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	059b      	lsls	r3, r3, #22
 800621a:	d402      	bmi.n	8006222 <_puts_r+0x4e>
 800621c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800621e:	f000 f99f 	bl	8006560 <__retarget_lock_release_recursive>
 8006222:	4628      	mov	r0, r5
 8006224:	bd70      	pop	{r4, r5, r6, pc}
 8006226:	2b00      	cmp	r3, #0
 8006228:	da04      	bge.n	8006234 <_puts_r+0x60>
 800622a:	69a2      	ldr	r2, [r4, #24]
 800622c:	429a      	cmp	r2, r3
 800622e:	dc17      	bgt.n	8006260 <_puts_r+0x8c>
 8006230:	290a      	cmp	r1, #10
 8006232:	d015      	beq.n	8006260 <_puts_r+0x8c>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	6022      	str	r2, [r4, #0]
 800623a:	7019      	strb	r1, [r3, #0]
 800623c:	68a3      	ldr	r3, [r4, #8]
 800623e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006242:	3b01      	subs	r3, #1
 8006244:	60a3      	str	r3, [r4, #8]
 8006246:	2900      	cmp	r1, #0
 8006248:	d1ed      	bne.n	8006226 <_puts_r+0x52>
 800624a:	2b00      	cmp	r3, #0
 800624c:	da11      	bge.n	8006272 <_puts_r+0x9e>
 800624e:	4622      	mov	r2, r4
 8006250:	210a      	movs	r1, #10
 8006252:	4628      	mov	r0, r5
 8006254:	f000 f85f 	bl	8006316 <__swbuf_r>
 8006258:	3001      	adds	r0, #1
 800625a:	d0d7      	beq.n	800620c <_puts_r+0x38>
 800625c:	250a      	movs	r5, #10
 800625e:	e7d7      	b.n	8006210 <_puts_r+0x3c>
 8006260:	4622      	mov	r2, r4
 8006262:	4628      	mov	r0, r5
 8006264:	f000 f857 	bl	8006316 <__swbuf_r>
 8006268:	3001      	adds	r0, #1
 800626a:	d1e7      	bne.n	800623c <_puts_r+0x68>
 800626c:	e7ce      	b.n	800620c <_puts_r+0x38>
 800626e:	3e01      	subs	r6, #1
 8006270:	e7e4      	b.n	800623c <_puts_r+0x68>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	6022      	str	r2, [r4, #0]
 8006278:	220a      	movs	r2, #10
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	e7ee      	b.n	800625c <_puts_r+0x88>
	...

08006280 <puts>:
 8006280:	4b02      	ldr	r3, [pc, #8]	@ (800628c <puts+0xc>)
 8006282:	4601      	mov	r1, r0
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	f7ff bfa5 	b.w	80061d4 <_puts_r>
 800628a:	bf00      	nop
 800628c:	2000001c 	.word	0x2000001c

08006290 <__sread>:
 8006290:	b510      	push	{r4, lr}
 8006292:	460c      	mov	r4, r1
 8006294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006298:	f000 f912 	bl	80064c0 <_read_r>
 800629c:	2800      	cmp	r0, #0
 800629e:	bfab      	itete	ge
 80062a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062a2:	89a3      	ldrhlt	r3, [r4, #12]
 80062a4:	181b      	addge	r3, r3, r0
 80062a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062aa:	bfac      	ite	ge
 80062ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062ae:	81a3      	strhlt	r3, [r4, #12]
 80062b0:	bd10      	pop	{r4, pc}

080062b2 <__swrite>:
 80062b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b6:	461f      	mov	r7, r3
 80062b8:	898b      	ldrh	r3, [r1, #12]
 80062ba:	05db      	lsls	r3, r3, #23
 80062bc:	4605      	mov	r5, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	4616      	mov	r6, r2
 80062c2:	d505      	bpl.n	80062d0 <__swrite+0x1e>
 80062c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c8:	2302      	movs	r3, #2
 80062ca:	2200      	movs	r2, #0
 80062cc:	f000 f8e6 	bl	800649c <_lseek_r>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	4632      	mov	r2, r6
 80062de:	463b      	mov	r3, r7
 80062e0:	4628      	mov	r0, r5
 80062e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062e6:	f000 b8fd 	b.w	80064e4 <_write_r>

080062ea <__sseek>:
 80062ea:	b510      	push	{r4, lr}
 80062ec:	460c      	mov	r4, r1
 80062ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f2:	f000 f8d3 	bl	800649c <_lseek_r>
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	bf15      	itete	ne
 80062fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006302:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006306:	81a3      	strheq	r3, [r4, #12]
 8006308:	bf18      	it	ne
 800630a:	81a3      	strhne	r3, [r4, #12]
 800630c:	bd10      	pop	{r4, pc}

0800630e <__sclose>:
 800630e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006312:	f000 b8b3 	b.w	800647c <_close_r>

08006316 <__swbuf_r>:
 8006316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006318:	460e      	mov	r6, r1
 800631a:	4614      	mov	r4, r2
 800631c:	4605      	mov	r5, r0
 800631e:	b118      	cbz	r0, 8006328 <__swbuf_r+0x12>
 8006320:	6a03      	ldr	r3, [r0, #32]
 8006322:	b90b      	cbnz	r3, 8006328 <__swbuf_r+0x12>
 8006324:	f7ff ff0e 	bl	8006144 <__sinit>
 8006328:	69a3      	ldr	r3, [r4, #24]
 800632a:	60a3      	str	r3, [r4, #8]
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	071a      	lsls	r2, r3, #28
 8006330:	d501      	bpl.n	8006336 <__swbuf_r+0x20>
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	b943      	cbnz	r3, 8006348 <__swbuf_r+0x32>
 8006336:	4621      	mov	r1, r4
 8006338:	4628      	mov	r0, r5
 800633a:	f000 f82b 	bl	8006394 <__swsetup_r>
 800633e:	b118      	cbz	r0, 8006348 <__swbuf_r+0x32>
 8006340:	f04f 37ff 	mov.w	r7, #4294967295
 8006344:	4638      	mov	r0, r7
 8006346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	6922      	ldr	r2, [r4, #16]
 800634c:	1a98      	subs	r0, r3, r2
 800634e:	6963      	ldr	r3, [r4, #20]
 8006350:	b2f6      	uxtb	r6, r6
 8006352:	4283      	cmp	r3, r0
 8006354:	4637      	mov	r7, r6
 8006356:	dc05      	bgt.n	8006364 <__swbuf_r+0x4e>
 8006358:	4621      	mov	r1, r4
 800635a:	4628      	mov	r0, r5
 800635c:	f001 fd98 	bl	8007e90 <_fflush_r>
 8006360:	2800      	cmp	r0, #0
 8006362:	d1ed      	bne.n	8006340 <__swbuf_r+0x2a>
 8006364:	68a3      	ldr	r3, [r4, #8]
 8006366:	3b01      	subs	r3, #1
 8006368:	60a3      	str	r3, [r4, #8]
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	6022      	str	r2, [r4, #0]
 8006370:	701e      	strb	r6, [r3, #0]
 8006372:	6962      	ldr	r2, [r4, #20]
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	429a      	cmp	r2, r3
 8006378:	d004      	beq.n	8006384 <__swbuf_r+0x6e>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	07db      	lsls	r3, r3, #31
 800637e:	d5e1      	bpl.n	8006344 <__swbuf_r+0x2e>
 8006380:	2e0a      	cmp	r6, #10
 8006382:	d1df      	bne.n	8006344 <__swbuf_r+0x2e>
 8006384:	4621      	mov	r1, r4
 8006386:	4628      	mov	r0, r5
 8006388:	f001 fd82 	bl	8007e90 <_fflush_r>
 800638c:	2800      	cmp	r0, #0
 800638e:	d0d9      	beq.n	8006344 <__swbuf_r+0x2e>
 8006390:	e7d6      	b.n	8006340 <__swbuf_r+0x2a>
	...

08006394 <__swsetup_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4b29      	ldr	r3, [pc, #164]	@ (800643c <__swsetup_r+0xa8>)
 8006398:	4605      	mov	r5, r0
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	460c      	mov	r4, r1
 800639e:	b118      	cbz	r0, 80063a8 <__swsetup_r+0x14>
 80063a0:	6a03      	ldr	r3, [r0, #32]
 80063a2:	b90b      	cbnz	r3, 80063a8 <__swsetup_r+0x14>
 80063a4:	f7ff fece 	bl	8006144 <__sinit>
 80063a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ac:	0719      	lsls	r1, r3, #28
 80063ae:	d422      	bmi.n	80063f6 <__swsetup_r+0x62>
 80063b0:	06da      	lsls	r2, r3, #27
 80063b2:	d407      	bmi.n	80063c4 <__swsetup_r+0x30>
 80063b4:	2209      	movs	r2, #9
 80063b6:	602a      	str	r2, [r5, #0]
 80063b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	f04f 30ff 	mov.w	r0, #4294967295
 80063c2:	e033      	b.n	800642c <__swsetup_r+0x98>
 80063c4:	0758      	lsls	r0, r3, #29
 80063c6:	d512      	bpl.n	80063ee <__swsetup_r+0x5a>
 80063c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063ca:	b141      	cbz	r1, 80063de <__swsetup_r+0x4a>
 80063cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063d0:	4299      	cmp	r1, r3
 80063d2:	d002      	beq.n	80063da <__swsetup_r+0x46>
 80063d4:	4628      	mov	r0, r5
 80063d6:	f000 ff13 	bl	8007200 <_free_r>
 80063da:	2300      	movs	r3, #0
 80063dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	2300      	movs	r3, #0
 80063e8:	6063      	str	r3, [r4, #4]
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	f043 0308 	orr.w	r3, r3, #8
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	6923      	ldr	r3, [r4, #16]
 80063f8:	b94b      	cbnz	r3, 800640e <__swsetup_r+0x7a>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006404:	d003      	beq.n	800640e <__swsetup_r+0x7a>
 8006406:	4621      	mov	r1, r4
 8006408:	4628      	mov	r0, r5
 800640a:	f001 fd8f 	bl	8007f2c <__smakebuf_r>
 800640e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006412:	f013 0201 	ands.w	r2, r3, #1
 8006416:	d00a      	beq.n	800642e <__swsetup_r+0x9a>
 8006418:	2200      	movs	r2, #0
 800641a:	60a2      	str	r2, [r4, #8]
 800641c:	6962      	ldr	r2, [r4, #20]
 800641e:	4252      	negs	r2, r2
 8006420:	61a2      	str	r2, [r4, #24]
 8006422:	6922      	ldr	r2, [r4, #16]
 8006424:	b942      	cbnz	r2, 8006438 <__swsetup_r+0xa4>
 8006426:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800642a:	d1c5      	bne.n	80063b8 <__swsetup_r+0x24>
 800642c:	bd38      	pop	{r3, r4, r5, pc}
 800642e:	0799      	lsls	r1, r3, #30
 8006430:	bf58      	it	pl
 8006432:	6962      	ldrpl	r2, [r4, #20]
 8006434:	60a2      	str	r2, [r4, #8]
 8006436:	e7f4      	b.n	8006422 <__swsetup_r+0x8e>
 8006438:	2000      	movs	r0, #0
 800643a:	e7f7      	b.n	800642c <__swsetup_r+0x98>
 800643c:	2000001c 	.word	0x2000001c

08006440 <memset>:
 8006440:	4402      	add	r2, r0
 8006442:	4603      	mov	r3, r0
 8006444:	4293      	cmp	r3, r2
 8006446:	d100      	bne.n	800644a <memset+0xa>
 8006448:	4770      	bx	lr
 800644a:	f803 1b01 	strb.w	r1, [r3], #1
 800644e:	e7f9      	b.n	8006444 <memset+0x4>

08006450 <strncmp>:
 8006450:	b510      	push	{r4, lr}
 8006452:	b16a      	cbz	r2, 8006470 <strncmp+0x20>
 8006454:	3901      	subs	r1, #1
 8006456:	1884      	adds	r4, r0, r2
 8006458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800645c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006460:	429a      	cmp	r2, r3
 8006462:	d103      	bne.n	800646c <strncmp+0x1c>
 8006464:	42a0      	cmp	r0, r4
 8006466:	d001      	beq.n	800646c <strncmp+0x1c>
 8006468:	2a00      	cmp	r2, #0
 800646a:	d1f5      	bne.n	8006458 <strncmp+0x8>
 800646c:	1ad0      	subs	r0, r2, r3
 800646e:	bd10      	pop	{r4, pc}
 8006470:	4610      	mov	r0, r2
 8006472:	e7fc      	b.n	800646e <strncmp+0x1e>

08006474 <_localeconv_r>:
 8006474:	4800      	ldr	r0, [pc, #0]	@ (8006478 <_localeconv_r+0x4>)
 8006476:	4770      	bx	lr
 8006478:	2000015c 	.word	0x2000015c

0800647c <_close_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d06      	ldr	r5, [pc, #24]	@ (8006498 <_close_r+0x1c>)
 8006480:	2300      	movs	r3, #0
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	602b      	str	r3, [r5, #0]
 8006488:	f7fc f896 	bl	80025b8 <_close>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_close_r+0x1a>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_close_r+0x1a>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	20000568 	.word	0x20000568

0800649c <_lseek_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d07      	ldr	r5, [pc, #28]	@ (80064bc <_lseek_r+0x20>)
 80064a0:	4604      	mov	r4, r0
 80064a2:	4608      	mov	r0, r1
 80064a4:	4611      	mov	r1, r2
 80064a6:	2200      	movs	r2, #0
 80064a8:	602a      	str	r2, [r5, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f7fc f8ab 	bl	8002606 <_lseek>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_lseek_r+0x1e>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_lseek_r+0x1e>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	20000568 	.word	0x20000568

080064c0 <_read_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4d07      	ldr	r5, [pc, #28]	@ (80064e0 <_read_r+0x20>)
 80064c4:	4604      	mov	r4, r0
 80064c6:	4608      	mov	r0, r1
 80064c8:	4611      	mov	r1, r2
 80064ca:	2200      	movs	r2, #0
 80064cc:	602a      	str	r2, [r5, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f7fc f839 	bl	8002546 <_read>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d102      	bne.n	80064de <_read_r+0x1e>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	b103      	cbz	r3, 80064de <_read_r+0x1e>
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	bd38      	pop	{r3, r4, r5, pc}
 80064e0:	20000568 	.word	0x20000568

080064e4 <_write_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4d07      	ldr	r5, [pc, #28]	@ (8006504 <_write_r+0x20>)
 80064e8:	4604      	mov	r4, r0
 80064ea:	4608      	mov	r0, r1
 80064ec:	4611      	mov	r1, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	602a      	str	r2, [r5, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f7fc f844 	bl	8002580 <_write>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_write_r+0x1e>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_write_r+0x1e>
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	20000568 	.word	0x20000568

08006508 <__errno>:
 8006508:	4b01      	ldr	r3, [pc, #4]	@ (8006510 <__errno+0x8>)
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	2000001c 	.word	0x2000001c

08006514 <__libc_init_array>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	4d0d      	ldr	r5, [pc, #52]	@ (800654c <__libc_init_array+0x38>)
 8006518:	4c0d      	ldr	r4, [pc, #52]	@ (8006550 <__libc_init_array+0x3c>)
 800651a:	1b64      	subs	r4, r4, r5
 800651c:	10a4      	asrs	r4, r4, #2
 800651e:	2600      	movs	r6, #0
 8006520:	42a6      	cmp	r6, r4
 8006522:	d109      	bne.n	8006538 <__libc_init_array+0x24>
 8006524:	4d0b      	ldr	r5, [pc, #44]	@ (8006554 <__libc_init_array+0x40>)
 8006526:	4c0c      	ldr	r4, [pc, #48]	@ (8006558 <__libc_init_array+0x44>)
 8006528:	f001 fe2c 	bl	8008184 <_init>
 800652c:	1b64      	subs	r4, r4, r5
 800652e:	10a4      	asrs	r4, r4, #2
 8006530:	2600      	movs	r6, #0
 8006532:	42a6      	cmp	r6, r4
 8006534:	d105      	bne.n	8006542 <__libc_init_array+0x2e>
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	f855 3b04 	ldr.w	r3, [r5], #4
 800653c:	4798      	blx	r3
 800653e:	3601      	adds	r6, #1
 8006540:	e7ee      	b.n	8006520 <__libc_init_array+0xc>
 8006542:	f855 3b04 	ldr.w	r3, [r5], #4
 8006546:	4798      	blx	r3
 8006548:	3601      	adds	r6, #1
 800654a:	e7f2      	b.n	8006532 <__libc_init_array+0x1e>
 800654c:	080085d0 	.word	0x080085d0
 8006550:	080085d0 	.word	0x080085d0
 8006554:	080085d0 	.word	0x080085d0
 8006558:	080085d4 	.word	0x080085d4

0800655c <__retarget_lock_init_recursive>:
 800655c:	4770      	bx	lr

0800655e <__retarget_lock_acquire_recursive>:
 800655e:	4770      	bx	lr

08006560 <__retarget_lock_release_recursive>:
 8006560:	4770      	bx	lr

08006562 <quorem>:
 8006562:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006566:	6903      	ldr	r3, [r0, #16]
 8006568:	690c      	ldr	r4, [r1, #16]
 800656a:	42a3      	cmp	r3, r4
 800656c:	4607      	mov	r7, r0
 800656e:	db7e      	blt.n	800666e <quorem+0x10c>
 8006570:	3c01      	subs	r4, #1
 8006572:	f101 0814 	add.w	r8, r1, #20
 8006576:	00a3      	lsls	r3, r4, #2
 8006578:	f100 0514 	add.w	r5, r0, #20
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800658c:	3301      	adds	r3, #1
 800658e:	429a      	cmp	r2, r3
 8006590:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006594:	fbb2 f6f3 	udiv	r6, r2, r3
 8006598:	d32e      	bcc.n	80065f8 <quorem+0x96>
 800659a:	f04f 0a00 	mov.w	sl, #0
 800659e:	46c4      	mov	ip, r8
 80065a0:	46ae      	mov	lr, r5
 80065a2:	46d3      	mov	fp, sl
 80065a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065a8:	b298      	uxth	r0, r3
 80065aa:	fb06 a000 	mla	r0, r6, r0, sl
 80065ae:	0c02      	lsrs	r2, r0, #16
 80065b0:	0c1b      	lsrs	r3, r3, #16
 80065b2:	fb06 2303 	mla	r3, r6, r3, r2
 80065b6:	f8de 2000 	ldr.w	r2, [lr]
 80065ba:	b280      	uxth	r0, r0
 80065bc:	b292      	uxth	r2, r2
 80065be:	1a12      	subs	r2, r2, r0
 80065c0:	445a      	add	r2, fp
 80065c2:	f8de 0000 	ldr.w	r0, [lr]
 80065c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80065d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80065d4:	b292      	uxth	r2, r2
 80065d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80065da:	45e1      	cmp	r9, ip
 80065dc:	f84e 2b04 	str.w	r2, [lr], #4
 80065e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80065e4:	d2de      	bcs.n	80065a4 <quorem+0x42>
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	58eb      	ldr	r3, [r5, r3]
 80065ea:	b92b      	cbnz	r3, 80065f8 <quorem+0x96>
 80065ec:	9b01      	ldr	r3, [sp, #4]
 80065ee:	3b04      	subs	r3, #4
 80065f0:	429d      	cmp	r5, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	d32f      	bcc.n	8006656 <quorem+0xf4>
 80065f6:	613c      	str	r4, [r7, #16]
 80065f8:	4638      	mov	r0, r7
 80065fa:	f001 f97b 	bl	80078f4 <__mcmp>
 80065fe:	2800      	cmp	r0, #0
 8006600:	db25      	blt.n	800664e <quorem+0xec>
 8006602:	4629      	mov	r1, r5
 8006604:	2000      	movs	r0, #0
 8006606:	f858 2b04 	ldr.w	r2, [r8], #4
 800660a:	f8d1 c000 	ldr.w	ip, [r1]
 800660e:	fa1f fe82 	uxth.w	lr, r2
 8006612:	fa1f f38c 	uxth.w	r3, ip
 8006616:	eba3 030e 	sub.w	r3, r3, lr
 800661a:	4403      	add	r3, r0
 800661c:	0c12      	lsrs	r2, r2, #16
 800661e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006622:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006626:	b29b      	uxth	r3, r3
 8006628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800662c:	45c1      	cmp	r9, r8
 800662e:	f841 3b04 	str.w	r3, [r1], #4
 8006632:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006636:	d2e6      	bcs.n	8006606 <quorem+0xa4>
 8006638:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800663c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006640:	b922      	cbnz	r2, 800664c <quorem+0xea>
 8006642:	3b04      	subs	r3, #4
 8006644:	429d      	cmp	r5, r3
 8006646:	461a      	mov	r2, r3
 8006648:	d30b      	bcc.n	8006662 <quorem+0x100>
 800664a:	613c      	str	r4, [r7, #16]
 800664c:	3601      	adds	r6, #1
 800664e:	4630      	mov	r0, r6
 8006650:	b003      	add	sp, #12
 8006652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	3b04      	subs	r3, #4
 800665a:	2a00      	cmp	r2, #0
 800665c:	d1cb      	bne.n	80065f6 <quorem+0x94>
 800665e:	3c01      	subs	r4, #1
 8006660:	e7c6      	b.n	80065f0 <quorem+0x8e>
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	3b04      	subs	r3, #4
 8006666:	2a00      	cmp	r2, #0
 8006668:	d1ef      	bne.n	800664a <quorem+0xe8>
 800666a:	3c01      	subs	r4, #1
 800666c:	e7ea      	b.n	8006644 <quorem+0xe2>
 800666e:	2000      	movs	r0, #0
 8006670:	e7ee      	b.n	8006650 <quorem+0xee>
 8006672:	0000      	movs	r0, r0
 8006674:	0000      	movs	r0, r0
	...

08006678 <_dtoa_r>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	69c7      	ldr	r7, [r0, #28]
 800667e:	b099      	sub	sp, #100	@ 0x64
 8006680:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006684:	ec55 4b10 	vmov	r4, r5, d0
 8006688:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800668a:	9109      	str	r1, [sp, #36]	@ 0x24
 800668c:	4683      	mov	fp, r0
 800668e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006690:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006692:	b97f      	cbnz	r7, 80066b4 <_dtoa_r+0x3c>
 8006694:	2010      	movs	r0, #16
 8006696:	f000 fdfd 	bl	8007294 <malloc>
 800669a:	4602      	mov	r2, r0
 800669c:	f8cb 001c 	str.w	r0, [fp, #28]
 80066a0:	b920      	cbnz	r0, 80066ac <_dtoa_r+0x34>
 80066a2:	4ba7      	ldr	r3, [pc, #668]	@ (8006940 <_dtoa_r+0x2c8>)
 80066a4:	21ef      	movs	r1, #239	@ 0xef
 80066a6:	48a7      	ldr	r0, [pc, #668]	@ (8006944 <_dtoa_r+0x2cc>)
 80066a8:	f001 fcbc 	bl	8008024 <__assert_func>
 80066ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80066b0:	6007      	str	r7, [r0, #0]
 80066b2:	60c7      	str	r7, [r0, #12]
 80066b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066b8:	6819      	ldr	r1, [r3, #0]
 80066ba:	b159      	cbz	r1, 80066d4 <_dtoa_r+0x5c>
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	604a      	str	r2, [r1, #4]
 80066c0:	2301      	movs	r3, #1
 80066c2:	4093      	lsls	r3, r2
 80066c4:	608b      	str	r3, [r1, #8]
 80066c6:	4658      	mov	r0, fp
 80066c8:	f000 feda 	bl	8007480 <_Bfree>
 80066cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	1e2b      	subs	r3, r5, #0
 80066d6:	bfb9      	ittee	lt
 80066d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80066dc:	9303      	strlt	r3, [sp, #12]
 80066de:	2300      	movge	r3, #0
 80066e0:	6033      	strge	r3, [r6, #0]
 80066e2:	9f03      	ldr	r7, [sp, #12]
 80066e4:	4b98      	ldr	r3, [pc, #608]	@ (8006948 <_dtoa_r+0x2d0>)
 80066e6:	bfbc      	itt	lt
 80066e8:	2201      	movlt	r2, #1
 80066ea:	6032      	strlt	r2, [r6, #0]
 80066ec:	43bb      	bics	r3, r7
 80066ee:	d112      	bne.n	8006716 <_dtoa_r+0x9e>
 80066f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80066f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066fc:	4323      	orrs	r3, r4
 80066fe:	f000 854d 	beq.w	800719c <_dtoa_r+0xb24>
 8006702:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006704:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800695c <_dtoa_r+0x2e4>
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 854f 	beq.w	80071ac <_dtoa_r+0xb34>
 800670e:	f10a 0303 	add.w	r3, sl, #3
 8006712:	f000 bd49 	b.w	80071a8 <_dtoa_r+0xb30>
 8006716:	ed9d 7b02 	vldr	d7, [sp, #8]
 800671a:	2200      	movs	r2, #0
 800671c:	ec51 0b17 	vmov	r0, r1, d7
 8006720:	2300      	movs	r3, #0
 8006722:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006726:	f7fa f9d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800672a:	4680      	mov	r8, r0
 800672c:	b158      	cbz	r0, 8006746 <_dtoa_r+0xce>
 800672e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006730:	2301      	movs	r3, #1
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006736:	b113      	cbz	r3, 800673e <_dtoa_r+0xc6>
 8006738:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800673a:	4b84      	ldr	r3, [pc, #528]	@ (800694c <_dtoa_r+0x2d4>)
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006960 <_dtoa_r+0x2e8>
 8006742:	f000 bd33 	b.w	80071ac <_dtoa_r+0xb34>
 8006746:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800674a:	aa16      	add	r2, sp, #88	@ 0x58
 800674c:	a917      	add	r1, sp, #92	@ 0x5c
 800674e:	4658      	mov	r0, fp
 8006750:	f001 f980 	bl	8007a54 <__d2b>
 8006754:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006758:	4681      	mov	r9, r0
 800675a:	2e00      	cmp	r6, #0
 800675c:	d077      	beq.n	800684e <_dtoa_r+0x1d6>
 800675e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006760:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800676c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006770:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006774:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006778:	4619      	mov	r1, r3
 800677a:	2200      	movs	r2, #0
 800677c:	4b74      	ldr	r3, [pc, #464]	@ (8006950 <_dtoa_r+0x2d8>)
 800677e:	f7f9 fd8b 	bl	8000298 <__aeabi_dsub>
 8006782:	a369      	add	r3, pc, #420	@ (adr r3, 8006928 <_dtoa_r+0x2b0>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f7f9 ff3e 	bl	8000608 <__aeabi_dmul>
 800678c:	a368      	add	r3, pc, #416	@ (adr r3, 8006930 <_dtoa_r+0x2b8>)
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	f7f9 fd83 	bl	800029c <__adddf3>
 8006796:	4604      	mov	r4, r0
 8006798:	4630      	mov	r0, r6
 800679a:	460d      	mov	r5, r1
 800679c:	f7f9 feca 	bl	8000534 <__aeabi_i2d>
 80067a0:	a365      	add	r3, pc, #404	@ (adr r3, 8006938 <_dtoa_r+0x2c0>)
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f7f9 ff2f 	bl	8000608 <__aeabi_dmul>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4620      	mov	r0, r4
 80067b0:	4629      	mov	r1, r5
 80067b2:	f7f9 fd73 	bl	800029c <__adddf3>
 80067b6:	4604      	mov	r4, r0
 80067b8:	460d      	mov	r5, r1
 80067ba:	f7fa f9d5 	bl	8000b68 <__aeabi_d2iz>
 80067be:	2200      	movs	r2, #0
 80067c0:	4607      	mov	r7, r0
 80067c2:	2300      	movs	r3, #0
 80067c4:	4620      	mov	r0, r4
 80067c6:	4629      	mov	r1, r5
 80067c8:	f7fa f990 	bl	8000aec <__aeabi_dcmplt>
 80067cc:	b140      	cbz	r0, 80067e0 <_dtoa_r+0x168>
 80067ce:	4638      	mov	r0, r7
 80067d0:	f7f9 feb0 	bl	8000534 <__aeabi_i2d>
 80067d4:	4622      	mov	r2, r4
 80067d6:	462b      	mov	r3, r5
 80067d8:	f7fa f97e 	bl	8000ad8 <__aeabi_dcmpeq>
 80067dc:	b900      	cbnz	r0, 80067e0 <_dtoa_r+0x168>
 80067de:	3f01      	subs	r7, #1
 80067e0:	2f16      	cmp	r7, #22
 80067e2:	d851      	bhi.n	8006888 <_dtoa_r+0x210>
 80067e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006954 <_dtoa_r+0x2dc>)
 80067e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067f2:	f7fa f97b 	bl	8000aec <__aeabi_dcmplt>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d048      	beq.n	800688c <_dtoa_r+0x214>
 80067fa:	3f01      	subs	r7, #1
 80067fc:	2300      	movs	r3, #0
 80067fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8006800:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006802:	1b9b      	subs	r3, r3, r6
 8006804:	1e5a      	subs	r2, r3, #1
 8006806:	bf44      	itt	mi
 8006808:	f1c3 0801 	rsbmi	r8, r3, #1
 800680c:	2300      	movmi	r3, #0
 800680e:	9208      	str	r2, [sp, #32]
 8006810:	bf54      	ite	pl
 8006812:	f04f 0800 	movpl.w	r8, #0
 8006816:	9308      	strmi	r3, [sp, #32]
 8006818:	2f00      	cmp	r7, #0
 800681a:	db39      	blt.n	8006890 <_dtoa_r+0x218>
 800681c:	9b08      	ldr	r3, [sp, #32]
 800681e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006820:	443b      	add	r3, r7
 8006822:	9308      	str	r3, [sp, #32]
 8006824:	2300      	movs	r3, #0
 8006826:	930a      	str	r3, [sp, #40]	@ 0x28
 8006828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800682a:	2b09      	cmp	r3, #9
 800682c:	d864      	bhi.n	80068f8 <_dtoa_r+0x280>
 800682e:	2b05      	cmp	r3, #5
 8006830:	bfc4      	itt	gt
 8006832:	3b04      	subgt	r3, #4
 8006834:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006838:	f1a3 0302 	sub.w	r3, r3, #2
 800683c:	bfcc      	ite	gt
 800683e:	2400      	movgt	r4, #0
 8006840:	2401      	movle	r4, #1
 8006842:	2b03      	cmp	r3, #3
 8006844:	d863      	bhi.n	800690e <_dtoa_r+0x296>
 8006846:	e8df f003 	tbb	[pc, r3]
 800684a:	372a      	.short	0x372a
 800684c:	5535      	.short	0x5535
 800684e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006852:	441e      	add	r6, r3
 8006854:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006858:	2b20      	cmp	r3, #32
 800685a:	bfc1      	itttt	gt
 800685c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006860:	409f      	lslgt	r7, r3
 8006862:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006866:	fa24 f303 	lsrgt.w	r3, r4, r3
 800686a:	bfd6      	itet	le
 800686c:	f1c3 0320 	rsble	r3, r3, #32
 8006870:	ea47 0003 	orrgt.w	r0, r7, r3
 8006874:	fa04 f003 	lslle.w	r0, r4, r3
 8006878:	f7f9 fe4c 	bl	8000514 <__aeabi_ui2d>
 800687c:	2201      	movs	r2, #1
 800687e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006882:	3e01      	subs	r6, #1
 8006884:	9214      	str	r2, [sp, #80]	@ 0x50
 8006886:	e777      	b.n	8006778 <_dtoa_r+0x100>
 8006888:	2301      	movs	r3, #1
 800688a:	e7b8      	b.n	80067fe <_dtoa_r+0x186>
 800688c:	9012      	str	r0, [sp, #72]	@ 0x48
 800688e:	e7b7      	b.n	8006800 <_dtoa_r+0x188>
 8006890:	427b      	negs	r3, r7
 8006892:	930a      	str	r3, [sp, #40]	@ 0x28
 8006894:	2300      	movs	r3, #0
 8006896:	eba8 0807 	sub.w	r8, r8, r7
 800689a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800689c:	e7c4      	b.n	8006828 <_dtoa_r+0x1b0>
 800689e:	2300      	movs	r3, #0
 80068a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	dc35      	bgt.n	8006914 <_dtoa_r+0x29c>
 80068a8:	2301      	movs	r3, #1
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	9307      	str	r3, [sp, #28]
 80068ae:	461a      	mov	r2, r3
 80068b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80068b2:	e00b      	b.n	80068cc <_dtoa_r+0x254>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e7f3      	b.n	80068a0 <_dtoa_r+0x228>
 80068b8:	2300      	movs	r3, #0
 80068ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	3301      	adds	r3, #1
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	9307      	str	r3, [sp, #28]
 80068c8:	bfb8      	it	lt
 80068ca:	2301      	movlt	r3, #1
 80068cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80068d0:	2100      	movs	r1, #0
 80068d2:	2204      	movs	r2, #4
 80068d4:	f102 0514 	add.w	r5, r2, #20
 80068d8:	429d      	cmp	r5, r3
 80068da:	d91f      	bls.n	800691c <_dtoa_r+0x2a4>
 80068dc:	6041      	str	r1, [r0, #4]
 80068de:	4658      	mov	r0, fp
 80068e0:	f000 fd8e 	bl	8007400 <_Balloc>
 80068e4:	4682      	mov	sl, r0
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d13c      	bne.n	8006964 <_dtoa_r+0x2ec>
 80068ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006958 <_dtoa_r+0x2e0>)
 80068ec:	4602      	mov	r2, r0
 80068ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80068f2:	e6d8      	b.n	80066a6 <_dtoa_r+0x2e>
 80068f4:	2301      	movs	r3, #1
 80068f6:	e7e0      	b.n	80068ba <_dtoa_r+0x242>
 80068f8:	2401      	movs	r4, #1
 80068fa:	2300      	movs	r3, #0
 80068fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80068fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006900:	f04f 33ff 	mov.w	r3, #4294967295
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	9307      	str	r3, [sp, #28]
 8006908:	2200      	movs	r2, #0
 800690a:	2312      	movs	r3, #18
 800690c:	e7d0      	b.n	80068b0 <_dtoa_r+0x238>
 800690e:	2301      	movs	r3, #1
 8006910:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006912:	e7f5      	b.n	8006900 <_dtoa_r+0x288>
 8006914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	9307      	str	r3, [sp, #28]
 800691a:	e7d7      	b.n	80068cc <_dtoa_r+0x254>
 800691c:	3101      	adds	r1, #1
 800691e:	0052      	lsls	r2, r2, #1
 8006920:	e7d8      	b.n	80068d4 <_dtoa_r+0x25c>
 8006922:	bf00      	nop
 8006924:	f3af 8000 	nop.w
 8006928:	636f4361 	.word	0x636f4361
 800692c:	3fd287a7 	.word	0x3fd287a7
 8006930:	8b60c8b3 	.word	0x8b60c8b3
 8006934:	3fc68a28 	.word	0x3fc68a28
 8006938:	509f79fb 	.word	0x509f79fb
 800693c:	3fd34413 	.word	0x3fd34413
 8006940:	08008295 	.word	0x08008295
 8006944:	080082ac 	.word	0x080082ac
 8006948:	7ff00000 	.word	0x7ff00000
 800694c:	08008265 	.word	0x08008265
 8006950:	3ff80000 	.word	0x3ff80000
 8006954:	080083a8 	.word	0x080083a8
 8006958:	08008304 	.word	0x08008304
 800695c:	08008291 	.word	0x08008291
 8006960:	08008264 	.word	0x08008264
 8006964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006968:	6018      	str	r0, [r3, #0]
 800696a:	9b07      	ldr	r3, [sp, #28]
 800696c:	2b0e      	cmp	r3, #14
 800696e:	f200 80a4 	bhi.w	8006aba <_dtoa_r+0x442>
 8006972:	2c00      	cmp	r4, #0
 8006974:	f000 80a1 	beq.w	8006aba <_dtoa_r+0x442>
 8006978:	2f00      	cmp	r7, #0
 800697a:	dd33      	ble.n	80069e4 <_dtoa_r+0x36c>
 800697c:	4bad      	ldr	r3, [pc, #692]	@ (8006c34 <_dtoa_r+0x5bc>)
 800697e:	f007 020f 	and.w	r2, r7, #15
 8006982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006986:	ed93 7b00 	vldr	d7, [r3]
 800698a:	05f8      	lsls	r0, r7, #23
 800698c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006990:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006994:	d516      	bpl.n	80069c4 <_dtoa_r+0x34c>
 8006996:	4ba8      	ldr	r3, [pc, #672]	@ (8006c38 <_dtoa_r+0x5c0>)
 8006998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800699c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069a0:	f7f9 ff5c 	bl	800085c <__aeabi_ddiv>
 80069a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a8:	f004 040f 	and.w	r4, r4, #15
 80069ac:	2603      	movs	r6, #3
 80069ae:	4da2      	ldr	r5, [pc, #648]	@ (8006c38 <_dtoa_r+0x5c0>)
 80069b0:	b954      	cbnz	r4, 80069c8 <_dtoa_r+0x350>
 80069b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ba:	f7f9 ff4f 	bl	800085c <__aeabi_ddiv>
 80069be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069c2:	e028      	b.n	8006a16 <_dtoa_r+0x39e>
 80069c4:	2602      	movs	r6, #2
 80069c6:	e7f2      	b.n	80069ae <_dtoa_r+0x336>
 80069c8:	07e1      	lsls	r1, r4, #31
 80069ca:	d508      	bpl.n	80069de <_dtoa_r+0x366>
 80069cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069d4:	f7f9 fe18 	bl	8000608 <__aeabi_dmul>
 80069d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069dc:	3601      	adds	r6, #1
 80069de:	1064      	asrs	r4, r4, #1
 80069e0:	3508      	adds	r5, #8
 80069e2:	e7e5      	b.n	80069b0 <_dtoa_r+0x338>
 80069e4:	f000 80d2 	beq.w	8006b8c <_dtoa_r+0x514>
 80069e8:	427c      	negs	r4, r7
 80069ea:	4b92      	ldr	r3, [pc, #584]	@ (8006c34 <_dtoa_r+0x5bc>)
 80069ec:	4d92      	ldr	r5, [pc, #584]	@ (8006c38 <_dtoa_r+0x5c0>)
 80069ee:	f004 020f 	and.w	r2, r4, #15
 80069f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069fe:	f7f9 fe03 	bl	8000608 <__aeabi_dmul>
 8006a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a06:	1124      	asrs	r4, r4, #4
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2602      	movs	r6, #2
 8006a0c:	2c00      	cmp	r4, #0
 8006a0e:	f040 80b2 	bne.w	8006b76 <_dtoa_r+0x4fe>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1d3      	bne.n	80069be <_dtoa_r+0x346>
 8006a16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 80b7 	beq.w	8006b90 <_dtoa_r+0x518>
 8006a22:	4b86      	ldr	r3, [pc, #536]	@ (8006c3c <_dtoa_r+0x5c4>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	4620      	mov	r0, r4
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f7fa f85f 	bl	8000aec <__aeabi_dcmplt>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f000 80ae 	beq.w	8006b90 <_dtoa_r+0x518>
 8006a34:	9b07      	ldr	r3, [sp, #28]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 80aa 	beq.w	8006b90 <_dtoa_r+0x518>
 8006a3c:	9b00      	ldr	r3, [sp, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dd37      	ble.n	8006ab2 <_dtoa_r+0x43a>
 8006a42:	1e7b      	subs	r3, r7, #1
 8006a44:	9304      	str	r3, [sp, #16]
 8006a46:	4620      	mov	r0, r4
 8006a48:	4b7d      	ldr	r3, [pc, #500]	@ (8006c40 <_dtoa_r+0x5c8>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	f7f9 fddb 	bl	8000608 <__aeabi_dmul>
 8006a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a56:	9c00      	ldr	r4, [sp, #0]
 8006a58:	3601      	adds	r6, #1
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7f9 fd6a 	bl	8000534 <__aeabi_i2d>
 8006a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a64:	f7f9 fdd0 	bl	8000608 <__aeabi_dmul>
 8006a68:	4b76      	ldr	r3, [pc, #472]	@ (8006c44 <_dtoa_r+0x5cc>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f7f9 fc16 	bl	800029c <__adddf3>
 8006a70:	4605      	mov	r5, r0
 8006a72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a76:	2c00      	cmp	r4, #0
 8006a78:	f040 808d 	bne.w	8006b96 <_dtoa_r+0x51e>
 8006a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a80:	4b71      	ldr	r3, [pc, #452]	@ (8006c48 <_dtoa_r+0x5d0>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	f7f9 fc08 	bl	8000298 <__aeabi_dsub>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a90:	462a      	mov	r2, r5
 8006a92:	4633      	mov	r3, r6
 8006a94:	f7fa f848 	bl	8000b28 <__aeabi_dcmpgt>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	f040 828b 	bne.w	8006fb4 <_dtoa_r+0x93c>
 8006a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa2:	462a      	mov	r2, r5
 8006aa4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006aa8:	f7fa f820 	bl	8000aec <__aeabi_dcmplt>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f040 8128 	bne.w	8006d02 <_dtoa_r+0x68a>
 8006ab2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ab6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006aba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f2c0 815a 	blt.w	8006d76 <_dtoa_r+0x6fe>
 8006ac2:	2f0e      	cmp	r7, #14
 8006ac4:	f300 8157 	bgt.w	8006d76 <_dtoa_r+0x6fe>
 8006ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8006c34 <_dtoa_r+0x5bc>)
 8006aca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ace:	ed93 7b00 	vldr	d7, [r3]
 8006ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	ed8d 7b00 	vstr	d7, [sp]
 8006ada:	da03      	bge.n	8006ae4 <_dtoa_r+0x46c>
 8006adc:	9b07      	ldr	r3, [sp, #28]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f340 8101 	ble.w	8006ce6 <_dtoa_r+0x66e>
 8006ae4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ae8:	4656      	mov	r6, sl
 8006aea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aee:	4620      	mov	r0, r4
 8006af0:	4629      	mov	r1, r5
 8006af2:	f7f9 feb3 	bl	800085c <__aeabi_ddiv>
 8006af6:	f7fa f837 	bl	8000b68 <__aeabi_d2iz>
 8006afa:	4680      	mov	r8, r0
 8006afc:	f7f9 fd1a 	bl	8000534 <__aeabi_i2d>
 8006b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b04:	f7f9 fd80 	bl	8000608 <__aeabi_dmul>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	4629      	mov	r1, r5
 8006b10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b14:	f7f9 fbc0 	bl	8000298 <__aeabi_dsub>
 8006b18:	f806 4b01 	strb.w	r4, [r6], #1
 8006b1c:	9d07      	ldr	r5, [sp, #28]
 8006b1e:	eba6 040a 	sub.w	r4, r6, sl
 8006b22:	42a5      	cmp	r5, r4
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	f040 8117 	bne.w	8006d5a <_dtoa_r+0x6e2>
 8006b2c:	f7f9 fbb6 	bl	800029c <__adddf3>
 8006b30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b34:	4604      	mov	r4, r0
 8006b36:	460d      	mov	r5, r1
 8006b38:	f7f9 fff6 	bl	8000b28 <__aeabi_dcmpgt>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	f040 80f9 	bne.w	8006d34 <_dtoa_r+0x6bc>
 8006b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7f9 ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b4e:	b118      	cbz	r0, 8006b58 <_dtoa_r+0x4e0>
 8006b50:	f018 0f01 	tst.w	r8, #1
 8006b54:	f040 80ee 	bne.w	8006d34 <_dtoa_r+0x6bc>
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4658      	mov	r0, fp
 8006b5c:	f000 fc90 	bl	8007480 <_Bfree>
 8006b60:	2300      	movs	r3, #0
 8006b62:	7033      	strb	r3, [r6, #0]
 8006b64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b66:	3701      	adds	r7, #1
 8006b68:	601f      	str	r7, [r3, #0]
 8006b6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 831d 	beq.w	80071ac <_dtoa_r+0xb34>
 8006b72:	601e      	str	r6, [r3, #0]
 8006b74:	e31a      	b.n	80071ac <_dtoa_r+0xb34>
 8006b76:	07e2      	lsls	r2, r4, #31
 8006b78:	d505      	bpl.n	8006b86 <_dtoa_r+0x50e>
 8006b7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b7e:	f7f9 fd43 	bl	8000608 <__aeabi_dmul>
 8006b82:	3601      	adds	r6, #1
 8006b84:	2301      	movs	r3, #1
 8006b86:	1064      	asrs	r4, r4, #1
 8006b88:	3508      	adds	r5, #8
 8006b8a:	e73f      	b.n	8006a0c <_dtoa_r+0x394>
 8006b8c:	2602      	movs	r6, #2
 8006b8e:	e742      	b.n	8006a16 <_dtoa_r+0x39e>
 8006b90:	9c07      	ldr	r4, [sp, #28]
 8006b92:	9704      	str	r7, [sp, #16]
 8006b94:	e761      	b.n	8006a5a <_dtoa_r+0x3e2>
 8006b96:	4b27      	ldr	r3, [pc, #156]	@ (8006c34 <_dtoa_r+0x5bc>)
 8006b98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ba2:	4454      	add	r4, sl
 8006ba4:	2900      	cmp	r1, #0
 8006ba6:	d053      	beq.n	8006c50 <_dtoa_r+0x5d8>
 8006ba8:	4928      	ldr	r1, [pc, #160]	@ (8006c4c <_dtoa_r+0x5d4>)
 8006baa:	2000      	movs	r0, #0
 8006bac:	f7f9 fe56 	bl	800085c <__aeabi_ddiv>
 8006bb0:	4633      	mov	r3, r6
 8006bb2:	462a      	mov	r2, r5
 8006bb4:	f7f9 fb70 	bl	8000298 <__aeabi_dsub>
 8006bb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006bbc:	4656      	mov	r6, sl
 8006bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bc2:	f7f9 ffd1 	bl	8000b68 <__aeabi_d2iz>
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	f7f9 fcb4 	bl	8000534 <__aeabi_i2d>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bd4:	f7f9 fb60 	bl	8000298 <__aeabi_dsub>
 8006bd8:	3530      	adds	r5, #48	@ 0x30
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006be2:	f806 5b01 	strb.w	r5, [r6], #1
 8006be6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bea:	f7f9 ff7f 	bl	8000aec <__aeabi_dcmplt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d171      	bne.n	8006cd6 <_dtoa_r+0x65e>
 8006bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bf6:	4911      	ldr	r1, [pc, #68]	@ (8006c3c <_dtoa_r+0x5c4>)
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f7f9 fb4d 	bl	8000298 <__aeabi_dsub>
 8006bfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c02:	f7f9 ff73 	bl	8000aec <__aeabi_dcmplt>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f040 8095 	bne.w	8006d36 <_dtoa_r+0x6be>
 8006c0c:	42a6      	cmp	r6, r4
 8006c0e:	f43f af50 	beq.w	8006ab2 <_dtoa_r+0x43a>
 8006c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c16:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <_dtoa_r+0x5c8>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f7f9 fcf5 	bl	8000608 <__aeabi_dmul>
 8006c1e:	4b08      	ldr	r3, [pc, #32]	@ (8006c40 <_dtoa_r+0x5c8>)
 8006c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c24:	2200      	movs	r2, #0
 8006c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c2a:	f7f9 fced 	bl	8000608 <__aeabi_dmul>
 8006c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c32:	e7c4      	b.n	8006bbe <_dtoa_r+0x546>
 8006c34:	080083a8 	.word	0x080083a8
 8006c38:	08008380 	.word	0x08008380
 8006c3c:	3ff00000 	.word	0x3ff00000
 8006c40:	40240000 	.word	0x40240000
 8006c44:	401c0000 	.word	0x401c0000
 8006c48:	40140000 	.word	0x40140000
 8006c4c:	3fe00000 	.word	0x3fe00000
 8006c50:	4631      	mov	r1, r6
 8006c52:	4628      	mov	r0, r5
 8006c54:	f7f9 fcd8 	bl	8000608 <__aeabi_dmul>
 8006c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006c5e:	4656      	mov	r6, sl
 8006c60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c64:	f7f9 ff80 	bl	8000b68 <__aeabi_d2iz>
 8006c68:	4605      	mov	r5, r0
 8006c6a:	f7f9 fc63 	bl	8000534 <__aeabi_i2d>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c76:	f7f9 fb0f 	bl	8000298 <__aeabi_dsub>
 8006c7a:	3530      	adds	r5, #48	@ 0x30
 8006c7c:	f806 5b01 	strb.w	r5, [r6], #1
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	42a6      	cmp	r6, r4
 8006c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	d124      	bne.n	8006cda <_dtoa_r+0x662>
 8006c90:	4bac      	ldr	r3, [pc, #688]	@ (8006f44 <_dtoa_r+0x8cc>)
 8006c92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c96:	f7f9 fb01 	bl	800029c <__adddf3>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ca2:	f7f9 ff41 	bl	8000b28 <__aeabi_dcmpgt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d145      	bne.n	8006d36 <_dtoa_r+0x6be>
 8006caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cae:	49a5      	ldr	r1, [pc, #660]	@ (8006f44 <_dtoa_r+0x8cc>)
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	f7f9 faf1 	bl	8000298 <__aeabi_dsub>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cbe:	f7f9 ff15 	bl	8000aec <__aeabi_dcmplt>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	f43f aef5 	beq.w	8006ab2 <_dtoa_r+0x43a>
 8006cc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006cca:	1e73      	subs	r3, r6, #1
 8006ccc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006cce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006cd2:	2b30      	cmp	r3, #48	@ 0x30
 8006cd4:	d0f8      	beq.n	8006cc8 <_dtoa_r+0x650>
 8006cd6:	9f04      	ldr	r7, [sp, #16]
 8006cd8:	e73e      	b.n	8006b58 <_dtoa_r+0x4e0>
 8006cda:	4b9b      	ldr	r3, [pc, #620]	@ (8006f48 <_dtoa_r+0x8d0>)
 8006cdc:	f7f9 fc94 	bl	8000608 <__aeabi_dmul>
 8006ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce4:	e7bc      	b.n	8006c60 <_dtoa_r+0x5e8>
 8006ce6:	d10c      	bne.n	8006d02 <_dtoa_r+0x68a>
 8006ce8:	4b98      	ldr	r3, [pc, #608]	@ (8006f4c <_dtoa_r+0x8d4>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cf0:	f7f9 fc8a 	bl	8000608 <__aeabi_dmul>
 8006cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cf8:	f7f9 ff0c 	bl	8000b14 <__aeabi_dcmpge>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	f000 8157 	beq.w	8006fb0 <_dtoa_r+0x938>
 8006d02:	2400      	movs	r4, #0
 8006d04:	4625      	mov	r5, r4
 8006d06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	9304      	str	r3, [sp, #16]
 8006d0c:	4656      	mov	r6, sl
 8006d0e:	2700      	movs	r7, #0
 8006d10:	4621      	mov	r1, r4
 8006d12:	4658      	mov	r0, fp
 8006d14:	f000 fbb4 	bl	8007480 <_Bfree>
 8006d18:	2d00      	cmp	r5, #0
 8006d1a:	d0dc      	beq.n	8006cd6 <_dtoa_r+0x65e>
 8006d1c:	b12f      	cbz	r7, 8006d2a <_dtoa_r+0x6b2>
 8006d1e:	42af      	cmp	r7, r5
 8006d20:	d003      	beq.n	8006d2a <_dtoa_r+0x6b2>
 8006d22:	4639      	mov	r1, r7
 8006d24:	4658      	mov	r0, fp
 8006d26:	f000 fbab 	bl	8007480 <_Bfree>
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	4658      	mov	r0, fp
 8006d2e:	f000 fba7 	bl	8007480 <_Bfree>
 8006d32:	e7d0      	b.n	8006cd6 <_dtoa_r+0x65e>
 8006d34:	9704      	str	r7, [sp, #16]
 8006d36:	4633      	mov	r3, r6
 8006d38:	461e      	mov	r6, r3
 8006d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d3e:	2a39      	cmp	r2, #57	@ 0x39
 8006d40:	d107      	bne.n	8006d52 <_dtoa_r+0x6da>
 8006d42:	459a      	cmp	sl, r3
 8006d44:	d1f8      	bne.n	8006d38 <_dtoa_r+0x6c0>
 8006d46:	9a04      	ldr	r2, [sp, #16]
 8006d48:	3201      	adds	r2, #1
 8006d4a:	9204      	str	r2, [sp, #16]
 8006d4c:	2230      	movs	r2, #48	@ 0x30
 8006d4e:	f88a 2000 	strb.w	r2, [sl]
 8006d52:	781a      	ldrb	r2, [r3, #0]
 8006d54:	3201      	adds	r2, #1
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e7bd      	b.n	8006cd6 <_dtoa_r+0x65e>
 8006d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8006f48 <_dtoa_r+0x8d0>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f7f9 fc53 	bl	8000608 <__aeabi_dmul>
 8006d62:	2200      	movs	r2, #0
 8006d64:	2300      	movs	r3, #0
 8006d66:	4604      	mov	r4, r0
 8006d68:	460d      	mov	r5, r1
 8006d6a:	f7f9 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f43f aebb 	beq.w	8006aea <_dtoa_r+0x472>
 8006d74:	e6f0      	b.n	8006b58 <_dtoa_r+0x4e0>
 8006d76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d78:	2a00      	cmp	r2, #0
 8006d7a:	f000 80db 	beq.w	8006f34 <_dtoa_r+0x8bc>
 8006d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d80:	2a01      	cmp	r2, #1
 8006d82:	f300 80bf 	bgt.w	8006f04 <_dtoa_r+0x88c>
 8006d86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006d88:	2a00      	cmp	r2, #0
 8006d8a:	f000 80b7 	beq.w	8006efc <_dtoa_r+0x884>
 8006d8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006d92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d94:	4646      	mov	r6, r8
 8006d96:	9a08      	ldr	r2, [sp, #32]
 8006d98:	2101      	movs	r1, #1
 8006d9a:	441a      	add	r2, r3
 8006d9c:	4658      	mov	r0, fp
 8006d9e:	4498      	add	r8, r3
 8006da0:	9208      	str	r2, [sp, #32]
 8006da2:	f000 fc21 	bl	80075e8 <__i2b>
 8006da6:	4605      	mov	r5, r0
 8006da8:	b15e      	cbz	r6, 8006dc2 <_dtoa_r+0x74a>
 8006daa:	9b08      	ldr	r3, [sp, #32]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dd08      	ble.n	8006dc2 <_dtoa_r+0x74a>
 8006db0:	42b3      	cmp	r3, r6
 8006db2:	9a08      	ldr	r2, [sp, #32]
 8006db4:	bfa8      	it	ge
 8006db6:	4633      	movge	r3, r6
 8006db8:	eba8 0803 	sub.w	r8, r8, r3
 8006dbc:	1af6      	subs	r6, r6, r3
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	9308      	str	r3, [sp, #32]
 8006dc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dc4:	b1f3      	cbz	r3, 8006e04 <_dtoa_r+0x78c>
 8006dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 80b7 	beq.w	8006f3c <_dtoa_r+0x8c4>
 8006dce:	b18c      	cbz	r4, 8006df4 <_dtoa_r+0x77c>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	4658      	mov	r0, fp
 8006dd6:	f000 fcc7 	bl	8007768 <__pow5mult>
 8006dda:	464a      	mov	r2, r9
 8006ddc:	4601      	mov	r1, r0
 8006dde:	4605      	mov	r5, r0
 8006de0:	4658      	mov	r0, fp
 8006de2:	f000 fc17 	bl	8007614 <__multiply>
 8006de6:	4649      	mov	r1, r9
 8006de8:	9004      	str	r0, [sp, #16]
 8006dea:	4658      	mov	r0, fp
 8006dec:	f000 fb48 	bl	8007480 <_Bfree>
 8006df0:	9b04      	ldr	r3, [sp, #16]
 8006df2:	4699      	mov	r9, r3
 8006df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006df6:	1b1a      	subs	r2, r3, r4
 8006df8:	d004      	beq.n	8006e04 <_dtoa_r+0x78c>
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	4658      	mov	r0, fp
 8006dfe:	f000 fcb3 	bl	8007768 <__pow5mult>
 8006e02:	4681      	mov	r9, r0
 8006e04:	2101      	movs	r1, #1
 8006e06:	4658      	mov	r0, fp
 8006e08:	f000 fbee 	bl	80075e8 <__i2b>
 8006e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e0e:	4604      	mov	r4, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 81cf 	beq.w	80071b4 <_dtoa_r+0xb3c>
 8006e16:	461a      	mov	r2, r3
 8006e18:	4601      	mov	r1, r0
 8006e1a:	4658      	mov	r0, fp
 8006e1c:	f000 fca4 	bl	8007768 <__pow5mult>
 8006e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	4604      	mov	r4, r0
 8006e26:	f300 8095 	bgt.w	8006f54 <_dtoa_r+0x8dc>
 8006e2a:	9b02      	ldr	r3, [sp, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f040 8087 	bne.w	8006f40 <_dtoa_r+0x8c8>
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f040 8089 	bne.w	8006f50 <_dtoa_r+0x8d8>
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e44:	0d1b      	lsrs	r3, r3, #20
 8006e46:	051b      	lsls	r3, r3, #20
 8006e48:	b12b      	cbz	r3, 8006e56 <_dtoa_r+0x7de>
 8006e4a:	9b08      	ldr	r3, [sp, #32]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	9308      	str	r3, [sp, #32]
 8006e50:	f108 0801 	add.w	r8, r8, #1
 8006e54:	2301      	movs	r3, #1
 8006e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 81b0 	beq.w	80071c0 <_dtoa_r+0xb48>
 8006e60:	6923      	ldr	r3, [r4, #16]
 8006e62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e66:	6918      	ldr	r0, [r3, #16]
 8006e68:	f000 fb72 	bl	8007550 <__hi0bits>
 8006e6c:	f1c0 0020 	rsb	r0, r0, #32
 8006e70:	9b08      	ldr	r3, [sp, #32]
 8006e72:	4418      	add	r0, r3
 8006e74:	f010 001f 	ands.w	r0, r0, #31
 8006e78:	d077      	beq.n	8006f6a <_dtoa_r+0x8f2>
 8006e7a:	f1c0 0320 	rsb	r3, r0, #32
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	dd6b      	ble.n	8006f5a <_dtoa_r+0x8e2>
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	f1c0 001c 	rsb	r0, r0, #28
 8006e88:	4403      	add	r3, r0
 8006e8a:	4480      	add	r8, r0
 8006e8c:	4406      	add	r6, r0
 8006e8e:	9308      	str	r3, [sp, #32]
 8006e90:	f1b8 0f00 	cmp.w	r8, #0
 8006e94:	dd05      	ble.n	8006ea2 <_dtoa_r+0x82a>
 8006e96:	4649      	mov	r1, r9
 8006e98:	4642      	mov	r2, r8
 8006e9a:	4658      	mov	r0, fp
 8006e9c:	f000 fcbe 	bl	800781c <__lshift>
 8006ea0:	4681      	mov	r9, r0
 8006ea2:	9b08      	ldr	r3, [sp, #32]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dd05      	ble.n	8006eb4 <_dtoa_r+0x83c>
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	461a      	mov	r2, r3
 8006eac:	4658      	mov	r0, fp
 8006eae:	f000 fcb5 	bl	800781c <__lshift>
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d059      	beq.n	8006f6e <_dtoa_r+0x8f6>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4648      	mov	r0, r9
 8006ebe:	f000 fd19 	bl	80078f4 <__mcmp>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	da53      	bge.n	8006f6e <_dtoa_r+0x8f6>
 8006ec6:	1e7b      	subs	r3, r7, #1
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	4649      	mov	r1, r9
 8006ecc:	2300      	movs	r3, #0
 8006ece:	220a      	movs	r2, #10
 8006ed0:	4658      	mov	r0, fp
 8006ed2:	f000 faf7 	bl	80074c4 <__multadd>
 8006ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ed8:	4681      	mov	r9, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 8172 	beq.w	80071c4 <_dtoa_r+0xb4c>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	220a      	movs	r2, #10
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	f000 faec 	bl	80074c4 <__multadd>
 8006eec:	9b00      	ldr	r3, [sp, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	dc67      	bgt.n	8006fc4 <_dtoa_r+0x94c>
 8006ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	dc41      	bgt.n	8006f7e <_dtoa_r+0x906>
 8006efa:	e063      	b.n	8006fc4 <_dtoa_r+0x94c>
 8006efc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006efe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f02:	e746      	b.n	8006d92 <_dtoa_r+0x71a>
 8006f04:	9b07      	ldr	r3, [sp, #28]
 8006f06:	1e5c      	subs	r4, r3, #1
 8006f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	bfbf      	itttt	lt
 8006f0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006f10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006f12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006f14:	1ae3      	sublt	r3, r4, r3
 8006f16:	bfb4      	ite	lt
 8006f18:	18d2      	addlt	r2, r2, r3
 8006f1a:	1b1c      	subge	r4, r3, r4
 8006f1c:	9b07      	ldr	r3, [sp, #28]
 8006f1e:	bfbc      	itt	lt
 8006f20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006f22:	2400      	movlt	r4, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bfb5      	itete	lt
 8006f28:	eba8 0603 	sublt.w	r6, r8, r3
 8006f2c:	9b07      	ldrge	r3, [sp, #28]
 8006f2e:	2300      	movlt	r3, #0
 8006f30:	4646      	movge	r6, r8
 8006f32:	e730      	b.n	8006d96 <_dtoa_r+0x71e>
 8006f34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006f38:	4646      	mov	r6, r8
 8006f3a:	e735      	b.n	8006da8 <_dtoa_r+0x730>
 8006f3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f3e:	e75c      	b.n	8006dfa <_dtoa_r+0x782>
 8006f40:	2300      	movs	r3, #0
 8006f42:	e788      	b.n	8006e56 <_dtoa_r+0x7de>
 8006f44:	3fe00000 	.word	0x3fe00000
 8006f48:	40240000 	.word	0x40240000
 8006f4c:	40140000 	.word	0x40140000
 8006f50:	9b02      	ldr	r3, [sp, #8]
 8006f52:	e780      	b.n	8006e56 <_dtoa_r+0x7de>
 8006f54:	2300      	movs	r3, #0
 8006f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f58:	e782      	b.n	8006e60 <_dtoa_r+0x7e8>
 8006f5a:	d099      	beq.n	8006e90 <_dtoa_r+0x818>
 8006f5c:	9a08      	ldr	r2, [sp, #32]
 8006f5e:	331c      	adds	r3, #28
 8006f60:	441a      	add	r2, r3
 8006f62:	4498      	add	r8, r3
 8006f64:	441e      	add	r6, r3
 8006f66:	9208      	str	r2, [sp, #32]
 8006f68:	e792      	b.n	8006e90 <_dtoa_r+0x818>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	e7f6      	b.n	8006f5c <_dtoa_r+0x8e4>
 8006f6e:	9b07      	ldr	r3, [sp, #28]
 8006f70:	9704      	str	r7, [sp, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dc20      	bgt.n	8006fb8 <_dtoa_r+0x940>
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	dd1e      	ble.n	8006fbc <_dtoa_r+0x944>
 8006f7e:	9b00      	ldr	r3, [sp, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f47f aec0 	bne.w	8006d06 <_dtoa_r+0x68e>
 8006f86:	4621      	mov	r1, r4
 8006f88:	2205      	movs	r2, #5
 8006f8a:	4658      	mov	r0, fp
 8006f8c:	f000 fa9a 	bl	80074c4 <__multadd>
 8006f90:	4601      	mov	r1, r0
 8006f92:	4604      	mov	r4, r0
 8006f94:	4648      	mov	r0, r9
 8006f96:	f000 fcad 	bl	80078f4 <__mcmp>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	f77f aeb3 	ble.w	8006d06 <_dtoa_r+0x68e>
 8006fa0:	4656      	mov	r6, sl
 8006fa2:	2331      	movs	r3, #49	@ 0x31
 8006fa4:	f806 3b01 	strb.w	r3, [r6], #1
 8006fa8:	9b04      	ldr	r3, [sp, #16]
 8006faa:	3301      	adds	r3, #1
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	e6ae      	b.n	8006d0e <_dtoa_r+0x696>
 8006fb0:	9c07      	ldr	r4, [sp, #28]
 8006fb2:	9704      	str	r7, [sp, #16]
 8006fb4:	4625      	mov	r5, r4
 8006fb6:	e7f3      	b.n	8006fa0 <_dtoa_r+0x928>
 8006fb8:	9b07      	ldr	r3, [sp, #28]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 8104 	beq.w	80071cc <_dtoa_r+0xb54>
 8006fc4:	2e00      	cmp	r6, #0
 8006fc6:	dd05      	ble.n	8006fd4 <_dtoa_r+0x95c>
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4632      	mov	r2, r6
 8006fcc:	4658      	mov	r0, fp
 8006fce:	f000 fc25 	bl	800781c <__lshift>
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d05a      	beq.n	8007090 <_dtoa_r+0xa18>
 8006fda:	6869      	ldr	r1, [r5, #4]
 8006fdc:	4658      	mov	r0, fp
 8006fde:	f000 fa0f 	bl	8007400 <_Balloc>
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	b928      	cbnz	r0, 8006ff2 <_dtoa_r+0x97a>
 8006fe6:	4b84      	ldr	r3, [pc, #528]	@ (80071f8 <_dtoa_r+0xb80>)
 8006fe8:	4602      	mov	r2, r0
 8006fea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006fee:	f7ff bb5a 	b.w	80066a6 <_dtoa_r+0x2e>
 8006ff2:	692a      	ldr	r2, [r5, #16]
 8006ff4:	3202      	adds	r2, #2
 8006ff6:	0092      	lsls	r2, r2, #2
 8006ff8:	f105 010c 	add.w	r1, r5, #12
 8006ffc:	300c      	adds	r0, #12
 8006ffe:	f001 f803 	bl	8008008 <memcpy>
 8007002:	2201      	movs	r2, #1
 8007004:	4631      	mov	r1, r6
 8007006:	4658      	mov	r0, fp
 8007008:	f000 fc08 	bl	800781c <__lshift>
 800700c:	f10a 0301 	add.w	r3, sl, #1
 8007010:	9307      	str	r3, [sp, #28]
 8007012:	9b00      	ldr	r3, [sp, #0]
 8007014:	4453      	add	r3, sl
 8007016:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007018:	9b02      	ldr	r3, [sp, #8]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	462f      	mov	r7, r5
 8007020:	930a      	str	r3, [sp, #40]	@ 0x28
 8007022:	4605      	mov	r5, r0
 8007024:	9b07      	ldr	r3, [sp, #28]
 8007026:	4621      	mov	r1, r4
 8007028:	3b01      	subs	r3, #1
 800702a:	4648      	mov	r0, r9
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	f7ff fa98 	bl	8006562 <quorem>
 8007032:	4639      	mov	r1, r7
 8007034:	9002      	str	r0, [sp, #8]
 8007036:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800703a:	4648      	mov	r0, r9
 800703c:	f000 fc5a 	bl	80078f4 <__mcmp>
 8007040:	462a      	mov	r2, r5
 8007042:	9008      	str	r0, [sp, #32]
 8007044:	4621      	mov	r1, r4
 8007046:	4658      	mov	r0, fp
 8007048:	f000 fc70 	bl	800792c <__mdiff>
 800704c:	68c2      	ldr	r2, [r0, #12]
 800704e:	4606      	mov	r6, r0
 8007050:	bb02      	cbnz	r2, 8007094 <_dtoa_r+0xa1c>
 8007052:	4601      	mov	r1, r0
 8007054:	4648      	mov	r0, r9
 8007056:	f000 fc4d 	bl	80078f4 <__mcmp>
 800705a:	4602      	mov	r2, r0
 800705c:	4631      	mov	r1, r6
 800705e:	4658      	mov	r0, fp
 8007060:	920e      	str	r2, [sp, #56]	@ 0x38
 8007062:	f000 fa0d 	bl	8007480 <_Bfree>
 8007066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007068:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800706a:	9e07      	ldr	r6, [sp, #28]
 800706c:	ea43 0102 	orr.w	r1, r3, r2
 8007070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007072:	4319      	orrs	r1, r3
 8007074:	d110      	bne.n	8007098 <_dtoa_r+0xa20>
 8007076:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800707a:	d029      	beq.n	80070d0 <_dtoa_r+0xa58>
 800707c:	9b08      	ldr	r3, [sp, #32]
 800707e:	2b00      	cmp	r3, #0
 8007080:	dd02      	ble.n	8007088 <_dtoa_r+0xa10>
 8007082:	9b02      	ldr	r3, [sp, #8]
 8007084:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007088:	9b00      	ldr	r3, [sp, #0]
 800708a:	f883 8000 	strb.w	r8, [r3]
 800708e:	e63f      	b.n	8006d10 <_dtoa_r+0x698>
 8007090:	4628      	mov	r0, r5
 8007092:	e7bb      	b.n	800700c <_dtoa_r+0x994>
 8007094:	2201      	movs	r2, #1
 8007096:	e7e1      	b.n	800705c <_dtoa_r+0x9e4>
 8007098:	9b08      	ldr	r3, [sp, #32]
 800709a:	2b00      	cmp	r3, #0
 800709c:	db04      	blt.n	80070a8 <_dtoa_r+0xa30>
 800709e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070a0:	430b      	orrs	r3, r1
 80070a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070a4:	430b      	orrs	r3, r1
 80070a6:	d120      	bne.n	80070ea <_dtoa_r+0xa72>
 80070a8:	2a00      	cmp	r2, #0
 80070aa:	dded      	ble.n	8007088 <_dtoa_r+0xa10>
 80070ac:	4649      	mov	r1, r9
 80070ae:	2201      	movs	r2, #1
 80070b0:	4658      	mov	r0, fp
 80070b2:	f000 fbb3 	bl	800781c <__lshift>
 80070b6:	4621      	mov	r1, r4
 80070b8:	4681      	mov	r9, r0
 80070ba:	f000 fc1b 	bl	80078f4 <__mcmp>
 80070be:	2800      	cmp	r0, #0
 80070c0:	dc03      	bgt.n	80070ca <_dtoa_r+0xa52>
 80070c2:	d1e1      	bne.n	8007088 <_dtoa_r+0xa10>
 80070c4:	f018 0f01 	tst.w	r8, #1
 80070c8:	d0de      	beq.n	8007088 <_dtoa_r+0xa10>
 80070ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070ce:	d1d8      	bne.n	8007082 <_dtoa_r+0xa0a>
 80070d0:	9a00      	ldr	r2, [sp, #0]
 80070d2:	2339      	movs	r3, #57	@ 0x39
 80070d4:	7013      	strb	r3, [r2, #0]
 80070d6:	4633      	mov	r3, r6
 80070d8:	461e      	mov	r6, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80070e0:	2a39      	cmp	r2, #57	@ 0x39
 80070e2:	d052      	beq.n	800718a <_dtoa_r+0xb12>
 80070e4:	3201      	adds	r2, #1
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	e612      	b.n	8006d10 <_dtoa_r+0x698>
 80070ea:	2a00      	cmp	r2, #0
 80070ec:	dd07      	ble.n	80070fe <_dtoa_r+0xa86>
 80070ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070f2:	d0ed      	beq.n	80070d0 <_dtoa_r+0xa58>
 80070f4:	9a00      	ldr	r2, [sp, #0]
 80070f6:	f108 0301 	add.w	r3, r8, #1
 80070fa:	7013      	strb	r3, [r2, #0]
 80070fc:	e608      	b.n	8006d10 <_dtoa_r+0x698>
 80070fe:	9b07      	ldr	r3, [sp, #28]
 8007100:	9a07      	ldr	r2, [sp, #28]
 8007102:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007108:	4293      	cmp	r3, r2
 800710a:	d028      	beq.n	800715e <_dtoa_r+0xae6>
 800710c:	4649      	mov	r1, r9
 800710e:	2300      	movs	r3, #0
 8007110:	220a      	movs	r2, #10
 8007112:	4658      	mov	r0, fp
 8007114:	f000 f9d6 	bl	80074c4 <__multadd>
 8007118:	42af      	cmp	r7, r5
 800711a:	4681      	mov	r9, r0
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	f04f 020a 	mov.w	r2, #10
 8007124:	4639      	mov	r1, r7
 8007126:	4658      	mov	r0, fp
 8007128:	d107      	bne.n	800713a <_dtoa_r+0xac2>
 800712a:	f000 f9cb 	bl	80074c4 <__multadd>
 800712e:	4607      	mov	r7, r0
 8007130:	4605      	mov	r5, r0
 8007132:	9b07      	ldr	r3, [sp, #28]
 8007134:	3301      	adds	r3, #1
 8007136:	9307      	str	r3, [sp, #28]
 8007138:	e774      	b.n	8007024 <_dtoa_r+0x9ac>
 800713a:	f000 f9c3 	bl	80074c4 <__multadd>
 800713e:	4629      	mov	r1, r5
 8007140:	4607      	mov	r7, r0
 8007142:	2300      	movs	r3, #0
 8007144:	220a      	movs	r2, #10
 8007146:	4658      	mov	r0, fp
 8007148:	f000 f9bc 	bl	80074c4 <__multadd>
 800714c:	4605      	mov	r5, r0
 800714e:	e7f0      	b.n	8007132 <_dtoa_r+0xaba>
 8007150:	9b00      	ldr	r3, [sp, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	bfcc      	ite	gt
 8007156:	461e      	movgt	r6, r3
 8007158:	2601      	movle	r6, #1
 800715a:	4456      	add	r6, sl
 800715c:	2700      	movs	r7, #0
 800715e:	4649      	mov	r1, r9
 8007160:	2201      	movs	r2, #1
 8007162:	4658      	mov	r0, fp
 8007164:	f000 fb5a 	bl	800781c <__lshift>
 8007168:	4621      	mov	r1, r4
 800716a:	4681      	mov	r9, r0
 800716c:	f000 fbc2 	bl	80078f4 <__mcmp>
 8007170:	2800      	cmp	r0, #0
 8007172:	dcb0      	bgt.n	80070d6 <_dtoa_r+0xa5e>
 8007174:	d102      	bne.n	800717c <_dtoa_r+0xb04>
 8007176:	f018 0f01 	tst.w	r8, #1
 800717a:	d1ac      	bne.n	80070d6 <_dtoa_r+0xa5e>
 800717c:	4633      	mov	r3, r6
 800717e:	461e      	mov	r6, r3
 8007180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007184:	2a30      	cmp	r2, #48	@ 0x30
 8007186:	d0fa      	beq.n	800717e <_dtoa_r+0xb06>
 8007188:	e5c2      	b.n	8006d10 <_dtoa_r+0x698>
 800718a:	459a      	cmp	sl, r3
 800718c:	d1a4      	bne.n	80070d8 <_dtoa_r+0xa60>
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	3301      	adds	r3, #1
 8007192:	9304      	str	r3, [sp, #16]
 8007194:	2331      	movs	r3, #49	@ 0x31
 8007196:	f88a 3000 	strb.w	r3, [sl]
 800719a:	e5b9      	b.n	8006d10 <_dtoa_r+0x698>
 800719c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800719e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80071fc <_dtoa_r+0xb84>
 80071a2:	b11b      	cbz	r3, 80071ac <_dtoa_r+0xb34>
 80071a4:	f10a 0308 	add.w	r3, sl, #8
 80071a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	4650      	mov	r0, sl
 80071ae:	b019      	add	sp, #100	@ 0x64
 80071b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	f77f ae37 	ble.w	8006e2a <_dtoa_r+0x7b2>
 80071bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071be:	930a      	str	r3, [sp, #40]	@ 0x28
 80071c0:	2001      	movs	r0, #1
 80071c2:	e655      	b.n	8006e70 <_dtoa_r+0x7f8>
 80071c4:	9b00      	ldr	r3, [sp, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f77f aed6 	ble.w	8006f78 <_dtoa_r+0x900>
 80071cc:	4656      	mov	r6, sl
 80071ce:	4621      	mov	r1, r4
 80071d0:	4648      	mov	r0, r9
 80071d2:	f7ff f9c6 	bl	8006562 <quorem>
 80071d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80071da:	f806 8b01 	strb.w	r8, [r6], #1
 80071de:	9b00      	ldr	r3, [sp, #0]
 80071e0:	eba6 020a 	sub.w	r2, r6, sl
 80071e4:	4293      	cmp	r3, r2
 80071e6:	ddb3      	ble.n	8007150 <_dtoa_r+0xad8>
 80071e8:	4649      	mov	r1, r9
 80071ea:	2300      	movs	r3, #0
 80071ec:	220a      	movs	r2, #10
 80071ee:	4658      	mov	r0, fp
 80071f0:	f000 f968 	bl	80074c4 <__multadd>
 80071f4:	4681      	mov	r9, r0
 80071f6:	e7ea      	b.n	80071ce <_dtoa_r+0xb56>
 80071f8:	08008304 	.word	0x08008304
 80071fc:	08008288 	.word	0x08008288

08007200 <_free_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4605      	mov	r5, r0
 8007204:	2900      	cmp	r1, #0
 8007206:	d041      	beq.n	800728c <_free_r+0x8c>
 8007208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800720c:	1f0c      	subs	r4, r1, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	bfb8      	it	lt
 8007212:	18e4      	addlt	r4, r4, r3
 8007214:	f000 f8e8 	bl	80073e8 <__malloc_lock>
 8007218:	4a1d      	ldr	r2, [pc, #116]	@ (8007290 <_free_r+0x90>)
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	b933      	cbnz	r3, 800722c <_free_r+0x2c>
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	6014      	str	r4, [r2, #0]
 8007222:	4628      	mov	r0, r5
 8007224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007228:	f000 b8e4 	b.w	80073f4 <__malloc_unlock>
 800722c:	42a3      	cmp	r3, r4
 800722e:	d908      	bls.n	8007242 <_free_r+0x42>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	1821      	adds	r1, r4, r0
 8007234:	428b      	cmp	r3, r1
 8007236:	bf01      	itttt	eq
 8007238:	6819      	ldreq	r1, [r3, #0]
 800723a:	685b      	ldreq	r3, [r3, #4]
 800723c:	1809      	addeq	r1, r1, r0
 800723e:	6021      	streq	r1, [r4, #0]
 8007240:	e7ed      	b.n	800721e <_free_r+0x1e>
 8007242:	461a      	mov	r2, r3
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b10b      	cbz	r3, 800724c <_free_r+0x4c>
 8007248:	42a3      	cmp	r3, r4
 800724a:	d9fa      	bls.n	8007242 <_free_r+0x42>
 800724c:	6811      	ldr	r1, [r2, #0]
 800724e:	1850      	adds	r0, r2, r1
 8007250:	42a0      	cmp	r0, r4
 8007252:	d10b      	bne.n	800726c <_free_r+0x6c>
 8007254:	6820      	ldr	r0, [r4, #0]
 8007256:	4401      	add	r1, r0
 8007258:	1850      	adds	r0, r2, r1
 800725a:	4283      	cmp	r3, r0
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	d1e0      	bne.n	8007222 <_free_r+0x22>
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	6053      	str	r3, [r2, #4]
 8007266:	4408      	add	r0, r1
 8007268:	6010      	str	r0, [r2, #0]
 800726a:	e7da      	b.n	8007222 <_free_r+0x22>
 800726c:	d902      	bls.n	8007274 <_free_r+0x74>
 800726e:	230c      	movs	r3, #12
 8007270:	602b      	str	r3, [r5, #0]
 8007272:	e7d6      	b.n	8007222 <_free_r+0x22>
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	1821      	adds	r1, r4, r0
 8007278:	428b      	cmp	r3, r1
 800727a:	bf04      	itt	eq
 800727c:	6819      	ldreq	r1, [r3, #0]
 800727e:	685b      	ldreq	r3, [r3, #4]
 8007280:	6063      	str	r3, [r4, #4]
 8007282:	bf04      	itt	eq
 8007284:	1809      	addeq	r1, r1, r0
 8007286:	6021      	streq	r1, [r4, #0]
 8007288:	6054      	str	r4, [r2, #4]
 800728a:	e7ca      	b.n	8007222 <_free_r+0x22>
 800728c:	bd38      	pop	{r3, r4, r5, pc}
 800728e:	bf00      	nop
 8007290:	20000574 	.word	0x20000574

08007294 <malloc>:
 8007294:	4b02      	ldr	r3, [pc, #8]	@ (80072a0 <malloc+0xc>)
 8007296:	4601      	mov	r1, r0
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	f000 b825 	b.w	80072e8 <_malloc_r>
 800729e:	bf00      	nop
 80072a0:	2000001c 	.word	0x2000001c

080072a4 <sbrk_aligned>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	4e0f      	ldr	r6, [pc, #60]	@ (80072e4 <sbrk_aligned+0x40>)
 80072a8:	460c      	mov	r4, r1
 80072aa:	6831      	ldr	r1, [r6, #0]
 80072ac:	4605      	mov	r5, r0
 80072ae:	b911      	cbnz	r1, 80072b6 <sbrk_aligned+0x12>
 80072b0:	f000 fe9a 	bl	8007fe8 <_sbrk_r>
 80072b4:	6030      	str	r0, [r6, #0]
 80072b6:	4621      	mov	r1, r4
 80072b8:	4628      	mov	r0, r5
 80072ba:	f000 fe95 	bl	8007fe8 <_sbrk_r>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d103      	bne.n	80072ca <sbrk_aligned+0x26>
 80072c2:	f04f 34ff 	mov.w	r4, #4294967295
 80072c6:	4620      	mov	r0, r4
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
 80072ca:	1cc4      	adds	r4, r0, #3
 80072cc:	f024 0403 	bic.w	r4, r4, #3
 80072d0:	42a0      	cmp	r0, r4
 80072d2:	d0f8      	beq.n	80072c6 <sbrk_aligned+0x22>
 80072d4:	1a21      	subs	r1, r4, r0
 80072d6:	4628      	mov	r0, r5
 80072d8:	f000 fe86 	bl	8007fe8 <_sbrk_r>
 80072dc:	3001      	adds	r0, #1
 80072de:	d1f2      	bne.n	80072c6 <sbrk_aligned+0x22>
 80072e0:	e7ef      	b.n	80072c2 <sbrk_aligned+0x1e>
 80072e2:	bf00      	nop
 80072e4:	20000570 	.word	0x20000570

080072e8 <_malloc_r>:
 80072e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ec:	1ccd      	adds	r5, r1, #3
 80072ee:	f025 0503 	bic.w	r5, r5, #3
 80072f2:	3508      	adds	r5, #8
 80072f4:	2d0c      	cmp	r5, #12
 80072f6:	bf38      	it	cc
 80072f8:	250c      	movcc	r5, #12
 80072fa:	2d00      	cmp	r5, #0
 80072fc:	4606      	mov	r6, r0
 80072fe:	db01      	blt.n	8007304 <_malloc_r+0x1c>
 8007300:	42a9      	cmp	r1, r5
 8007302:	d904      	bls.n	800730e <_malloc_r+0x26>
 8007304:	230c      	movs	r3, #12
 8007306:	6033      	str	r3, [r6, #0]
 8007308:	2000      	movs	r0, #0
 800730a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073e4 <_malloc_r+0xfc>
 8007312:	f000 f869 	bl	80073e8 <__malloc_lock>
 8007316:	f8d8 3000 	ldr.w	r3, [r8]
 800731a:	461c      	mov	r4, r3
 800731c:	bb44      	cbnz	r4, 8007370 <_malloc_r+0x88>
 800731e:	4629      	mov	r1, r5
 8007320:	4630      	mov	r0, r6
 8007322:	f7ff ffbf 	bl	80072a4 <sbrk_aligned>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	4604      	mov	r4, r0
 800732a:	d158      	bne.n	80073de <_malloc_r+0xf6>
 800732c:	f8d8 4000 	ldr.w	r4, [r8]
 8007330:	4627      	mov	r7, r4
 8007332:	2f00      	cmp	r7, #0
 8007334:	d143      	bne.n	80073be <_malloc_r+0xd6>
 8007336:	2c00      	cmp	r4, #0
 8007338:	d04b      	beq.n	80073d2 <_malloc_r+0xea>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	4639      	mov	r1, r7
 800733e:	4630      	mov	r0, r6
 8007340:	eb04 0903 	add.w	r9, r4, r3
 8007344:	f000 fe50 	bl	8007fe8 <_sbrk_r>
 8007348:	4581      	cmp	r9, r0
 800734a:	d142      	bne.n	80073d2 <_malloc_r+0xea>
 800734c:	6821      	ldr	r1, [r4, #0]
 800734e:	1a6d      	subs	r5, r5, r1
 8007350:	4629      	mov	r1, r5
 8007352:	4630      	mov	r0, r6
 8007354:	f7ff ffa6 	bl	80072a4 <sbrk_aligned>
 8007358:	3001      	adds	r0, #1
 800735a:	d03a      	beq.n	80073d2 <_malloc_r+0xea>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	442b      	add	r3, r5
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	f8d8 3000 	ldr.w	r3, [r8]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	bb62      	cbnz	r2, 80073c4 <_malloc_r+0xdc>
 800736a:	f8c8 7000 	str.w	r7, [r8]
 800736e:	e00f      	b.n	8007390 <_malloc_r+0xa8>
 8007370:	6822      	ldr	r2, [r4, #0]
 8007372:	1b52      	subs	r2, r2, r5
 8007374:	d420      	bmi.n	80073b8 <_malloc_r+0xd0>
 8007376:	2a0b      	cmp	r2, #11
 8007378:	d917      	bls.n	80073aa <_malloc_r+0xc2>
 800737a:	1961      	adds	r1, r4, r5
 800737c:	42a3      	cmp	r3, r4
 800737e:	6025      	str	r5, [r4, #0]
 8007380:	bf18      	it	ne
 8007382:	6059      	strne	r1, [r3, #4]
 8007384:	6863      	ldr	r3, [r4, #4]
 8007386:	bf08      	it	eq
 8007388:	f8c8 1000 	streq.w	r1, [r8]
 800738c:	5162      	str	r2, [r4, r5]
 800738e:	604b      	str	r3, [r1, #4]
 8007390:	4630      	mov	r0, r6
 8007392:	f000 f82f 	bl	80073f4 <__malloc_unlock>
 8007396:	f104 000b 	add.w	r0, r4, #11
 800739a:	1d23      	adds	r3, r4, #4
 800739c:	f020 0007 	bic.w	r0, r0, #7
 80073a0:	1ac2      	subs	r2, r0, r3
 80073a2:	bf1c      	itt	ne
 80073a4:	1a1b      	subne	r3, r3, r0
 80073a6:	50a3      	strne	r3, [r4, r2]
 80073a8:	e7af      	b.n	800730a <_malloc_r+0x22>
 80073aa:	6862      	ldr	r2, [r4, #4]
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	bf0c      	ite	eq
 80073b0:	f8c8 2000 	streq.w	r2, [r8]
 80073b4:	605a      	strne	r2, [r3, #4]
 80073b6:	e7eb      	b.n	8007390 <_malloc_r+0xa8>
 80073b8:	4623      	mov	r3, r4
 80073ba:	6864      	ldr	r4, [r4, #4]
 80073bc:	e7ae      	b.n	800731c <_malloc_r+0x34>
 80073be:	463c      	mov	r4, r7
 80073c0:	687f      	ldr	r7, [r7, #4]
 80073c2:	e7b6      	b.n	8007332 <_malloc_r+0x4a>
 80073c4:	461a      	mov	r2, r3
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	d1fb      	bne.n	80073c4 <_malloc_r+0xdc>
 80073cc:	2300      	movs	r3, #0
 80073ce:	6053      	str	r3, [r2, #4]
 80073d0:	e7de      	b.n	8007390 <_malloc_r+0xa8>
 80073d2:	230c      	movs	r3, #12
 80073d4:	6033      	str	r3, [r6, #0]
 80073d6:	4630      	mov	r0, r6
 80073d8:	f000 f80c 	bl	80073f4 <__malloc_unlock>
 80073dc:	e794      	b.n	8007308 <_malloc_r+0x20>
 80073de:	6005      	str	r5, [r0, #0]
 80073e0:	e7d6      	b.n	8007390 <_malloc_r+0xa8>
 80073e2:	bf00      	nop
 80073e4:	20000574 	.word	0x20000574

080073e8 <__malloc_lock>:
 80073e8:	4801      	ldr	r0, [pc, #4]	@ (80073f0 <__malloc_lock+0x8>)
 80073ea:	f7ff b8b8 	b.w	800655e <__retarget_lock_acquire_recursive>
 80073ee:	bf00      	nop
 80073f0:	2000056c 	.word	0x2000056c

080073f4 <__malloc_unlock>:
 80073f4:	4801      	ldr	r0, [pc, #4]	@ (80073fc <__malloc_unlock+0x8>)
 80073f6:	f7ff b8b3 	b.w	8006560 <__retarget_lock_release_recursive>
 80073fa:	bf00      	nop
 80073fc:	2000056c 	.word	0x2000056c

08007400 <_Balloc>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	69c6      	ldr	r6, [r0, #28]
 8007404:	4604      	mov	r4, r0
 8007406:	460d      	mov	r5, r1
 8007408:	b976      	cbnz	r6, 8007428 <_Balloc+0x28>
 800740a:	2010      	movs	r0, #16
 800740c:	f7ff ff42 	bl	8007294 <malloc>
 8007410:	4602      	mov	r2, r0
 8007412:	61e0      	str	r0, [r4, #28]
 8007414:	b920      	cbnz	r0, 8007420 <_Balloc+0x20>
 8007416:	4b18      	ldr	r3, [pc, #96]	@ (8007478 <_Balloc+0x78>)
 8007418:	4818      	ldr	r0, [pc, #96]	@ (800747c <_Balloc+0x7c>)
 800741a:	216b      	movs	r1, #107	@ 0x6b
 800741c:	f000 fe02 	bl	8008024 <__assert_func>
 8007420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007424:	6006      	str	r6, [r0, #0]
 8007426:	60c6      	str	r6, [r0, #12]
 8007428:	69e6      	ldr	r6, [r4, #28]
 800742a:	68f3      	ldr	r3, [r6, #12]
 800742c:	b183      	cbz	r3, 8007450 <_Balloc+0x50>
 800742e:	69e3      	ldr	r3, [r4, #28]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007436:	b9b8      	cbnz	r0, 8007468 <_Balloc+0x68>
 8007438:	2101      	movs	r1, #1
 800743a:	fa01 f605 	lsl.w	r6, r1, r5
 800743e:	1d72      	adds	r2, r6, #5
 8007440:	0092      	lsls	r2, r2, #2
 8007442:	4620      	mov	r0, r4
 8007444:	f000 fe0c 	bl	8008060 <_calloc_r>
 8007448:	b160      	cbz	r0, 8007464 <_Balloc+0x64>
 800744a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800744e:	e00e      	b.n	800746e <_Balloc+0x6e>
 8007450:	2221      	movs	r2, #33	@ 0x21
 8007452:	2104      	movs	r1, #4
 8007454:	4620      	mov	r0, r4
 8007456:	f000 fe03 	bl	8008060 <_calloc_r>
 800745a:	69e3      	ldr	r3, [r4, #28]
 800745c:	60f0      	str	r0, [r6, #12]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e4      	bne.n	800742e <_Balloc+0x2e>
 8007464:	2000      	movs	r0, #0
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	6802      	ldr	r2, [r0, #0]
 800746a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800746e:	2300      	movs	r3, #0
 8007470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007474:	e7f7      	b.n	8007466 <_Balloc+0x66>
 8007476:	bf00      	nop
 8007478:	08008295 	.word	0x08008295
 800747c:	08008315 	.word	0x08008315

08007480 <_Bfree>:
 8007480:	b570      	push	{r4, r5, r6, lr}
 8007482:	69c6      	ldr	r6, [r0, #28]
 8007484:	4605      	mov	r5, r0
 8007486:	460c      	mov	r4, r1
 8007488:	b976      	cbnz	r6, 80074a8 <_Bfree+0x28>
 800748a:	2010      	movs	r0, #16
 800748c:	f7ff ff02 	bl	8007294 <malloc>
 8007490:	4602      	mov	r2, r0
 8007492:	61e8      	str	r0, [r5, #28]
 8007494:	b920      	cbnz	r0, 80074a0 <_Bfree+0x20>
 8007496:	4b09      	ldr	r3, [pc, #36]	@ (80074bc <_Bfree+0x3c>)
 8007498:	4809      	ldr	r0, [pc, #36]	@ (80074c0 <_Bfree+0x40>)
 800749a:	218f      	movs	r1, #143	@ 0x8f
 800749c:	f000 fdc2 	bl	8008024 <__assert_func>
 80074a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074a4:	6006      	str	r6, [r0, #0]
 80074a6:	60c6      	str	r6, [r0, #12]
 80074a8:	b13c      	cbz	r4, 80074ba <_Bfree+0x3a>
 80074aa:	69eb      	ldr	r3, [r5, #28]
 80074ac:	6862      	ldr	r2, [r4, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074b4:	6021      	str	r1, [r4, #0]
 80074b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	08008295 	.word	0x08008295
 80074c0:	08008315 	.word	0x08008315

080074c4 <__multadd>:
 80074c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c8:	690d      	ldr	r5, [r1, #16]
 80074ca:	4607      	mov	r7, r0
 80074cc:	460c      	mov	r4, r1
 80074ce:	461e      	mov	r6, r3
 80074d0:	f101 0c14 	add.w	ip, r1, #20
 80074d4:	2000      	movs	r0, #0
 80074d6:	f8dc 3000 	ldr.w	r3, [ip]
 80074da:	b299      	uxth	r1, r3
 80074dc:	fb02 6101 	mla	r1, r2, r1, r6
 80074e0:	0c1e      	lsrs	r6, r3, #16
 80074e2:	0c0b      	lsrs	r3, r1, #16
 80074e4:	fb02 3306 	mla	r3, r2, r6, r3
 80074e8:	b289      	uxth	r1, r1
 80074ea:	3001      	adds	r0, #1
 80074ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074f0:	4285      	cmp	r5, r0
 80074f2:	f84c 1b04 	str.w	r1, [ip], #4
 80074f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074fa:	dcec      	bgt.n	80074d6 <__multadd+0x12>
 80074fc:	b30e      	cbz	r6, 8007542 <__multadd+0x7e>
 80074fe:	68a3      	ldr	r3, [r4, #8]
 8007500:	42ab      	cmp	r3, r5
 8007502:	dc19      	bgt.n	8007538 <__multadd+0x74>
 8007504:	6861      	ldr	r1, [r4, #4]
 8007506:	4638      	mov	r0, r7
 8007508:	3101      	adds	r1, #1
 800750a:	f7ff ff79 	bl	8007400 <_Balloc>
 800750e:	4680      	mov	r8, r0
 8007510:	b928      	cbnz	r0, 800751e <__multadd+0x5a>
 8007512:	4602      	mov	r2, r0
 8007514:	4b0c      	ldr	r3, [pc, #48]	@ (8007548 <__multadd+0x84>)
 8007516:	480d      	ldr	r0, [pc, #52]	@ (800754c <__multadd+0x88>)
 8007518:	21ba      	movs	r1, #186	@ 0xba
 800751a:	f000 fd83 	bl	8008024 <__assert_func>
 800751e:	6922      	ldr	r2, [r4, #16]
 8007520:	3202      	adds	r2, #2
 8007522:	f104 010c 	add.w	r1, r4, #12
 8007526:	0092      	lsls	r2, r2, #2
 8007528:	300c      	adds	r0, #12
 800752a:	f000 fd6d 	bl	8008008 <memcpy>
 800752e:	4621      	mov	r1, r4
 8007530:	4638      	mov	r0, r7
 8007532:	f7ff ffa5 	bl	8007480 <_Bfree>
 8007536:	4644      	mov	r4, r8
 8007538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800753c:	3501      	adds	r5, #1
 800753e:	615e      	str	r6, [r3, #20]
 8007540:	6125      	str	r5, [r4, #16]
 8007542:	4620      	mov	r0, r4
 8007544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007548:	08008304 	.word	0x08008304
 800754c:	08008315 	.word	0x08008315

08007550 <__hi0bits>:
 8007550:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007554:	4603      	mov	r3, r0
 8007556:	bf36      	itet	cc
 8007558:	0403      	lslcc	r3, r0, #16
 800755a:	2000      	movcs	r0, #0
 800755c:	2010      	movcc	r0, #16
 800755e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007562:	bf3c      	itt	cc
 8007564:	021b      	lslcc	r3, r3, #8
 8007566:	3008      	addcc	r0, #8
 8007568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800756c:	bf3c      	itt	cc
 800756e:	011b      	lslcc	r3, r3, #4
 8007570:	3004      	addcc	r0, #4
 8007572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007576:	bf3c      	itt	cc
 8007578:	009b      	lslcc	r3, r3, #2
 800757a:	3002      	addcc	r0, #2
 800757c:	2b00      	cmp	r3, #0
 800757e:	db05      	blt.n	800758c <__hi0bits+0x3c>
 8007580:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007584:	f100 0001 	add.w	r0, r0, #1
 8007588:	bf08      	it	eq
 800758a:	2020      	moveq	r0, #32
 800758c:	4770      	bx	lr

0800758e <__lo0bits>:
 800758e:	6803      	ldr	r3, [r0, #0]
 8007590:	4602      	mov	r2, r0
 8007592:	f013 0007 	ands.w	r0, r3, #7
 8007596:	d00b      	beq.n	80075b0 <__lo0bits+0x22>
 8007598:	07d9      	lsls	r1, r3, #31
 800759a:	d421      	bmi.n	80075e0 <__lo0bits+0x52>
 800759c:	0798      	lsls	r0, r3, #30
 800759e:	bf49      	itett	mi
 80075a0:	085b      	lsrmi	r3, r3, #1
 80075a2:	089b      	lsrpl	r3, r3, #2
 80075a4:	2001      	movmi	r0, #1
 80075a6:	6013      	strmi	r3, [r2, #0]
 80075a8:	bf5c      	itt	pl
 80075aa:	6013      	strpl	r3, [r2, #0]
 80075ac:	2002      	movpl	r0, #2
 80075ae:	4770      	bx	lr
 80075b0:	b299      	uxth	r1, r3
 80075b2:	b909      	cbnz	r1, 80075b8 <__lo0bits+0x2a>
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	2010      	movs	r0, #16
 80075b8:	b2d9      	uxtb	r1, r3
 80075ba:	b909      	cbnz	r1, 80075c0 <__lo0bits+0x32>
 80075bc:	3008      	adds	r0, #8
 80075be:	0a1b      	lsrs	r3, r3, #8
 80075c0:	0719      	lsls	r1, r3, #28
 80075c2:	bf04      	itt	eq
 80075c4:	091b      	lsreq	r3, r3, #4
 80075c6:	3004      	addeq	r0, #4
 80075c8:	0799      	lsls	r1, r3, #30
 80075ca:	bf04      	itt	eq
 80075cc:	089b      	lsreq	r3, r3, #2
 80075ce:	3002      	addeq	r0, #2
 80075d0:	07d9      	lsls	r1, r3, #31
 80075d2:	d403      	bmi.n	80075dc <__lo0bits+0x4e>
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	f100 0001 	add.w	r0, r0, #1
 80075da:	d003      	beq.n	80075e4 <__lo0bits+0x56>
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	4770      	bx	lr
 80075e0:	2000      	movs	r0, #0
 80075e2:	4770      	bx	lr
 80075e4:	2020      	movs	r0, #32
 80075e6:	4770      	bx	lr

080075e8 <__i2b>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	460c      	mov	r4, r1
 80075ec:	2101      	movs	r1, #1
 80075ee:	f7ff ff07 	bl	8007400 <_Balloc>
 80075f2:	4602      	mov	r2, r0
 80075f4:	b928      	cbnz	r0, 8007602 <__i2b+0x1a>
 80075f6:	4b05      	ldr	r3, [pc, #20]	@ (800760c <__i2b+0x24>)
 80075f8:	4805      	ldr	r0, [pc, #20]	@ (8007610 <__i2b+0x28>)
 80075fa:	f240 1145 	movw	r1, #325	@ 0x145
 80075fe:	f000 fd11 	bl	8008024 <__assert_func>
 8007602:	2301      	movs	r3, #1
 8007604:	6144      	str	r4, [r0, #20]
 8007606:	6103      	str	r3, [r0, #16]
 8007608:	bd10      	pop	{r4, pc}
 800760a:	bf00      	nop
 800760c:	08008304 	.word	0x08008304
 8007610:	08008315 	.word	0x08008315

08007614 <__multiply>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	4614      	mov	r4, r2
 800761a:	690a      	ldr	r2, [r1, #16]
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	429a      	cmp	r2, r3
 8007620:	bfa8      	it	ge
 8007622:	4623      	movge	r3, r4
 8007624:	460f      	mov	r7, r1
 8007626:	bfa4      	itt	ge
 8007628:	460c      	movge	r4, r1
 800762a:	461f      	movge	r7, r3
 800762c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007630:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007634:	68a3      	ldr	r3, [r4, #8]
 8007636:	6861      	ldr	r1, [r4, #4]
 8007638:	eb0a 0609 	add.w	r6, sl, r9
 800763c:	42b3      	cmp	r3, r6
 800763e:	b085      	sub	sp, #20
 8007640:	bfb8      	it	lt
 8007642:	3101      	addlt	r1, #1
 8007644:	f7ff fedc 	bl	8007400 <_Balloc>
 8007648:	b930      	cbnz	r0, 8007658 <__multiply+0x44>
 800764a:	4602      	mov	r2, r0
 800764c:	4b44      	ldr	r3, [pc, #272]	@ (8007760 <__multiply+0x14c>)
 800764e:	4845      	ldr	r0, [pc, #276]	@ (8007764 <__multiply+0x150>)
 8007650:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007654:	f000 fce6 	bl	8008024 <__assert_func>
 8007658:	f100 0514 	add.w	r5, r0, #20
 800765c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007660:	462b      	mov	r3, r5
 8007662:	2200      	movs	r2, #0
 8007664:	4543      	cmp	r3, r8
 8007666:	d321      	bcc.n	80076ac <__multiply+0x98>
 8007668:	f107 0114 	add.w	r1, r7, #20
 800766c:	f104 0214 	add.w	r2, r4, #20
 8007670:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007674:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007678:	9302      	str	r3, [sp, #8]
 800767a:	1b13      	subs	r3, r2, r4
 800767c:	3b15      	subs	r3, #21
 800767e:	f023 0303 	bic.w	r3, r3, #3
 8007682:	3304      	adds	r3, #4
 8007684:	f104 0715 	add.w	r7, r4, #21
 8007688:	42ba      	cmp	r2, r7
 800768a:	bf38      	it	cc
 800768c:	2304      	movcc	r3, #4
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	9b02      	ldr	r3, [sp, #8]
 8007692:	9103      	str	r1, [sp, #12]
 8007694:	428b      	cmp	r3, r1
 8007696:	d80c      	bhi.n	80076b2 <__multiply+0x9e>
 8007698:	2e00      	cmp	r6, #0
 800769a:	dd03      	ble.n	80076a4 <__multiply+0x90>
 800769c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d05b      	beq.n	800775c <__multiply+0x148>
 80076a4:	6106      	str	r6, [r0, #16]
 80076a6:	b005      	add	sp, #20
 80076a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ac:	f843 2b04 	str.w	r2, [r3], #4
 80076b0:	e7d8      	b.n	8007664 <__multiply+0x50>
 80076b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80076b6:	f1ba 0f00 	cmp.w	sl, #0
 80076ba:	d024      	beq.n	8007706 <__multiply+0xf2>
 80076bc:	f104 0e14 	add.w	lr, r4, #20
 80076c0:	46a9      	mov	r9, r5
 80076c2:	f04f 0c00 	mov.w	ip, #0
 80076c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80076ca:	f8d9 3000 	ldr.w	r3, [r9]
 80076ce:	fa1f fb87 	uxth.w	fp, r7
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80076d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80076dc:	f8d9 7000 	ldr.w	r7, [r9]
 80076e0:	4463      	add	r3, ip
 80076e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076e6:	fb0a c70b 	mla	r7, sl, fp, ip
 80076ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076f4:	4572      	cmp	r2, lr
 80076f6:	f849 3b04 	str.w	r3, [r9], #4
 80076fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076fe:	d8e2      	bhi.n	80076c6 <__multiply+0xb2>
 8007700:	9b01      	ldr	r3, [sp, #4]
 8007702:	f845 c003 	str.w	ip, [r5, r3]
 8007706:	9b03      	ldr	r3, [sp, #12]
 8007708:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800770c:	3104      	adds	r1, #4
 800770e:	f1b9 0f00 	cmp.w	r9, #0
 8007712:	d021      	beq.n	8007758 <__multiply+0x144>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	f104 0c14 	add.w	ip, r4, #20
 800771a:	46ae      	mov	lr, r5
 800771c:	f04f 0a00 	mov.w	sl, #0
 8007720:	f8bc b000 	ldrh.w	fp, [ip]
 8007724:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007728:	fb09 770b 	mla	r7, r9, fp, r7
 800772c:	4457      	add	r7, sl
 800772e:	b29b      	uxth	r3, r3
 8007730:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007734:	f84e 3b04 	str.w	r3, [lr], #4
 8007738:	f85c 3b04 	ldr.w	r3, [ip], #4
 800773c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007740:	f8be 3000 	ldrh.w	r3, [lr]
 8007744:	fb09 330a 	mla	r3, r9, sl, r3
 8007748:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800774c:	4562      	cmp	r2, ip
 800774e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007752:	d8e5      	bhi.n	8007720 <__multiply+0x10c>
 8007754:	9f01      	ldr	r7, [sp, #4]
 8007756:	51eb      	str	r3, [r5, r7]
 8007758:	3504      	adds	r5, #4
 800775a:	e799      	b.n	8007690 <__multiply+0x7c>
 800775c:	3e01      	subs	r6, #1
 800775e:	e79b      	b.n	8007698 <__multiply+0x84>
 8007760:	08008304 	.word	0x08008304
 8007764:	08008315 	.word	0x08008315

08007768 <__pow5mult>:
 8007768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800776c:	4615      	mov	r5, r2
 800776e:	f012 0203 	ands.w	r2, r2, #3
 8007772:	4607      	mov	r7, r0
 8007774:	460e      	mov	r6, r1
 8007776:	d007      	beq.n	8007788 <__pow5mult+0x20>
 8007778:	4c25      	ldr	r4, [pc, #148]	@ (8007810 <__pow5mult+0xa8>)
 800777a:	3a01      	subs	r2, #1
 800777c:	2300      	movs	r3, #0
 800777e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007782:	f7ff fe9f 	bl	80074c4 <__multadd>
 8007786:	4606      	mov	r6, r0
 8007788:	10ad      	asrs	r5, r5, #2
 800778a:	d03d      	beq.n	8007808 <__pow5mult+0xa0>
 800778c:	69fc      	ldr	r4, [r7, #28]
 800778e:	b97c      	cbnz	r4, 80077b0 <__pow5mult+0x48>
 8007790:	2010      	movs	r0, #16
 8007792:	f7ff fd7f 	bl	8007294 <malloc>
 8007796:	4602      	mov	r2, r0
 8007798:	61f8      	str	r0, [r7, #28]
 800779a:	b928      	cbnz	r0, 80077a8 <__pow5mult+0x40>
 800779c:	4b1d      	ldr	r3, [pc, #116]	@ (8007814 <__pow5mult+0xac>)
 800779e:	481e      	ldr	r0, [pc, #120]	@ (8007818 <__pow5mult+0xb0>)
 80077a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80077a4:	f000 fc3e 	bl	8008024 <__assert_func>
 80077a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077ac:	6004      	str	r4, [r0, #0]
 80077ae:	60c4      	str	r4, [r0, #12]
 80077b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80077b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077b8:	b94c      	cbnz	r4, 80077ce <__pow5mult+0x66>
 80077ba:	f240 2171 	movw	r1, #625	@ 0x271
 80077be:	4638      	mov	r0, r7
 80077c0:	f7ff ff12 	bl	80075e8 <__i2b>
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80077ca:	4604      	mov	r4, r0
 80077cc:	6003      	str	r3, [r0, #0]
 80077ce:	f04f 0900 	mov.w	r9, #0
 80077d2:	07eb      	lsls	r3, r5, #31
 80077d4:	d50a      	bpl.n	80077ec <__pow5mult+0x84>
 80077d6:	4631      	mov	r1, r6
 80077d8:	4622      	mov	r2, r4
 80077da:	4638      	mov	r0, r7
 80077dc:	f7ff ff1a 	bl	8007614 <__multiply>
 80077e0:	4631      	mov	r1, r6
 80077e2:	4680      	mov	r8, r0
 80077e4:	4638      	mov	r0, r7
 80077e6:	f7ff fe4b 	bl	8007480 <_Bfree>
 80077ea:	4646      	mov	r6, r8
 80077ec:	106d      	asrs	r5, r5, #1
 80077ee:	d00b      	beq.n	8007808 <__pow5mult+0xa0>
 80077f0:	6820      	ldr	r0, [r4, #0]
 80077f2:	b938      	cbnz	r0, 8007804 <__pow5mult+0x9c>
 80077f4:	4622      	mov	r2, r4
 80077f6:	4621      	mov	r1, r4
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7ff ff0b 	bl	8007614 <__multiply>
 80077fe:	6020      	str	r0, [r4, #0]
 8007800:	f8c0 9000 	str.w	r9, [r0]
 8007804:	4604      	mov	r4, r0
 8007806:	e7e4      	b.n	80077d2 <__pow5mult+0x6a>
 8007808:	4630      	mov	r0, r6
 800780a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800780e:	bf00      	nop
 8007810:	08008370 	.word	0x08008370
 8007814:	08008295 	.word	0x08008295
 8007818:	08008315 	.word	0x08008315

0800781c <__lshift>:
 800781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	460c      	mov	r4, r1
 8007822:	6849      	ldr	r1, [r1, #4]
 8007824:	6923      	ldr	r3, [r4, #16]
 8007826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800782a:	68a3      	ldr	r3, [r4, #8]
 800782c:	4607      	mov	r7, r0
 800782e:	4691      	mov	r9, r2
 8007830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007834:	f108 0601 	add.w	r6, r8, #1
 8007838:	42b3      	cmp	r3, r6
 800783a:	db0b      	blt.n	8007854 <__lshift+0x38>
 800783c:	4638      	mov	r0, r7
 800783e:	f7ff fddf 	bl	8007400 <_Balloc>
 8007842:	4605      	mov	r5, r0
 8007844:	b948      	cbnz	r0, 800785a <__lshift+0x3e>
 8007846:	4602      	mov	r2, r0
 8007848:	4b28      	ldr	r3, [pc, #160]	@ (80078ec <__lshift+0xd0>)
 800784a:	4829      	ldr	r0, [pc, #164]	@ (80078f0 <__lshift+0xd4>)
 800784c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007850:	f000 fbe8 	bl	8008024 <__assert_func>
 8007854:	3101      	adds	r1, #1
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	e7ee      	b.n	8007838 <__lshift+0x1c>
 800785a:	2300      	movs	r3, #0
 800785c:	f100 0114 	add.w	r1, r0, #20
 8007860:	f100 0210 	add.w	r2, r0, #16
 8007864:	4618      	mov	r0, r3
 8007866:	4553      	cmp	r3, sl
 8007868:	db33      	blt.n	80078d2 <__lshift+0xb6>
 800786a:	6920      	ldr	r0, [r4, #16]
 800786c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007870:	f104 0314 	add.w	r3, r4, #20
 8007874:	f019 091f 	ands.w	r9, r9, #31
 8007878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800787c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007880:	d02b      	beq.n	80078da <__lshift+0xbe>
 8007882:	f1c9 0e20 	rsb	lr, r9, #32
 8007886:	468a      	mov	sl, r1
 8007888:	2200      	movs	r2, #0
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	fa00 f009 	lsl.w	r0, r0, r9
 8007890:	4310      	orrs	r0, r2
 8007892:	f84a 0b04 	str.w	r0, [sl], #4
 8007896:	f853 2b04 	ldr.w	r2, [r3], #4
 800789a:	459c      	cmp	ip, r3
 800789c:	fa22 f20e 	lsr.w	r2, r2, lr
 80078a0:	d8f3      	bhi.n	800788a <__lshift+0x6e>
 80078a2:	ebac 0304 	sub.w	r3, ip, r4
 80078a6:	3b15      	subs	r3, #21
 80078a8:	f023 0303 	bic.w	r3, r3, #3
 80078ac:	3304      	adds	r3, #4
 80078ae:	f104 0015 	add.w	r0, r4, #21
 80078b2:	4584      	cmp	ip, r0
 80078b4:	bf38      	it	cc
 80078b6:	2304      	movcc	r3, #4
 80078b8:	50ca      	str	r2, [r1, r3]
 80078ba:	b10a      	cbz	r2, 80078c0 <__lshift+0xa4>
 80078bc:	f108 0602 	add.w	r6, r8, #2
 80078c0:	3e01      	subs	r6, #1
 80078c2:	4638      	mov	r0, r7
 80078c4:	612e      	str	r6, [r5, #16]
 80078c6:	4621      	mov	r1, r4
 80078c8:	f7ff fdda 	bl	8007480 <_Bfree>
 80078cc:	4628      	mov	r0, r5
 80078ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80078d6:	3301      	adds	r3, #1
 80078d8:	e7c5      	b.n	8007866 <__lshift+0x4a>
 80078da:	3904      	subs	r1, #4
 80078dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80078e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80078e4:	459c      	cmp	ip, r3
 80078e6:	d8f9      	bhi.n	80078dc <__lshift+0xc0>
 80078e8:	e7ea      	b.n	80078c0 <__lshift+0xa4>
 80078ea:	bf00      	nop
 80078ec:	08008304 	.word	0x08008304
 80078f0:	08008315 	.word	0x08008315

080078f4 <__mcmp>:
 80078f4:	690a      	ldr	r2, [r1, #16]
 80078f6:	4603      	mov	r3, r0
 80078f8:	6900      	ldr	r0, [r0, #16]
 80078fa:	1a80      	subs	r0, r0, r2
 80078fc:	b530      	push	{r4, r5, lr}
 80078fe:	d10e      	bne.n	800791e <__mcmp+0x2a>
 8007900:	3314      	adds	r3, #20
 8007902:	3114      	adds	r1, #20
 8007904:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007908:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800790c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007910:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007914:	4295      	cmp	r5, r2
 8007916:	d003      	beq.n	8007920 <__mcmp+0x2c>
 8007918:	d205      	bcs.n	8007926 <__mcmp+0x32>
 800791a:	f04f 30ff 	mov.w	r0, #4294967295
 800791e:	bd30      	pop	{r4, r5, pc}
 8007920:	42a3      	cmp	r3, r4
 8007922:	d3f3      	bcc.n	800790c <__mcmp+0x18>
 8007924:	e7fb      	b.n	800791e <__mcmp+0x2a>
 8007926:	2001      	movs	r0, #1
 8007928:	e7f9      	b.n	800791e <__mcmp+0x2a>
	...

0800792c <__mdiff>:
 800792c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	4689      	mov	r9, r1
 8007932:	4606      	mov	r6, r0
 8007934:	4611      	mov	r1, r2
 8007936:	4648      	mov	r0, r9
 8007938:	4614      	mov	r4, r2
 800793a:	f7ff ffdb 	bl	80078f4 <__mcmp>
 800793e:	1e05      	subs	r5, r0, #0
 8007940:	d112      	bne.n	8007968 <__mdiff+0x3c>
 8007942:	4629      	mov	r1, r5
 8007944:	4630      	mov	r0, r6
 8007946:	f7ff fd5b 	bl	8007400 <_Balloc>
 800794a:	4602      	mov	r2, r0
 800794c:	b928      	cbnz	r0, 800795a <__mdiff+0x2e>
 800794e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a4c <__mdiff+0x120>)
 8007950:	f240 2137 	movw	r1, #567	@ 0x237
 8007954:	483e      	ldr	r0, [pc, #248]	@ (8007a50 <__mdiff+0x124>)
 8007956:	f000 fb65 	bl	8008024 <__assert_func>
 800795a:	2301      	movs	r3, #1
 800795c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007960:	4610      	mov	r0, r2
 8007962:	b003      	add	sp, #12
 8007964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007968:	bfbc      	itt	lt
 800796a:	464b      	movlt	r3, r9
 800796c:	46a1      	movlt	r9, r4
 800796e:	4630      	mov	r0, r6
 8007970:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007974:	bfba      	itte	lt
 8007976:	461c      	movlt	r4, r3
 8007978:	2501      	movlt	r5, #1
 800797a:	2500      	movge	r5, #0
 800797c:	f7ff fd40 	bl	8007400 <_Balloc>
 8007980:	4602      	mov	r2, r0
 8007982:	b918      	cbnz	r0, 800798c <__mdiff+0x60>
 8007984:	4b31      	ldr	r3, [pc, #196]	@ (8007a4c <__mdiff+0x120>)
 8007986:	f240 2145 	movw	r1, #581	@ 0x245
 800798a:	e7e3      	b.n	8007954 <__mdiff+0x28>
 800798c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007990:	6926      	ldr	r6, [r4, #16]
 8007992:	60c5      	str	r5, [r0, #12]
 8007994:	f109 0310 	add.w	r3, r9, #16
 8007998:	f109 0514 	add.w	r5, r9, #20
 800799c:	f104 0e14 	add.w	lr, r4, #20
 80079a0:	f100 0b14 	add.w	fp, r0, #20
 80079a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80079a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	46d9      	mov	r9, fp
 80079b0:	f04f 0c00 	mov.w	ip, #0
 80079b4:	9b01      	ldr	r3, [sp, #4]
 80079b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80079ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	fa1f f38a 	uxth.w	r3, sl
 80079c4:	4619      	mov	r1, r3
 80079c6:	b283      	uxth	r3, r0
 80079c8:	1acb      	subs	r3, r1, r3
 80079ca:	0c00      	lsrs	r0, r0, #16
 80079cc:	4463      	add	r3, ip
 80079ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80079d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80079dc:	4576      	cmp	r6, lr
 80079de:	f849 3b04 	str.w	r3, [r9], #4
 80079e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079e6:	d8e5      	bhi.n	80079b4 <__mdiff+0x88>
 80079e8:	1b33      	subs	r3, r6, r4
 80079ea:	3b15      	subs	r3, #21
 80079ec:	f023 0303 	bic.w	r3, r3, #3
 80079f0:	3415      	adds	r4, #21
 80079f2:	3304      	adds	r3, #4
 80079f4:	42a6      	cmp	r6, r4
 80079f6:	bf38      	it	cc
 80079f8:	2304      	movcc	r3, #4
 80079fa:	441d      	add	r5, r3
 80079fc:	445b      	add	r3, fp
 80079fe:	461e      	mov	r6, r3
 8007a00:	462c      	mov	r4, r5
 8007a02:	4544      	cmp	r4, r8
 8007a04:	d30e      	bcc.n	8007a24 <__mdiff+0xf8>
 8007a06:	f108 0103 	add.w	r1, r8, #3
 8007a0a:	1b49      	subs	r1, r1, r5
 8007a0c:	f021 0103 	bic.w	r1, r1, #3
 8007a10:	3d03      	subs	r5, #3
 8007a12:	45a8      	cmp	r8, r5
 8007a14:	bf38      	it	cc
 8007a16:	2100      	movcc	r1, #0
 8007a18:	440b      	add	r3, r1
 8007a1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a1e:	b191      	cbz	r1, 8007a46 <__mdiff+0x11a>
 8007a20:	6117      	str	r7, [r2, #16]
 8007a22:	e79d      	b.n	8007960 <__mdiff+0x34>
 8007a24:	f854 1b04 	ldr.w	r1, [r4], #4
 8007a28:	46e6      	mov	lr, ip
 8007a2a:	0c08      	lsrs	r0, r1, #16
 8007a2c:	fa1c fc81 	uxtah	ip, ip, r1
 8007a30:	4471      	add	r1, lr
 8007a32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007a36:	b289      	uxth	r1, r1
 8007a38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a3c:	f846 1b04 	str.w	r1, [r6], #4
 8007a40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a44:	e7dd      	b.n	8007a02 <__mdiff+0xd6>
 8007a46:	3f01      	subs	r7, #1
 8007a48:	e7e7      	b.n	8007a1a <__mdiff+0xee>
 8007a4a:	bf00      	nop
 8007a4c:	08008304 	.word	0x08008304
 8007a50:	08008315 	.word	0x08008315

08007a54 <__d2b>:
 8007a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a58:	460f      	mov	r7, r1
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	ec59 8b10 	vmov	r8, r9, d0
 8007a60:	4616      	mov	r6, r2
 8007a62:	f7ff fccd 	bl	8007400 <_Balloc>
 8007a66:	4604      	mov	r4, r0
 8007a68:	b930      	cbnz	r0, 8007a78 <__d2b+0x24>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	4b23      	ldr	r3, [pc, #140]	@ (8007afc <__d2b+0xa8>)
 8007a6e:	4824      	ldr	r0, [pc, #144]	@ (8007b00 <__d2b+0xac>)
 8007a70:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a74:	f000 fad6 	bl	8008024 <__assert_func>
 8007a78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a80:	b10d      	cbz	r5, 8007a86 <__d2b+0x32>
 8007a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	f1b8 0300 	subs.w	r3, r8, #0
 8007a8c:	d023      	beq.n	8007ad6 <__d2b+0x82>
 8007a8e:	4668      	mov	r0, sp
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	f7ff fd7c 	bl	800758e <__lo0bits>
 8007a96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a9a:	b1d0      	cbz	r0, 8007ad2 <__d2b+0x7e>
 8007a9c:	f1c0 0320 	rsb	r3, r0, #32
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	40c2      	lsrs	r2, r0
 8007aa8:	6163      	str	r3, [r4, #20]
 8007aaa:	9201      	str	r2, [sp, #4]
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	61a3      	str	r3, [r4, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bf0c      	ite	eq
 8007ab4:	2201      	moveq	r2, #1
 8007ab6:	2202      	movne	r2, #2
 8007ab8:	6122      	str	r2, [r4, #16]
 8007aba:	b1a5      	cbz	r5, 8007ae6 <__d2b+0x92>
 8007abc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ac0:	4405      	add	r5, r0
 8007ac2:	603d      	str	r5, [r7, #0]
 8007ac4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ac8:	6030      	str	r0, [r6, #0]
 8007aca:	4620      	mov	r0, r4
 8007acc:	b003      	add	sp, #12
 8007ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ad2:	6161      	str	r1, [r4, #20]
 8007ad4:	e7ea      	b.n	8007aac <__d2b+0x58>
 8007ad6:	a801      	add	r0, sp, #4
 8007ad8:	f7ff fd59 	bl	800758e <__lo0bits>
 8007adc:	9b01      	ldr	r3, [sp, #4]
 8007ade:	6163      	str	r3, [r4, #20]
 8007ae0:	3020      	adds	r0, #32
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	e7e8      	b.n	8007ab8 <__d2b+0x64>
 8007ae6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007aea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007aee:	6038      	str	r0, [r7, #0]
 8007af0:	6918      	ldr	r0, [r3, #16]
 8007af2:	f7ff fd2d 	bl	8007550 <__hi0bits>
 8007af6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007afa:	e7e5      	b.n	8007ac8 <__d2b+0x74>
 8007afc:	08008304 	.word	0x08008304
 8007b00:	08008315 	.word	0x08008315

08007b04 <__sfputc_r>:
 8007b04:	6893      	ldr	r3, [r2, #8]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	b410      	push	{r4}
 8007b0c:	6093      	str	r3, [r2, #8]
 8007b0e:	da08      	bge.n	8007b22 <__sfputc_r+0x1e>
 8007b10:	6994      	ldr	r4, [r2, #24]
 8007b12:	42a3      	cmp	r3, r4
 8007b14:	db01      	blt.n	8007b1a <__sfputc_r+0x16>
 8007b16:	290a      	cmp	r1, #10
 8007b18:	d103      	bne.n	8007b22 <__sfputc_r+0x1e>
 8007b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b1e:	f7fe bbfa 	b.w	8006316 <__swbuf_r>
 8007b22:	6813      	ldr	r3, [r2, #0]
 8007b24:	1c58      	adds	r0, r3, #1
 8007b26:	6010      	str	r0, [r2, #0]
 8007b28:	7019      	strb	r1, [r3, #0]
 8007b2a:	4608      	mov	r0, r1
 8007b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <__sfputs_r>:
 8007b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b34:	4606      	mov	r6, r0
 8007b36:	460f      	mov	r7, r1
 8007b38:	4614      	mov	r4, r2
 8007b3a:	18d5      	adds	r5, r2, r3
 8007b3c:	42ac      	cmp	r4, r5
 8007b3e:	d101      	bne.n	8007b44 <__sfputs_r+0x12>
 8007b40:	2000      	movs	r0, #0
 8007b42:	e007      	b.n	8007b54 <__sfputs_r+0x22>
 8007b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b48:	463a      	mov	r2, r7
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7ff ffda 	bl	8007b04 <__sfputc_r>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d1f3      	bne.n	8007b3c <__sfputs_r+0xa>
 8007b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b58 <_vfiprintf_r>:
 8007b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	460d      	mov	r5, r1
 8007b5e:	b09d      	sub	sp, #116	@ 0x74
 8007b60:	4614      	mov	r4, r2
 8007b62:	4698      	mov	r8, r3
 8007b64:	4606      	mov	r6, r0
 8007b66:	b118      	cbz	r0, 8007b70 <_vfiprintf_r+0x18>
 8007b68:	6a03      	ldr	r3, [r0, #32]
 8007b6a:	b90b      	cbnz	r3, 8007b70 <_vfiprintf_r+0x18>
 8007b6c:	f7fe faea 	bl	8006144 <__sinit>
 8007b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b72:	07d9      	lsls	r1, r3, #31
 8007b74:	d405      	bmi.n	8007b82 <_vfiprintf_r+0x2a>
 8007b76:	89ab      	ldrh	r3, [r5, #12]
 8007b78:	059a      	lsls	r2, r3, #22
 8007b7a:	d402      	bmi.n	8007b82 <_vfiprintf_r+0x2a>
 8007b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b7e:	f7fe fcee 	bl	800655e <__retarget_lock_acquire_recursive>
 8007b82:	89ab      	ldrh	r3, [r5, #12]
 8007b84:	071b      	lsls	r3, r3, #28
 8007b86:	d501      	bpl.n	8007b8c <_vfiprintf_r+0x34>
 8007b88:	692b      	ldr	r3, [r5, #16]
 8007b8a:	b99b      	cbnz	r3, 8007bb4 <_vfiprintf_r+0x5c>
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7fe fc00 	bl	8006394 <__swsetup_r>
 8007b94:	b170      	cbz	r0, 8007bb4 <_vfiprintf_r+0x5c>
 8007b96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b98:	07dc      	lsls	r4, r3, #31
 8007b9a:	d504      	bpl.n	8007ba6 <_vfiprintf_r+0x4e>
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	b01d      	add	sp, #116	@ 0x74
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	89ab      	ldrh	r3, [r5, #12]
 8007ba8:	0598      	lsls	r0, r3, #22
 8007baa:	d4f7      	bmi.n	8007b9c <_vfiprintf_r+0x44>
 8007bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bae:	f7fe fcd7 	bl	8006560 <__retarget_lock_release_recursive>
 8007bb2:	e7f3      	b.n	8007b9c <_vfiprintf_r+0x44>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb8:	2320      	movs	r3, #32
 8007bba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bc2:	2330      	movs	r3, #48	@ 0x30
 8007bc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007d74 <_vfiprintf_r+0x21c>
 8007bc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bcc:	f04f 0901 	mov.w	r9, #1
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	469a      	mov	sl, r3
 8007bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bd8:	b10a      	cbz	r2, 8007bde <_vfiprintf_r+0x86>
 8007bda:	2a25      	cmp	r2, #37	@ 0x25
 8007bdc:	d1f9      	bne.n	8007bd2 <_vfiprintf_r+0x7a>
 8007bde:	ebba 0b04 	subs.w	fp, sl, r4
 8007be2:	d00b      	beq.n	8007bfc <_vfiprintf_r+0xa4>
 8007be4:	465b      	mov	r3, fp
 8007be6:	4622      	mov	r2, r4
 8007be8:	4629      	mov	r1, r5
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7ff ffa1 	bl	8007b32 <__sfputs_r>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f000 80a7 	beq.w	8007d44 <_vfiprintf_r+0x1ec>
 8007bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bf8:	445a      	add	r2, fp
 8007bfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 809f 	beq.w	8007d44 <_vfiprintf_r+0x1ec>
 8007c06:	2300      	movs	r3, #0
 8007c08:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c10:	f10a 0a01 	add.w	sl, sl, #1
 8007c14:	9304      	str	r3, [sp, #16]
 8007c16:	9307      	str	r3, [sp, #28]
 8007c18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c1e:	4654      	mov	r4, sl
 8007c20:	2205      	movs	r2, #5
 8007c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c26:	4853      	ldr	r0, [pc, #332]	@ (8007d74 <_vfiprintf_r+0x21c>)
 8007c28:	f7f8 fada 	bl	80001e0 <memchr>
 8007c2c:	9a04      	ldr	r2, [sp, #16]
 8007c2e:	b9d8      	cbnz	r0, 8007c68 <_vfiprintf_r+0x110>
 8007c30:	06d1      	lsls	r1, r2, #27
 8007c32:	bf44      	itt	mi
 8007c34:	2320      	movmi	r3, #32
 8007c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c3a:	0713      	lsls	r3, r2, #28
 8007c3c:	bf44      	itt	mi
 8007c3e:	232b      	movmi	r3, #43	@ 0x2b
 8007c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c44:	f89a 3000 	ldrb.w	r3, [sl]
 8007c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c4a:	d015      	beq.n	8007c78 <_vfiprintf_r+0x120>
 8007c4c:	9a07      	ldr	r2, [sp, #28]
 8007c4e:	4654      	mov	r4, sl
 8007c50:	2000      	movs	r0, #0
 8007c52:	f04f 0c0a 	mov.w	ip, #10
 8007c56:	4621      	mov	r1, r4
 8007c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c5c:	3b30      	subs	r3, #48	@ 0x30
 8007c5e:	2b09      	cmp	r3, #9
 8007c60:	d94b      	bls.n	8007cfa <_vfiprintf_r+0x1a2>
 8007c62:	b1b0      	cbz	r0, 8007c92 <_vfiprintf_r+0x13a>
 8007c64:	9207      	str	r2, [sp, #28]
 8007c66:	e014      	b.n	8007c92 <_vfiprintf_r+0x13a>
 8007c68:	eba0 0308 	sub.w	r3, r0, r8
 8007c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c70:	4313      	orrs	r3, r2
 8007c72:	9304      	str	r3, [sp, #16]
 8007c74:	46a2      	mov	sl, r4
 8007c76:	e7d2      	b.n	8007c1e <_vfiprintf_r+0xc6>
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	1d19      	adds	r1, r3, #4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	9103      	str	r1, [sp, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bfbb      	ittet	lt
 8007c84:	425b      	neglt	r3, r3
 8007c86:	f042 0202 	orrlt.w	r2, r2, #2
 8007c8a:	9307      	strge	r3, [sp, #28]
 8007c8c:	9307      	strlt	r3, [sp, #28]
 8007c8e:	bfb8      	it	lt
 8007c90:	9204      	strlt	r2, [sp, #16]
 8007c92:	7823      	ldrb	r3, [r4, #0]
 8007c94:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c96:	d10a      	bne.n	8007cae <_vfiprintf_r+0x156>
 8007c98:	7863      	ldrb	r3, [r4, #1]
 8007c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c9c:	d132      	bne.n	8007d04 <_vfiprintf_r+0x1ac>
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	1d1a      	adds	r2, r3, #4
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	9203      	str	r2, [sp, #12]
 8007ca6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007caa:	3402      	adds	r4, #2
 8007cac:	9305      	str	r3, [sp, #20]
 8007cae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d84 <_vfiprintf_r+0x22c>
 8007cb2:	7821      	ldrb	r1, [r4, #0]
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	4650      	mov	r0, sl
 8007cb8:	f7f8 fa92 	bl	80001e0 <memchr>
 8007cbc:	b138      	cbz	r0, 8007cce <_vfiprintf_r+0x176>
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	eba0 000a 	sub.w	r0, r0, sl
 8007cc4:	2240      	movs	r2, #64	@ 0x40
 8007cc6:	4082      	lsls	r2, r0
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	3401      	adds	r4, #1
 8007ccc:	9304      	str	r3, [sp, #16]
 8007cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd2:	4829      	ldr	r0, [pc, #164]	@ (8007d78 <_vfiprintf_r+0x220>)
 8007cd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cd8:	2206      	movs	r2, #6
 8007cda:	f7f8 fa81 	bl	80001e0 <memchr>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d03f      	beq.n	8007d62 <_vfiprintf_r+0x20a>
 8007ce2:	4b26      	ldr	r3, [pc, #152]	@ (8007d7c <_vfiprintf_r+0x224>)
 8007ce4:	bb1b      	cbnz	r3, 8007d2e <_vfiprintf_r+0x1d6>
 8007ce6:	9b03      	ldr	r3, [sp, #12]
 8007ce8:	3307      	adds	r3, #7
 8007cea:	f023 0307 	bic.w	r3, r3, #7
 8007cee:	3308      	adds	r3, #8
 8007cf0:	9303      	str	r3, [sp, #12]
 8007cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf4:	443b      	add	r3, r7
 8007cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cf8:	e76a      	b.n	8007bd0 <_vfiprintf_r+0x78>
 8007cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cfe:	460c      	mov	r4, r1
 8007d00:	2001      	movs	r0, #1
 8007d02:	e7a8      	b.n	8007c56 <_vfiprintf_r+0xfe>
 8007d04:	2300      	movs	r3, #0
 8007d06:	3401      	adds	r4, #1
 8007d08:	9305      	str	r3, [sp, #20]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f04f 0c0a 	mov.w	ip, #10
 8007d10:	4620      	mov	r0, r4
 8007d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d16:	3a30      	subs	r2, #48	@ 0x30
 8007d18:	2a09      	cmp	r2, #9
 8007d1a:	d903      	bls.n	8007d24 <_vfiprintf_r+0x1cc>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0c6      	beq.n	8007cae <_vfiprintf_r+0x156>
 8007d20:	9105      	str	r1, [sp, #20]
 8007d22:	e7c4      	b.n	8007cae <_vfiprintf_r+0x156>
 8007d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d28:	4604      	mov	r4, r0
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e7f0      	b.n	8007d10 <_vfiprintf_r+0x1b8>
 8007d2e:	ab03      	add	r3, sp, #12
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	462a      	mov	r2, r5
 8007d34:	4b12      	ldr	r3, [pc, #72]	@ (8007d80 <_vfiprintf_r+0x228>)
 8007d36:	a904      	add	r1, sp, #16
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7fd fdbf 	bl	80058bc <_printf_float>
 8007d3e:	4607      	mov	r7, r0
 8007d40:	1c78      	adds	r0, r7, #1
 8007d42:	d1d6      	bne.n	8007cf2 <_vfiprintf_r+0x19a>
 8007d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d46:	07d9      	lsls	r1, r3, #31
 8007d48:	d405      	bmi.n	8007d56 <_vfiprintf_r+0x1fe>
 8007d4a:	89ab      	ldrh	r3, [r5, #12]
 8007d4c:	059a      	lsls	r2, r3, #22
 8007d4e:	d402      	bmi.n	8007d56 <_vfiprintf_r+0x1fe>
 8007d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d52:	f7fe fc05 	bl	8006560 <__retarget_lock_release_recursive>
 8007d56:	89ab      	ldrh	r3, [r5, #12]
 8007d58:	065b      	lsls	r3, r3, #25
 8007d5a:	f53f af1f 	bmi.w	8007b9c <_vfiprintf_r+0x44>
 8007d5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d60:	e71e      	b.n	8007ba0 <_vfiprintf_r+0x48>
 8007d62:	ab03      	add	r3, sp, #12
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	462a      	mov	r2, r5
 8007d68:	4b05      	ldr	r3, [pc, #20]	@ (8007d80 <_vfiprintf_r+0x228>)
 8007d6a:	a904      	add	r1, sp, #16
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7fe f83d 	bl	8005dec <_printf_i>
 8007d72:	e7e4      	b.n	8007d3e <_vfiprintf_r+0x1e6>
 8007d74:	08008470 	.word	0x08008470
 8007d78:	0800847a 	.word	0x0800847a
 8007d7c:	080058bd 	.word	0x080058bd
 8007d80:	08007b33 	.word	0x08007b33
 8007d84:	08008476 	.word	0x08008476

08007d88 <__sflush_r>:
 8007d88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d90:	0716      	lsls	r6, r2, #28
 8007d92:	4605      	mov	r5, r0
 8007d94:	460c      	mov	r4, r1
 8007d96:	d454      	bmi.n	8007e42 <__sflush_r+0xba>
 8007d98:	684b      	ldr	r3, [r1, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	dc02      	bgt.n	8007da4 <__sflush_r+0x1c>
 8007d9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dd48      	ble.n	8007e36 <__sflush_r+0xae>
 8007da4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007da6:	2e00      	cmp	r6, #0
 8007da8:	d045      	beq.n	8007e36 <__sflush_r+0xae>
 8007daa:	2300      	movs	r3, #0
 8007dac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007db0:	682f      	ldr	r7, [r5, #0]
 8007db2:	6a21      	ldr	r1, [r4, #32]
 8007db4:	602b      	str	r3, [r5, #0]
 8007db6:	d030      	beq.n	8007e1a <__sflush_r+0x92>
 8007db8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	0759      	lsls	r1, r3, #29
 8007dbe:	d505      	bpl.n	8007dcc <__sflush_r+0x44>
 8007dc0:	6863      	ldr	r3, [r4, #4]
 8007dc2:	1ad2      	subs	r2, r2, r3
 8007dc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dc6:	b10b      	cbz	r3, 8007dcc <__sflush_r+0x44>
 8007dc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	2300      	movs	r3, #0
 8007dce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dd0:	6a21      	ldr	r1, [r4, #32]
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	47b0      	blx	r6
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	d106      	bne.n	8007dea <__sflush_r+0x62>
 8007ddc:	6829      	ldr	r1, [r5, #0]
 8007dde:	291d      	cmp	r1, #29
 8007de0:	d82b      	bhi.n	8007e3a <__sflush_r+0xb2>
 8007de2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e8c <__sflush_r+0x104>)
 8007de4:	410a      	asrs	r2, r1
 8007de6:	07d6      	lsls	r6, r2, #31
 8007de8:	d427      	bmi.n	8007e3a <__sflush_r+0xb2>
 8007dea:	2200      	movs	r2, #0
 8007dec:	6062      	str	r2, [r4, #4]
 8007dee:	04d9      	lsls	r1, r3, #19
 8007df0:	6922      	ldr	r2, [r4, #16]
 8007df2:	6022      	str	r2, [r4, #0]
 8007df4:	d504      	bpl.n	8007e00 <__sflush_r+0x78>
 8007df6:	1c42      	adds	r2, r0, #1
 8007df8:	d101      	bne.n	8007dfe <__sflush_r+0x76>
 8007dfa:	682b      	ldr	r3, [r5, #0]
 8007dfc:	b903      	cbnz	r3, 8007e00 <__sflush_r+0x78>
 8007dfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e02:	602f      	str	r7, [r5, #0]
 8007e04:	b1b9      	cbz	r1, 8007e36 <__sflush_r+0xae>
 8007e06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e0a:	4299      	cmp	r1, r3
 8007e0c:	d002      	beq.n	8007e14 <__sflush_r+0x8c>
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f7ff f9f6 	bl	8007200 <_free_r>
 8007e14:	2300      	movs	r3, #0
 8007e16:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e18:	e00d      	b.n	8007e36 <__sflush_r+0xae>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b0      	blx	r6
 8007e20:	4602      	mov	r2, r0
 8007e22:	1c50      	adds	r0, r2, #1
 8007e24:	d1c9      	bne.n	8007dba <__sflush_r+0x32>
 8007e26:	682b      	ldr	r3, [r5, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0c6      	beq.n	8007dba <__sflush_r+0x32>
 8007e2c:	2b1d      	cmp	r3, #29
 8007e2e:	d001      	beq.n	8007e34 <__sflush_r+0xac>
 8007e30:	2b16      	cmp	r3, #22
 8007e32:	d11e      	bne.n	8007e72 <__sflush_r+0xea>
 8007e34:	602f      	str	r7, [r5, #0]
 8007e36:	2000      	movs	r0, #0
 8007e38:	e022      	b.n	8007e80 <__sflush_r+0xf8>
 8007e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e3e:	b21b      	sxth	r3, r3
 8007e40:	e01b      	b.n	8007e7a <__sflush_r+0xf2>
 8007e42:	690f      	ldr	r7, [r1, #16]
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	d0f6      	beq.n	8007e36 <__sflush_r+0xae>
 8007e48:	0793      	lsls	r3, r2, #30
 8007e4a:	680e      	ldr	r6, [r1, #0]
 8007e4c:	bf08      	it	eq
 8007e4e:	694b      	ldreq	r3, [r1, #20]
 8007e50:	600f      	str	r7, [r1, #0]
 8007e52:	bf18      	it	ne
 8007e54:	2300      	movne	r3, #0
 8007e56:	eba6 0807 	sub.w	r8, r6, r7
 8007e5a:	608b      	str	r3, [r1, #8]
 8007e5c:	f1b8 0f00 	cmp.w	r8, #0
 8007e60:	dde9      	ble.n	8007e36 <__sflush_r+0xae>
 8007e62:	6a21      	ldr	r1, [r4, #32]
 8007e64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e66:	4643      	mov	r3, r8
 8007e68:	463a      	mov	r2, r7
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	47b0      	blx	r6
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	dc08      	bgt.n	8007e84 <__sflush_r+0xfc>
 8007e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e7a:	81a3      	strh	r3, [r4, #12]
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	4407      	add	r7, r0
 8007e86:	eba8 0800 	sub.w	r8, r8, r0
 8007e8a:	e7e7      	b.n	8007e5c <__sflush_r+0xd4>
 8007e8c:	dfbffffe 	.word	0xdfbffffe

08007e90 <_fflush_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	690b      	ldr	r3, [r1, #16]
 8007e94:	4605      	mov	r5, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	b913      	cbnz	r3, 8007ea0 <_fflush_r+0x10>
 8007e9a:	2500      	movs	r5, #0
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ea0:	b118      	cbz	r0, 8007eaa <_fflush_r+0x1a>
 8007ea2:	6a03      	ldr	r3, [r0, #32]
 8007ea4:	b90b      	cbnz	r3, 8007eaa <_fflush_r+0x1a>
 8007ea6:	f7fe f94d 	bl	8006144 <__sinit>
 8007eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f3      	beq.n	8007e9a <_fflush_r+0xa>
 8007eb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007eb4:	07d0      	lsls	r0, r2, #31
 8007eb6:	d404      	bmi.n	8007ec2 <_fflush_r+0x32>
 8007eb8:	0599      	lsls	r1, r3, #22
 8007eba:	d402      	bmi.n	8007ec2 <_fflush_r+0x32>
 8007ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ebe:	f7fe fb4e 	bl	800655e <__retarget_lock_acquire_recursive>
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	f7ff ff5f 	bl	8007d88 <__sflush_r>
 8007eca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ecc:	07da      	lsls	r2, r3, #31
 8007ece:	4605      	mov	r5, r0
 8007ed0:	d4e4      	bmi.n	8007e9c <_fflush_r+0xc>
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	059b      	lsls	r3, r3, #22
 8007ed6:	d4e1      	bmi.n	8007e9c <_fflush_r+0xc>
 8007ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eda:	f7fe fb41 	bl	8006560 <__retarget_lock_release_recursive>
 8007ede:	e7dd      	b.n	8007e9c <_fflush_r+0xc>

08007ee0 <__swhatbuf_r>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	b096      	sub	sp, #88	@ 0x58
 8007eec:	4615      	mov	r5, r2
 8007eee:	461e      	mov	r6, r3
 8007ef0:	da0d      	bge.n	8007f0e <__swhatbuf_r+0x2e>
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ef8:	f04f 0100 	mov.w	r1, #0
 8007efc:	bf14      	ite	ne
 8007efe:	2340      	movne	r3, #64	@ 0x40
 8007f00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f04:	2000      	movs	r0, #0
 8007f06:	6031      	str	r1, [r6, #0]
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	b016      	add	sp, #88	@ 0x58
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
 8007f0e:	466a      	mov	r2, sp
 8007f10:	f000 f848 	bl	8007fa4 <_fstat_r>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	dbec      	blt.n	8007ef2 <__swhatbuf_r+0x12>
 8007f18:	9901      	ldr	r1, [sp, #4]
 8007f1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f22:	4259      	negs	r1, r3
 8007f24:	4159      	adcs	r1, r3
 8007f26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f2a:	e7eb      	b.n	8007f04 <__swhatbuf_r+0x24>

08007f2c <__smakebuf_r>:
 8007f2c:	898b      	ldrh	r3, [r1, #12]
 8007f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f30:	079d      	lsls	r5, r3, #30
 8007f32:	4606      	mov	r6, r0
 8007f34:	460c      	mov	r4, r1
 8007f36:	d507      	bpl.n	8007f48 <__smakebuf_r+0x1c>
 8007f38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	6123      	str	r3, [r4, #16]
 8007f40:	2301      	movs	r3, #1
 8007f42:	6163      	str	r3, [r4, #20]
 8007f44:	b003      	add	sp, #12
 8007f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f48:	ab01      	add	r3, sp, #4
 8007f4a:	466a      	mov	r2, sp
 8007f4c:	f7ff ffc8 	bl	8007ee0 <__swhatbuf_r>
 8007f50:	9f00      	ldr	r7, [sp, #0]
 8007f52:	4605      	mov	r5, r0
 8007f54:	4639      	mov	r1, r7
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff f9c6 	bl	80072e8 <_malloc_r>
 8007f5c:	b948      	cbnz	r0, 8007f72 <__smakebuf_r+0x46>
 8007f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f62:	059a      	lsls	r2, r3, #22
 8007f64:	d4ee      	bmi.n	8007f44 <__smakebuf_r+0x18>
 8007f66:	f023 0303 	bic.w	r3, r3, #3
 8007f6a:	f043 0302 	orr.w	r3, r3, #2
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	e7e2      	b.n	8007f38 <__smakebuf_r+0xc>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	6020      	str	r0, [r4, #0]
 8007f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f82:	b15b      	cbz	r3, 8007f9c <__smakebuf_r+0x70>
 8007f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f000 f81d 	bl	8007fc8 <_isatty_r>
 8007f8e:	b128      	cbz	r0, 8007f9c <__smakebuf_r+0x70>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	f043 0301 	orr.w	r3, r3, #1
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	431d      	orrs	r5, r3
 8007fa0:	81a5      	strh	r5, [r4, #12]
 8007fa2:	e7cf      	b.n	8007f44 <__smakebuf_r+0x18>

08007fa4 <_fstat_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d07      	ldr	r5, [pc, #28]	@ (8007fc4 <_fstat_r+0x20>)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4604      	mov	r4, r0
 8007fac:	4608      	mov	r0, r1
 8007fae:	4611      	mov	r1, r2
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	f7fa fb0d 	bl	80025d0 <_fstat>
 8007fb6:	1c43      	adds	r3, r0, #1
 8007fb8:	d102      	bne.n	8007fc0 <_fstat_r+0x1c>
 8007fba:	682b      	ldr	r3, [r5, #0]
 8007fbc:	b103      	cbz	r3, 8007fc0 <_fstat_r+0x1c>
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	bd38      	pop	{r3, r4, r5, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000568 	.word	0x20000568

08007fc8 <_isatty_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d06      	ldr	r5, [pc, #24]	@ (8007fe4 <_isatty_r+0x1c>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	f7fa fb0c 	bl	80025f0 <_isatty>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_isatty_r+0x1a>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_isatty_r+0x1a>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	20000568 	.word	0x20000568

08007fe8 <_sbrk_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d06      	ldr	r5, [pc, #24]	@ (8008004 <_sbrk_r+0x1c>)
 8007fec:	2300      	movs	r3, #0
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	602b      	str	r3, [r5, #0]
 8007ff4:	f7fa fb14 	bl	8002620 <_sbrk>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_sbrk_r+0x1a>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_sbrk_r+0x1a>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	20000568 	.word	0x20000568

08008008 <memcpy>:
 8008008:	440a      	add	r2, r1
 800800a:	4291      	cmp	r1, r2
 800800c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008010:	d100      	bne.n	8008014 <memcpy+0xc>
 8008012:	4770      	bx	lr
 8008014:	b510      	push	{r4, lr}
 8008016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800801a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800801e:	4291      	cmp	r1, r2
 8008020:	d1f9      	bne.n	8008016 <memcpy+0xe>
 8008022:	bd10      	pop	{r4, pc}

08008024 <__assert_func>:
 8008024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008026:	4614      	mov	r4, r2
 8008028:	461a      	mov	r2, r3
 800802a:	4b09      	ldr	r3, [pc, #36]	@ (8008050 <__assert_func+0x2c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4605      	mov	r5, r0
 8008030:	68d8      	ldr	r0, [r3, #12]
 8008032:	b954      	cbnz	r4, 800804a <__assert_func+0x26>
 8008034:	4b07      	ldr	r3, [pc, #28]	@ (8008054 <__assert_func+0x30>)
 8008036:	461c      	mov	r4, r3
 8008038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800803c:	9100      	str	r1, [sp, #0]
 800803e:	462b      	mov	r3, r5
 8008040:	4905      	ldr	r1, [pc, #20]	@ (8008058 <__assert_func+0x34>)
 8008042:	f000 f841 	bl	80080c8 <fiprintf>
 8008046:	f000 f851 	bl	80080ec <abort>
 800804a:	4b04      	ldr	r3, [pc, #16]	@ (800805c <__assert_func+0x38>)
 800804c:	e7f4      	b.n	8008038 <__assert_func+0x14>
 800804e:	bf00      	nop
 8008050:	2000001c 	.word	0x2000001c
 8008054:	080084c6 	.word	0x080084c6
 8008058:	08008498 	.word	0x08008498
 800805c:	0800848b 	.word	0x0800848b

08008060 <_calloc_r>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	fba1 5402 	umull	r5, r4, r1, r2
 8008066:	b93c      	cbnz	r4, 8008078 <_calloc_r+0x18>
 8008068:	4629      	mov	r1, r5
 800806a:	f7ff f93d 	bl	80072e8 <_malloc_r>
 800806e:	4606      	mov	r6, r0
 8008070:	b928      	cbnz	r0, 800807e <_calloc_r+0x1e>
 8008072:	2600      	movs	r6, #0
 8008074:	4630      	mov	r0, r6
 8008076:	bd70      	pop	{r4, r5, r6, pc}
 8008078:	220c      	movs	r2, #12
 800807a:	6002      	str	r2, [r0, #0]
 800807c:	e7f9      	b.n	8008072 <_calloc_r+0x12>
 800807e:	462a      	mov	r2, r5
 8008080:	4621      	mov	r1, r4
 8008082:	f7fe f9dd 	bl	8006440 <memset>
 8008086:	e7f5      	b.n	8008074 <_calloc_r+0x14>

08008088 <__ascii_mbtowc>:
 8008088:	b082      	sub	sp, #8
 800808a:	b901      	cbnz	r1, 800808e <__ascii_mbtowc+0x6>
 800808c:	a901      	add	r1, sp, #4
 800808e:	b142      	cbz	r2, 80080a2 <__ascii_mbtowc+0x1a>
 8008090:	b14b      	cbz	r3, 80080a6 <__ascii_mbtowc+0x1e>
 8008092:	7813      	ldrb	r3, [r2, #0]
 8008094:	600b      	str	r3, [r1, #0]
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	1e10      	subs	r0, r2, #0
 800809a:	bf18      	it	ne
 800809c:	2001      	movne	r0, #1
 800809e:	b002      	add	sp, #8
 80080a0:	4770      	bx	lr
 80080a2:	4610      	mov	r0, r2
 80080a4:	e7fb      	b.n	800809e <__ascii_mbtowc+0x16>
 80080a6:	f06f 0001 	mvn.w	r0, #1
 80080aa:	e7f8      	b.n	800809e <__ascii_mbtowc+0x16>

080080ac <__ascii_wctomb>:
 80080ac:	4603      	mov	r3, r0
 80080ae:	4608      	mov	r0, r1
 80080b0:	b141      	cbz	r1, 80080c4 <__ascii_wctomb+0x18>
 80080b2:	2aff      	cmp	r2, #255	@ 0xff
 80080b4:	d904      	bls.n	80080c0 <__ascii_wctomb+0x14>
 80080b6:	228a      	movs	r2, #138	@ 0x8a
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	f04f 30ff 	mov.w	r0, #4294967295
 80080be:	4770      	bx	lr
 80080c0:	700a      	strb	r2, [r1, #0]
 80080c2:	2001      	movs	r0, #1
 80080c4:	4770      	bx	lr
	...

080080c8 <fiprintf>:
 80080c8:	b40e      	push	{r1, r2, r3}
 80080ca:	b503      	push	{r0, r1, lr}
 80080cc:	4601      	mov	r1, r0
 80080ce:	ab03      	add	r3, sp, #12
 80080d0:	4805      	ldr	r0, [pc, #20]	@ (80080e8 <fiprintf+0x20>)
 80080d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d6:	6800      	ldr	r0, [r0, #0]
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	f7ff fd3d 	bl	8007b58 <_vfiprintf_r>
 80080de:	b002      	add	sp, #8
 80080e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080e4:	b003      	add	sp, #12
 80080e6:	4770      	bx	lr
 80080e8:	2000001c 	.word	0x2000001c

080080ec <abort>:
 80080ec:	b508      	push	{r3, lr}
 80080ee:	2006      	movs	r0, #6
 80080f0:	f000 f82c 	bl	800814c <raise>
 80080f4:	2001      	movs	r0, #1
 80080f6:	f7fa fa1b 	bl	8002530 <_exit>

080080fa <_raise_r>:
 80080fa:	291f      	cmp	r1, #31
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4605      	mov	r5, r0
 8008100:	460c      	mov	r4, r1
 8008102:	d904      	bls.n	800810e <_raise_r+0x14>
 8008104:	2316      	movs	r3, #22
 8008106:	6003      	str	r3, [r0, #0]
 8008108:	f04f 30ff 	mov.w	r0, #4294967295
 800810c:	bd38      	pop	{r3, r4, r5, pc}
 800810e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008110:	b112      	cbz	r2, 8008118 <_raise_r+0x1e>
 8008112:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008116:	b94b      	cbnz	r3, 800812c <_raise_r+0x32>
 8008118:	4628      	mov	r0, r5
 800811a:	f000 f831 	bl	8008180 <_getpid_r>
 800811e:	4622      	mov	r2, r4
 8008120:	4601      	mov	r1, r0
 8008122:	4628      	mov	r0, r5
 8008124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008128:	f000 b818 	b.w	800815c <_kill_r>
 800812c:	2b01      	cmp	r3, #1
 800812e:	d00a      	beq.n	8008146 <_raise_r+0x4c>
 8008130:	1c59      	adds	r1, r3, #1
 8008132:	d103      	bne.n	800813c <_raise_r+0x42>
 8008134:	2316      	movs	r3, #22
 8008136:	6003      	str	r3, [r0, #0]
 8008138:	2001      	movs	r0, #1
 800813a:	e7e7      	b.n	800810c <_raise_r+0x12>
 800813c:	2100      	movs	r1, #0
 800813e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008142:	4620      	mov	r0, r4
 8008144:	4798      	blx	r3
 8008146:	2000      	movs	r0, #0
 8008148:	e7e0      	b.n	800810c <_raise_r+0x12>
	...

0800814c <raise>:
 800814c:	4b02      	ldr	r3, [pc, #8]	@ (8008158 <raise+0xc>)
 800814e:	4601      	mov	r1, r0
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	f7ff bfd2 	b.w	80080fa <_raise_r>
 8008156:	bf00      	nop
 8008158:	2000001c 	.word	0x2000001c

0800815c <_kill_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	@ (800817c <_kill_r+0x20>)
 8008160:	2300      	movs	r3, #0
 8008162:	4604      	mov	r4, r0
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	602b      	str	r3, [r5, #0]
 800816a:	f7fa f9d1 	bl	8002510 <_kill>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	d102      	bne.n	8008178 <_kill_r+0x1c>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	b103      	cbz	r3, 8008178 <_kill_r+0x1c>
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	bf00      	nop
 800817c:	20000568 	.word	0x20000568

08008180 <_getpid_r>:
 8008180:	f7fa b9be 	b.w	8002500 <_getpid>

08008184 <_init>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	bf00      	nop
 8008188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818a:	bc08      	pop	{r3}
 800818c:	469e      	mov	lr, r3
 800818e:	4770      	bx	lr

08008190 <_fini>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	bf00      	nop
 8008194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008196:	bc08      	pop	{r3}
 8008198:	469e      	mov	lr, r3
 800819a:	4770      	bx	lr
