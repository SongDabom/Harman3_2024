
test10_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f18  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004158  08004158  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004158  08004158  00005158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004160  08004160  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004160  08004160  00005160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004164  08004164  00005164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004168  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000068  080041d0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080041d0  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fab  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3f  00000000  00000000  0000f043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  00010b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ed  00000000  00000000  00011360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016650  00000000  00000000  0001194d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fe4  00000000  00000000  00027f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087944  00000000  00000000  00031f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b98c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002660  00000000  00000000  000b9908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000bbf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040a0 	.word	0x080040a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080040a0 	.word	0x080040a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <GetBuffer>:
char buf[MAX_BUF];
char rx;
int head = 0, tail = 0;

int GetBuffer(char *bb)	// copy DMA buffer data to array b
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	int ret = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
	tail = MAX_BUF - huart2.hdmarx->Instance->NDTR;	//buffer의 잔여 공간
 800057c:	4b2c      	ldr	r3, [pc, #176]	@ (8000630 <GetBuffer+0xc0>)
 800057e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000588:	461a      	mov	r2, r3
 800058a:	4b2a      	ldr	r3, [pc, #168]	@ (8000634 <GetBuffer+0xc4>)
 800058c:	601a      	str	r2, [r3, #0]
	if(tail > head)
 800058e:	4b29      	ldr	r3, [pc, #164]	@ (8000634 <GetBuffer+0xc4>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b29      	ldr	r3, [pc, #164]	@ (8000638 <GetBuffer+0xc8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	429a      	cmp	r2, r3
 8000598:	dd14      	ble.n	80005c4 <GetBuffer+0x54>
	{
		memcpy(bb, buf + head, tail - head);
 800059a:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <GetBuffer+0xc8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	4b26      	ldr	r3, [pc, #152]	@ (800063c <GetBuffer+0xcc>)
 80005a2:	18d1      	adds	r1, r2, r3
 80005a4:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <GetBuffer+0xc4>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b23      	ldr	r3, [pc, #140]	@ (8000638 <GetBuffer+0xc8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f003 f85e 	bl	8003672 <memcpy>
		ret = tail - head;
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <GetBuffer+0xc4>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <GetBuffer+0xc8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	e026      	b.n	8000612 <GetBuffer+0xa2>
	}
	else if(tail < head)	//tail < head
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <GetBuffer+0xc4>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <GetBuffer+0xc8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	da20      	bge.n	8000612 <GetBuffer+0xa2>
	{
		memcpy(bb, buf + head, MAX_BUF - head);
 80005d0:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <GetBuffer+0xc8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b19      	ldr	r3, [pc, #100]	@ (800063c <GetBuffer+0xcc>)
 80005d8:	18d1      	adds	r1, r2, r3
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <GetBuffer+0xc8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80005e2:	461a      	mov	r2, r3
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f003 f844 	bl	8003672 <memcpy>
		memcpy(bb + MAX_BUF - head, buf, tail);
 80005ea:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <GetBuffer+0xc8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000634 <GetBuffer+0xc4>)
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	4910      	ldr	r1, [pc, #64]	@ (800063c <GetBuffer+0xcc>)
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 f838 	bl	8003672 <memcpy>
		ret = MAX_BUF -head + tail;
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <GetBuffer+0xc8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <GetBuffer+0xc4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
	}
	bb[ret] = 0;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	head = tail;
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <GetBuffer+0xc4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <GetBuffer+0xc8>)
 8000622:	6013      	str	r3, [r2, #0]
	return ret;
 8000624:	68fb      	ldr	r3, [r7, #12]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000084 	.word	0x20000084
 8000634:	20000198 	.word	0x20000198
 8000638:	20000194 	.word	0x20000194
 800063c:	2000012c 	.word	0x2000012c

08000640 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	//if(HAL_UART_Receive(huart, buf, 1, 1) == HAL_OK);	//normal
	buf[tail++] = rx;
 8000648:	4b08      	ldr	r3, [pc, #32]	@ (800066c <HAL_UART_RxCpltCallback+0x2c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	4907      	ldr	r1, [pc, #28]	@ (800066c <HAL_UART_RxCpltCallback+0x2c>)
 8000650:	600a      	str	r2, [r1, #0]
 8000652:	4a07      	ldr	r2, [pc, #28]	@ (8000670 <HAL_UART_RxCpltCallback+0x30>)
 8000654:	7811      	ldrb	r1, [r2, #0]
 8000656:	4a07      	ldr	r2, [pc, #28]	@ (8000674 <HAL_UART_RxCpltCallback+0x34>)
 8000658:	54d1      	strb	r1, [r2, r3]
	//printf("%c",rx);
	HAL_UART_Receive_IT(huart, &rx, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	4904      	ldr	r1, [pc, #16]	@ (8000670 <HAL_UART_RxCpltCallback+0x30>)
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f001 ffed 	bl	800263e <HAL_UART_Receive_IT>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000198 	.word	0x20000198
 8000670:	20000190 	.word	0x20000190
 8000674:	2000012c 	.word	0x2000012c

08000678 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09c      	sub	sp, #112	@ 0x70
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == A8_Pin)
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000688:	d10c      	bne.n	80006a4 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		char bb[MAX_BUF];
		if(GetBuffer(bb))
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff6e 	bl	8000570 <GetBuffer>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d004      	beq.n	80006a4 <HAL_GPIO_EXTI_Callback+0x2c>
			puts(bb);
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fe8c 	bl	80033bc <puts>

	}
}
 80006a4:	bf00      	nop
 80006a6:	3770      	adds	r7, #112	@ 0x70
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09a      	sub	sp, #104	@ 0x68
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 fb6b 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f823 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 f8d5 	bl	8000868 <MX_GPIO_Init>
  MX_DMA_Init();
 80006be:	f000 f8b3 	bl	8000828 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 f887 	bl	80007d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart();
 80006c6:	f000 f973 	bl	80009b0 <ProgramStart>
  //HAL_UART_Receive_IT(&huart2, &rx, 1);
  HAL_UART_Receive_DMA(&huart2, buf, MAX_BUF);
 80006ca:	2264      	movs	r2, #100	@ 0x64
 80006cc:	4909      	ldr	r1, [pc, #36]	@ (80006f4 <main+0x48>)
 80006ce:	480a      	ldr	r0, [pc, #40]	@ (80006f8 <main+0x4c>)
 80006d0:	f001 ffda 	bl	8002688 <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(GetBuffer(bb)) printf("%s\r\n", bb);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff4a 	bl	8000570 <GetBuffer>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d004      	beq.n	80006ec <main+0x40>
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4805      	ldr	r0, [pc, #20]	@ (80006fc <main+0x50>)
 80006e8:	f002 fe00 	bl	80032ec <iprintf>
	HAL_Delay(100);
 80006ec:	2064      	movs	r0, #100	@ 0x64
 80006ee:	f000 fbbf 	bl	8000e70 <HAL_Delay>
	if(GetBuffer(bb)) printf("%s\r\n", bb);
 80006f2:	e7ef      	b.n	80006d4 <main+0x28>
 80006f4:	2000012c 	.word	0x2000012c
 80006f8:	20000084 	.word	0x20000084
 80006fc:	080040b8 	.word	0x080040b8

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	@ 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f002 ff34 	bl	800357c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a27      	ldr	r2, [pc, #156]	@ (80007cc <SystemClock_Config+0xcc>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
 8000734:	4b25      	ldr	r3, [pc, #148]	@ (80007cc <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a21      	ldr	r2, [pc, #132]	@ (80007d0 <SystemClock_Config+0xd0>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000770:	2310      	movs	r3, #16
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000778:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800077e:	2304      	movs	r3, #4
 8000780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	4618      	mov	r0, r3
 8000788:	f001 f9e6 	bl	8001b58 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000792:	f000 f8f5 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2102      	movs	r1, #2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fc48 	bl	8002048 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007be:	f000 f8df 	bl	8000980 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	@ 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	@ (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f001 fe3c 	bl	8002488 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f8b3 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000084 	.word	0x20000084
 8000824:	40004400 	.word	0x40004400

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_DMA_Init+0x3c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a0b      	ldr	r2, [pc, #44]	@ (8000864 <MX_DMA_Init+0x3c>)
 8000838:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_DMA_Init+0x3c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2010      	movs	r0, #16
 8000850:	f000 fc0d 	bl	800106e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000854:	2010      	movs	r0, #16
 8000856:	f000 fc26 	bl	80010a6 <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b3c      	ldr	r3, [pc, #240]	@ (8000974 <MX_GPIO_Init+0x10c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a3b      	ldr	r2, [pc, #236]	@ (8000974 <MX_GPIO_Init+0x10c>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b39      	ldr	r3, [pc, #228]	@ (8000974 <MX_GPIO_Init+0x10c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b35      	ldr	r3, [pc, #212]	@ (8000974 <MX_GPIO_Init+0x10c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a34      	ldr	r2, [pc, #208]	@ (8000974 <MX_GPIO_Init+0x10c>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b32      	ldr	r3, [pc, #200]	@ (8000974 <MX_GPIO_Init+0x10c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <MX_GPIO_Init+0x10c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a2d      	ldr	r2, [pc, #180]	@ (8000974 <MX_GPIO_Init+0x10c>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <MX_GPIO_Init+0x10c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_GPIO_Init+0x10c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a26      	ldr	r2, [pc, #152]	@ (8000974 <MX_GPIO_Init+0x10c>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <MX_GPIO_Init+0x10c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2120      	movs	r1, #32
 80008f2:	4821      	ldr	r0, [pc, #132]	@ (8000978 <MX_GPIO_Init+0x110>)
 80008f4:	f001 f8fe 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	481b      	ldr	r0, [pc, #108]	@ (800097c <MX_GPIO_Init+0x114>)
 8000910:	f000 ff54 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000914:	2320      	movs	r3, #32
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4813      	ldr	r0, [pc, #76]	@ (8000978 <MX_GPIO_Init+0x110>)
 800092c:	f000 ff46 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : A8_Pin */
  GPIO_InitStruct.Pin = A8_Pin;
 8000930:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000936:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A8_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	480c      	ldr	r0, [pc, #48]	@ (8000978 <MX_GPIO_Init+0x110>)
 8000948:	f000 ff38 	bl	80017bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2017      	movs	r0, #23
 8000952:	f000 fb8c 	bl	800106e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000956:	2017      	movs	r0, #23
 8000958:	f000 fba5 	bl	80010a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2028      	movs	r0, #40	@ 0x28
 8000962:	f000 fb84 	bl	800106e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000966:	2028      	movs	r0, #40	@ 0x28
 8000968:	f000 fb9d 	bl	80010a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	@ 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020800 	.word	0x40020800

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000994:	1d39      	adds	r1, r7, #4
 8000996:	230a      	movs	r3, #10
 8000998:	2201      	movs	r2, #1
 800099a:	4804      	ldr	r0, [pc, #16]	@ (80009ac <__io_putchar+0x20>)
 800099c:	f001 fdc4 	bl	8002528 <HAL_UART_Transmit>
   return ch;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000084 	.word	0x20000084

080009b0 <ProgramStart>:
   return HAL_ADC_GetValue(&hadc1);
   */

}

void ProgramStart(){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
   printf("\033[2J");   // screen clear
 80009b4:	480b      	ldr	r0, [pc, #44]	@ (80009e4 <ProgramStart+0x34>)
 80009b6:	f002 fc99 	bl	80032ec <iprintf>
   printf("\033[1;1H");   // Move cursor pos to (1,1)
 80009ba:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <ProgramStart+0x38>)
 80009bc:	f002 fc96 	bl	80032ec <iprintf>
   printf("Program Started....Press Blue button to continue\r\n");
 80009c0:	480a      	ldr	r0, [pc, #40]	@ (80009ec <ProgramStart+0x3c>)
 80009c2:	f002 fcfb 	bl	80033bc <puts>
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 80009c6:	bf00      	nop
 80009c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009cc:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <ProgramStart+0x40>)
 80009ce:	f001 f879 	bl	8001ac4 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f7      	bne.n	80009c8 <ProgramStart+0x18>
   printf("\033[2J");   // screen clear
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <ProgramStart+0x34>)
 80009da:	f002 fc87 	bl	80032ec <iprintf>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	080040c0 	.word	0x080040c0
 80009e8:	080040c8 	.word	0x080040c8
 80009ec:	080040d0 	.word	0x080040d0
 80009f0:	40020800 	.word	0x40020800

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	4a0f      	ldr	r2, [pc, #60]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a32:	2007      	movs	r0, #7
 8000a34:	f000 fb10 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a30      	ldr	r2, [pc, #192]	@ (8000b24 <HAL_UART_MspInit+0xe0>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d15a      	bne.n	8000b1c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b28 <HAL_UART_MspInit+0xe4>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b28 <HAL_UART_MspInit+0xe4>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a76:	4b2c      	ldr	r3, [pc, #176]	@ (8000b28 <HAL_UART_MspInit+0xe4>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b28      	ldr	r3, [pc, #160]	@ (8000b28 <HAL_UART_MspInit+0xe4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a27      	ldr	r2, [pc, #156]	@ (8000b28 <HAL_UART_MspInit+0xe4>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <HAL_UART_MspInit+0xe4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	481c      	ldr	r0, [pc, #112]	@ (8000b2c <HAL_UART_MspInit+0xe8>)
 8000aba:	f000 fe7f 	bl	80017bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <HAL_UART_MspInit+0xf0>)
 8000ac2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000ac6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000aca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000ada:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ade:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000aec:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000b02:	f000 faeb 	bl	80010dc <HAL_DMA_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b0c:	f7ff ff38 	bl	8000980 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a07      	ldr	r2, [pc, #28]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000b14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b16:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <HAL_UART_MspInit+0xec>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	@ 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40004400 	.word	0x40004400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	200000cc 	.word	0x200000cc
 8000b34:	40026088 	.word	0x40026088

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <NMI_Handler+0x4>

08000b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <MemManage_Handler+0x4>

08000b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 f94f 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <DMA1_Stream5_IRQHandler+0x10>)
 8000b9e:	f000 fba3 	bl	80012e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000cc 	.word	0x200000cc

08000bac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A8_Pin);
 8000bb0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000bb4:	f000 ffb8 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bc0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bc4:	f000 ffb0 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e00a      	b.n	8000bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bde:	f3af 8000 	nop.w
 8000be2:	4601      	mov	r1, r0
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf0      	blt.n	8000bde <_read+0x12>
  }

  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e009      	b.n	8000c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff feb3 	bl	800098c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf1      	blt.n	8000c18 <_write+0x12>
  }
  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_close>:

int _close(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c66:	605a      	str	r2, [r3, #4]
  return 0;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_isatty>:

int _isatty(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f002 fc9e 	bl	8003618 <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20020000 	.word	0x20020000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	2000019c 	.word	0x2000019c
 8000d10:	200002f0 	.word	0x200002f0

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3c:	f7ff ffea 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f002 fc5d 	bl	8003624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc9f 	bl	80006ac <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d7c:	08004168 	.word	0x08004168
  ldr r2, =_sbss
 8000d80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d84:	200002f0 	.word	0x200002f0

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f94f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fe18 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f967 	bl	80010c2 <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 f92f 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200001a0 	.word	0x200001a0

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200001a0 	.word	0x200001a0

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	@ (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	@ (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff29 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff3e 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff8e 	bl	8000fac <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff31 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff feb6 	bl	8000e58 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e099      	b.n	800122c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2202      	movs	r2, #2
 80010fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0201 	bic.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001118:	e00f      	b.n	800113a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800111a:	f7ff fe9d 	bl	8000e58 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b05      	cmp	r3, #5
 8001126:	d908      	bls.n	800113a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2220      	movs	r2, #32
 800112c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e078      	b.n	800122c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1e8      	bne.n	800111a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	4b38      	ldr	r3, [pc, #224]	@ (8001234 <HAL_DMA_Init+0x158>)
 8001154:	4013      	ands	r3, r2
 8001156:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001166:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001172:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4313      	orrs	r3, r2
 800118a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001190:	2b04      	cmp	r3, #4
 8001192:	d107      	bne.n	80011a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119c:	4313      	orrs	r3, r2
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f023 0307 	bic.w	r3, r3, #7
 80011ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d117      	bne.n	80011fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00e      	beq.n	80011fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 fa6f 	bl	80016c4 <DMA_CheckFifoParam>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2240      	movs	r2, #64	@ 0x40
 80011f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80011fa:	2301      	movs	r3, #1
 80011fc:	e016      	b.n	800122c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fa26 	bl	8001658 <DMA_CalcBaseAndBitshift>
 800120c:	4603      	mov	r3, r0
 800120e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001214:	223f      	movs	r2, #63	@ 0x3f
 8001216:	409a      	lsls	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	f010803f 	.word	0xf010803f

08001238 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_DMA_Start_IT+0x26>
 800125a:	2302      	movs	r3, #2
 800125c:	e040      	b.n	80012e0 <HAL_DMA_Start_IT+0xa8>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d12f      	bne.n	80012d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2202      	movs	r2, #2
 8001276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f9b8 	bl	80015fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001290:	223f      	movs	r2, #63	@ 0x3f
 8001292:	409a      	lsls	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0216 	orr.w	r2, r2, #22
 80012a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d007      	beq.n	80012c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0208 	orr.w	r2, r2, #8
 80012be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0201 	orr.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e005      	b.n	80012de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012da:	2302      	movs	r3, #2
 80012dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012de:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012f4:	4b8e      	ldr	r3, [pc, #568]	@ (8001530 <HAL_DMA_IRQHandler+0x248>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a8e      	ldr	r2, [pc, #568]	@ (8001534 <HAL_DMA_IRQHandler+0x24c>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	0a9b      	lsrs	r3, r3, #10
 8001300:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001306:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001312:	2208      	movs	r2, #8
 8001314:	409a      	lsls	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d01a      	beq.n	8001354 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0204 	bic.w	r2, r2, #4
 800133a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001340:	2208      	movs	r2, #8
 8001342:	409a      	lsls	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800134c:	f043 0201 	orr.w	r2, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001358:	2201      	movs	r2, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d012      	beq.n	800138a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001376:	2201      	movs	r2, #1
 8001378:	409a      	lsls	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001382:	f043 0202 	orr.w	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800138e:	2204      	movs	r2, #4
 8001390:	409a      	lsls	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d012      	beq.n	80013c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00b      	beq.n	80013c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ac:	2204      	movs	r2, #4
 80013ae:	409a      	lsls	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b8:	f043 0204 	orr.w	r2, r3, #4
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c4:	2210      	movs	r2, #16
 80013c6:	409a      	lsls	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d043      	beq.n	8001458 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d03c      	beq.n	8001458 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e2:	2210      	movs	r2, #16
 80013e4:	409a      	lsls	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d018      	beq.n	800142a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d108      	bne.n	8001418 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d024      	beq.n	8001458 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	4798      	blx	r3
 8001416:	e01f      	b.n	8001458 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01b      	beq.n	8001458 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
 8001428:	e016      	b.n	8001458 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001434:	2b00      	cmp	r3, #0
 8001436:	d107      	bne.n	8001448 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0208 	bic.w	r2, r2, #8
 8001446:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145c:	2220      	movs	r2, #32
 800145e:	409a      	lsls	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 808f 	beq.w	8001588 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8087 	beq.w	8001588 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800147e:	2220      	movs	r2, #32
 8001480:	409a      	lsls	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b05      	cmp	r3, #5
 8001490:	d136      	bne.n	8001500 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0216 	bic.w	r2, r2, #22
 80014a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	695a      	ldr	r2, [r3, #20]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d103      	bne.n	80014c2 <HAL_DMA_IRQHandler+0x1da>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0208 	bic.w	r2, r2, #8
 80014d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d6:	223f      	movs	r2, #63	@ 0x3f
 80014d8:	409a      	lsls	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d07e      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	4798      	blx	r3
        }
        return;
 80014fe:	e079      	b.n	80015f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d01d      	beq.n	800154a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10d      	bne.n	8001538 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001520:	2b00      	cmp	r3, #0
 8001522:	d031      	beq.n	8001588 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
 800152c:	e02c      	b.n	8001588 <HAL_DMA_IRQHandler+0x2a0>
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000
 8001534:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800153c:	2b00      	cmp	r3, #0
 800153e:	d023      	beq.n	8001588 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
 8001548:	e01e      	b.n	8001588 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10f      	bne.n	8001578 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0210 	bic.w	r2, r2, #16
 8001566:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158c:	2b00      	cmp	r3, #0
 800158e:	d032      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d022      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2205      	movs	r2, #5
 80015a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3301      	adds	r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d307      	bcc.n	80015d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f2      	bne.n	80015b4 <HAL_DMA_IRQHandler+0x2cc>
 80015ce:	e000      	b.n	80015d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	4798      	blx	r3
 80015f2:	e000      	b.n	80015f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80015f4:	bf00      	nop
    }
  }
}
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001618:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b40      	cmp	r3, #64	@ 0x40
 8001628:	d108      	bne.n	800163c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800163a:	e007      	b.n	800164c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	60da      	str	r2, [r3, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	3b10      	subs	r3, #16
 8001668:	4a14      	ldr	r2, [pc, #80]	@ (80016bc <DMA_CalcBaseAndBitshift+0x64>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001672:	4a13      	ldr	r2, [pc, #76]	@ (80016c0 <DMA_CalcBaseAndBitshift+0x68>)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d909      	bls.n	800169a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	1d1a      	adds	r2, r3, #4
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	659a      	str	r2, [r3, #88]	@ 0x58
 8001698:	e007      	b.n	80016aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	aaaaaaab 	.word	0xaaaaaaab
 80016c0:	0800411c 	.word	0x0800411c

080016c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d11f      	bne.n	800171e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d856      	bhi.n	8001792 <DMA_CheckFifoParam+0xce>
 80016e4:	a201      	add	r2, pc, #4	@ (adr r2, 80016ec <DMA_CheckFifoParam+0x28>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	080016fd 	.word	0x080016fd
 80016f0:	0800170f 	.word	0x0800170f
 80016f4:	080016fd 	.word	0x080016fd
 80016f8:	08001793 	.word	0x08001793
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d046      	beq.n	8001796 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800170c:	e043      	b.n	8001796 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001712:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001716:	d140      	bne.n	800179a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800171c:	e03d      	b.n	800179a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001726:	d121      	bne.n	800176c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d837      	bhi.n	800179e <DMA_CheckFifoParam+0xda>
 800172e:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <DMA_CheckFifoParam+0x70>)
 8001730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001734:	08001745 	.word	0x08001745
 8001738:	0800174b 	.word	0x0800174b
 800173c:	08001745 	.word	0x08001745
 8001740:	0800175d 	.word	0x0800175d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
      break;
 8001748:	e030      	b.n	80017ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d025      	beq.n	80017a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800175a:	e022      	b.n	80017a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001760:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001764:	d11f      	bne.n	80017a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800176a:	e01c      	b.n	80017a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d903      	bls.n	800177a <DMA_CheckFifoParam+0xb6>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d003      	beq.n	8001780 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001778:	e018      	b.n	80017ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
      break;
 800177e:	e015      	b.n	80017ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00e      	beq.n	80017aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
      break;
 8001790:	e00b      	b.n	80017aa <DMA_CheckFifoParam+0xe6>
      break;
 8001792:	bf00      	nop
 8001794:	e00a      	b.n	80017ac <DMA_CheckFifoParam+0xe8>
      break;
 8001796:	bf00      	nop
 8001798:	e008      	b.n	80017ac <DMA_CheckFifoParam+0xe8>
      break;
 800179a:	bf00      	nop
 800179c:	e006      	b.n	80017ac <DMA_CheckFifoParam+0xe8>
      break;
 800179e:	bf00      	nop
 80017a0:	e004      	b.n	80017ac <DMA_CheckFifoParam+0xe8>
      break;
 80017a2:	bf00      	nop
 80017a4:	e002      	b.n	80017ac <DMA_CheckFifoParam+0xe8>
      break;   
 80017a6:	bf00      	nop
 80017a8:	e000      	b.n	80017ac <DMA_CheckFifoParam+0xe8>
      break;
 80017aa:	bf00      	nop
    }
  } 
  
  return status; 
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	@ 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e159      	b.n	8001a8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 8148 	bne.w	8001a86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d005      	beq.n	800180e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180a:	2b02      	cmp	r3, #2
 800180c:	d130      	bne.n	8001870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 0201 	and.w	r2, r3, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b03      	cmp	r3, #3
 800187a:	d017      	beq.n	80018ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d123      	bne.n	8001900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	08da      	lsrs	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3208      	adds	r2, #8
 80018c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	220f      	movs	r2, #15
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	08da      	lsrs	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3208      	adds	r2, #8
 80018fa:	69b9      	ldr	r1, [r7, #24]
 80018fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0203 	and.w	r2, r3, #3
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80a2 	beq.w	8001a86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b57      	ldr	r3, [pc, #348]	@ (8001aa4 <HAL_GPIO_Init+0x2e8>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	4a56      	ldr	r2, [pc, #344]	@ (8001aa4 <HAL_GPIO_Init+0x2e8>)
 800194c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001950:	6453      	str	r3, [r2, #68]	@ 0x44
 8001952:	4b54      	ldr	r3, [pc, #336]	@ (8001aa4 <HAL_GPIO_Init+0x2e8>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800195e:	4a52      	ldr	r2, [pc, #328]	@ (8001aa8 <HAL_GPIO_Init+0x2ec>)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	220f      	movs	r2, #15
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a49      	ldr	r2, [pc, #292]	@ (8001aac <HAL_GPIO_Init+0x2f0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x202>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a48      	ldr	r2, [pc, #288]	@ (8001ab0 <HAL_GPIO_Init+0x2f4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x1fe>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a47      	ldr	r2, [pc, #284]	@ (8001ab4 <HAL_GPIO_Init+0x2f8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x1fa>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a46      	ldr	r2, [pc, #280]	@ (8001ab8 <HAL_GPIO_Init+0x2fc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x1f6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a45      	ldr	r2, [pc, #276]	@ (8001abc <HAL_GPIO_Init+0x300>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x1f2>
 80019aa:	2304      	movs	r3, #4
 80019ac:	e008      	b.n	80019c0 <HAL_GPIO_Init+0x204>
 80019ae:	2307      	movs	r3, #7
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x204>
 80019b2:	2303      	movs	r3, #3
 80019b4:	e004      	b.n	80019c0 <HAL_GPIO_Init+0x204>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e002      	b.n	80019c0 <HAL_GPIO_Init+0x204>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_GPIO_Init+0x204>
 80019be:	2300      	movs	r3, #0
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	f002 0203 	and.w	r2, r2, #3
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	4093      	lsls	r3, r2
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d0:	4935      	ldr	r1, [pc, #212]	@ (8001aa8 <HAL_GPIO_Init+0x2ec>)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019de:	4b38      	ldr	r3, [pc, #224]	@ (8001ac0 <HAL_GPIO_Init+0x304>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a02:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a08:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a32:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a56:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a80:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	2b0f      	cmp	r3, #15
 8001a90:	f67f aea2 	bls.w	80017d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3724      	adds	r7, #36	@ 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40020c00 	.word	0x40020c00
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40013c00 	.word	0x40013c00

08001ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e001      	b.n	8001ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b04:	787b      	ldrb	r3, [r7, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b10:	e003      	b.n	8001b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b12:	887b      	ldrh	r3, [r7, #2]
 8001b14:	041a      	lsls	r2, r3, #16
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	619a      	str	r2, [r3, #24]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b32:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b3e:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd96 	bl	8000678 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40013c00 	.word	0x40013c00

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e267      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d075      	beq.n	8001c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b76:	4b88      	ldr	r3, [pc, #544]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d00c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b82:	4b85      	ldr	r3, [pc, #532]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d112      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8e:	4b82      	ldr	r3, [pc, #520]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d05b      	beq.n	8001c60 <HAL_RCC_OscConfig+0x108>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d157      	bne.n	8001c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e242      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bbc:	d106      	bne.n	8001bcc <HAL_RCC_OscConfig+0x74>
 8001bbe:	4b76      	ldr	r3, [pc, #472]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a75      	ldr	r2, [pc, #468]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0xb0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x98>
 8001bd6:	4b70      	ldr	r3, [pc, #448]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6f      	ldr	r2, [pc, #444]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6c      	ldr	r2, [pc, #432]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0xb0>
 8001bf0:	4b69      	ldr	r3, [pc, #420]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a68      	ldr	r2, [pc, #416]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b66      	ldr	r3, [pc, #408]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a65      	ldr	r2, [pc, #404]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff f922 	bl	8000e58 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff f91e 	bl	8000e58 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	@ 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e207      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0xc0>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff f90e 	bl	8000e58 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff f90a 	bl	8000e58 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	@ 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1f3      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	4b51      	ldr	r3, [pc, #324]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0xe8>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d063      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7a:	4b47      	ldr	r3, [pc, #284]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d11c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c86:	4b44      	ldr	r3, [pc, #272]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d116      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	4b41      	ldr	r3, [pc, #260]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x152>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1c7      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4937      	ldr	r1, [pc, #220]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	e03a      	b.n	8001d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	4b34      	ldr	r3, [pc, #208]	@ (8001d9c <HAL_RCC_OscConfig+0x244>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff f8c3 	bl	8000e58 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff f8bf 	bl	8000e58 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e1a8      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4925      	ldr	r1, [pc, #148]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e015      	b.n	8001d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b24      	ldr	r3, [pc, #144]	@ (8001d9c <HAL_RCC_OscConfig+0x244>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f8a2 	bl	8000e58 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d18:	f7ff f89e 	bl	8000e58 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e187      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d036      	beq.n	8001db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d016      	beq.n	8001d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <HAL_RCC_OscConfig+0x248>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff f882 	bl	8000e58 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff f87e 	bl	8000e58 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e167      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x200>
 8001d76:	e01b      	b.n	8001db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_RCC_OscConfig+0x248>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff f86b 	bl	8000e58 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	e00e      	b.n	8001da4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d86:	f7ff f867 	bl	8000e58 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d907      	bls.n	8001da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e150      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	42470000 	.word	0x42470000
 8001da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	4b88      	ldr	r3, [pc, #544]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ea      	bne.n	8001d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8097 	beq.w	8001eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc2:	4b81      	ldr	r3, [pc, #516]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b7a      	ldr	r3, [pc, #488]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4b77      	ldr	r3, [pc, #476]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d118      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfa:	4b74      	ldr	r3, [pc, #464]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a73      	ldr	r2, [pc, #460]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e06:	f7ff f827 	bl	8000e58 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0e:	f7ff f823 	bl	8000e58 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e10c      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4b6a      	ldr	r3, [pc, #424]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x2ea>
 8001e34:	4b64      	ldr	r3, [pc, #400]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e38:	4a63      	ldr	r2, [pc, #396]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e40:	e01c      	b.n	8001e7c <HAL_RCC_OscConfig+0x324>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x30c>
 8001e4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e56:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0x324>
 8001e64:	4b58      	ldr	r3, [pc, #352]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e68:	4a57      	ldr	r2, [pc, #348]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e70:	4b55      	ldr	r3, [pc, #340]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e74:	4a54      	ldr	r2, [pc, #336]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e76:	f023 0304 	bic.w	r3, r3, #4
 8001e7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d015      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7fe ffe8 	bl	8000e58 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7fe ffe4 	bl	8000e58 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0cb      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea2:	4b49      	ldr	r3, [pc, #292]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0ee      	beq.n	8001e8c <HAL_RCC_OscConfig+0x334>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7fe ffd2 	bl	8000e58 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ffce 	bl	8000e58 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0b5      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ece:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ee      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee0:	4b39      	ldr	r3, [pc, #228]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	4a38      	ldr	r2, [pc, #224]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80a1 	beq.w	8002038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef6:	4b34      	ldr	r3, [pc, #208]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d05c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d141      	bne.n	8001f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b31      	ldr	r3, [pc, #196]	@ (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe ffa2 	bl	8000e58 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f18:	f7fe ff9e 	bl	8000e58 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e087      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	4b27      	ldr	r3, [pc, #156]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	019b      	lsls	r3, r3, #6
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	491b      	ldr	r1, [pc, #108]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe ff77 	bl	8000e58 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe ff73 	bl	8000e58 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e05c      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x416>
 8001f8c:	e054      	b.n	8002038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe ff60 	bl	8000e58 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe ff5c 	bl	8000e58 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e045      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x444>
 8001fba:	e03d      	b.n	8002038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e038      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <HAL_RCC_OscConfig+0x4ec>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d028      	beq.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d121      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d11a      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800200a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	4293      	cmp	r3, r2
 800200e:	d111      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	3b01      	subs	r3, #1
 800201e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0cc      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b68      	ldr	r3, [pc, #416]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d90c      	bls.n	8002084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a58      	ldr	r2, [pc, #352]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a52      	ldr	r2, [pc, #328]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d044      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002102:	2b03      	cmp	r3, #3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b3f      	ldr	r3, [pc, #252]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e067      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002126:	4b37      	ldr	r3, [pc, #220]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 0203 	bic.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4934      	ldr	r1, [pc, #208]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7fe fe8e 	bl	8000e58 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7fe fe8a 	bl	8000e58 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e04f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 020c 	and.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1eb      	bne.n	8002140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d20c      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	@ (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fdee 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00
 8002204:	40023800 	.word	0x40023800
 8002208:	08004104 	.word	0x08004104
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002218:	b094      	sub	sp, #80	@ 0x50
 800221a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002220:	2300      	movs	r3, #0
 8002222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002224:	2300      	movs	r3, #0
 8002226:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800222c:	4b79      	ldr	r3, [pc, #484]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d00d      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 8002238:	2b08      	cmp	r3, #8
 800223a:	f200 80e1 	bhi.w	8002400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x34>
 8002242:	2b04      	cmp	r3, #4
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x3a>
 8002246:	e0db      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b73      	ldr	r3, [pc, #460]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 800224a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800224c:	e0db      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224e:	4b73      	ldr	r3, [pc, #460]	@ (800241c <HAL_RCC_GetSysClockFreq+0x208>)
 8002250:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002252:	e0d8      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002254:	4b6f      	ldr	r3, [pc, #444]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800225c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800225e:	4b6d      	ldr	r3, [pc, #436]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226a:	4b6a      	ldr	r3, [pc, #424]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	099b      	lsrs	r3, r3, #6
 8002270:	2200      	movs	r2, #0
 8002272:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002274:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800227c:	633b      	str	r3, [r7, #48]	@ 0x30
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
 8002282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002286:	4622      	mov	r2, r4
 8002288:	462b      	mov	r3, r5
 800228a:	f04f 0000 	mov.w	r0, #0
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	0159      	lsls	r1, r3, #5
 8002294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002298:	0150      	lsls	r0, r2, #5
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4621      	mov	r1, r4
 80022a0:	1a51      	subs	r1, r2, r1
 80022a2:	6139      	str	r1, [r7, #16]
 80022a4:	4629      	mov	r1, r5
 80022a6:	eb63 0301 	sbc.w	r3, r3, r1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b8:	4659      	mov	r1, fp
 80022ba:	018b      	lsls	r3, r1, #6
 80022bc:	4651      	mov	r1, sl
 80022be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022c2:	4651      	mov	r1, sl
 80022c4:	018a      	lsls	r2, r1, #6
 80022c6:	4651      	mov	r1, sl
 80022c8:	ebb2 0801 	subs.w	r8, r2, r1
 80022cc:	4659      	mov	r1, fp
 80022ce:	eb63 0901 	sbc.w	r9, r3, r1
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022e6:	4690      	mov	r8, r2
 80022e8:	4699      	mov	r9, r3
 80022ea:	4623      	mov	r3, r4
 80022ec:	eb18 0303 	adds.w	r3, r8, r3
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	462b      	mov	r3, r5
 80022f4:	eb49 0303 	adc.w	r3, r9, r3
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002306:	4629      	mov	r1, r5
 8002308:	024b      	lsls	r3, r1, #9
 800230a:	4621      	mov	r1, r4
 800230c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002310:	4621      	mov	r1, r4
 8002312:	024a      	lsls	r2, r1, #9
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231a:	2200      	movs	r2, #0
 800231c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800231e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002324:	f7fd ffac 	bl	8000280 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4613      	mov	r3, r2
 800232e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002330:	e058      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002332:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	2200      	movs	r2, #0
 800233a:	4618      	mov	r0, r3
 800233c:	4611      	mov	r1, r2
 800233e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
 8002348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800234c:	4642      	mov	r2, r8
 800234e:	464b      	mov	r3, r9
 8002350:	f04f 0000 	mov.w	r0, #0
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	0159      	lsls	r1, r3, #5
 800235a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235e:	0150      	lsls	r0, r2, #5
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4641      	mov	r1, r8
 8002366:	ebb2 0a01 	subs.w	sl, r2, r1
 800236a:	4649      	mov	r1, r9
 800236c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800237c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002384:	ebb2 040a 	subs.w	r4, r2, sl
 8002388:	eb63 050b 	sbc.w	r5, r3, fp
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	00eb      	lsls	r3, r5, #3
 8002396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239a:	00e2      	lsls	r2, r4, #3
 800239c:	4614      	mov	r4, r2
 800239e:	461d      	mov	r5, r3
 80023a0:	4643      	mov	r3, r8
 80023a2:	18e3      	adds	r3, r4, r3
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	464b      	mov	r3, r9
 80023a8:	eb45 0303 	adc.w	r3, r5, r3
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ba:	4629      	mov	r1, r5
 80023bc:	028b      	lsls	r3, r1, #10
 80023be:	4621      	mov	r1, r4
 80023c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c4:	4621      	mov	r1, r4
 80023c6:	028a      	lsls	r2, r1, #10
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ce:	2200      	movs	r2, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	61fa      	str	r2, [r7, #28]
 80023d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d8:	f7fd ff52 	bl	8000280 <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4613      	mov	r3, r2
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	3301      	adds	r3, #1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80023f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 8002402:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002408:	4618      	mov	r0, r3
 800240a:	3750      	adds	r7, #80	@ 0x50
 800240c:	46bd      	mov	sp, r7
 800240e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	00f42400 	.word	0x00f42400
 800241c:	007a1200 	.word	0x007a1200

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <HAL_RCC_GetHCLKFreq+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000000 	.word	0x20000000

08002438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800243c:	f7ff fff0 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	@ (800245c <HAL_RCC_GetPCLK1Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	08004114 	.word	0x08004114

08002460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002464:	f7ff ffdc 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0b5b      	lsrs	r3, r3, #13
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4903      	ldr	r1, [pc, #12]	@ (8002484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	08004114 	.word	0x08004114

08002488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e042      	b.n	8002520 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fac8 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	@ 0x24
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fbd7 	bl	8002c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	@ 0x28
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	d175      	bne.n	8002634 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_UART_Transmit+0x2c>
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e06e      	b.n	8002636 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2221      	movs	r2, #33	@ 0x21
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002566:	f7fe fc77 	bl	8000e58 <HAL_GetTick>
 800256a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002580:	d108      	bne.n	8002594 <HAL_UART_Transmit+0x6c>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d104      	bne.n	8002594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e003      	b.n	800259c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800259c:	e02e      	b.n	80025fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2200      	movs	r2, #0
 80025a6:	2180      	movs	r1, #128	@ 0x80
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f9b0 	bl	800290e <UART_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e03a      	b.n	8002636 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3302      	adds	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e007      	b.n	80025ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3301      	adds	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1cb      	bne.n	800259e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2200      	movs	r2, #0
 800260e:	2140      	movs	r1, #64	@ 0x40
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f97c 	bl	800290e <UART_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e006      	b.n	8002636 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	4613      	mov	r3, r2
 800264a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	d112      	bne.n	800267e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_UART_Receive_IT+0x26>
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e00b      	b.n	8002680 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	461a      	mov	r2, r3
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f9a3 	bl	80029c0 <UART_Start_Receive_IT>
 800267a:	4603      	mov	r3, r0
 800267c:	e000      	b.n	8002680 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800267e:	2302      	movs	r3, #2
  }
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d112      	bne.n	80026c8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_UART_Receive_DMA+0x26>
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00b      	b.n	80026ca <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f9b8 	bl	8002a34 <UART_Start_Receive_DMA>
 80026c4:	4603      	mov	r3, r0
 80026c6:	e000      	b.n	80026ca <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
  }
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b09c      	sub	sp, #112	@ 0x70
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d172      	bne.n	8002814 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800272e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002730:	2200      	movs	r2, #0
 8002732:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800273e:	e853 3f00 	ldrex	r3, [r3]
 8002742:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002746:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800274a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800274c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002754:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002756:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800275a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e5      	bne.n	8002734 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3314      	adds	r3, #20
 800276e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3314      	adds	r3, #20
 8002786:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002788:	647a      	str	r2, [r7, #68]	@ 0x44
 800278a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800278e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002790:	e841 2300 	strex	r3, r2, [r1]
 8002794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e5      	bne.n	8002768 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	e853 3f00 	ldrex	r3, [r3]
 80027aa:	623b      	str	r3, [r7, #32]
   return(result);
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80027b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3314      	adds	r3, #20
 80027ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80027be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e5      	bne.n	800279c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d119      	bne.n	8002814 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	330c      	adds	r3, #12
 80027e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	e853 3f00 	ldrex	r3, [r3]
 80027ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0310 	bic.w	r3, r3, #16
 80027f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	330c      	adds	r3, #12
 80027fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002800:	61fa      	str	r2, [r7, #28]
 8002802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002804:	69b9      	ldr	r1, [r7, #24]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	e841 2300 	strex	r3, r2, [r1]
 800280c:	617b      	str	r3, [r7, #20]
   return(result);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e5      	bne.n	80027e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002816:	2200      	movs	r2, #0
 8002818:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800281a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	2b01      	cmp	r3, #1
 8002820:	d106      	bne.n	8002830 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002824:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002826:	4619      	mov	r1, r3
 8002828:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800282a:	f7ff ff66 	bl	80026fa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800282e:	e002      	b.n	8002836 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002830:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002832:	f7fd ff05 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 8002836:	bf00      	nop
 8002838:	3770      	adds	r7, #112	@ 0x70
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	2b01      	cmp	r3, #1
 8002858:	d108      	bne.n	800286c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	b29b      	uxth	r3, r3
 8002862:	4619      	mov	r1, r3
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7ff ff48 	bl	80026fa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800286a:	e002      	b.n	8002872 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff ff30 	bl	80026d2 <HAL_UART_RxHalfCpltCallback>
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002896:	2b80      	cmp	r3, #128	@ 0x80
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b21      	cmp	r3, #33	@ 0x21
 80028ac:	d108      	bne.n	80028c0 <UART_DMAError+0x46>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2200      	movs	r2, #0
 80028b8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80028ba:	68b8      	ldr	r0, [r7, #8]
 80028bc:	f000 f954 	bl	8002b68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ca:	2b40      	cmp	r3, #64	@ 0x40
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b22      	cmp	r3, #34	@ 0x22
 80028e0:	d108      	bne.n	80028f4 <UART_DMAError+0x7a>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80028ee:	68b8      	ldr	r0, [r7, #8]
 80028f0:	f000 f962 	bl	8002bb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f8:	f043 0210 	orr.w	r2, r3, #16
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002900:	68b8      	ldr	r0, [r7, #8]
 8002902:	f7ff fef0 	bl	80026e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291e:	e03b      	b.n	8002998 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d037      	beq.n	8002998 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002928:	f7fe fa96 	bl	8000e58 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	6a3a      	ldr	r2, [r7, #32]
 8002934:	429a      	cmp	r2, r3
 8002936:	d302      	bcc.n	800293e <UART_WaitOnFlagUntilTimeout+0x30>
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e03a      	b.n	80029b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d023      	beq.n	8002998 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b80      	cmp	r3, #128	@ 0x80
 8002954:	d020      	beq.n	8002998 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b40      	cmp	r3, #64	@ 0x40
 800295a:	d01d      	beq.n	8002998 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b08      	cmp	r3, #8
 8002968:	d116      	bne.n	8002998 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f919 	bl	8002bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2208      	movs	r2, #8
 800298a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e00f      	b.n	80029b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4013      	ands	r3, r2
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d0b4      	beq.n	8002920 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	88fa      	ldrh	r2, [r7, #6]
 80029d8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2222      	movs	r2, #34	@ 0x22
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0220 	orr.w	r2, r2, #32
 8002a24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b098      	sub	sp, #96	@ 0x60
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2222      	movs	r2, #34	@ 0x22
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a60:	4a3e      	ldr	r2, [pc, #248]	@ (8002b5c <UART_Start_Receive_DMA+0x128>)
 8002a62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	4a3d      	ldr	r2, [pc, #244]	@ (8002b60 <UART_Start_Receive_DMA+0x12c>)
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	4a3c      	ldr	r2, [pc, #240]	@ (8002b64 <UART_Start_Receive_DMA+0x130>)
 8002a72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a78:	2200      	movs	r2, #0
 8002a7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002a7c:	f107 0308 	add.w	r3, r7, #8
 8002a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	f7fe fbd0 	bl	8001238 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d019      	beq.n	8002aea <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	330c      	adds	r3, #12
 8002abc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ad6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ada:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002adc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1e5      	bne.n	8002ab6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3314      	adds	r3, #20
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af4:	e853 3f00 	ldrex	r3, [r3]
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3314      	adds	r3, #20
 8002b08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b0a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e5      	bne.n	8002aea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b34:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3314      	adds	r3, #20
 8002b3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	6a39      	ldr	r1, [r7, #32]
 8002b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e5      	bne.n	8002b1e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3760      	adds	r7, #96	@ 0x60
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	08002713 	.word	0x08002713
 8002b60:	0800283f 	.word	0x0800283f
 8002b64:	0800287b 	.word	0x0800287b

08002b68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	@ 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	e853 3f00 	ldrex	r3, [r3]
 8002b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	61ba      	str	r2, [r7, #24]
 8002b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b94:	6979      	ldr	r1, [r7, #20]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	e841 2300 	strex	r3, r2, [r1]
 8002b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e5      	bne.n	8002b70 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002bac:	bf00      	nop
 8002bae:	3724      	adds	r7, #36	@ 0x24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b095      	sub	sp, #84	@ 0x54
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002be0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002be6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e5      	bne.n	8002bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3314      	adds	r3, #20
 8002bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	e853 3f00 	ldrex	r3, [r3]
 8002c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3314      	adds	r3, #20
 8002c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c1c:	e841 2300 	strex	r3, r2, [r1]
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e5      	bne.n	8002bf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d119      	bne.n	8002c64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	e853 3f00 	ldrex	r3, [r3]
 8002c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f023 0310 	bic.w	r3, r3, #16
 8002c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c50:	61ba      	str	r2, [r7, #24]
 8002c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c54:	6979      	ldr	r1, [r7, #20]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	e841 2300 	strex	r3, r2, [r1]
 8002c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e5      	bne.n	8002c30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c72:	bf00      	nop
 8002c74:	3754      	adds	r7, #84	@ 0x54
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c84:	b0c0      	sub	sp, #256	@ 0x100
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	68d9      	ldr	r1, [r3, #12]
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	ea40 0301 	orr.w	r3, r0, r1
 8002ca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002cd8:	f021 010c 	bic.w	r1, r1, #12
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	6999      	ldr	r1, [r3, #24]
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	ea40 0301 	orr.w	r3, r0, r1
 8002d06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4b8f      	ldr	r3, [pc, #572]	@ (8002f4c <UART_SetConfig+0x2cc>)
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d005      	beq.n	8002d20 <UART_SetConfig+0xa0>
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f50 <UART_SetConfig+0x2d0>)
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d104      	bne.n	8002d2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d20:	f7ff fb9e 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 8002d24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d28:	e003      	b.n	8002d32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d2a:	f7ff fb85 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002d2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d3c:	f040 810c 	bne.w	8002f58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d52:	4622      	mov	r2, r4
 8002d54:	462b      	mov	r3, r5
 8002d56:	1891      	adds	r1, r2, r2
 8002d58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d5a:	415b      	adcs	r3, r3
 8002d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d62:	4621      	mov	r1, r4
 8002d64:	eb12 0801 	adds.w	r8, r2, r1
 8002d68:	4629      	mov	r1, r5
 8002d6a:	eb43 0901 	adc.w	r9, r3, r1
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d82:	4690      	mov	r8, r2
 8002d84:	4699      	mov	r9, r3
 8002d86:	4623      	mov	r3, r4
 8002d88:	eb18 0303 	adds.w	r3, r8, r3
 8002d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d90:	462b      	mov	r3, r5
 8002d92:	eb49 0303 	adc.w	r3, r9, r3
 8002d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002da6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002daa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dae:	460b      	mov	r3, r1
 8002db0:	18db      	adds	r3, r3, r3
 8002db2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002db4:	4613      	mov	r3, r2
 8002db6:	eb42 0303 	adc.w	r3, r2, r3
 8002dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dc4:	f7fd fa5c 	bl	8000280 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4b61      	ldr	r3, [pc, #388]	@ (8002f54 <UART_SetConfig+0x2d4>)
 8002dce:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	011c      	lsls	r4, r3, #4
 8002dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002de0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002de4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	1891      	adds	r1, r2, r2
 8002dee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002df0:	415b      	adcs	r3, r3
 8002df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002df4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002df8:	4641      	mov	r1, r8
 8002dfa:	eb12 0a01 	adds.w	sl, r2, r1
 8002dfe:	4649      	mov	r1, r9
 8002e00:	eb43 0b01 	adc.w	fp, r3, r1
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e18:	4692      	mov	sl, r2
 8002e1a:	469b      	mov	fp, r3
 8002e1c:	4643      	mov	r3, r8
 8002e1e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e26:	464b      	mov	r3, r9
 8002e28:	eb4b 0303 	adc.w	r3, fp, r3
 8002e2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e44:	460b      	mov	r3, r1
 8002e46:	18db      	adds	r3, r3, r3
 8002e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e5a:	f7fd fa11 	bl	8000280 <__aeabi_uldivmod>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	4b3b      	ldr	r3, [pc, #236]	@ (8002f54 <UART_SetConfig+0x2d4>)
 8002e66:	fba3 2301 	umull	r2, r3, r3, r1
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2264      	movs	r2, #100	@ 0x64
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	1acb      	subs	r3, r1, r3
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e7a:	4b36      	ldr	r3, [pc, #216]	@ (8002f54 <UART_SetConfig+0x2d4>)
 8002e7c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e88:	441c      	add	r4, r3
 8002e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1891      	adds	r1, r2, r2
 8002ea2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ea4:	415b      	adcs	r3, r3
 8002ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002eac:	4641      	mov	r1, r8
 8002eae:	1851      	adds	r1, r2, r1
 8002eb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	414b      	adcs	r3, r1
 8002eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	00cb      	lsls	r3, r1, #3
 8002ec8:	4651      	mov	r1, sl
 8002eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ece:	4651      	mov	r1, sl
 8002ed0:	00ca      	lsls	r2, r1, #3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4642      	mov	r2, r8
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	460a      	mov	r2, r1
 8002ee4:	eb42 0303 	adc.w	r3, r2, r3
 8002ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ef8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002efc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f00:	460b      	mov	r3, r1
 8002f02:	18db      	adds	r3, r3, r3
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f06:	4613      	mov	r3, r2
 8002f08:	eb42 0303 	adc.w	r3, r2, r3
 8002f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f16:	f7fd f9b3 	bl	8000280 <__aeabi_uldivmod>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <UART_SetConfig+0x2d4>)
 8002f20:	fba3 1302 	umull	r1, r3, r3, r2
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	2164      	movs	r1, #100	@ 0x64
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	3332      	adds	r3, #50	@ 0x32
 8002f32:	4a08      	ldr	r2, [pc, #32]	@ (8002f54 <UART_SetConfig+0x2d4>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	f003 0207 	and.w	r2, r3, #7
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4422      	add	r2, r4
 8002f46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f48:	e106      	b.n	8003158 <UART_SetConfig+0x4d8>
 8002f4a:	bf00      	nop
 8002f4c:	40011000 	.word	0x40011000
 8002f50:	40011400 	.word	0x40011400
 8002f54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f6a:	4642      	mov	r2, r8
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	1891      	adds	r1, r2, r2
 8002f70:	6239      	str	r1, [r7, #32]
 8002f72:	415b      	adcs	r3, r3
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f7a:	4641      	mov	r1, r8
 8002f7c:	1854      	adds	r4, r2, r1
 8002f7e:	4649      	mov	r1, r9
 8002f80:	eb43 0501 	adc.w	r5, r3, r1
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	00eb      	lsls	r3, r5, #3
 8002f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f92:	00e2      	lsls	r2, r4, #3
 8002f94:	4614      	mov	r4, r2
 8002f96:	461d      	mov	r5, r3
 8002f98:	4643      	mov	r3, r8
 8002f9a:	18e3      	adds	r3, r4, r3
 8002f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fa0:	464b      	mov	r3, r9
 8002fa2:	eb45 0303 	adc.w	r3, r5, r3
 8002fa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	008b      	lsls	r3, r1, #2
 8002fca:	4621      	mov	r1, r4
 8002fcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	008a      	lsls	r2, r1, #2
 8002fd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fd8:	f7fd f952 	bl	8000280 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4b60      	ldr	r3, [pc, #384]	@ (8003164 <UART_SetConfig+0x4e4>)
 8002fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	011c      	lsls	r4, r3, #4
 8002fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ff4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ff8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	1891      	adds	r1, r2, r2
 8003002:	61b9      	str	r1, [r7, #24]
 8003004:	415b      	adcs	r3, r3
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800300c:	4641      	mov	r1, r8
 800300e:	1851      	adds	r1, r2, r1
 8003010:	6139      	str	r1, [r7, #16]
 8003012:	4649      	mov	r1, r9
 8003014:	414b      	adcs	r3, r1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003024:	4659      	mov	r1, fp
 8003026:	00cb      	lsls	r3, r1, #3
 8003028:	4651      	mov	r1, sl
 800302a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302e:	4651      	mov	r1, sl
 8003030:	00ca      	lsls	r2, r1, #3
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	4603      	mov	r3, r0
 8003038:	4642      	mov	r2, r8
 800303a:	189b      	adds	r3, r3, r2
 800303c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003040:	464b      	mov	r3, r9
 8003042:	460a      	mov	r2, r1
 8003044:	eb42 0303 	adc.w	r3, r2, r3
 8003048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003056:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003064:	4649      	mov	r1, r9
 8003066:	008b      	lsls	r3, r1, #2
 8003068:	4641      	mov	r1, r8
 800306a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800306e:	4641      	mov	r1, r8
 8003070:	008a      	lsls	r2, r1, #2
 8003072:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003076:	f7fd f903 	bl	8000280 <__aeabi_uldivmod>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4611      	mov	r1, r2
 8003080:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <UART_SetConfig+0x4e4>)
 8003082:	fba3 2301 	umull	r2, r3, r3, r1
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2264      	movs	r2, #100	@ 0x64
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	1acb      	subs	r3, r1, r3
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	3332      	adds	r3, #50	@ 0x32
 8003094:	4a33      	ldr	r2, [pc, #204]	@ (8003164 <UART_SetConfig+0x4e4>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a0:	441c      	add	r4, r3
 80030a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a6:	2200      	movs	r2, #0
 80030a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80030aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80030ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030b0:	4642      	mov	r2, r8
 80030b2:	464b      	mov	r3, r9
 80030b4:	1891      	adds	r1, r2, r2
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	415b      	adcs	r3, r3
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030c0:	4641      	mov	r1, r8
 80030c2:	1851      	adds	r1, r2, r1
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	4649      	mov	r1, r9
 80030c8:	414b      	adcs	r3, r1
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030d8:	4659      	mov	r1, fp
 80030da:	00cb      	lsls	r3, r1, #3
 80030dc:	4651      	mov	r1, sl
 80030de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030e2:	4651      	mov	r1, sl
 80030e4:	00ca      	lsls	r2, r1, #3
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	4642      	mov	r2, r8
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030f2:	464b      	mov	r3, r9
 80030f4:	460a      	mov	r2, r1
 80030f6:	eb42 0303 	adc.w	r3, r2, r3
 80030fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	663b      	str	r3, [r7, #96]	@ 0x60
 8003106:	667a      	str	r2, [r7, #100]	@ 0x64
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003114:	4649      	mov	r1, r9
 8003116:	008b      	lsls	r3, r1, #2
 8003118:	4641      	mov	r1, r8
 800311a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800311e:	4641      	mov	r1, r8
 8003120:	008a      	lsls	r2, r1, #2
 8003122:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003126:	f7fd f8ab 	bl	8000280 <__aeabi_uldivmod>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <UART_SetConfig+0x4e4>)
 8003130:	fba3 1302 	umull	r1, r3, r3, r2
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	2164      	movs	r1, #100	@ 0x64
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	3332      	adds	r3, #50	@ 0x32
 8003142:	4a08      	ldr	r2, [pc, #32]	@ (8003164 <UART_SetConfig+0x4e4>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	f003 020f 	and.w	r2, r3, #15
 800314e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4422      	add	r2, r4
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800315e:	46bd      	mov	sp, r7
 8003160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003164:	51eb851f 	.word	0x51eb851f

08003168 <std>:
 8003168:	2300      	movs	r3, #0
 800316a:	b510      	push	{r4, lr}
 800316c:	4604      	mov	r4, r0
 800316e:	e9c0 3300 	strd	r3, r3, [r0]
 8003172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003176:	6083      	str	r3, [r0, #8]
 8003178:	8181      	strh	r1, [r0, #12]
 800317a:	6643      	str	r3, [r0, #100]	@ 0x64
 800317c:	81c2      	strh	r2, [r0, #14]
 800317e:	6183      	str	r3, [r0, #24]
 8003180:	4619      	mov	r1, r3
 8003182:	2208      	movs	r2, #8
 8003184:	305c      	adds	r0, #92	@ 0x5c
 8003186:	f000 f9f9 	bl	800357c <memset>
 800318a:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <std+0x58>)
 800318c:	6263      	str	r3, [r4, #36]	@ 0x24
 800318e:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <std+0x5c>)
 8003190:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003192:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <std+0x60>)
 8003194:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003196:	4b0d      	ldr	r3, [pc, #52]	@ (80031cc <std+0x64>)
 8003198:	6323      	str	r3, [r4, #48]	@ 0x30
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <std+0x68>)
 800319c:	6224      	str	r4, [r4, #32]
 800319e:	429c      	cmp	r4, r3
 80031a0:	d006      	beq.n	80031b0 <std+0x48>
 80031a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80031a6:	4294      	cmp	r4, r2
 80031a8:	d002      	beq.n	80031b0 <std+0x48>
 80031aa:	33d0      	adds	r3, #208	@ 0xd0
 80031ac:	429c      	cmp	r4, r3
 80031ae:	d105      	bne.n	80031bc <std+0x54>
 80031b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80031b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b8:	f000 ba58 	b.w	800366c <__retarget_lock_init_recursive>
 80031bc:	bd10      	pop	{r4, pc}
 80031be:	bf00      	nop
 80031c0:	080033cd 	.word	0x080033cd
 80031c4:	080033ef 	.word	0x080033ef
 80031c8:	08003427 	.word	0x08003427
 80031cc:	0800344b 	.word	0x0800344b
 80031d0:	200001a4 	.word	0x200001a4

080031d4 <stdio_exit_handler>:
 80031d4:	4a02      	ldr	r2, [pc, #8]	@ (80031e0 <stdio_exit_handler+0xc>)
 80031d6:	4903      	ldr	r1, [pc, #12]	@ (80031e4 <stdio_exit_handler+0x10>)
 80031d8:	4803      	ldr	r0, [pc, #12]	@ (80031e8 <stdio_exit_handler+0x14>)
 80031da:	f000 b869 	b.w	80032b0 <_fwalk_sglue>
 80031de:	bf00      	nop
 80031e0:	2000000c 	.word	0x2000000c
 80031e4:	08003f29 	.word	0x08003f29
 80031e8:	2000001c 	.word	0x2000001c

080031ec <cleanup_stdio>:
 80031ec:	6841      	ldr	r1, [r0, #4]
 80031ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <cleanup_stdio+0x34>)
 80031f0:	4299      	cmp	r1, r3
 80031f2:	b510      	push	{r4, lr}
 80031f4:	4604      	mov	r4, r0
 80031f6:	d001      	beq.n	80031fc <cleanup_stdio+0x10>
 80031f8:	f000 fe96 	bl	8003f28 <_fflush_r>
 80031fc:	68a1      	ldr	r1, [r4, #8]
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <cleanup_stdio+0x38>)
 8003200:	4299      	cmp	r1, r3
 8003202:	d002      	beq.n	800320a <cleanup_stdio+0x1e>
 8003204:	4620      	mov	r0, r4
 8003206:	f000 fe8f 	bl	8003f28 <_fflush_r>
 800320a:	68e1      	ldr	r1, [r4, #12]
 800320c:	4b06      	ldr	r3, [pc, #24]	@ (8003228 <cleanup_stdio+0x3c>)
 800320e:	4299      	cmp	r1, r3
 8003210:	d004      	beq.n	800321c <cleanup_stdio+0x30>
 8003212:	4620      	mov	r0, r4
 8003214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003218:	f000 be86 	b.w	8003f28 <_fflush_r>
 800321c:	bd10      	pop	{r4, pc}
 800321e:	bf00      	nop
 8003220:	200001a4 	.word	0x200001a4
 8003224:	2000020c 	.word	0x2000020c
 8003228:	20000274 	.word	0x20000274

0800322c <global_stdio_init.part.0>:
 800322c:	b510      	push	{r4, lr}
 800322e:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <global_stdio_init.part.0+0x30>)
 8003230:	4c0b      	ldr	r4, [pc, #44]	@ (8003260 <global_stdio_init.part.0+0x34>)
 8003232:	4a0c      	ldr	r2, [pc, #48]	@ (8003264 <global_stdio_init.part.0+0x38>)
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	4620      	mov	r0, r4
 8003238:	2200      	movs	r2, #0
 800323a:	2104      	movs	r1, #4
 800323c:	f7ff ff94 	bl	8003168 <std>
 8003240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003244:	2201      	movs	r2, #1
 8003246:	2109      	movs	r1, #9
 8003248:	f7ff ff8e 	bl	8003168 <std>
 800324c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003250:	2202      	movs	r2, #2
 8003252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003256:	2112      	movs	r1, #18
 8003258:	f7ff bf86 	b.w	8003168 <std>
 800325c:	200002dc 	.word	0x200002dc
 8003260:	200001a4 	.word	0x200001a4
 8003264:	080031d5 	.word	0x080031d5

08003268 <__sfp_lock_acquire>:
 8003268:	4801      	ldr	r0, [pc, #4]	@ (8003270 <__sfp_lock_acquire+0x8>)
 800326a:	f000 ba00 	b.w	800366e <__retarget_lock_acquire_recursive>
 800326e:	bf00      	nop
 8003270:	200002e5 	.word	0x200002e5

08003274 <__sfp_lock_release>:
 8003274:	4801      	ldr	r0, [pc, #4]	@ (800327c <__sfp_lock_release+0x8>)
 8003276:	f000 b9fb 	b.w	8003670 <__retarget_lock_release_recursive>
 800327a:	bf00      	nop
 800327c:	200002e5 	.word	0x200002e5

08003280 <__sinit>:
 8003280:	b510      	push	{r4, lr}
 8003282:	4604      	mov	r4, r0
 8003284:	f7ff fff0 	bl	8003268 <__sfp_lock_acquire>
 8003288:	6a23      	ldr	r3, [r4, #32]
 800328a:	b11b      	cbz	r3, 8003294 <__sinit+0x14>
 800328c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003290:	f7ff bff0 	b.w	8003274 <__sfp_lock_release>
 8003294:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <__sinit+0x28>)
 8003296:	6223      	str	r3, [r4, #32]
 8003298:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <__sinit+0x2c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f5      	bne.n	800328c <__sinit+0xc>
 80032a0:	f7ff ffc4 	bl	800322c <global_stdio_init.part.0>
 80032a4:	e7f2      	b.n	800328c <__sinit+0xc>
 80032a6:	bf00      	nop
 80032a8:	080031ed 	.word	0x080031ed
 80032ac:	200002dc 	.word	0x200002dc

080032b0 <_fwalk_sglue>:
 80032b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032b4:	4607      	mov	r7, r0
 80032b6:	4688      	mov	r8, r1
 80032b8:	4614      	mov	r4, r2
 80032ba:	2600      	movs	r6, #0
 80032bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032c0:	f1b9 0901 	subs.w	r9, r9, #1
 80032c4:	d505      	bpl.n	80032d2 <_fwalk_sglue+0x22>
 80032c6:	6824      	ldr	r4, [r4, #0]
 80032c8:	2c00      	cmp	r4, #0
 80032ca:	d1f7      	bne.n	80032bc <_fwalk_sglue+0xc>
 80032cc:	4630      	mov	r0, r6
 80032ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032d2:	89ab      	ldrh	r3, [r5, #12]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d907      	bls.n	80032e8 <_fwalk_sglue+0x38>
 80032d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032dc:	3301      	adds	r3, #1
 80032de:	d003      	beq.n	80032e8 <_fwalk_sglue+0x38>
 80032e0:	4629      	mov	r1, r5
 80032e2:	4638      	mov	r0, r7
 80032e4:	47c0      	blx	r8
 80032e6:	4306      	orrs	r6, r0
 80032e8:	3568      	adds	r5, #104	@ 0x68
 80032ea:	e7e9      	b.n	80032c0 <_fwalk_sglue+0x10>

080032ec <iprintf>:
 80032ec:	b40f      	push	{r0, r1, r2, r3}
 80032ee:	b507      	push	{r0, r1, r2, lr}
 80032f0:	4906      	ldr	r1, [pc, #24]	@ (800330c <iprintf+0x20>)
 80032f2:	ab04      	add	r3, sp, #16
 80032f4:	6808      	ldr	r0, [r1, #0]
 80032f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80032fa:	6881      	ldr	r1, [r0, #8]
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	f000 fae9 	bl	80038d4 <_vfiprintf_r>
 8003302:	b003      	add	sp, #12
 8003304:	f85d eb04 	ldr.w	lr, [sp], #4
 8003308:	b004      	add	sp, #16
 800330a:	4770      	bx	lr
 800330c:	20000018 	.word	0x20000018

08003310 <_puts_r>:
 8003310:	6a03      	ldr	r3, [r0, #32]
 8003312:	b570      	push	{r4, r5, r6, lr}
 8003314:	6884      	ldr	r4, [r0, #8]
 8003316:	4605      	mov	r5, r0
 8003318:	460e      	mov	r6, r1
 800331a:	b90b      	cbnz	r3, 8003320 <_puts_r+0x10>
 800331c:	f7ff ffb0 	bl	8003280 <__sinit>
 8003320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003322:	07db      	lsls	r3, r3, #31
 8003324:	d405      	bmi.n	8003332 <_puts_r+0x22>
 8003326:	89a3      	ldrh	r3, [r4, #12]
 8003328:	0598      	lsls	r0, r3, #22
 800332a:	d402      	bmi.n	8003332 <_puts_r+0x22>
 800332c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800332e:	f000 f99e 	bl	800366e <__retarget_lock_acquire_recursive>
 8003332:	89a3      	ldrh	r3, [r4, #12]
 8003334:	0719      	lsls	r1, r3, #28
 8003336:	d502      	bpl.n	800333e <_puts_r+0x2e>
 8003338:	6923      	ldr	r3, [r4, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d135      	bne.n	80033aa <_puts_r+0x9a>
 800333e:	4621      	mov	r1, r4
 8003340:	4628      	mov	r0, r5
 8003342:	f000 f8c5 	bl	80034d0 <__swsetup_r>
 8003346:	b380      	cbz	r0, 80033aa <_puts_r+0x9a>
 8003348:	f04f 35ff 	mov.w	r5, #4294967295
 800334c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800334e:	07da      	lsls	r2, r3, #31
 8003350:	d405      	bmi.n	800335e <_puts_r+0x4e>
 8003352:	89a3      	ldrh	r3, [r4, #12]
 8003354:	059b      	lsls	r3, r3, #22
 8003356:	d402      	bmi.n	800335e <_puts_r+0x4e>
 8003358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800335a:	f000 f989 	bl	8003670 <__retarget_lock_release_recursive>
 800335e:	4628      	mov	r0, r5
 8003360:	bd70      	pop	{r4, r5, r6, pc}
 8003362:	2b00      	cmp	r3, #0
 8003364:	da04      	bge.n	8003370 <_puts_r+0x60>
 8003366:	69a2      	ldr	r2, [r4, #24]
 8003368:	429a      	cmp	r2, r3
 800336a:	dc17      	bgt.n	800339c <_puts_r+0x8c>
 800336c:	290a      	cmp	r1, #10
 800336e:	d015      	beq.n	800339c <_puts_r+0x8c>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	6022      	str	r2, [r4, #0]
 8003376:	7019      	strb	r1, [r3, #0]
 8003378:	68a3      	ldr	r3, [r4, #8]
 800337a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800337e:	3b01      	subs	r3, #1
 8003380:	60a3      	str	r3, [r4, #8]
 8003382:	2900      	cmp	r1, #0
 8003384:	d1ed      	bne.n	8003362 <_puts_r+0x52>
 8003386:	2b00      	cmp	r3, #0
 8003388:	da11      	bge.n	80033ae <_puts_r+0x9e>
 800338a:	4622      	mov	r2, r4
 800338c:	210a      	movs	r1, #10
 800338e:	4628      	mov	r0, r5
 8003390:	f000 f85f 	bl	8003452 <__swbuf_r>
 8003394:	3001      	adds	r0, #1
 8003396:	d0d7      	beq.n	8003348 <_puts_r+0x38>
 8003398:	250a      	movs	r5, #10
 800339a:	e7d7      	b.n	800334c <_puts_r+0x3c>
 800339c:	4622      	mov	r2, r4
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 f857 	bl	8003452 <__swbuf_r>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d1e7      	bne.n	8003378 <_puts_r+0x68>
 80033a8:	e7ce      	b.n	8003348 <_puts_r+0x38>
 80033aa:	3e01      	subs	r6, #1
 80033ac:	e7e4      	b.n	8003378 <_puts_r+0x68>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	6022      	str	r2, [r4, #0]
 80033b4:	220a      	movs	r2, #10
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	e7ee      	b.n	8003398 <_puts_r+0x88>
	...

080033bc <puts>:
 80033bc:	4b02      	ldr	r3, [pc, #8]	@ (80033c8 <puts+0xc>)
 80033be:	4601      	mov	r1, r0
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	f7ff bfa5 	b.w	8003310 <_puts_r>
 80033c6:	bf00      	nop
 80033c8:	20000018 	.word	0x20000018

080033cc <__sread>:
 80033cc:	b510      	push	{r4, lr}
 80033ce:	460c      	mov	r4, r1
 80033d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033d4:	f000 f8fc 	bl	80035d0 <_read_r>
 80033d8:	2800      	cmp	r0, #0
 80033da:	bfab      	itete	ge
 80033dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80033de:	89a3      	ldrhlt	r3, [r4, #12]
 80033e0:	181b      	addge	r3, r3, r0
 80033e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80033e6:	bfac      	ite	ge
 80033e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80033ea:	81a3      	strhlt	r3, [r4, #12]
 80033ec:	bd10      	pop	{r4, pc}

080033ee <__swrite>:
 80033ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f2:	461f      	mov	r7, r3
 80033f4:	898b      	ldrh	r3, [r1, #12]
 80033f6:	05db      	lsls	r3, r3, #23
 80033f8:	4605      	mov	r5, r0
 80033fa:	460c      	mov	r4, r1
 80033fc:	4616      	mov	r6, r2
 80033fe:	d505      	bpl.n	800340c <__swrite+0x1e>
 8003400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003404:	2302      	movs	r3, #2
 8003406:	2200      	movs	r2, #0
 8003408:	f000 f8d0 	bl	80035ac <_lseek_r>
 800340c:	89a3      	ldrh	r3, [r4, #12]
 800340e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003412:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003416:	81a3      	strh	r3, [r4, #12]
 8003418:	4632      	mov	r2, r6
 800341a:	463b      	mov	r3, r7
 800341c:	4628      	mov	r0, r5
 800341e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003422:	f000 b8e7 	b.w	80035f4 <_write_r>

08003426 <__sseek>:
 8003426:	b510      	push	{r4, lr}
 8003428:	460c      	mov	r4, r1
 800342a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800342e:	f000 f8bd 	bl	80035ac <_lseek_r>
 8003432:	1c43      	adds	r3, r0, #1
 8003434:	89a3      	ldrh	r3, [r4, #12]
 8003436:	bf15      	itete	ne
 8003438:	6560      	strne	r0, [r4, #84]	@ 0x54
 800343a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800343e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003442:	81a3      	strheq	r3, [r4, #12]
 8003444:	bf18      	it	ne
 8003446:	81a3      	strhne	r3, [r4, #12]
 8003448:	bd10      	pop	{r4, pc}

0800344a <__sclose>:
 800344a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800344e:	f000 b89d 	b.w	800358c <_close_r>

08003452 <__swbuf_r>:
 8003452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003454:	460e      	mov	r6, r1
 8003456:	4614      	mov	r4, r2
 8003458:	4605      	mov	r5, r0
 800345a:	b118      	cbz	r0, 8003464 <__swbuf_r+0x12>
 800345c:	6a03      	ldr	r3, [r0, #32]
 800345e:	b90b      	cbnz	r3, 8003464 <__swbuf_r+0x12>
 8003460:	f7ff ff0e 	bl	8003280 <__sinit>
 8003464:	69a3      	ldr	r3, [r4, #24]
 8003466:	60a3      	str	r3, [r4, #8]
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	071a      	lsls	r2, r3, #28
 800346c:	d501      	bpl.n	8003472 <__swbuf_r+0x20>
 800346e:	6923      	ldr	r3, [r4, #16]
 8003470:	b943      	cbnz	r3, 8003484 <__swbuf_r+0x32>
 8003472:	4621      	mov	r1, r4
 8003474:	4628      	mov	r0, r5
 8003476:	f000 f82b 	bl	80034d0 <__swsetup_r>
 800347a:	b118      	cbz	r0, 8003484 <__swbuf_r+0x32>
 800347c:	f04f 37ff 	mov.w	r7, #4294967295
 8003480:	4638      	mov	r0, r7
 8003482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	6922      	ldr	r2, [r4, #16]
 8003488:	1a98      	subs	r0, r3, r2
 800348a:	6963      	ldr	r3, [r4, #20]
 800348c:	b2f6      	uxtb	r6, r6
 800348e:	4283      	cmp	r3, r0
 8003490:	4637      	mov	r7, r6
 8003492:	dc05      	bgt.n	80034a0 <__swbuf_r+0x4e>
 8003494:	4621      	mov	r1, r4
 8003496:	4628      	mov	r0, r5
 8003498:	f000 fd46 	bl	8003f28 <_fflush_r>
 800349c:	2800      	cmp	r0, #0
 800349e:	d1ed      	bne.n	800347c <__swbuf_r+0x2a>
 80034a0:	68a3      	ldr	r3, [r4, #8]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	60a3      	str	r3, [r4, #8]
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	6022      	str	r2, [r4, #0]
 80034ac:	701e      	strb	r6, [r3, #0]
 80034ae:	6962      	ldr	r2, [r4, #20]
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d004      	beq.n	80034c0 <__swbuf_r+0x6e>
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	07db      	lsls	r3, r3, #31
 80034ba:	d5e1      	bpl.n	8003480 <__swbuf_r+0x2e>
 80034bc:	2e0a      	cmp	r6, #10
 80034be:	d1df      	bne.n	8003480 <__swbuf_r+0x2e>
 80034c0:	4621      	mov	r1, r4
 80034c2:	4628      	mov	r0, r5
 80034c4:	f000 fd30 	bl	8003f28 <_fflush_r>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d0d9      	beq.n	8003480 <__swbuf_r+0x2e>
 80034cc:	e7d6      	b.n	800347c <__swbuf_r+0x2a>
	...

080034d0 <__swsetup_r>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	4b29      	ldr	r3, [pc, #164]	@ (8003578 <__swsetup_r+0xa8>)
 80034d4:	4605      	mov	r5, r0
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	460c      	mov	r4, r1
 80034da:	b118      	cbz	r0, 80034e4 <__swsetup_r+0x14>
 80034dc:	6a03      	ldr	r3, [r0, #32]
 80034de:	b90b      	cbnz	r3, 80034e4 <__swsetup_r+0x14>
 80034e0:	f7ff fece 	bl	8003280 <__sinit>
 80034e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034e8:	0719      	lsls	r1, r3, #28
 80034ea:	d422      	bmi.n	8003532 <__swsetup_r+0x62>
 80034ec:	06da      	lsls	r2, r3, #27
 80034ee:	d407      	bmi.n	8003500 <__swsetup_r+0x30>
 80034f0:	2209      	movs	r2, #9
 80034f2:	602a      	str	r2, [r5, #0]
 80034f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034f8:	81a3      	strh	r3, [r4, #12]
 80034fa:	f04f 30ff 	mov.w	r0, #4294967295
 80034fe:	e033      	b.n	8003568 <__swsetup_r+0x98>
 8003500:	0758      	lsls	r0, r3, #29
 8003502:	d512      	bpl.n	800352a <__swsetup_r+0x5a>
 8003504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003506:	b141      	cbz	r1, 800351a <__swsetup_r+0x4a>
 8003508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800350c:	4299      	cmp	r1, r3
 800350e:	d002      	beq.n	8003516 <__swsetup_r+0x46>
 8003510:	4628      	mov	r0, r5
 8003512:	f000 f8bd 	bl	8003690 <_free_r>
 8003516:	2300      	movs	r3, #0
 8003518:	6363      	str	r3, [r4, #52]	@ 0x34
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	2300      	movs	r3, #0
 8003524:	6063      	str	r3, [r4, #4]
 8003526:	6923      	ldr	r3, [r4, #16]
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	89a3      	ldrh	r3, [r4, #12]
 800352c:	f043 0308 	orr.w	r3, r3, #8
 8003530:	81a3      	strh	r3, [r4, #12]
 8003532:	6923      	ldr	r3, [r4, #16]
 8003534:	b94b      	cbnz	r3, 800354a <__swsetup_r+0x7a>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800353c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003540:	d003      	beq.n	800354a <__swsetup_r+0x7a>
 8003542:	4621      	mov	r1, r4
 8003544:	4628      	mov	r0, r5
 8003546:	f000 fd3d 	bl	8003fc4 <__smakebuf_r>
 800354a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800354e:	f013 0201 	ands.w	r2, r3, #1
 8003552:	d00a      	beq.n	800356a <__swsetup_r+0x9a>
 8003554:	2200      	movs	r2, #0
 8003556:	60a2      	str	r2, [r4, #8]
 8003558:	6962      	ldr	r2, [r4, #20]
 800355a:	4252      	negs	r2, r2
 800355c:	61a2      	str	r2, [r4, #24]
 800355e:	6922      	ldr	r2, [r4, #16]
 8003560:	b942      	cbnz	r2, 8003574 <__swsetup_r+0xa4>
 8003562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003566:	d1c5      	bne.n	80034f4 <__swsetup_r+0x24>
 8003568:	bd38      	pop	{r3, r4, r5, pc}
 800356a:	0799      	lsls	r1, r3, #30
 800356c:	bf58      	it	pl
 800356e:	6962      	ldrpl	r2, [r4, #20]
 8003570:	60a2      	str	r2, [r4, #8]
 8003572:	e7f4      	b.n	800355e <__swsetup_r+0x8e>
 8003574:	2000      	movs	r0, #0
 8003576:	e7f7      	b.n	8003568 <__swsetup_r+0x98>
 8003578:	20000018 	.word	0x20000018

0800357c <memset>:
 800357c:	4402      	add	r2, r0
 800357e:	4603      	mov	r3, r0
 8003580:	4293      	cmp	r3, r2
 8003582:	d100      	bne.n	8003586 <memset+0xa>
 8003584:	4770      	bx	lr
 8003586:	f803 1b01 	strb.w	r1, [r3], #1
 800358a:	e7f9      	b.n	8003580 <memset+0x4>

0800358c <_close_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	4d06      	ldr	r5, [pc, #24]	@ (80035a8 <_close_r+0x1c>)
 8003590:	2300      	movs	r3, #0
 8003592:	4604      	mov	r4, r0
 8003594:	4608      	mov	r0, r1
 8003596:	602b      	str	r3, [r5, #0]
 8003598:	f7fd fb51 	bl	8000c3e <_close>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	d102      	bne.n	80035a6 <_close_r+0x1a>
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	b103      	cbz	r3, 80035a6 <_close_r+0x1a>
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
 80035a8:	200002e0 	.word	0x200002e0

080035ac <_lseek_r>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	4d07      	ldr	r5, [pc, #28]	@ (80035cc <_lseek_r+0x20>)
 80035b0:	4604      	mov	r4, r0
 80035b2:	4608      	mov	r0, r1
 80035b4:	4611      	mov	r1, r2
 80035b6:	2200      	movs	r2, #0
 80035b8:	602a      	str	r2, [r5, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7fd fb66 	bl	8000c8c <_lseek>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d102      	bne.n	80035ca <_lseek_r+0x1e>
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	b103      	cbz	r3, 80035ca <_lseek_r+0x1e>
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	200002e0 	.word	0x200002e0

080035d0 <_read_r>:
 80035d0:	b538      	push	{r3, r4, r5, lr}
 80035d2:	4d07      	ldr	r5, [pc, #28]	@ (80035f0 <_read_r+0x20>)
 80035d4:	4604      	mov	r4, r0
 80035d6:	4608      	mov	r0, r1
 80035d8:	4611      	mov	r1, r2
 80035da:	2200      	movs	r2, #0
 80035dc:	602a      	str	r2, [r5, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	f7fd faf4 	bl	8000bcc <_read>
 80035e4:	1c43      	adds	r3, r0, #1
 80035e6:	d102      	bne.n	80035ee <_read_r+0x1e>
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	b103      	cbz	r3, 80035ee <_read_r+0x1e>
 80035ec:	6023      	str	r3, [r4, #0]
 80035ee:	bd38      	pop	{r3, r4, r5, pc}
 80035f0:	200002e0 	.word	0x200002e0

080035f4 <_write_r>:
 80035f4:	b538      	push	{r3, r4, r5, lr}
 80035f6:	4d07      	ldr	r5, [pc, #28]	@ (8003614 <_write_r+0x20>)
 80035f8:	4604      	mov	r4, r0
 80035fa:	4608      	mov	r0, r1
 80035fc:	4611      	mov	r1, r2
 80035fe:	2200      	movs	r2, #0
 8003600:	602a      	str	r2, [r5, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	f7fd faff 	bl	8000c06 <_write>
 8003608:	1c43      	adds	r3, r0, #1
 800360a:	d102      	bne.n	8003612 <_write_r+0x1e>
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	b103      	cbz	r3, 8003612 <_write_r+0x1e>
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	bd38      	pop	{r3, r4, r5, pc}
 8003614:	200002e0 	.word	0x200002e0

08003618 <__errno>:
 8003618:	4b01      	ldr	r3, [pc, #4]	@ (8003620 <__errno+0x8>)
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000018 	.word	0x20000018

08003624 <__libc_init_array>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	4d0d      	ldr	r5, [pc, #52]	@ (800365c <__libc_init_array+0x38>)
 8003628:	4c0d      	ldr	r4, [pc, #52]	@ (8003660 <__libc_init_array+0x3c>)
 800362a:	1b64      	subs	r4, r4, r5
 800362c:	10a4      	asrs	r4, r4, #2
 800362e:	2600      	movs	r6, #0
 8003630:	42a6      	cmp	r6, r4
 8003632:	d109      	bne.n	8003648 <__libc_init_array+0x24>
 8003634:	4d0b      	ldr	r5, [pc, #44]	@ (8003664 <__libc_init_array+0x40>)
 8003636:	4c0c      	ldr	r4, [pc, #48]	@ (8003668 <__libc_init_array+0x44>)
 8003638:	f000 fd32 	bl	80040a0 <_init>
 800363c:	1b64      	subs	r4, r4, r5
 800363e:	10a4      	asrs	r4, r4, #2
 8003640:	2600      	movs	r6, #0
 8003642:	42a6      	cmp	r6, r4
 8003644:	d105      	bne.n	8003652 <__libc_init_array+0x2e>
 8003646:	bd70      	pop	{r4, r5, r6, pc}
 8003648:	f855 3b04 	ldr.w	r3, [r5], #4
 800364c:	4798      	blx	r3
 800364e:	3601      	adds	r6, #1
 8003650:	e7ee      	b.n	8003630 <__libc_init_array+0xc>
 8003652:	f855 3b04 	ldr.w	r3, [r5], #4
 8003656:	4798      	blx	r3
 8003658:	3601      	adds	r6, #1
 800365a:	e7f2      	b.n	8003642 <__libc_init_array+0x1e>
 800365c:	08004160 	.word	0x08004160
 8003660:	08004160 	.word	0x08004160
 8003664:	08004160 	.word	0x08004160
 8003668:	08004164 	.word	0x08004164

0800366c <__retarget_lock_init_recursive>:
 800366c:	4770      	bx	lr

0800366e <__retarget_lock_acquire_recursive>:
 800366e:	4770      	bx	lr

08003670 <__retarget_lock_release_recursive>:
 8003670:	4770      	bx	lr

08003672 <memcpy>:
 8003672:	440a      	add	r2, r1
 8003674:	4291      	cmp	r1, r2
 8003676:	f100 33ff 	add.w	r3, r0, #4294967295
 800367a:	d100      	bne.n	800367e <memcpy+0xc>
 800367c:	4770      	bx	lr
 800367e:	b510      	push	{r4, lr}
 8003680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003688:	4291      	cmp	r1, r2
 800368a:	d1f9      	bne.n	8003680 <memcpy+0xe>
 800368c:	bd10      	pop	{r4, pc}
	...

08003690 <_free_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4605      	mov	r5, r0
 8003694:	2900      	cmp	r1, #0
 8003696:	d041      	beq.n	800371c <_free_r+0x8c>
 8003698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800369c:	1f0c      	subs	r4, r1, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bfb8      	it	lt
 80036a2:	18e4      	addlt	r4, r4, r3
 80036a4:	f000 f8e0 	bl	8003868 <__malloc_lock>
 80036a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003720 <_free_r+0x90>)
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	b933      	cbnz	r3, 80036bc <_free_r+0x2c>
 80036ae:	6063      	str	r3, [r4, #4]
 80036b0:	6014      	str	r4, [r2, #0]
 80036b2:	4628      	mov	r0, r5
 80036b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036b8:	f000 b8dc 	b.w	8003874 <__malloc_unlock>
 80036bc:	42a3      	cmp	r3, r4
 80036be:	d908      	bls.n	80036d2 <_free_r+0x42>
 80036c0:	6820      	ldr	r0, [r4, #0]
 80036c2:	1821      	adds	r1, r4, r0
 80036c4:	428b      	cmp	r3, r1
 80036c6:	bf01      	itttt	eq
 80036c8:	6819      	ldreq	r1, [r3, #0]
 80036ca:	685b      	ldreq	r3, [r3, #4]
 80036cc:	1809      	addeq	r1, r1, r0
 80036ce:	6021      	streq	r1, [r4, #0]
 80036d0:	e7ed      	b.n	80036ae <_free_r+0x1e>
 80036d2:	461a      	mov	r2, r3
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	b10b      	cbz	r3, 80036dc <_free_r+0x4c>
 80036d8:	42a3      	cmp	r3, r4
 80036da:	d9fa      	bls.n	80036d2 <_free_r+0x42>
 80036dc:	6811      	ldr	r1, [r2, #0]
 80036de:	1850      	adds	r0, r2, r1
 80036e0:	42a0      	cmp	r0, r4
 80036e2:	d10b      	bne.n	80036fc <_free_r+0x6c>
 80036e4:	6820      	ldr	r0, [r4, #0]
 80036e6:	4401      	add	r1, r0
 80036e8:	1850      	adds	r0, r2, r1
 80036ea:	4283      	cmp	r3, r0
 80036ec:	6011      	str	r1, [r2, #0]
 80036ee:	d1e0      	bne.n	80036b2 <_free_r+0x22>
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	6053      	str	r3, [r2, #4]
 80036f6:	4408      	add	r0, r1
 80036f8:	6010      	str	r0, [r2, #0]
 80036fa:	e7da      	b.n	80036b2 <_free_r+0x22>
 80036fc:	d902      	bls.n	8003704 <_free_r+0x74>
 80036fe:	230c      	movs	r3, #12
 8003700:	602b      	str	r3, [r5, #0]
 8003702:	e7d6      	b.n	80036b2 <_free_r+0x22>
 8003704:	6820      	ldr	r0, [r4, #0]
 8003706:	1821      	adds	r1, r4, r0
 8003708:	428b      	cmp	r3, r1
 800370a:	bf04      	itt	eq
 800370c:	6819      	ldreq	r1, [r3, #0]
 800370e:	685b      	ldreq	r3, [r3, #4]
 8003710:	6063      	str	r3, [r4, #4]
 8003712:	bf04      	itt	eq
 8003714:	1809      	addeq	r1, r1, r0
 8003716:	6021      	streq	r1, [r4, #0]
 8003718:	6054      	str	r4, [r2, #4]
 800371a:	e7ca      	b.n	80036b2 <_free_r+0x22>
 800371c:	bd38      	pop	{r3, r4, r5, pc}
 800371e:	bf00      	nop
 8003720:	200002ec 	.word	0x200002ec

08003724 <sbrk_aligned>:
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	4e0f      	ldr	r6, [pc, #60]	@ (8003764 <sbrk_aligned+0x40>)
 8003728:	460c      	mov	r4, r1
 800372a:	6831      	ldr	r1, [r6, #0]
 800372c:	4605      	mov	r5, r0
 800372e:	b911      	cbnz	r1, 8003736 <sbrk_aligned+0x12>
 8003730:	f000 fca6 	bl	8004080 <_sbrk_r>
 8003734:	6030      	str	r0, [r6, #0]
 8003736:	4621      	mov	r1, r4
 8003738:	4628      	mov	r0, r5
 800373a:	f000 fca1 	bl	8004080 <_sbrk_r>
 800373e:	1c43      	adds	r3, r0, #1
 8003740:	d103      	bne.n	800374a <sbrk_aligned+0x26>
 8003742:	f04f 34ff 	mov.w	r4, #4294967295
 8003746:	4620      	mov	r0, r4
 8003748:	bd70      	pop	{r4, r5, r6, pc}
 800374a:	1cc4      	adds	r4, r0, #3
 800374c:	f024 0403 	bic.w	r4, r4, #3
 8003750:	42a0      	cmp	r0, r4
 8003752:	d0f8      	beq.n	8003746 <sbrk_aligned+0x22>
 8003754:	1a21      	subs	r1, r4, r0
 8003756:	4628      	mov	r0, r5
 8003758:	f000 fc92 	bl	8004080 <_sbrk_r>
 800375c:	3001      	adds	r0, #1
 800375e:	d1f2      	bne.n	8003746 <sbrk_aligned+0x22>
 8003760:	e7ef      	b.n	8003742 <sbrk_aligned+0x1e>
 8003762:	bf00      	nop
 8003764:	200002e8 	.word	0x200002e8

08003768 <_malloc_r>:
 8003768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800376c:	1ccd      	adds	r5, r1, #3
 800376e:	f025 0503 	bic.w	r5, r5, #3
 8003772:	3508      	adds	r5, #8
 8003774:	2d0c      	cmp	r5, #12
 8003776:	bf38      	it	cc
 8003778:	250c      	movcc	r5, #12
 800377a:	2d00      	cmp	r5, #0
 800377c:	4606      	mov	r6, r0
 800377e:	db01      	blt.n	8003784 <_malloc_r+0x1c>
 8003780:	42a9      	cmp	r1, r5
 8003782:	d904      	bls.n	800378e <_malloc_r+0x26>
 8003784:	230c      	movs	r3, #12
 8003786:	6033      	str	r3, [r6, #0]
 8003788:	2000      	movs	r0, #0
 800378a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800378e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003864 <_malloc_r+0xfc>
 8003792:	f000 f869 	bl	8003868 <__malloc_lock>
 8003796:	f8d8 3000 	ldr.w	r3, [r8]
 800379a:	461c      	mov	r4, r3
 800379c:	bb44      	cbnz	r4, 80037f0 <_malloc_r+0x88>
 800379e:	4629      	mov	r1, r5
 80037a0:	4630      	mov	r0, r6
 80037a2:	f7ff ffbf 	bl	8003724 <sbrk_aligned>
 80037a6:	1c43      	adds	r3, r0, #1
 80037a8:	4604      	mov	r4, r0
 80037aa:	d158      	bne.n	800385e <_malloc_r+0xf6>
 80037ac:	f8d8 4000 	ldr.w	r4, [r8]
 80037b0:	4627      	mov	r7, r4
 80037b2:	2f00      	cmp	r7, #0
 80037b4:	d143      	bne.n	800383e <_malloc_r+0xd6>
 80037b6:	2c00      	cmp	r4, #0
 80037b8:	d04b      	beq.n	8003852 <_malloc_r+0xea>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	4639      	mov	r1, r7
 80037be:	4630      	mov	r0, r6
 80037c0:	eb04 0903 	add.w	r9, r4, r3
 80037c4:	f000 fc5c 	bl	8004080 <_sbrk_r>
 80037c8:	4581      	cmp	r9, r0
 80037ca:	d142      	bne.n	8003852 <_malloc_r+0xea>
 80037cc:	6821      	ldr	r1, [r4, #0]
 80037ce:	1a6d      	subs	r5, r5, r1
 80037d0:	4629      	mov	r1, r5
 80037d2:	4630      	mov	r0, r6
 80037d4:	f7ff ffa6 	bl	8003724 <sbrk_aligned>
 80037d8:	3001      	adds	r0, #1
 80037da:	d03a      	beq.n	8003852 <_malloc_r+0xea>
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	442b      	add	r3, r5
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	f8d8 3000 	ldr.w	r3, [r8]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	bb62      	cbnz	r2, 8003844 <_malloc_r+0xdc>
 80037ea:	f8c8 7000 	str.w	r7, [r8]
 80037ee:	e00f      	b.n	8003810 <_malloc_r+0xa8>
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	1b52      	subs	r2, r2, r5
 80037f4:	d420      	bmi.n	8003838 <_malloc_r+0xd0>
 80037f6:	2a0b      	cmp	r2, #11
 80037f8:	d917      	bls.n	800382a <_malloc_r+0xc2>
 80037fa:	1961      	adds	r1, r4, r5
 80037fc:	42a3      	cmp	r3, r4
 80037fe:	6025      	str	r5, [r4, #0]
 8003800:	bf18      	it	ne
 8003802:	6059      	strne	r1, [r3, #4]
 8003804:	6863      	ldr	r3, [r4, #4]
 8003806:	bf08      	it	eq
 8003808:	f8c8 1000 	streq.w	r1, [r8]
 800380c:	5162      	str	r2, [r4, r5]
 800380e:	604b      	str	r3, [r1, #4]
 8003810:	4630      	mov	r0, r6
 8003812:	f000 f82f 	bl	8003874 <__malloc_unlock>
 8003816:	f104 000b 	add.w	r0, r4, #11
 800381a:	1d23      	adds	r3, r4, #4
 800381c:	f020 0007 	bic.w	r0, r0, #7
 8003820:	1ac2      	subs	r2, r0, r3
 8003822:	bf1c      	itt	ne
 8003824:	1a1b      	subne	r3, r3, r0
 8003826:	50a3      	strne	r3, [r4, r2]
 8003828:	e7af      	b.n	800378a <_malloc_r+0x22>
 800382a:	6862      	ldr	r2, [r4, #4]
 800382c:	42a3      	cmp	r3, r4
 800382e:	bf0c      	ite	eq
 8003830:	f8c8 2000 	streq.w	r2, [r8]
 8003834:	605a      	strne	r2, [r3, #4]
 8003836:	e7eb      	b.n	8003810 <_malloc_r+0xa8>
 8003838:	4623      	mov	r3, r4
 800383a:	6864      	ldr	r4, [r4, #4]
 800383c:	e7ae      	b.n	800379c <_malloc_r+0x34>
 800383e:	463c      	mov	r4, r7
 8003840:	687f      	ldr	r7, [r7, #4]
 8003842:	e7b6      	b.n	80037b2 <_malloc_r+0x4a>
 8003844:	461a      	mov	r2, r3
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	42a3      	cmp	r3, r4
 800384a:	d1fb      	bne.n	8003844 <_malloc_r+0xdc>
 800384c:	2300      	movs	r3, #0
 800384e:	6053      	str	r3, [r2, #4]
 8003850:	e7de      	b.n	8003810 <_malloc_r+0xa8>
 8003852:	230c      	movs	r3, #12
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	4630      	mov	r0, r6
 8003858:	f000 f80c 	bl	8003874 <__malloc_unlock>
 800385c:	e794      	b.n	8003788 <_malloc_r+0x20>
 800385e:	6005      	str	r5, [r0, #0]
 8003860:	e7d6      	b.n	8003810 <_malloc_r+0xa8>
 8003862:	bf00      	nop
 8003864:	200002ec 	.word	0x200002ec

08003868 <__malloc_lock>:
 8003868:	4801      	ldr	r0, [pc, #4]	@ (8003870 <__malloc_lock+0x8>)
 800386a:	f7ff bf00 	b.w	800366e <__retarget_lock_acquire_recursive>
 800386e:	bf00      	nop
 8003870:	200002e4 	.word	0x200002e4

08003874 <__malloc_unlock>:
 8003874:	4801      	ldr	r0, [pc, #4]	@ (800387c <__malloc_unlock+0x8>)
 8003876:	f7ff befb 	b.w	8003670 <__retarget_lock_release_recursive>
 800387a:	bf00      	nop
 800387c:	200002e4 	.word	0x200002e4

08003880 <__sfputc_r>:
 8003880:	6893      	ldr	r3, [r2, #8]
 8003882:	3b01      	subs	r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	b410      	push	{r4}
 8003888:	6093      	str	r3, [r2, #8]
 800388a:	da08      	bge.n	800389e <__sfputc_r+0x1e>
 800388c:	6994      	ldr	r4, [r2, #24]
 800388e:	42a3      	cmp	r3, r4
 8003890:	db01      	blt.n	8003896 <__sfputc_r+0x16>
 8003892:	290a      	cmp	r1, #10
 8003894:	d103      	bne.n	800389e <__sfputc_r+0x1e>
 8003896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800389a:	f7ff bdda 	b.w	8003452 <__swbuf_r>
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	1c58      	adds	r0, r3, #1
 80038a2:	6010      	str	r0, [r2, #0]
 80038a4:	7019      	strb	r1, [r3, #0]
 80038a6:	4608      	mov	r0, r1
 80038a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <__sfputs_r>:
 80038ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b0:	4606      	mov	r6, r0
 80038b2:	460f      	mov	r7, r1
 80038b4:	4614      	mov	r4, r2
 80038b6:	18d5      	adds	r5, r2, r3
 80038b8:	42ac      	cmp	r4, r5
 80038ba:	d101      	bne.n	80038c0 <__sfputs_r+0x12>
 80038bc:	2000      	movs	r0, #0
 80038be:	e007      	b.n	80038d0 <__sfputs_r+0x22>
 80038c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038c4:	463a      	mov	r2, r7
 80038c6:	4630      	mov	r0, r6
 80038c8:	f7ff ffda 	bl	8003880 <__sfputc_r>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d1f3      	bne.n	80038b8 <__sfputs_r+0xa>
 80038d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038d4 <_vfiprintf_r>:
 80038d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d8:	460d      	mov	r5, r1
 80038da:	b09d      	sub	sp, #116	@ 0x74
 80038dc:	4614      	mov	r4, r2
 80038de:	4698      	mov	r8, r3
 80038e0:	4606      	mov	r6, r0
 80038e2:	b118      	cbz	r0, 80038ec <_vfiprintf_r+0x18>
 80038e4:	6a03      	ldr	r3, [r0, #32]
 80038e6:	b90b      	cbnz	r3, 80038ec <_vfiprintf_r+0x18>
 80038e8:	f7ff fcca 	bl	8003280 <__sinit>
 80038ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80038ee:	07d9      	lsls	r1, r3, #31
 80038f0:	d405      	bmi.n	80038fe <_vfiprintf_r+0x2a>
 80038f2:	89ab      	ldrh	r3, [r5, #12]
 80038f4:	059a      	lsls	r2, r3, #22
 80038f6:	d402      	bmi.n	80038fe <_vfiprintf_r+0x2a>
 80038f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80038fa:	f7ff feb8 	bl	800366e <__retarget_lock_acquire_recursive>
 80038fe:	89ab      	ldrh	r3, [r5, #12]
 8003900:	071b      	lsls	r3, r3, #28
 8003902:	d501      	bpl.n	8003908 <_vfiprintf_r+0x34>
 8003904:	692b      	ldr	r3, [r5, #16]
 8003906:	b99b      	cbnz	r3, 8003930 <_vfiprintf_r+0x5c>
 8003908:	4629      	mov	r1, r5
 800390a:	4630      	mov	r0, r6
 800390c:	f7ff fde0 	bl	80034d0 <__swsetup_r>
 8003910:	b170      	cbz	r0, 8003930 <_vfiprintf_r+0x5c>
 8003912:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003914:	07dc      	lsls	r4, r3, #31
 8003916:	d504      	bpl.n	8003922 <_vfiprintf_r+0x4e>
 8003918:	f04f 30ff 	mov.w	r0, #4294967295
 800391c:	b01d      	add	sp, #116	@ 0x74
 800391e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003922:	89ab      	ldrh	r3, [r5, #12]
 8003924:	0598      	lsls	r0, r3, #22
 8003926:	d4f7      	bmi.n	8003918 <_vfiprintf_r+0x44>
 8003928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800392a:	f7ff fea1 	bl	8003670 <__retarget_lock_release_recursive>
 800392e:	e7f3      	b.n	8003918 <_vfiprintf_r+0x44>
 8003930:	2300      	movs	r3, #0
 8003932:	9309      	str	r3, [sp, #36]	@ 0x24
 8003934:	2320      	movs	r3, #32
 8003936:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800393a:	f8cd 800c 	str.w	r8, [sp, #12]
 800393e:	2330      	movs	r3, #48	@ 0x30
 8003940:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003af0 <_vfiprintf_r+0x21c>
 8003944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003948:	f04f 0901 	mov.w	r9, #1
 800394c:	4623      	mov	r3, r4
 800394e:	469a      	mov	sl, r3
 8003950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003954:	b10a      	cbz	r2, 800395a <_vfiprintf_r+0x86>
 8003956:	2a25      	cmp	r2, #37	@ 0x25
 8003958:	d1f9      	bne.n	800394e <_vfiprintf_r+0x7a>
 800395a:	ebba 0b04 	subs.w	fp, sl, r4
 800395e:	d00b      	beq.n	8003978 <_vfiprintf_r+0xa4>
 8003960:	465b      	mov	r3, fp
 8003962:	4622      	mov	r2, r4
 8003964:	4629      	mov	r1, r5
 8003966:	4630      	mov	r0, r6
 8003968:	f7ff ffa1 	bl	80038ae <__sfputs_r>
 800396c:	3001      	adds	r0, #1
 800396e:	f000 80a7 	beq.w	8003ac0 <_vfiprintf_r+0x1ec>
 8003972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003974:	445a      	add	r2, fp
 8003976:	9209      	str	r2, [sp, #36]	@ 0x24
 8003978:	f89a 3000 	ldrb.w	r3, [sl]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 809f 	beq.w	8003ac0 <_vfiprintf_r+0x1ec>
 8003982:	2300      	movs	r3, #0
 8003984:	f04f 32ff 	mov.w	r2, #4294967295
 8003988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800398c:	f10a 0a01 	add.w	sl, sl, #1
 8003990:	9304      	str	r3, [sp, #16]
 8003992:	9307      	str	r3, [sp, #28]
 8003994:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003998:	931a      	str	r3, [sp, #104]	@ 0x68
 800399a:	4654      	mov	r4, sl
 800399c:	2205      	movs	r2, #5
 800399e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a2:	4853      	ldr	r0, [pc, #332]	@ (8003af0 <_vfiprintf_r+0x21c>)
 80039a4:	f7fc fc1c 	bl	80001e0 <memchr>
 80039a8:	9a04      	ldr	r2, [sp, #16]
 80039aa:	b9d8      	cbnz	r0, 80039e4 <_vfiprintf_r+0x110>
 80039ac:	06d1      	lsls	r1, r2, #27
 80039ae:	bf44      	itt	mi
 80039b0:	2320      	movmi	r3, #32
 80039b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039b6:	0713      	lsls	r3, r2, #28
 80039b8:	bf44      	itt	mi
 80039ba:	232b      	movmi	r3, #43	@ 0x2b
 80039bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039c0:	f89a 3000 	ldrb.w	r3, [sl]
 80039c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80039c6:	d015      	beq.n	80039f4 <_vfiprintf_r+0x120>
 80039c8:	9a07      	ldr	r2, [sp, #28]
 80039ca:	4654      	mov	r4, sl
 80039cc:	2000      	movs	r0, #0
 80039ce:	f04f 0c0a 	mov.w	ip, #10
 80039d2:	4621      	mov	r1, r4
 80039d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039d8:	3b30      	subs	r3, #48	@ 0x30
 80039da:	2b09      	cmp	r3, #9
 80039dc:	d94b      	bls.n	8003a76 <_vfiprintf_r+0x1a2>
 80039de:	b1b0      	cbz	r0, 8003a0e <_vfiprintf_r+0x13a>
 80039e0:	9207      	str	r2, [sp, #28]
 80039e2:	e014      	b.n	8003a0e <_vfiprintf_r+0x13a>
 80039e4:	eba0 0308 	sub.w	r3, r0, r8
 80039e8:	fa09 f303 	lsl.w	r3, r9, r3
 80039ec:	4313      	orrs	r3, r2
 80039ee:	9304      	str	r3, [sp, #16]
 80039f0:	46a2      	mov	sl, r4
 80039f2:	e7d2      	b.n	800399a <_vfiprintf_r+0xc6>
 80039f4:	9b03      	ldr	r3, [sp, #12]
 80039f6:	1d19      	adds	r1, r3, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	9103      	str	r1, [sp, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bfbb      	ittet	lt
 8003a00:	425b      	neglt	r3, r3
 8003a02:	f042 0202 	orrlt.w	r2, r2, #2
 8003a06:	9307      	strge	r3, [sp, #28]
 8003a08:	9307      	strlt	r3, [sp, #28]
 8003a0a:	bfb8      	it	lt
 8003a0c:	9204      	strlt	r2, [sp, #16]
 8003a0e:	7823      	ldrb	r3, [r4, #0]
 8003a10:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a12:	d10a      	bne.n	8003a2a <_vfiprintf_r+0x156>
 8003a14:	7863      	ldrb	r3, [r4, #1]
 8003a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a18:	d132      	bne.n	8003a80 <_vfiprintf_r+0x1ac>
 8003a1a:	9b03      	ldr	r3, [sp, #12]
 8003a1c:	1d1a      	adds	r2, r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	9203      	str	r2, [sp, #12]
 8003a22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a26:	3402      	adds	r4, #2
 8003a28:	9305      	str	r3, [sp, #20]
 8003a2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003b00 <_vfiprintf_r+0x22c>
 8003a2e:	7821      	ldrb	r1, [r4, #0]
 8003a30:	2203      	movs	r2, #3
 8003a32:	4650      	mov	r0, sl
 8003a34:	f7fc fbd4 	bl	80001e0 <memchr>
 8003a38:	b138      	cbz	r0, 8003a4a <_vfiprintf_r+0x176>
 8003a3a:	9b04      	ldr	r3, [sp, #16]
 8003a3c:	eba0 000a 	sub.w	r0, r0, sl
 8003a40:	2240      	movs	r2, #64	@ 0x40
 8003a42:	4082      	lsls	r2, r0
 8003a44:	4313      	orrs	r3, r2
 8003a46:	3401      	adds	r4, #1
 8003a48:	9304      	str	r3, [sp, #16]
 8003a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4e:	4829      	ldr	r0, [pc, #164]	@ (8003af4 <_vfiprintf_r+0x220>)
 8003a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a54:	2206      	movs	r2, #6
 8003a56:	f7fc fbc3 	bl	80001e0 <memchr>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d03f      	beq.n	8003ade <_vfiprintf_r+0x20a>
 8003a5e:	4b26      	ldr	r3, [pc, #152]	@ (8003af8 <_vfiprintf_r+0x224>)
 8003a60:	bb1b      	cbnz	r3, 8003aaa <_vfiprintf_r+0x1d6>
 8003a62:	9b03      	ldr	r3, [sp, #12]
 8003a64:	3307      	adds	r3, #7
 8003a66:	f023 0307 	bic.w	r3, r3, #7
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	9303      	str	r3, [sp, #12]
 8003a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a70:	443b      	add	r3, r7
 8003a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a74:	e76a      	b.n	800394c <_vfiprintf_r+0x78>
 8003a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	e7a8      	b.n	80039d2 <_vfiprintf_r+0xfe>
 8003a80:	2300      	movs	r3, #0
 8003a82:	3401      	adds	r4, #1
 8003a84:	9305      	str	r3, [sp, #20]
 8003a86:	4619      	mov	r1, r3
 8003a88:	f04f 0c0a 	mov.w	ip, #10
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a92:	3a30      	subs	r2, #48	@ 0x30
 8003a94:	2a09      	cmp	r2, #9
 8003a96:	d903      	bls.n	8003aa0 <_vfiprintf_r+0x1cc>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0c6      	beq.n	8003a2a <_vfiprintf_r+0x156>
 8003a9c:	9105      	str	r1, [sp, #20]
 8003a9e:	e7c4      	b.n	8003a2a <_vfiprintf_r+0x156>
 8003aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e7f0      	b.n	8003a8c <_vfiprintf_r+0x1b8>
 8003aaa:	ab03      	add	r3, sp, #12
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	462a      	mov	r2, r5
 8003ab0:	4b12      	ldr	r3, [pc, #72]	@ (8003afc <_vfiprintf_r+0x228>)
 8003ab2:	a904      	add	r1, sp, #16
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f3af 8000 	nop.w
 8003aba:	4607      	mov	r7, r0
 8003abc:	1c78      	adds	r0, r7, #1
 8003abe:	d1d6      	bne.n	8003a6e <_vfiprintf_r+0x19a>
 8003ac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ac2:	07d9      	lsls	r1, r3, #31
 8003ac4:	d405      	bmi.n	8003ad2 <_vfiprintf_r+0x1fe>
 8003ac6:	89ab      	ldrh	r3, [r5, #12]
 8003ac8:	059a      	lsls	r2, r3, #22
 8003aca:	d402      	bmi.n	8003ad2 <_vfiprintf_r+0x1fe>
 8003acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ace:	f7ff fdcf 	bl	8003670 <__retarget_lock_release_recursive>
 8003ad2:	89ab      	ldrh	r3, [r5, #12]
 8003ad4:	065b      	lsls	r3, r3, #25
 8003ad6:	f53f af1f 	bmi.w	8003918 <_vfiprintf_r+0x44>
 8003ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003adc:	e71e      	b.n	800391c <_vfiprintf_r+0x48>
 8003ade:	ab03      	add	r3, sp, #12
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	462a      	mov	r2, r5
 8003ae4:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <_vfiprintf_r+0x228>)
 8003ae6:	a904      	add	r1, sp, #16
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 f879 	bl	8003be0 <_printf_i>
 8003aee:	e7e4      	b.n	8003aba <_vfiprintf_r+0x1e6>
 8003af0:	08004124 	.word	0x08004124
 8003af4:	0800412e 	.word	0x0800412e
 8003af8:	00000000 	.word	0x00000000
 8003afc:	080038af 	.word	0x080038af
 8003b00:	0800412a 	.word	0x0800412a

08003b04 <_printf_common>:
 8003b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b08:	4616      	mov	r6, r2
 8003b0a:	4698      	mov	r8, r3
 8003b0c:	688a      	ldr	r2, [r1, #8]
 8003b0e:	690b      	ldr	r3, [r1, #16]
 8003b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bfb8      	it	lt
 8003b18:	4613      	movlt	r3, r2
 8003b1a:	6033      	str	r3, [r6, #0]
 8003b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b20:	4607      	mov	r7, r0
 8003b22:	460c      	mov	r4, r1
 8003b24:	b10a      	cbz	r2, 8003b2a <_printf_common+0x26>
 8003b26:	3301      	adds	r3, #1
 8003b28:	6033      	str	r3, [r6, #0]
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	0699      	lsls	r1, r3, #26
 8003b2e:	bf42      	ittt	mi
 8003b30:	6833      	ldrmi	r3, [r6, #0]
 8003b32:	3302      	addmi	r3, #2
 8003b34:	6033      	strmi	r3, [r6, #0]
 8003b36:	6825      	ldr	r5, [r4, #0]
 8003b38:	f015 0506 	ands.w	r5, r5, #6
 8003b3c:	d106      	bne.n	8003b4c <_printf_common+0x48>
 8003b3e:	f104 0a19 	add.w	sl, r4, #25
 8003b42:	68e3      	ldr	r3, [r4, #12]
 8003b44:	6832      	ldr	r2, [r6, #0]
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	42ab      	cmp	r3, r5
 8003b4a:	dc26      	bgt.n	8003b9a <_printf_common+0x96>
 8003b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	3b00      	subs	r3, #0
 8003b54:	bf18      	it	ne
 8003b56:	2301      	movne	r3, #1
 8003b58:	0692      	lsls	r2, r2, #26
 8003b5a:	d42b      	bmi.n	8003bb4 <_printf_common+0xb0>
 8003b5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b60:	4641      	mov	r1, r8
 8003b62:	4638      	mov	r0, r7
 8003b64:	47c8      	blx	r9
 8003b66:	3001      	adds	r0, #1
 8003b68:	d01e      	beq.n	8003ba8 <_printf_common+0xa4>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	6922      	ldr	r2, [r4, #16]
 8003b6e:	f003 0306 	and.w	r3, r3, #6
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	bf02      	ittt	eq
 8003b76:	68e5      	ldreq	r5, [r4, #12]
 8003b78:	6833      	ldreq	r3, [r6, #0]
 8003b7a:	1aed      	subeq	r5, r5, r3
 8003b7c:	68a3      	ldr	r3, [r4, #8]
 8003b7e:	bf0c      	ite	eq
 8003b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b84:	2500      	movne	r5, #0
 8003b86:	4293      	cmp	r3, r2
 8003b88:	bfc4      	itt	gt
 8003b8a:	1a9b      	subgt	r3, r3, r2
 8003b8c:	18ed      	addgt	r5, r5, r3
 8003b8e:	2600      	movs	r6, #0
 8003b90:	341a      	adds	r4, #26
 8003b92:	42b5      	cmp	r5, r6
 8003b94:	d11a      	bne.n	8003bcc <_printf_common+0xc8>
 8003b96:	2000      	movs	r0, #0
 8003b98:	e008      	b.n	8003bac <_printf_common+0xa8>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	4652      	mov	r2, sl
 8003b9e:	4641      	mov	r1, r8
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	47c8      	blx	r9
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	d103      	bne.n	8003bb0 <_printf_common+0xac>
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb0:	3501      	adds	r5, #1
 8003bb2:	e7c6      	b.n	8003b42 <_printf_common+0x3e>
 8003bb4:	18e1      	adds	r1, r4, r3
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	2030      	movs	r0, #48	@ 0x30
 8003bba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bbe:	4422      	add	r2, r4
 8003bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bc8:	3302      	adds	r3, #2
 8003bca:	e7c7      	b.n	8003b5c <_printf_common+0x58>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4622      	mov	r2, r4
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	47c8      	blx	r9
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d0e6      	beq.n	8003ba8 <_printf_common+0xa4>
 8003bda:	3601      	adds	r6, #1
 8003bdc:	e7d9      	b.n	8003b92 <_printf_common+0x8e>
	...

08003be0 <_printf_i>:
 8003be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003be4:	7e0f      	ldrb	r7, [r1, #24]
 8003be6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003be8:	2f78      	cmp	r7, #120	@ 0x78
 8003bea:	4691      	mov	r9, r2
 8003bec:	4680      	mov	r8, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	469a      	mov	sl, r3
 8003bf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bf6:	d807      	bhi.n	8003c08 <_printf_i+0x28>
 8003bf8:	2f62      	cmp	r7, #98	@ 0x62
 8003bfa:	d80a      	bhi.n	8003c12 <_printf_i+0x32>
 8003bfc:	2f00      	cmp	r7, #0
 8003bfe:	f000 80d2 	beq.w	8003da6 <_printf_i+0x1c6>
 8003c02:	2f58      	cmp	r7, #88	@ 0x58
 8003c04:	f000 80b9 	beq.w	8003d7a <_printf_i+0x19a>
 8003c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c10:	e03a      	b.n	8003c88 <_printf_i+0xa8>
 8003c12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c16:	2b15      	cmp	r3, #21
 8003c18:	d8f6      	bhi.n	8003c08 <_printf_i+0x28>
 8003c1a:	a101      	add	r1, pc, #4	@ (adr r1, 8003c20 <_printf_i+0x40>)
 8003c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c20:	08003c79 	.word	0x08003c79
 8003c24:	08003c8d 	.word	0x08003c8d
 8003c28:	08003c09 	.word	0x08003c09
 8003c2c:	08003c09 	.word	0x08003c09
 8003c30:	08003c09 	.word	0x08003c09
 8003c34:	08003c09 	.word	0x08003c09
 8003c38:	08003c8d 	.word	0x08003c8d
 8003c3c:	08003c09 	.word	0x08003c09
 8003c40:	08003c09 	.word	0x08003c09
 8003c44:	08003c09 	.word	0x08003c09
 8003c48:	08003c09 	.word	0x08003c09
 8003c4c:	08003d8d 	.word	0x08003d8d
 8003c50:	08003cb7 	.word	0x08003cb7
 8003c54:	08003d47 	.word	0x08003d47
 8003c58:	08003c09 	.word	0x08003c09
 8003c5c:	08003c09 	.word	0x08003c09
 8003c60:	08003daf 	.word	0x08003daf
 8003c64:	08003c09 	.word	0x08003c09
 8003c68:	08003cb7 	.word	0x08003cb7
 8003c6c:	08003c09 	.word	0x08003c09
 8003c70:	08003c09 	.word	0x08003c09
 8003c74:	08003d4f 	.word	0x08003d4f
 8003c78:	6833      	ldr	r3, [r6, #0]
 8003c7a:	1d1a      	adds	r2, r3, #4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6032      	str	r2, [r6, #0]
 8003c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e09d      	b.n	8003dc8 <_printf_i+0x1e8>
 8003c8c:	6833      	ldr	r3, [r6, #0]
 8003c8e:	6820      	ldr	r0, [r4, #0]
 8003c90:	1d19      	adds	r1, r3, #4
 8003c92:	6031      	str	r1, [r6, #0]
 8003c94:	0606      	lsls	r6, r0, #24
 8003c96:	d501      	bpl.n	8003c9c <_printf_i+0xbc>
 8003c98:	681d      	ldr	r5, [r3, #0]
 8003c9a:	e003      	b.n	8003ca4 <_printf_i+0xc4>
 8003c9c:	0645      	lsls	r5, r0, #25
 8003c9e:	d5fb      	bpl.n	8003c98 <_printf_i+0xb8>
 8003ca0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ca4:	2d00      	cmp	r5, #0
 8003ca6:	da03      	bge.n	8003cb0 <_printf_i+0xd0>
 8003ca8:	232d      	movs	r3, #45	@ 0x2d
 8003caa:	426d      	negs	r5, r5
 8003cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cb0:	4859      	ldr	r0, [pc, #356]	@ (8003e18 <_printf_i+0x238>)
 8003cb2:	230a      	movs	r3, #10
 8003cb4:	e011      	b.n	8003cda <_printf_i+0xfa>
 8003cb6:	6821      	ldr	r1, [r4, #0]
 8003cb8:	6833      	ldr	r3, [r6, #0]
 8003cba:	0608      	lsls	r0, r1, #24
 8003cbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cc0:	d402      	bmi.n	8003cc8 <_printf_i+0xe8>
 8003cc2:	0649      	lsls	r1, r1, #25
 8003cc4:	bf48      	it	mi
 8003cc6:	b2ad      	uxthmi	r5, r5
 8003cc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cca:	4853      	ldr	r0, [pc, #332]	@ (8003e18 <_printf_i+0x238>)
 8003ccc:	6033      	str	r3, [r6, #0]
 8003cce:	bf14      	ite	ne
 8003cd0:	230a      	movne	r3, #10
 8003cd2:	2308      	moveq	r3, #8
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cda:	6866      	ldr	r6, [r4, #4]
 8003cdc:	60a6      	str	r6, [r4, #8]
 8003cde:	2e00      	cmp	r6, #0
 8003ce0:	bfa2      	ittt	ge
 8003ce2:	6821      	ldrge	r1, [r4, #0]
 8003ce4:	f021 0104 	bicge.w	r1, r1, #4
 8003ce8:	6021      	strge	r1, [r4, #0]
 8003cea:	b90d      	cbnz	r5, 8003cf0 <_printf_i+0x110>
 8003cec:	2e00      	cmp	r6, #0
 8003cee:	d04b      	beq.n	8003d88 <_printf_i+0x1a8>
 8003cf0:	4616      	mov	r6, r2
 8003cf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cf6:	fb03 5711 	mls	r7, r3, r1, r5
 8003cfa:	5dc7      	ldrb	r7, [r0, r7]
 8003cfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d00:	462f      	mov	r7, r5
 8003d02:	42bb      	cmp	r3, r7
 8003d04:	460d      	mov	r5, r1
 8003d06:	d9f4      	bls.n	8003cf2 <_printf_i+0x112>
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d10b      	bne.n	8003d24 <_printf_i+0x144>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	07df      	lsls	r7, r3, #31
 8003d10:	d508      	bpl.n	8003d24 <_printf_i+0x144>
 8003d12:	6923      	ldr	r3, [r4, #16]
 8003d14:	6861      	ldr	r1, [r4, #4]
 8003d16:	4299      	cmp	r1, r3
 8003d18:	bfde      	ittt	le
 8003d1a:	2330      	movle	r3, #48	@ 0x30
 8003d1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d24:	1b92      	subs	r2, r2, r6
 8003d26:	6122      	str	r2, [r4, #16]
 8003d28:	f8cd a000 	str.w	sl, [sp]
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	aa03      	add	r2, sp, #12
 8003d30:	4621      	mov	r1, r4
 8003d32:	4640      	mov	r0, r8
 8003d34:	f7ff fee6 	bl	8003b04 <_printf_common>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d14a      	bne.n	8003dd2 <_printf_i+0x1f2>
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d40:	b004      	add	sp, #16
 8003d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	f043 0320 	orr.w	r3, r3, #32
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	4833      	ldr	r0, [pc, #204]	@ (8003e1c <_printf_i+0x23c>)
 8003d50:	2778      	movs	r7, #120	@ 0x78
 8003d52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	6831      	ldr	r1, [r6, #0]
 8003d5a:	061f      	lsls	r7, r3, #24
 8003d5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d60:	d402      	bmi.n	8003d68 <_printf_i+0x188>
 8003d62:	065f      	lsls	r7, r3, #25
 8003d64:	bf48      	it	mi
 8003d66:	b2ad      	uxthmi	r5, r5
 8003d68:	6031      	str	r1, [r6, #0]
 8003d6a:	07d9      	lsls	r1, r3, #31
 8003d6c:	bf44      	itt	mi
 8003d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d72:	6023      	strmi	r3, [r4, #0]
 8003d74:	b11d      	cbz	r5, 8003d7e <_printf_i+0x19e>
 8003d76:	2310      	movs	r3, #16
 8003d78:	e7ac      	b.n	8003cd4 <_printf_i+0xf4>
 8003d7a:	4827      	ldr	r0, [pc, #156]	@ (8003e18 <_printf_i+0x238>)
 8003d7c:	e7e9      	b.n	8003d52 <_printf_i+0x172>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	f023 0320 	bic.w	r3, r3, #32
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	e7f6      	b.n	8003d76 <_printf_i+0x196>
 8003d88:	4616      	mov	r6, r2
 8003d8a:	e7bd      	b.n	8003d08 <_printf_i+0x128>
 8003d8c:	6833      	ldr	r3, [r6, #0]
 8003d8e:	6825      	ldr	r5, [r4, #0]
 8003d90:	6961      	ldr	r1, [r4, #20]
 8003d92:	1d18      	adds	r0, r3, #4
 8003d94:	6030      	str	r0, [r6, #0]
 8003d96:	062e      	lsls	r6, r5, #24
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	d501      	bpl.n	8003da0 <_printf_i+0x1c0>
 8003d9c:	6019      	str	r1, [r3, #0]
 8003d9e:	e002      	b.n	8003da6 <_printf_i+0x1c6>
 8003da0:	0668      	lsls	r0, r5, #25
 8003da2:	d5fb      	bpl.n	8003d9c <_printf_i+0x1bc>
 8003da4:	8019      	strh	r1, [r3, #0]
 8003da6:	2300      	movs	r3, #0
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	4616      	mov	r6, r2
 8003dac:	e7bc      	b.n	8003d28 <_printf_i+0x148>
 8003dae:	6833      	ldr	r3, [r6, #0]
 8003db0:	1d1a      	adds	r2, r3, #4
 8003db2:	6032      	str	r2, [r6, #0]
 8003db4:	681e      	ldr	r6, [r3, #0]
 8003db6:	6862      	ldr	r2, [r4, #4]
 8003db8:	2100      	movs	r1, #0
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f7fc fa10 	bl	80001e0 <memchr>
 8003dc0:	b108      	cbz	r0, 8003dc6 <_printf_i+0x1e6>
 8003dc2:	1b80      	subs	r0, r0, r6
 8003dc4:	6060      	str	r0, [r4, #4]
 8003dc6:	6863      	ldr	r3, [r4, #4]
 8003dc8:	6123      	str	r3, [r4, #16]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dd0:	e7aa      	b.n	8003d28 <_printf_i+0x148>
 8003dd2:	6923      	ldr	r3, [r4, #16]
 8003dd4:	4632      	mov	r2, r6
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4640      	mov	r0, r8
 8003dda:	47d0      	blx	sl
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d0ad      	beq.n	8003d3c <_printf_i+0x15c>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	079b      	lsls	r3, r3, #30
 8003de4:	d413      	bmi.n	8003e0e <_printf_i+0x22e>
 8003de6:	68e0      	ldr	r0, [r4, #12]
 8003de8:	9b03      	ldr	r3, [sp, #12]
 8003dea:	4298      	cmp	r0, r3
 8003dec:	bfb8      	it	lt
 8003dee:	4618      	movlt	r0, r3
 8003df0:	e7a6      	b.n	8003d40 <_printf_i+0x160>
 8003df2:	2301      	movs	r3, #1
 8003df4:	4632      	mov	r2, r6
 8003df6:	4649      	mov	r1, r9
 8003df8:	4640      	mov	r0, r8
 8003dfa:	47d0      	blx	sl
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d09d      	beq.n	8003d3c <_printf_i+0x15c>
 8003e00:	3501      	adds	r5, #1
 8003e02:	68e3      	ldr	r3, [r4, #12]
 8003e04:	9903      	ldr	r1, [sp, #12]
 8003e06:	1a5b      	subs	r3, r3, r1
 8003e08:	42ab      	cmp	r3, r5
 8003e0a:	dcf2      	bgt.n	8003df2 <_printf_i+0x212>
 8003e0c:	e7eb      	b.n	8003de6 <_printf_i+0x206>
 8003e0e:	2500      	movs	r5, #0
 8003e10:	f104 0619 	add.w	r6, r4, #25
 8003e14:	e7f5      	b.n	8003e02 <_printf_i+0x222>
 8003e16:	bf00      	nop
 8003e18:	08004135 	.word	0x08004135
 8003e1c:	08004146 	.word	0x08004146

08003e20 <__sflush_r>:
 8003e20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e28:	0716      	lsls	r6, r2, #28
 8003e2a:	4605      	mov	r5, r0
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	d454      	bmi.n	8003eda <__sflush_r+0xba>
 8003e30:	684b      	ldr	r3, [r1, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	dc02      	bgt.n	8003e3c <__sflush_r+0x1c>
 8003e36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	dd48      	ble.n	8003ece <__sflush_r+0xae>
 8003e3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e3e:	2e00      	cmp	r6, #0
 8003e40:	d045      	beq.n	8003ece <__sflush_r+0xae>
 8003e42:	2300      	movs	r3, #0
 8003e44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e48:	682f      	ldr	r7, [r5, #0]
 8003e4a:	6a21      	ldr	r1, [r4, #32]
 8003e4c:	602b      	str	r3, [r5, #0]
 8003e4e:	d030      	beq.n	8003eb2 <__sflush_r+0x92>
 8003e50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	0759      	lsls	r1, r3, #29
 8003e56:	d505      	bpl.n	8003e64 <__sflush_r+0x44>
 8003e58:	6863      	ldr	r3, [r4, #4]
 8003e5a:	1ad2      	subs	r2, r2, r3
 8003e5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e5e:	b10b      	cbz	r3, 8003e64 <__sflush_r+0x44>
 8003e60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e62:	1ad2      	subs	r2, r2, r3
 8003e64:	2300      	movs	r3, #0
 8003e66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e68:	6a21      	ldr	r1, [r4, #32]
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b0      	blx	r6
 8003e6e:	1c43      	adds	r3, r0, #1
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	d106      	bne.n	8003e82 <__sflush_r+0x62>
 8003e74:	6829      	ldr	r1, [r5, #0]
 8003e76:	291d      	cmp	r1, #29
 8003e78:	d82b      	bhi.n	8003ed2 <__sflush_r+0xb2>
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f24 <__sflush_r+0x104>)
 8003e7c:	410a      	asrs	r2, r1
 8003e7e:	07d6      	lsls	r6, r2, #31
 8003e80:	d427      	bmi.n	8003ed2 <__sflush_r+0xb2>
 8003e82:	2200      	movs	r2, #0
 8003e84:	6062      	str	r2, [r4, #4]
 8003e86:	04d9      	lsls	r1, r3, #19
 8003e88:	6922      	ldr	r2, [r4, #16]
 8003e8a:	6022      	str	r2, [r4, #0]
 8003e8c:	d504      	bpl.n	8003e98 <__sflush_r+0x78>
 8003e8e:	1c42      	adds	r2, r0, #1
 8003e90:	d101      	bne.n	8003e96 <__sflush_r+0x76>
 8003e92:	682b      	ldr	r3, [r5, #0]
 8003e94:	b903      	cbnz	r3, 8003e98 <__sflush_r+0x78>
 8003e96:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e9a:	602f      	str	r7, [r5, #0]
 8003e9c:	b1b9      	cbz	r1, 8003ece <__sflush_r+0xae>
 8003e9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ea2:	4299      	cmp	r1, r3
 8003ea4:	d002      	beq.n	8003eac <__sflush_r+0x8c>
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f7ff fbf2 	bl	8003690 <_free_r>
 8003eac:	2300      	movs	r3, #0
 8003eae:	6363      	str	r3, [r4, #52]	@ 0x34
 8003eb0:	e00d      	b.n	8003ece <__sflush_r+0xae>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	47b0      	blx	r6
 8003eb8:	4602      	mov	r2, r0
 8003eba:	1c50      	adds	r0, r2, #1
 8003ebc:	d1c9      	bne.n	8003e52 <__sflush_r+0x32>
 8003ebe:	682b      	ldr	r3, [r5, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0c6      	beq.n	8003e52 <__sflush_r+0x32>
 8003ec4:	2b1d      	cmp	r3, #29
 8003ec6:	d001      	beq.n	8003ecc <__sflush_r+0xac>
 8003ec8:	2b16      	cmp	r3, #22
 8003eca:	d11e      	bne.n	8003f0a <__sflush_r+0xea>
 8003ecc:	602f      	str	r7, [r5, #0]
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e022      	b.n	8003f18 <__sflush_r+0xf8>
 8003ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ed6:	b21b      	sxth	r3, r3
 8003ed8:	e01b      	b.n	8003f12 <__sflush_r+0xf2>
 8003eda:	690f      	ldr	r7, [r1, #16]
 8003edc:	2f00      	cmp	r7, #0
 8003ede:	d0f6      	beq.n	8003ece <__sflush_r+0xae>
 8003ee0:	0793      	lsls	r3, r2, #30
 8003ee2:	680e      	ldr	r6, [r1, #0]
 8003ee4:	bf08      	it	eq
 8003ee6:	694b      	ldreq	r3, [r1, #20]
 8003ee8:	600f      	str	r7, [r1, #0]
 8003eea:	bf18      	it	ne
 8003eec:	2300      	movne	r3, #0
 8003eee:	eba6 0807 	sub.w	r8, r6, r7
 8003ef2:	608b      	str	r3, [r1, #8]
 8003ef4:	f1b8 0f00 	cmp.w	r8, #0
 8003ef8:	dde9      	ble.n	8003ece <__sflush_r+0xae>
 8003efa:	6a21      	ldr	r1, [r4, #32]
 8003efc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003efe:	4643      	mov	r3, r8
 8003f00:	463a      	mov	r2, r7
 8003f02:	4628      	mov	r0, r5
 8003f04:	47b0      	blx	r6
 8003f06:	2800      	cmp	r0, #0
 8003f08:	dc08      	bgt.n	8003f1c <__sflush_r+0xfc>
 8003f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f1c:	4407      	add	r7, r0
 8003f1e:	eba8 0800 	sub.w	r8, r8, r0
 8003f22:	e7e7      	b.n	8003ef4 <__sflush_r+0xd4>
 8003f24:	dfbffffe 	.word	0xdfbffffe

08003f28 <_fflush_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	690b      	ldr	r3, [r1, #16]
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	b913      	cbnz	r3, 8003f38 <_fflush_r+0x10>
 8003f32:	2500      	movs	r5, #0
 8003f34:	4628      	mov	r0, r5
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	b118      	cbz	r0, 8003f42 <_fflush_r+0x1a>
 8003f3a:	6a03      	ldr	r3, [r0, #32]
 8003f3c:	b90b      	cbnz	r3, 8003f42 <_fflush_r+0x1a>
 8003f3e:	f7ff f99f 	bl	8003280 <__sinit>
 8003f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f3      	beq.n	8003f32 <_fflush_r+0xa>
 8003f4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f4c:	07d0      	lsls	r0, r2, #31
 8003f4e:	d404      	bmi.n	8003f5a <_fflush_r+0x32>
 8003f50:	0599      	lsls	r1, r3, #22
 8003f52:	d402      	bmi.n	8003f5a <_fflush_r+0x32>
 8003f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f56:	f7ff fb8a 	bl	800366e <__retarget_lock_acquire_recursive>
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	f7ff ff5f 	bl	8003e20 <__sflush_r>
 8003f62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f64:	07da      	lsls	r2, r3, #31
 8003f66:	4605      	mov	r5, r0
 8003f68:	d4e4      	bmi.n	8003f34 <_fflush_r+0xc>
 8003f6a:	89a3      	ldrh	r3, [r4, #12]
 8003f6c:	059b      	lsls	r3, r3, #22
 8003f6e:	d4e1      	bmi.n	8003f34 <_fflush_r+0xc>
 8003f70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f72:	f7ff fb7d 	bl	8003670 <__retarget_lock_release_recursive>
 8003f76:	e7dd      	b.n	8003f34 <_fflush_r+0xc>

08003f78 <__swhatbuf_r>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f80:	2900      	cmp	r1, #0
 8003f82:	b096      	sub	sp, #88	@ 0x58
 8003f84:	4615      	mov	r5, r2
 8003f86:	461e      	mov	r6, r3
 8003f88:	da0d      	bge.n	8003fa6 <__swhatbuf_r+0x2e>
 8003f8a:	89a3      	ldrh	r3, [r4, #12]
 8003f8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	bf14      	ite	ne
 8003f96:	2340      	movne	r3, #64	@ 0x40
 8003f98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	6031      	str	r1, [r6, #0]
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	b016      	add	sp, #88	@ 0x58
 8003fa4:	bd70      	pop	{r4, r5, r6, pc}
 8003fa6:	466a      	mov	r2, sp
 8003fa8:	f000 f848 	bl	800403c <_fstat_r>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	dbec      	blt.n	8003f8a <__swhatbuf_r+0x12>
 8003fb0:	9901      	ldr	r1, [sp, #4]
 8003fb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003fb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003fba:	4259      	negs	r1, r3
 8003fbc:	4159      	adcs	r1, r3
 8003fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fc2:	e7eb      	b.n	8003f9c <__swhatbuf_r+0x24>

08003fc4 <__smakebuf_r>:
 8003fc4:	898b      	ldrh	r3, [r1, #12]
 8003fc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fc8:	079d      	lsls	r5, r3, #30
 8003fca:	4606      	mov	r6, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	d507      	bpl.n	8003fe0 <__smakebuf_r+0x1c>
 8003fd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	6123      	str	r3, [r4, #16]
 8003fd8:	2301      	movs	r3, #1
 8003fda:	6163      	str	r3, [r4, #20]
 8003fdc:	b003      	add	sp, #12
 8003fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe0:	ab01      	add	r3, sp, #4
 8003fe2:	466a      	mov	r2, sp
 8003fe4:	f7ff ffc8 	bl	8003f78 <__swhatbuf_r>
 8003fe8:	9f00      	ldr	r7, [sp, #0]
 8003fea:	4605      	mov	r5, r0
 8003fec:	4639      	mov	r1, r7
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f7ff fbba 	bl	8003768 <_malloc_r>
 8003ff4:	b948      	cbnz	r0, 800400a <__smakebuf_r+0x46>
 8003ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffa:	059a      	lsls	r2, r3, #22
 8003ffc:	d4ee      	bmi.n	8003fdc <__smakebuf_r+0x18>
 8003ffe:	f023 0303 	bic.w	r3, r3, #3
 8004002:	f043 0302 	orr.w	r3, r3, #2
 8004006:	81a3      	strh	r3, [r4, #12]
 8004008:	e7e2      	b.n	8003fd0 <__smakebuf_r+0xc>
 800400a:	89a3      	ldrh	r3, [r4, #12]
 800400c:	6020      	str	r0, [r4, #0]
 800400e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	9b01      	ldr	r3, [sp, #4]
 8004016:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800401a:	b15b      	cbz	r3, 8004034 <__smakebuf_r+0x70>
 800401c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004020:	4630      	mov	r0, r6
 8004022:	f000 f81d 	bl	8004060 <_isatty_r>
 8004026:	b128      	cbz	r0, 8004034 <__smakebuf_r+0x70>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	f023 0303 	bic.w	r3, r3, #3
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	81a3      	strh	r3, [r4, #12]
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	431d      	orrs	r5, r3
 8004038:	81a5      	strh	r5, [r4, #12]
 800403a:	e7cf      	b.n	8003fdc <__smakebuf_r+0x18>

0800403c <_fstat_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4d07      	ldr	r5, [pc, #28]	@ (800405c <_fstat_r+0x20>)
 8004040:	2300      	movs	r3, #0
 8004042:	4604      	mov	r4, r0
 8004044:	4608      	mov	r0, r1
 8004046:	4611      	mov	r1, r2
 8004048:	602b      	str	r3, [r5, #0]
 800404a:	f7fc fe04 	bl	8000c56 <_fstat>
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	d102      	bne.n	8004058 <_fstat_r+0x1c>
 8004052:	682b      	ldr	r3, [r5, #0]
 8004054:	b103      	cbz	r3, 8004058 <_fstat_r+0x1c>
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	bd38      	pop	{r3, r4, r5, pc}
 800405a:	bf00      	nop
 800405c:	200002e0 	.word	0x200002e0

08004060 <_isatty_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	4d06      	ldr	r5, [pc, #24]	@ (800407c <_isatty_r+0x1c>)
 8004064:	2300      	movs	r3, #0
 8004066:	4604      	mov	r4, r0
 8004068:	4608      	mov	r0, r1
 800406a:	602b      	str	r3, [r5, #0]
 800406c:	f7fc fe03 	bl	8000c76 <_isatty>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_isatty_r+0x1a>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	b103      	cbz	r3, 800407a <_isatty_r+0x1a>
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	200002e0 	.word	0x200002e0

08004080 <_sbrk_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d06      	ldr	r5, [pc, #24]	@ (800409c <_sbrk_r+0x1c>)
 8004084:	2300      	movs	r3, #0
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fc fe0c 	bl	8000ca8 <_sbrk>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_sbrk_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_sbrk_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	200002e0 	.word	0x200002e0

080040a0 <_init>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr

080040ac <_fini>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr
