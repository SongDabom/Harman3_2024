
test05_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004218  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080043b8  080043b8  000053b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004458  08004458  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004458  08004458  00005458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004460  08004460  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004460  08004460  00005460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004464  08004464  00005464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004468  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  080044d0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080044d0  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db38  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb0  00000000  00000000  00013bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00015a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6d  00000000  00000000  000167d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001825c  00000000  00000000  00017245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeb6  00000000  00000000  0002f4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b925  00000000  00000000  0003e357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fbc  00000000  00000000  000d9cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ddc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043a0 	.word	0x080043a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080043a0 	.word	0x080043a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	230a      	movs	r3, #10
 800057c:	2201      	movs	r2, #1
 800057e:	4804      	ldr	r0, [pc, #16]	@ (8000590 <__io_putchar+0x20>)
 8000580:	f002 fc22 	bl	8002dc8 <HAL_UART_Transmit>
   return ch;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000114 	.word	0x20000114

08000594 <GetAdcValue>:

int GetAdcValue()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    HAL_ADC_Start (&hadc1);
 8000598:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <GetAdcValue+0x20>)
 800059a:	f000 fcc9 	bl	8000f30 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 800059e:	210a      	movs	r1, #10
 80005a0:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <GetAdcValue+0x20>)
 80005a2:	f000 fd79 	bl	8001098 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <GetAdcValue+0x20>)
 80005a8:	f000 fe01 	bl	80011ae <HAL_ADC_GetValue>
 80005ac:	4603      	mov	r3, r0
};
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000084 	.word	0x20000084

080005b8 <HAL_TIM_PeriodElapsedCallback>:
           //HAL_Delay(300);
           printf("\033[2J");   // screen clear
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
     int r1 = GetAdcValue();
 80005c0:	f7ff ffe8 	bl	8000594 <GetAdcValue>
 80005c4:	60f8      	str	r0, [r7, #12]
     int r2 = GetAdcValue();
 80005c6:	f7ff ffe5 	bl	8000594 <GetAdcValue>
 80005ca:	60b8      	str	r0, [r7, #8]
     printf("\033[10;20H ADC_CH0 : %d\r\n", r1);
 80005cc:	68f9      	ldr	r1, [r7, #12]
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005d0:	f003 f878 	bl	80036c4 <iprintf>
     printf("\033[12;20H   ADC_CH1 : %d\r\n", r2);
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80005d8:	f003 f874 	bl	80036c4 <iprintf>
};
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	080043d8 	.word	0x080043d8
 80005e8:	080043f0 	.word	0x080043f0

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fbc4 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f812 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f956 	bl	80008a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f92a 	bl	8000854 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000600:	f000 f876 	bl	80006f0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000604:	f000 f8d8 	bl	80007b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);// timer interrupt start
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <main+0x2c>)
 800060a:	f001 ffa3 	bl	8002554 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(300);
 800060e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000612:	f000 fc25 	bl	8000e60 <HAL_Delay>
 8000616:	e7fa      	b.n	800060e <main+0x22>
 8000618:	200000cc 	.word	0x200000cc

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	@ 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 f89f 	bl	800376e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	@ (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	@ (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800068c:	2310      	movs	r3, #16
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000696:	2304      	movs	r3, #4
 8000698:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069a:	2304      	movs	r3, #4
 800069c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fa6e 	bl	8001b84 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ae:	f000 f969 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fcd0 	bl	8002074 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 f953 	bl	8000984 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	@ 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000702:	4b2a      	ldr	r3, [pc, #168]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <MX_ADC1_Init+0xc0>)
 8000706:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000708:	4b28      	ldr	r3, [pc, #160]	@ (80007ac <MX_ADC1_Init+0xbc>)
 800070a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800070e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000710:	4b26      	ldr	r3, [pc, #152]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000716:	4b25      	ldr	r3, [pc, #148]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000718:	2201      	movs	r2, #1
 800071a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071c:	4b23      	ldr	r3, [pc, #140]	@ (80007ac <MX_ADC1_Init+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000722:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000724:	2201      	movs	r2, #1
 8000726:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800072a:	4b20      	ldr	r3, [pc, #128]	@ (80007ac <MX_ADC1_Init+0xbc>)
 800072c:	2201      	movs	r2, #1
 800072e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000730:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000732:	2200      	movs	r2, #0
 8000734:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000736:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000738:	4a1e      	ldr	r2, [pc, #120]	@ (80007b4 <MX_ADC1_Init+0xc4>)
 800073a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <MX_ADC1_Init+0xbc>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000742:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000744:	2202      	movs	r2, #2
 8000746:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000748:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <MX_ADC1_Init+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000750:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000752:	2201      	movs	r2, #1
 8000754:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000756:	4815      	ldr	r0, [pc, #84]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000758:	f000 fba6 	bl	8000ea8 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000762:	f000 f90f 	bl	8000984 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000778:	f000 fd26 	bl	80011c8 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000782:	f000 f8ff 	bl	8000984 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000786:	2301      	movs	r3, #1
 8000788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	@ (80007ac <MX_ADC1_Init+0xbc>)
 8000794:	f000 fd18 	bl	80011c8 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800079e:	f000 f8f1 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000084 	.word	0x20000084
 80007b0:	40012000 	.word	0x40012000
 80007b4:	0f000001 	.word	0x0f000001

080007b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_TIM3_Init+0x94>)
 80007d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000850 <MX_TIM3_Init+0x98>)
 80007d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <MX_TIM3_Init+0x94>)
 80007dc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80007e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_TIM3_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80007e8:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_TIM3_Init+0x94>)
 80007ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_TIM3_Init+0x94>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_TIM3_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007fc:	4813      	ldr	r0, [pc, #76]	@ (800084c <MX_TIM3_Init+0x94>)
 80007fe:	f001 fe59 	bl	80024b4 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000808:	f000 f8bc 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000810:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	@ (800084c <MX_TIM3_Init+0x94>)
 800081a:	f001 ffed 	bl	80027f8 <HAL_TIM_ConfigClockSource>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000824:	f000 f8ae 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_TIM3_Init+0x94>)
 8000836:	f002 f9f5 	bl	8002c24 <HAL_TIMEx_MasterConfigSynchronization>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000840:	f000 f8a0 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000cc 	.word	0x200000cc
 8000850:	40000400 	.word	0x40000400

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <MX_USART2_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800088c:	f002 fa4c 	bl	8002d28 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 f875 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000114 	.word	0x20000114
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a25      	ldr	r2, [pc, #148]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <MX_GPIO_Init+0xd0>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	4812      	ldr	r0, [pc, #72]	@ (800097c <MX_GPIO_Init+0xd4>)
 8000934:	f001 f90c 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480c      	ldr	r0, [pc, #48]	@ (8000980 <MX_GPIO_Init+0xd8>)
 8000950:	f000 ff7a 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4804      	ldr	r0, [pc, #16]	@ (800097c <MX_GPIO_Init+0xd4>)
 800096c:	f000 ff6c 	bl	8001848 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000
 8000980:	40020800 	.word	0x40020800

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ce:	2007      	movs	r0, #7
 80009d0:	f000 fef8 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <HAL_ADC_MspInit+0x7c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d127      	bne.n	8000a52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a15      	ldr	r2, [pc, #84]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <HAL_ADC_MspInit+0x84>)
 8000a4e:	f000 fefb 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40012000 	.word	0x40012000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000

08000a68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <HAL_TIM_Base_MspInit+0x48>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d115      	bne.n	8000aa6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <HAL_TIM_Base_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab4 <HAL_TIM_Base_MspInit+0x4c>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_TIM_Base_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	201d      	movs	r0, #29
 8000a9c:	f000 fe9d 	bl	80017da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000aa0:	201d      	movs	r0, #29
 8000aa2:	f000 feb6 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40000400 	.word	0x40000400
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <HAL_UART_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12b      	bne.n	8000b32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b12:	230c      	movs	r3, #12
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <HAL_UART_MspInit+0x8c>)
 8000b2e:	f000 fe8b 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	@ 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <MemManage_Handler+0x4>

08000b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 f93f 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <TIM3_IRQHandler+0x10>)
 8000bae:	f001 fd33 	bl	8002618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000cc 	.word	0x200000cc

08000bbc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e00a      	b.n	8000be4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bce:	f3af 8000 	nop.w
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60ba      	str	r2, [r7, #8]
 8000bda:	b2ca      	uxtb	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbf0      	blt.n	8000bce <_read+0x12>
  }

  return len;
 8000bec:	687b      	ldr	r3, [r7, #4]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e009      	b.n	8000c1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	60ba      	str	r2, [r7, #8]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fcad 	bl	8000570 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf1      	blt.n	8000c08 <_write+0x12>
  }
  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_close>:

int _close(int file)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c56:	605a      	str	r2, [r3, #4]
  return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_isatty>:

int _isatty(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	@ (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f002 fda0 	bl	800380c <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20020000 	.word	0x20020000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	2000015c 	.word	0x2000015c
 8000d00:	200002b0 	.word	0x200002b0

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	@ (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2c:	f7ff ffea 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d32:	490d      	ldr	r1, [pc, #52]	@ (8000d68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d34:	4a0d      	ldr	r2, [pc, #52]	@ (8000d6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d48:	4c0a      	ldr	r4, [pc, #40]	@ (8000d74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f002 fd5f 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fc47 	bl	80005ec <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d6c:	08004468 	.word	0x08004468
  ldr r2, =_sbss
 8000d70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d74:	200002b0 	.word	0x200002b0

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	@ (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 fd0d 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fdee 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fd25 	bl	800182e <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 fced 	bl	80017da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000160 	.word	0x20000160

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000160 	.word	0x20000160

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e033      	b.n	8000f26 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d109      	bne.n	8000eda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fd8a 	bl	80009e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d118      	bne.n	8000f18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000eee:	f023 0302 	bic.w	r3, r3, #2
 8000ef2:	f043 0202 	orr.w	r2, r3, #2
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 fa96 	bl	800142c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f023 0303 	bic.w	r3, r3, #3
 8000f0e:	f043 0201 	orr.w	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f16:	e001      	b.n	8000f1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_ADC_Start+0x1a>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e097      	b.n	800107a <HAL_ADC_Start+0x14a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d018      	beq.n	8000f92 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0201 	orr.w	r2, r2, #1
 8000f6e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f70:	4b45      	ldr	r3, [pc, #276]	@ (8001088 <HAL_ADC_Start+0x158>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a45      	ldr	r2, [pc, #276]	@ (800108c <HAL_ADC_Start+0x15c>)
 8000f76:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7a:	0c9a      	lsrs	r2, r3, #18
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f84:	e002      	b.n	8000f8c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f9      	bne.n	8000f86 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d15f      	bne.n	8001060 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d007      	beq.n	8000fd2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fde:	d106      	bne.n	8000fee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe4:	f023 0206 	bic.w	r2, r3, #6
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fec:	e002      	b.n	8000ff4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ffc:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <HAL_ADC_Start+0x160>)
 8000ffe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001008:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 031f 	and.w	r3, r3, #31
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10f      	bne.n	8001036 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d129      	bne.n	8001078 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	e020      	b.n	8001078 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a16      	ldr	r2, [pc, #88]	@ (8001094 <HAL_ADC_Start+0x164>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d11b      	bne.n	8001078 <HAL_ADC_Start+0x148>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d114      	bne.n	8001078 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	e00b      	b.n	8001078 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	f043 0210 	orr.w	r2, r3, #16
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001070:	f043 0201 	orr.w	r2, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000000 	.word	0x20000000
 800108c:	431bde83 	.word	0x431bde83
 8001090:	40012300 	.word	0x40012300
 8001094:	40012000 	.word	0x40012000

08001098 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b4:	d113      	bne.n	80010de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010c4:	d10b      	bne.n	80010de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	f043 0220 	orr.w	r2, r3, #32
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e063      	b.n	80011a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80010de:	f7ff feb3 	bl	8000e48 <HAL_GetTick>
 80010e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010e4:	e021      	b.n	800112a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d01d      	beq.n	800112a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <HAL_ADC_PollForConversion+0x6c>
 80010f4:	f7ff fea8 	bl	8000e48 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d212      	bcs.n	800112a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b02      	cmp	r3, #2
 8001110:	d00b      	beq.n	800112a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	f043 0204 	orr.w	r2, r3, #4
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e03d      	b.n	80011a6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b02      	cmp	r3, #2
 8001136:	d1d6      	bne.n	80010e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f06f 0212 	mvn.w	r2, #18
 8001140:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d123      	bne.n	80011a4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001160:	2b00      	cmp	r3, #0
 8001162:	d11f      	bne.n	80011a4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800116a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800117c:	2b00      	cmp	r3, #0
 800117e:	d111      	bne.n	80011a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f043 0201 	orr.w	r2, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0x1c>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e113      	b.n	800140c <HAL_ADC_ConfigChannel+0x244>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b09      	cmp	r3, #9
 80011f2:	d925      	bls.n	8001240 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68d9      	ldr	r1, [r3, #12]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	3b1e      	subs	r3, #30
 800120a:	2207      	movs	r2, #7
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43da      	mvns	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	400a      	ands	r2, r1
 8001218:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68d9      	ldr	r1, [r3, #12]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	4603      	mov	r3, r0
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4403      	add	r3, r0
 8001232:	3b1e      	subs	r3, #30
 8001234:	409a      	lsls	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	e022      	b.n	8001286 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6919      	ldr	r1, [r3, #16]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	2207      	movs	r2, #7
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	400a      	ands	r2, r1
 8001262:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6919      	ldr	r1, [r3, #16]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	4603      	mov	r3, r0
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4403      	add	r3, r0
 800127c:	409a      	lsls	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b06      	cmp	r3, #6
 800128c:	d824      	bhi.n	80012d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	3b05      	subs	r3, #5
 80012a0:	221f      	movs	r2, #31
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3b05      	subs	r3, #5
 80012ca:	fa00 f203 	lsl.w	r2, r0, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d6:	e04c      	b.n	8001372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d824      	bhi.n	800132a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b23      	subs	r3, #35	@ 0x23
 80012f2:	221f      	movs	r2, #31
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43da      	mvns	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	400a      	ands	r2, r1
 8001300:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	3b23      	subs	r3, #35	@ 0x23
 800131c:	fa00 f203 	lsl.w	r2, r0, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	631a      	str	r2, [r3, #48]	@ 0x30
 8001328:	e023      	b.n	8001372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b41      	subs	r3, #65	@ 0x41
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b41      	subs	r3, #65	@ 0x41
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001372:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <HAL_ADC_ConfigChannel+0x250>)
 8001374:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a28      	ldr	r2, [pc, #160]	@ (800141c <HAL_ADC_ConfigChannel+0x254>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d10f      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1d8>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b12      	cmp	r3, #18
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <HAL_ADC_ConfigChannel+0x254>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12b      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x23a>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <HAL_ADC_ConfigChannel+0x258>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d003      	beq.n	80013bc <HAL_ADC_ConfigChannel+0x1f4>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b11      	cmp	r3, #17
 80013ba:	d122      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a11      	ldr	r2, [pc, #68]	@ (8001420 <HAL_ADC_ConfigChannel+0x258>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d111      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_ADC_ConfigChannel+0x25c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a11      	ldr	r2, [pc, #68]	@ (8001428 <HAL_ADC_ConfigChannel+0x260>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	0c9a      	lsrs	r2, r3, #18
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013f4:	e002      	b.n	80013fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f9      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40012300 	.word	0x40012300
 800141c:	40012000 	.word	0x40012000
 8001420:	10000012 	.word	0x10000012
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83

0800142c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001434:	4b79      	ldr	r3, [pc, #484]	@ (800161c <ADC_Init+0x1f0>)
 8001436:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	431a      	orrs	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	021a      	lsls	r2, r3, #8
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6899      	ldr	r1, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014be:	4a58      	ldr	r2, [pc, #352]	@ (8001620 <ADC_Init+0x1f4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d022      	beq.n	800150a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6899      	ldr	r1, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6899      	ldr	r1, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e00f      	b.n	800152a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001528:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0202 	bic.w	r2, r2, #2
 8001538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6899      	ldr	r1, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e1b      	ldrb	r3, [r3, #24]
 8001544:	005a      	lsls	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01b      	beq.n	8001590 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001566:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001576:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6859      	ldr	r1, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	3b01      	subs	r3, #1
 8001584:	035a      	lsls	r2, r3, #13
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	e007      	b.n	80015a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800159e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	051a      	lsls	r2, r3, #20
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6899      	ldr	r1, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015e2:	025a      	lsls	r2, r3, #9
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6899      	ldr	r1, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	029a      	lsls	r2, r3, #10
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	609a      	str	r2, [r3, #8]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40012300 	.word	0x40012300
 8001620:	0f000001 	.word	0x0f000001

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	@ (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	@ (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	@ (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff8e 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff29 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff3e 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff8e 	bl	8001718 <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5d 	bl	80016c4 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff31 	bl	8001688 <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa2 	bl	8001780 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	@ 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	e159      	b.n	8001b18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	f040 8148 	bne.w	8001b12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d005      	beq.n	800189a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001896:	2b02      	cmp	r3, #2
 8001898:	d130      	bne.n	80018fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d0:	2201      	movs	r2, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 0201 	and.w	r2, r3, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b03      	cmp	r3, #3
 8001906:	d017      	beq.n	8001938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d123      	bne.n	800198c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	69b9      	ldr	r1, [r7, #24]
 8001988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80a2 	beq.w	8001b12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b57      	ldr	r3, [pc, #348]	@ (8001b30 <HAL_GPIO_Init+0x2e8>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a56      	ldr	r2, [pc, #344]	@ (8001b30 <HAL_GPIO_Init+0x2e8>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b54      	ldr	r3, [pc, #336]	@ (8001b30 <HAL_GPIO_Init+0x2e8>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ea:	4a52      	ldr	r2, [pc, #328]	@ (8001b34 <HAL_GPIO_Init+0x2ec>)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a49      	ldr	r2, [pc, #292]	@ (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x202>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a48      	ldr	r2, [pc, #288]	@ (8001b3c <HAL_GPIO_Init+0x2f4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x1fe>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a47      	ldr	r2, [pc, #284]	@ (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a46      	ldr	r2, [pc, #280]	@ (8001b44 <HAL_GPIO_Init+0x2fc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x1f6>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a45      	ldr	r2, [pc, #276]	@ (8001b48 <HAL_GPIO_Init+0x300>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x1f2>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e008      	b.n	8001a4c <HAL_GPIO_Init+0x204>
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x204>
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e004      	b.n	8001a4c <HAL_GPIO_Init+0x204>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_Init+0x204>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_GPIO_Init+0x204>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	f002 0203 	and.w	r2, r2, #3
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	4093      	lsls	r3, r2
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a5c:	4935      	ldr	r1, [pc, #212]	@ (8001b34 <HAL_GPIO_Init+0x2ec>)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a6a:	4b38      	ldr	r3, [pc, #224]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a94:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab8:	4a24      	ldr	r2, [pc, #144]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001abe:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3301      	adds	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b0f      	cmp	r3, #15
 8001b1c:	f67f aea2 	bls.w	8001864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3724      	adds	r7, #36	@ 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40013800 	.word	0x40013800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40020c00 	.word	0x40020c00
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40013c00 	.word	0x40013c00

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b6c:	e003      	b.n	8001b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e267      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d075      	beq.n	8001c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba2:	4b88      	ldr	r3, [pc, #544]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d00c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bae:	4b85      	ldr	r3, [pc, #532]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d112      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bba:	4b82      	ldr	r3, [pc, #520]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bc6:	d10b      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d05b      	beq.n	8001c8c <HAL_RCC_OscConfig+0x108>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d157      	bne.n	8001c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e242      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be8:	d106      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x74>
 8001bea:	4b76      	ldr	r3, [pc, #472]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a75      	ldr	r2, [pc, #468]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01d      	b.n	8001c34 <HAL_RCC_OscConfig+0xb0>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x98>
 8001c02:	4b70      	ldr	r3, [pc, #448]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6f      	ldr	r2, [pc, #444]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6c      	ldr	r2, [pc, #432]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0xb0>
 8001c1c:	4b69      	ldr	r3, [pc, #420]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a68      	ldr	r2, [pc, #416]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b66      	ldr	r3, [pc, #408]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a65      	ldr	r2, [pc, #404]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f904 	bl	8000e48 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff f900 	bl	8000e48 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	@ 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e207      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0xc0>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff f8f0 	bl	8000e48 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff f8ec 	bl	8000e48 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	@ 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1f3      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	4b51      	ldr	r3, [pc, #324]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0xe8>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d063      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca6:	4b47      	ldr	r3, [pc, #284]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d11c      	bne.n	8001cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb2:	4b44      	ldr	r3, [pc, #272]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	4b41      	ldr	r3, [pc, #260]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x152>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e1c7      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4937      	ldr	r1, [pc, #220]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	e03a      	b.n	8001d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	4b34      	ldr	r3, [pc, #208]	@ (8001dc8 <HAL_RCC_OscConfig+0x244>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7ff f8a5 	bl	8000e48 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff f8a1 	bl	8000e48 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1a8      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b28      	ldr	r3, [pc, #160]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4925      	ldr	r1, [pc, #148]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <HAL_RCC_OscConfig+0x244>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f884 	bl	8000e48 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff f880 	bl	8000e48 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e187      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d036      	beq.n	8001ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d016      	beq.n	8001da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_RCC_OscConfig+0x248>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7ff f864 	bl	8000e48 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff f860 	bl	8000e48 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e167      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x200>
 8001da2:	e01b      	b.n	8001ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da4:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <HAL_RCC_OscConfig+0x248>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff f84d 	bl	8000e48 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	e00e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff f849 	bl	8000e48 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d907      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e150      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	42470000 	.word	0x42470000
 8001dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	4b88      	ldr	r3, [pc, #544]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ea      	bne.n	8001db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 8097 	beq.w	8001f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b81      	ldr	r3, [pc, #516]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b7d      	ldr	r3, [pc, #500]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	4a7c      	ldr	r2, [pc, #496]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b77      	ldr	r3, [pc, #476]	@ (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b74      	ldr	r3, [pc, #464]	@ (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a73      	ldr	r2, [pc, #460]	@ (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7ff f809 	bl	8000e48 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7ff f805 	bl	8000e48 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e10c      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x2ea>
 8001e60:	4b64      	ldr	r3, [pc, #400]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e64:	4a63      	ldr	r2, [pc, #396]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6c:	e01c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x324>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x30c>
 8001e76:	4b5f      	ldr	r3, [pc, #380]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e82:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e86:	4a5b      	ldr	r2, [pc, #364]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x324>
 8001e90:	4b58      	ldr	r3, [pc, #352]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e94:	4a57      	ldr	r2, [pc, #348]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e9c:	4b55      	ldr	r3, [pc, #340]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea0:	4a54      	ldr	r2, [pc, #336]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	f023 0304 	bic.w	r3, r3, #4
 8001ea6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d015      	beq.n	8001edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7fe ffca 	bl	8000e48 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ffc6 	bl	8000e48 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0cb      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	4b49      	ldr	r3, [pc, #292]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ee      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x334>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7fe ffb4 	bl	8000e48 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7fe ffb0 	bl	8000e48 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0b5      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ee      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4b39      	ldr	r3, [pc, #228]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	4a38      	ldr	r2, [pc, #224]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a1 	beq.w	8002064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f22:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d05c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d141      	bne.n	8001fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b31      	ldr	r3, [pc, #196]	@ (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe ff84 	bl	8000e48 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe ff80 	bl	8000e48 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e087      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	019b      	lsls	r3, r3, #6
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	041b      	lsls	r3, r3, #16
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	491b      	ldr	r1, [pc, #108]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe ff59 	bl	8000e48 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7fe ff55 	bl	8000e48 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e05c      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x416>
 8001fb8:	e054      	b.n	8002064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff42 	bl	8000e48 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe ff3e 	bl	8000e48 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e045      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x444>
 8001fe6:	e03d      	b.n	8002064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e038      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <HAL_RCC_OscConfig+0x4ec>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d028      	beq.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d121      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d11a      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002038:	4293      	cmp	r3, r2
 800203a:	d111      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	3b01      	subs	r3, #1
 800204a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0cc      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002088:	4b68      	ldr	r3, [pc, #416]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d90c      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b65      	ldr	r3, [pc, #404]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b63      	ldr	r3, [pc, #396]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b8      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c8:	4b59      	ldr	r3, [pc, #356]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a58      	ldr	r2, [pc, #352]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e0:	4b53      	ldr	r3, [pc, #332]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a52      	ldr	r2, [pc, #328]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b50      	ldr	r3, [pc, #320]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	494d      	ldr	r1, [pc, #308]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d044      	beq.n	8002194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d119      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d003      	beq.n	8002132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212e:	2b03      	cmp	r3, #3
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b3f      	ldr	r3, [pc, #252]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e06f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b3b      	ldr	r3, [pc, #236]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e067      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b37      	ldr	r3, [pc, #220]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4934      	ldr	r1, [pc, #208]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002164:	f7fe fe70 	bl	8000e48 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7fe fe6c 	bl	8000e48 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e04f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b25      	ldr	r3, [pc, #148]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d20c      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b22      	ldr	r3, [pc, #136]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e032      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4916      	ldr	r1, [pc, #88]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e6:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	490e      	ldr	r1, [pc, #56]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021fa:	f000 f821 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	490a      	ldr	r1, [pc, #40]	@ (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	4a09      	ldr	r2, [pc, #36]	@ (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fdd0 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00
 8002230:	40023800 	.word	0x40023800
 8002234:	0800440c 	.word	0x0800440c
 8002238:	20000000 	.word	0x20000000
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002244:	b094      	sub	sp, #80	@ 0x50
 8002246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	647b      	str	r3, [r7, #68]	@ 0x44
 800224c:	2300      	movs	r3, #0
 800224e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002250:	2300      	movs	r3, #0
 8002252:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002258:	4b79      	ldr	r3, [pc, #484]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d00d      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x40>
 8002264:	2b08      	cmp	r3, #8
 8002266:	f200 80e1 	bhi.w	800242c <HAL_RCC_GetSysClockFreq+0x1ec>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x34>
 800226e:	2b04      	cmp	r3, #4
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x3a>
 8002272:	e0db      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b73      	ldr	r3, [pc, #460]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x204>)
 8002276:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002278:	e0db      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800227a:	4b73      	ldr	r3, [pc, #460]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x208>)
 800227c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800227e:	e0d8      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002280:	4b6f      	ldr	r3, [pc, #444]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002288:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228a:	4b6d      	ldr	r3, [pc, #436]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002296:	4b6a      	ldr	r3, [pc, #424]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	2200      	movs	r2, #0
 800229e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80022a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80022aa:	2300      	movs	r3, #0
 80022ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022b2:	4622      	mov	r2, r4
 80022b4:	462b      	mov	r3, r5
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	0159      	lsls	r1, r3, #5
 80022c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c4:	0150      	lsls	r0, r2, #5
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4621      	mov	r1, r4
 80022cc:	1a51      	subs	r1, r2, r1
 80022ce:	6139      	str	r1, [r7, #16]
 80022d0:	4629      	mov	r1, r5
 80022d2:	eb63 0301 	sbc.w	r3, r3, r1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022e4:	4659      	mov	r1, fp
 80022e6:	018b      	lsls	r3, r1, #6
 80022e8:	4651      	mov	r1, sl
 80022ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ee:	4651      	mov	r1, sl
 80022f0:	018a      	lsls	r2, r1, #6
 80022f2:	4651      	mov	r1, sl
 80022f4:	ebb2 0801 	subs.w	r8, r2, r1
 80022f8:	4659      	mov	r1, fp
 80022fa:	eb63 0901 	sbc.w	r9, r3, r1
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800230a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800230e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002312:	4690      	mov	r8, r2
 8002314:	4699      	mov	r9, r3
 8002316:	4623      	mov	r3, r4
 8002318:	eb18 0303 	adds.w	r3, r8, r3
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	462b      	mov	r3, r5
 8002320:	eb49 0303 	adc.w	r3, r9, r3
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002332:	4629      	mov	r1, r5
 8002334:	024b      	lsls	r3, r1, #9
 8002336:	4621      	mov	r1, r4
 8002338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800233c:	4621      	mov	r1, r4
 800233e:	024a      	lsls	r2, r1, #9
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002346:	2200      	movs	r2, #0
 8002348:	62bb      	str	r3, [r7, #40]	@ 0x28
 800234a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800234c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002350:	f7fd ff96 	bl	8000280 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4613      	mov	r3, r2
 800235a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800235c:	e058      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235e:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	099b      	lsrs	r3, r3, #6
 8002364:	2200      	movs	r2, #0
 8002366:	4618      	mov	r0, r3
 8002368:	4611      	mov	r1, r2
 800236a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
 8002374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002378:	4642      	mov	r2, r8
 800237a:	464b      	mov	r3, r9
 800237c:	f04f 0000 	mov.w	r0, #0
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	0159      	lsls	r1, r3, #5
 8002386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800238a:	0150      	lsls	r0, r2, #5
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4641      	mov	r1, r8
 8002392:	ebb2 0a01 	subs.w	sl, r2, r1
 8002396:	4649      	mov	r1, r9
 8002398:	eb63 0b01 	sbc.w	fp, r3, r1
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023b0:	ebb2 040a 	subs.w	r4, r2, sl
 80023b4:	eb63 050b 	sbc.w	r5, r3, fp
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	00eb      	lsls	r3, r5, #3
 80023c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c6:	00e2      	lsls	r2, r4, #3
 80023c8:	4614      	mov	r4, r2
 80023ca:	461d      	mov	r5, r3
 80023cc:	4643      	mov	r3, r8
 80023ce:	18e3      	adds	r3, r4, r3
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	464b      	mov	r3, r9
 80023d4:	eb45 0303 	adc.w	r3, r5, r3
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e6:	4629      	mov	r1, r5
 80023e8:	028b      	lsls	r3, r1, #10
 80023ea:	4621      	mov	r1, r4
 80023ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f0:	4621      	mov	r1, r4
 80023f2:	028a      	lsls	r2, r1, #10
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023fa:	2200      	movs	r2, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	61fa      	str	r2, [r7, #28]
 8002400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002404:	f7fd ff3c 	bl	8000280 <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4613      	mov	r3, r2
 800240e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002410:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	3301      	adds	r3, #1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002420:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800242a:	e002      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x204>)
 800242e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002434:	4618      	mov	r0, r3
 8002436:	3750      	adds	r7, #80	@ 0x50
 8002438:	46bd      	mov	sp, r7
 800243a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	00f42400 	.word	0x00f42400
 8002448:	007a1200 	.word	0x007a1200

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002468:	f7ff fff0 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	@ (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	0800441c 	.word	0x0800441c

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002490:	f7ff ffdc 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0b5b      	lsrs	r3, r3, #13
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	@ (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	0800441c 	.word	0x0800441c

080024b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e041      	b.n	800254a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fac4 	bl	8000a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f000 fa70 	bl	80029d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d001      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e044      	b.n	80025f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1e      	ldr	r2, [pc, #120]	@ (8002604 <HAL_TIM_Base_Start_IT+0xb0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d018      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0x6c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002596:	d013      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0x6c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1a      	ldr	r2, [pc, #104]	@ (8002608 <HAL_TIM_Base_Start_IT+0xb4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00e      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0x6c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a19      	ldr	r2, [pc, #100]	@ (800260c <HAL_TIM_Base_Start_IT+0xb8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d009      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0x6c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a17      	ldr	r2, [pc, #92]	@ (8002610 <HAL_TIM_Base_Start_IT+0xbc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d004      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0x6c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a16      	ldr	r2, [pc, #88]	@ (8002614 <HAL_TIM_Base_Start_IT+0xc0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d111      	bne.n	80025e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d010      	beq.n	80025f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e2:	e007      	b.n	80025f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40010000 	.word	0x40010000
 8002608:	40000400 	.word	0x40000400
 800260c:	40000800 	.word	0x40000800
 8002610:	40000c00 	.word	0x40000c00
 8002614:	40014000 	.word	0x40014000

08002618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d020      	beq.n	800267c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01b      	beq.n	800267c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0202 	mvn.w	r2, #2
 800264c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f999 	bl	800299a <HAL_TIM_IC_CaptureCallback>
 8002668:	e005      	b.n	8002676 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f98b 	bl	8002986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f99c 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d020      	beq.n	80026c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01b      	beq.n	80026c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0204 	mvn.w	r2, #4
 8002698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f973 	bl	800299a <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f965 	bl	8002986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f976 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d020      	beq.n	8002714 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01b      	beq.n	8002714 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0208 	mvn.w	r2, #8
 80026e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2204      	movs	r2, #4
 80026ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f94d 	bl	800299a <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f93f 	bl	8002986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f950 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d020      	beq.n	8002760 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01b      	beq.n	8002760 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0210 	mvn.w	r2, #16
 8002730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2208      	movs	r2, #8
 8002736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f927 	bl	800299a <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f919 	bl	8002986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f92a 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0201 	mvn.w	r2, #1
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fd ff1a 	bl	80005b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fab6 	bl	8002d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8fb 	bl	80029c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00c      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0220 	mvn.w	r2, #32
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fa88 	bl	8002d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_TIM_ConfigClockSource+0x1c>
 8002810:	2302      	movs	r3, #2
 8002812:	e0b4      	b.n	800297e <HAL_TIM_ConfigClockSource+0x186>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800283a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800284c:	d03e      	beq.n	80028cc <HAL_TIM_ConfigClockSource+0xd4>
 800284e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002852:	f200 8087 	bhi.w	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 8002856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800285a:	f000 8086 	beq.w	800296a <HAL_TIM_ConfigClockSource+0x172>
 800285e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002862:	d87f      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b70      	cmp	r3, #112	@ 0x70
 8002866:	d01a      	beq.n	800289e <HAL_TIM_ConfigClockSource+0xa6>
 8002868:	2b70      	cmp	r3, #112	@ 0x70
 800286a:	d87b      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b60      	cmp	r3, #96	@ 0x60
 800286e:	d050      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x11a>
 8002870:	2b60      	cmp	r3, #96	@ 0x60
 8002872:	d877      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 8002874:	2b50      	cmp	r3, #80	@ 0x50
 8002876:	d03c      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0xfa>
 8002878:	2b50      	cmp	r3, #80	@ 0x50
 800287a:	d873      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 800287c:	2b40      	cmp	r3, #64	@ 0x40
 800287e:	d058      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x13a>
 8002880:	2b40      	cmp	r3, #64	@ 0x40
 8002882:	d86f      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 8002884:	2b30      	cmp	r3, #48	@ 0x30
 8002886:	d064      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x15a>
 8002888:	2b30      	cmp	r3, #48	@ 0x30
 800288a:	d86b      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 800288c:	2b20      	cmp	r3, #32
 800288e:	d060      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x15a>
 8002890:	2b20      	cmp	r3, #32
 8002892:	d867      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05c      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x15a>
 8002898:	2b10      	cmp	r3, #16
 800289a:	d05a      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x15a>
 800289c:	e062      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028ae:	f000 f999 	bl	8002be4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	609a      	str	r2, [r3, #8]
      break;
 80028ca:	e04f      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028dc:	f000 f982 	bl	8002be4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028ee:	609a      	str	r2, [r3, #8]
      break;
 80028f0:	e03c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fe:	461a      	mov	r2, r3
 8002900:	f000 f8f6 	bl	8002af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2150      	movs	r1, #80	@ 0x50
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f94f 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 8002910:	e02c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800291e:	461a      	mov	r2, r3
 8002920:	f000 f915 	bl	8002b4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2160      	movs	r1, #96	@ 0x60
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f93f 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 8002930:	e01c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800293e:	461a      	mov	r2, r3
 8002940:	f000 f8d6 	bl	8002af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2140      	movs	r1, #64	@ 0x40
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f92f 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 8002950:	e00c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f000 f926 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 8002962:	e003      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      break;
 8002968:	e000      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800296a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a3a      	ldr	r2, [pc, #232]	@ (8002ad4 <TIM_Base_SetConfig+0xfc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00f      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f6:	d00b      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a37      	ldr	r2, [pc, #220]	@ (8002ad8 <TIM_Base_SetConfig+0x100>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a36      	ldr	r2, [pc, #216]	@ (8002adc <TIM_Base_SetConfig+0x104>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a35      	ldr	r2, [pc, #212]	@ (8002ae0 <TIM_Base_SetConfig+0x108>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d108      	bne.n	8002a22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a2b      	ldr	r2, [pc, #172]	@ (8002ad4 <TIM_Base_SetConfig+0xfc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01b      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a30:	d017      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a28      	ldr	r2, [pc, #160]	@ (8002ad8 <TIM_Base_SetConfig+0x100>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a27      	ldr	r2, [pc, #156]	@ (8002adc <TIM_Base_SetConfig+0x104>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00f      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a26      	ldr	r2, [pc, #152]	@ (8002ae0 <TIM_Base_SetConfig+0x108>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00b      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a25      	ldr	r2, [pc, #148]	@ (8002ae4 <TIM_Base_SetConfig+0x10c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a24      	ldr	r2, [pc, #144]	@ (8002ae8 <TIM_Base_SetConfig+0x110>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d003      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <TIM_Base_SetConfig+0x114>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad4 <TIM_Base_SetConfig+0xfc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d103      	bne.n	8002aa8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	611a      	str	r2, [r3, #16]
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	40000c00 	.word	0x40000c00
 8002ae4:	40014000 	.word	0x40014000
 8002ae8:	40014400 	.word	0x40014400
 8002aec:	40014800 	.word	0x40014800

08002af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f023 0201 	bic.w	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f023 030a 	bic.w	r3, r3, #10
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	621a      	str	r2, [r3, #32]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b087      	sub	sp, #28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f023 0210 	bic.w	r2, r3, #16
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	031b      	lsls	r3, r3, #12
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f043 0307 	orr.w	r3, r3, #7
 8002bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	609a      	str	r2, [r3, #8]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	021a      	lsls	r2, r3, #8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e050      	b.n	8002cde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c88:	d013      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a18      	ldr	r2, [pc, #96]	@ (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a16      	ldr	r2, [pc, #88]	@ (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10c      	bne.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40000c00 	.word	0x40000c00
 8002cfc:	40014000 	.word	0x40014000

08002d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e042      	b.n	8002dc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fd feb2 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	@ 0x24
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f973 	bl	8003058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	@ 0x28
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d175      	bne.n	8002ed4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_UART_Transmit+0x2c>
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e06e      	b.n	8002ed6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2221      	movs	r2, #33	@ 0x21
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e06:	f7fe f81f 	bl	8000e48 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e20:	d108      	bne.n	8002e34 <HAL_UART_Transmit+0x6c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	e003      	b.n	8002e3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e3c:	e02e      	b.n	8002e9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2180      	movs	r1, #128	@ 0x80
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f848 	bl	8002ede <UART_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e03a      	b.n	8002ed6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10b      	bne.n	8002e7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	3302      	adds	r3, #2
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1cb      	bne.n	8002e3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2200      	movs	r2, #0
 8002eae:	2140      	movs	r1, #64	@ 0x40
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f814 	bl	8002ede <UART_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e006      	b.n	8002ed6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eee:	e03b      	b.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d037      	beq.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7fd ffa6 	bl	8000e48 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	6a3a      	ldr	r2, [r7, #32]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e03a      	b.n	8002f88 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d023      	beq.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b80      	cmp	r3, #128	@ 0x80
 8002f24:	d020      	beq.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b40      	cmp	r3, #64	@ 0x40
 8002f2a:	d01d      	beq.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d116      	bne.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f81d 	bl	8002f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e00f      	b.n	8002f88 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d0b4      	beq.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b095      	sub	sp, #84	@ 0x54
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fb8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e5      	bne.n	8002f98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3314      	adds	r3, #20
 8002fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e5      	bne.n	8002fcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	2b01      	cmp	r3, #1
 8003006:	d119      	bne.n	800303c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	60bb      	str	r3, [r7, #8]
   return(result);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f023 0310 	bic.w	r3, r3, #16
 800301e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003028:	61ba      	str	r2, [r7, #24]
 800302a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6979      	ldr	r1, [r7, #20]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	613b      	str	r3, [r7, #16]
   return(result);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e5      	bne.n	8003008 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800304a:	bf00      	nop
 800304c:	3754      	adds	r7, #84	@ 0x54
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800305c:	b0c0      	sub	sp, #256	@ 0x100
 800305e:	af00      	add	r7, sp, #0
 8003060:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003074:	68d9      	ldr	r1, [r3, #12]
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	ea40 0301 	orr.w	r3, r0, r1
 8003080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	431a      	orrs	r2, r3
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	431a      	orrs	r2, r3
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80030b0:	f021 010c 	bic.w	r1, r1, #12
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030be:	430b      	orrs	r3, r1
 80030c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d2:	6999      	ldr	r1, [r3, #24]
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	ea40 0301 	orr.w	r3, r0, r1
 80030de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003324 <UART_SetConfig+0x2cc>)
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d005      	beq.n	80030f8 <UART_SetConfig+0xa0>
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4b8d      	ldr	r3, [pc, #564]	@ (8003328 <UART_SetConfig+0x2d0>)
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d104      	bne.n	8003102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030f8:	f7ff f9c8 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 80030fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003100:	e003      	b.n	800310a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003102:	f7ff f9af 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8003106:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003114:	f040 810c 	bne.w	8003330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800311c:	2200      	movs	r2, #0
 800311e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003122:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800312a:	4622      	mov	r2, r4
 800312c:	462b      	mov	r3, r5
 800312e:	1891      	adds	r1, r2, r2
 8003130:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003132:	415b      	adcs	r3, r3
 8003134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800313a:	4621      	mov	r1, r4
 800313c:	eb12 0801 	adds.w	r8, r2, r1
 8003140:	4629      	mov	r1, r5
 8003142:	eb43 0901 	adc.w	r9, r3, r1
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315a:	4690      	mov	r8, r2
 800315c:	4699      	mov	r9, r3
 800315e:	4623      	mov	r3, r4
 8003160:	eb18 0303 	adds.w	r3, r8, r3
 8003164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003168:	462b      	mov	r3, r5
 800316a:	eb49 0303 	adc.w	r3, r9, r3
 800316e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800317e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003186:	460b      	mov	r3, r1
 8003188:	18db      	adds	r3, r3, r3
 800318a:	653b      	str	r3, [r7, #80]	@ 0x50
 800318c:	4613      	mov	r3, r2
 800318e:	eb42 0303 	adc.w	r3, r2, r3
 8003192:	657b      	str	r3, [r7, #84]	@ 0x54
 8003194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800319c:	f7fd f870 	bl	8000280 <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4b61      	ldr	r3, [pc, #388]	@ (800332c <UART_SetConfig+0x2d4>)
 80031a6:	fba3 2302 	umull	r2, r3, r3, r2
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	011c      	lsls	r4, r3, #4
 80031ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	1891      	adds	r1, r2, r2
 80031c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031c8:	415b      	adcs	r3, r3
 80031ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031d0:	4641      	mov	r1, r8
 80031d2:	eb12 0a01 	adds.w	sl, r2, r1
 80031d6:	4649      	mov	r1, r9
 80031d8:	eb43 0b01 	adc.w	fp, r3, r1
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031f0:	4692      	mov	sl, r2
 80031f2:	469b      	mov	fp, r3
 80031f4:	4643      	mov	r3, r8
 80031f6:	eb1a 0303 	adds.w	r3, sl, r3
 80031fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031fe:	464b      	mov	r3, r9
 8003200:	eb4b 0303 	adc.w	r3, fp, r3
 8003204:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003214:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800321c:	460b      	mov	r3, r1
 800321e:	18db      	adds	r3, r3, r3
 8003220:	643b      	str	r3, [r7, #64]	@ 0x40
 8003222:	4613      	mov	r3, r2
 8003224:	eb42 0303 	adc.w	r3, r2, r3
 8003228:	647b      	str	r3, [r7, #68]	@ 0x44
 800322a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800322e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003232:	f7fd f825 	bl	8000280 <__aeabi_uldivmod>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4611      	mov	r1, r2
 800323c:	4b3b      	ldr	r3, [pc, #236]	@ (800332c <UART_SetConfig+0x2d4>)
 800323e:	fba3 2301 	umull	r2, r3, r3, r1
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2264      	movs	r2, #100	@ 0x64
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	1acb      	subs	r3, r1, r3
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003252:	4b36      	ldr	r3, [pc, #216]	@ (800332c <UART_SetConfig+0x2d4>)
 8003254:	fba3 2302 	umull	r2, r3, r3, r2
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003260:	441c      	add	r4, r3
 8003262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003266:	2200      	movs	r2, #0
 8003268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800326c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003274:	4642      	mov	r2, r8
 8003276:	464b      	mov	r3, r9
 8003278:	1891      	adds	r1, r2, r2
 800327a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800327c:	415b      	adcs	r3, r3
 800327e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003284:	4641      	mov	r1, r8
 8003286:	1851      	adds	r1, r2, r1
 8003288:	6339      	str	r1, [r7, #48]	@ 0x30
 800328a:	4649      	mov	r1, r9
 800328c:	414b      	adcs	r3, r1
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800329c:	4659      	mov	r1, fp
 800329e:	00cb      	lsls	r3, r1, #3
 80032a0:	4651      	mov	r1, sl
 80032a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032a6:	4651      	mov	r1, sl
 80032a8:	00ca      	lsls	r2, r1, #3
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	4642      	mov	r2, r8
 80032b2:	189b      	adds	r3, r3, r2
 80032b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032b8:	464b      	mov	r3, r9
 80032ba:	460a      	mov	r2, r1
 80032bc:	eb42 0303 	adc.w	r3, r2, r3
 80032c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032d8:	460b      	mov	r3, r1
 80032da:	18db      	adds	r3, r3, r3
 80032dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032de:	4613      	mov	r3, r2
 80032e0:	eb42 0303 	adc.w	r3, r2, r3
 80032e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032ee:	f7fc ffc7 	bl	8000280 <__aeabi_uldivmod>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <UART_SetConfig+0x2d4>)
 80032f8:	fba3 1302 	umull	r1, r3, r3, r2
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	2164      	movs	r1, #100	@ 0x64
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	3332      	adds	r3, #50	@ 0x32
 800330a:	4a08      	ldr	r2, [pc, #32]	@ (800332c <UART_SetConfig+0x2d4>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	f003 0207 	and.w	r2, r3, #7
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4422      	add	r2, r4
 800331e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003320:	e106      	b.n	8003530 <UART_SetConfig+0x4d8>
 8003322:	bf00      	nop
 8003324:	40011000 	.word	0x40011000
 8003328:	40011400 	.word	0x40011400
 800332c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003334:	2200      	movs	r2, #0
 8003336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800333a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800333e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003342:	4642      	mov	r2, r8
 8003344:	464b      	mov	r3, r9
 8003346:	1891      	adds	r1, r2, r2
 8003348:	6239      	str	r1, [r7, #32]
 800334a:	415b      	adcs	r3, r3
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
 800334e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003352:	4641      	mov	r1, r8
 8003354:	1854      	adds	r4, r2, r1
 8003356:	4649      	mov	r1, r9
 8003358:	eb43 0501 	adc.w	r5, r3, r1
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	00eb      	lsls	r3, r5, #3
 8003366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800336a:	00e2      	lsls	r2, r4, #3
 800336c:	4614      	mov	r4, r2
 800336e:	461d      	mov	r5, r3
 8003370:	4643      	mov	r3, r8
 8003372:	18e3      	adds	r3, r4, r3
 8003374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003378:	464b      	mov	r3, r9
 800337a:	eb45 0303 	adc.w	r3, r5, r3
 800337e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800338e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800339e:	4629      	mov	r1, r5
 80033a0:	008b      	lsls	r3, r1, #2
 80033a2:	4621      	mov	r1, r4
 80033a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a8:	4621      	mov	r1, r4
 80033aa:	008a      	lsls	r2, r1, #2
 80033ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80033b0:	f7fc ff66 	bl	8000280 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4b60      	ldr	r3, [pc, #384]	@ (800353c <UART_SetConfig+0x4e4>)
 80033ba:	fba3 2302 	umull	r2, r3, r3, r2
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	011c      	lsls	r4, r3, #4
 80033c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	1891      	adds	r1, r2, r2
 80033da:	61b9      	str	r1, [r7, #24]
 80033dc:	415b      	adcs	r3, r3
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e4:	4641      	mov	r1, r8
 80033e6:	1851      	adds	r1, r2, r1
 80033e8:	6139      	str	r1, [r7, #16]
 80033ea:	4649      	mov	r1, r9
 80033ec:	414b      	adcs	r3, r1
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033fc:	4659      	mov	r1, fp
 80033fe:	00cb      	lsls	r3, r1, #3
 8003400:	4651      	mov	r1, sl
 8003402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003406:	4651      	mov	r1, sl
 8003408:	00ca      	lsls	r2, r1, #3
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	4603      	mov	r3, r0
 8003410:	4642      	mov	r2, r8
 8003412:	189b      	adds	r3, r3, r2
 8003414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003418:	464b      	mov	r3, r9
 800341a:	460a      	mov	r2, r1
 800341c:	eb42 0303 	adc.w	r3, r2, r3
 8003420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800342e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800343c:	4649      	mov	r1, r9
 800343e:	008b      	lsls	r3, r1, #2
 8003440:	4641      	mov	r1, r8
 8003442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003446:	4641      	mov	r1, r8
 8003448:	008a      	lsls	r2, r1, #2
 800344a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800344e:	f7fc ff17 	bl	8000280 <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4611      	mov	r1, r2
 8003458:	4b38      	ldr	r3, [pc, #224]	@ (800353c <UART_SetConfig+0x4e4>)
 800345a:	fba3 2301 	umull	r2, r3, r3, r1
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2264      	movs	r2, #100	@ 0x64
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	1acb      	subs	r3, r1, r3
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	3332      	adds	r3, #50	@ 0x32
 800346c:	4a33      	ldr	r2, [pc, #204]	@ (800353c <UART_SetConfig+0x4e4>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003478:	441c      	add	r4, r3
 800347a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800347e:	2200      	movs	r2, #0
 8003480:	673b      	str	r3, [r7, #112]	@ 0x70
 8003482:	677a      	str	r2, [r7, #116]	@ 0x74
 8003484:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	1891      	adds	r1, r2, r2
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	415b      	adcs	r3, r3
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003498:	4641      	mov	r1, r8
 800349a:	1851      	adds	r1, r2, r1
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	4649      	mov	r1, r9
 80034a0:	414b      	adcs	r3, r1
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034b0:	4659      	mov	r1, fp
 80034b2:	00cb      	lsls	r3, r1, #3
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ba:	4651      	mov	r1, sl
 80034bc:	00ca      	lsls	r2, r1, #3
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	4642      	mov	r2, r8
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034ca:	464b      	mov	r3, r9
 80034cc:	460a      	mov	r2, r1
 80034ce:	eb42 0303 	adc.w	r3, r2, r3
 80034d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80034de:	667a      	str	r2, [r7, #100]	@ 0x64
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034ec:	4649      	mov	r1, r9
 80034ee:	008b      	lsls	r3, r1, #2
 80034f0:	4641      	mov	r1, r8
 80034f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f6:	4641      	mov	r1, r8
 80034f8:	008a      	lsls	r2, r1, #2
 80034fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034fe:	f7fc febf 	bl	8000280 <__aeabi_uldivmod>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <UART_SetConfig+0x4e4>)
 8003508:	fba3 1302 	umull	r1, r3, r3, r2
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	2164      	movs	r1, #100	@ 0x64
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	3332      	adds	r3, #50	@ 0x32
 800351a:	4a08      	ldr	r2, [pc, #32]	@ (800353c <UART_SetConfig+0x4e4>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	f003 020f 	and.w	r2, r3, #15
 8003526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4422      	add	r2, r4
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	bf00      	nop
 8003532:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003536:	46bd      	mov	sp, r7
 8003538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353c:	51eb851f 	.word	0x51eb851f

08003540 <std>:
 8003540:	2300      	movs	r3, #0
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
 8003546:	e9c0 3300 	strd	r3, r3, [r0]
 800354a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800354e:	6083      	str	r3, [r0, #8]
 8003550:	8181      	strh	r1, [r0, #12]
 8003552:	6643      	str	r3, [r0, #100]	@ 0x64
 8003554:	81c2      	strh	r2, [r0, #14]
 8003556:	6183      	str	r3, [r0, #24]
 8003558:	4619      	mov	r1, r3
 800355a:	2208      	movs	r2, #8
 800355c:	305c      	adds	r0, #92	@ 0x5c
 800355e:	f000 f906 	bl	800376e <memset>
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <std+0x58>)
 8003564:	6263      	str	r3, [r4, #36]	@ 0x24
 8003566:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <std+0x5c>)
 8003568:	62a3      	str	r3, [r4, #40]	@ 0x28
 800356a:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <std+0x60>)
 800356c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800356e:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <std+0x64>)
 8003570:	6323      	str	r3, [r4, #48]	@ 0x30
 8003572:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <std+0x68>)
 8003574:	6224      	str	r4, [r4, #32]
 8003576:	429c      	cmp	r4, r3
 8003578:	d006      	beq.n	8003588 <std+0x48>
 800357a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800357e:	4294      	cmp	r4, r2
 8003580:	d002      	beq.n	8003588 <std+0x48>
 8003582:	33d0      	adds	r3, #208	@ 0xd0
 8003584:	429c      	cmp	r4, r3
 8003586:	d105      	bne.n	8003594 <std+0x54>
 8003588:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800358c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003590:	f000 b966 	b.w	8003860 <__retarget_lock_init_recursive>
 8003594:	bd10      	pop	{r4, pc}
 8003596:	bf00      	nop
 8003598:	080036e9 	.word	0x080036e9
 800359c:	0800370b 	.word	0x0800370b
 80035a0:	08003743 	.word	0x08003743
 80035a4:	08003767 	.word	0x08003767
 80035a8:	20000164 	.word	0x20000164

080035ac <stdio_exit_handler>:
 80035ac:	4a02      	ldr	r2, [pc, #8]	@ (80035b8 <stdio_exit_handler+0xc>)
 80035ae:	4903      	ldr	r1, [pc, #12]	@ (80035bc <stdio_exit_handler+0x10>)
 80035b0:	4803      	ldr	r0, [pc, #12]	@ (80035c0 <stdio_exit_handler+0x14>)
 80035b2:	f000 b869 	b.w	8003688 <_fwalk_sglue>
 80035b6:	bf00      	nop
 80035b8:	2000000c 	.word	0x2000000c
 80035bc:	08004101 	.word	0x08004101
 80035c0:	2000001c 	.word	0x2000001c

080035c4 <cleanup_stdio>:
 80035c4:	6841      	ldr	r1, [r0, #4]
 80035c6:	4b0c      	ldr	r3, [pc, #48]	@ (80035f8 <cleanup_stdio+0x34>)
 80035c8:	4299      	cmp	r1, r3
 80035ca:	b510      	push	{r4, lr}
 80035cc:	4604      	mov	r4, r0
 80035ce:	d001      	beq.n	80035d4 <cleanup_stdio+0x10>
 80035d0:	f000 fd96 	bl	8004100 <_fflush_r>
 80035d4:	68a1      	ldr	r1, [r4, #8]
 80035d6:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <cleanup_stdio+0x38>)
 80035d8:	4299      	cmp	r1, r3
 80035da:	d002      	beq.n	80035e2 <cleanup_stdio+0x1e>
 80035dc:	4620      	mov	r0, r4
 80035de:	f000 fd8f 	bl	8004100 <_fflush_r>
 80035e2:	68e1      	ldr	r1, [r4, #12]
 80035e4:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <cleanup_stdio+0x3c>)
 80035e6:	4299      	cmp	r1, r3
 80035e8:	d004      	beq.n	80035f4 <cleanup_stdio+0x30>
 80035ea:	4620      	mov	r0, r4
 80035ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f0:	f000 bd86 	b.w	8004100 <_fflush_r>
 80035f4:	bd10      	pop	{r4, pc}
 80035f6:	bf00      	nop
 80035f8:	20000164 	.word	0x20000164
 80035fc:	200001cc 	.word	0x200001cc
 8003600:	20000234 	.word	0x20000234

08003604 <global_stdio_init.part.0>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <global_stdio_init.part.0+0x30>)
 8003608:	4c0b      	ldr	r4, [pc, #44]	@ (8003638 <global_stdio_init.part.0+0x34>)
 800360a:	4a0c      	ldr	r2, [pc, #48]	@ (800363c <global_stdio_init.part.0+0x38>)
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	4620      	mov	r0, r4
 8003610:	2200      	movs	r2, #0
 8003612:	2104      	movs	r1, #4
 8003614:	f7ff ff94 	bl	8003540 <std>
 8003618:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800361c:	2201      	movs	r2, #1
 800361e:	2109      	movs	r1, #9
 8003620:	f7ff ff8e 	bl	8003540 <std>
 8003624:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003628:	2202      	movs	r2, #2
 800362a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800362e:	2112      	movs	r1, #18
 8003630:	f7ff bf86 	b.w	8003540 <std>
 8003634:	2000029c 	.word	0x2000029c
 8003638:	20000164 	.word	0x20000164
 800363c:	080035ad 	.word	0x080035ad

08003640 <__sfp_lock_acquire>:
 8003640:	4801      	ldr	r0, [pc, #4]	@ (8003648 <__sfp_lock_acquire+0x8>)
 8003642:	f000 b90e 	b.w	8003862 <__retarget_lock_acquire_recursive>
 8003646:	bf00      	nop
 8003648:	200002a5 	.word	0x200002a5

0800364c <__sfp_lock_release>:
 800364c:	4801      	ldr	r0, [pc, #4]	@ (8003654 <__sfp_lock_release+0x8>)
 800364e:	f000 b909 	b.w	8003864 <__retarget_lock_release_recursive>
 8003652:	bf00      	nop
 8003654:	200002a5 	.word	0x200002a5

08003658 <__sinit>:
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
 800365c:	f7ff fff0 	bl	8003640 <__sfp_lock_acquire>
 8003660:	6a23      	ldr	r3, [r4, #32]
 8003662:	b11b      	cbz	r3, 800366c <__sinit+0x14>
 8003664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003668:	f7ff bff0 	b.w	800364c <__sfp_lock_release>
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <__sinit+0x28>)
 800366e:	6223      	str	r3, [r4, #32]
 8003670:	4b04      	ldr	r3, [pc, #16]	@ (8003684 <__sinit+0x2c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f5      	bne.n	8003664 <__sinit+0xc>
 8003678:	f7ff ffc4 	bl	8003604 <global_stdio_init.part.0>
 800367c:	e7f2      	b.n	8003664 <__sinit+0xc>
 800367e:	bf00      	nop
 8003680:	080035c5 	.word	0x080035c5
 8003684:	2000029c 	.word	0x2000029c

08003688 <_fwalk_sglue>:
 8003688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800368c:	4607      	mov	r7, r0
 800368e:	4688      	mov	r8, r1
 8003690:	4614      	mov	r4, r2
 8003692:	2600      	movs	r6, #0
 8003694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003698:	f1b9 0901 	subs.w	r9, r9, #1
 800369c:	d505      	bpl.n	80036aa <_fwalk_sglue+0x22>
 800369e:	6824      	ldr	r4, [r4, #0]
 80036a0:	2c00      	cmp	r4, #0
 80036a2:	d1f7      	bne.n	8003694 <_fwalk_sglue+0xc>
 80036a4:	4630      	mov	r0, r6
 80036a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036aa:	89ab      	ldrh	r3, [r5, #12]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d907      	bls.n	80036c0 <_fwalk_sglue+0x38>
 80036b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036b4:	3301      	adds	r3, #1
 80036b6:	d003      	beq.n	80036c0 <_fwalk_sglue+0x38>
 80036b8:	4629      	mov	r1, r5
 80036ba:	4638      	mov	r0, r7
 80036bc:	47c0      	blx	r8
 80036be:	4306      	orrs	r6, r0
 80036c0:	3568      	adds	r5, #104	@ 0x68
 80036c2:	e7e9      	b.n	8003698 <_fwalk_sglue+0x10>

080036c4 <iprintf>:
 80036c4:	b40f      	push	{r0, r1, r2, r3}
 80036c6:	b507      	push	{r0, r1, r2, lr}
 80036c8:	4906      	ldr	r1, [pc, #24]	@ (80036e4 <iprintf+0x20>)
 80036ca:	ab04      	add	r3, sp, #16
 80036cc:	6808      	ldr	r0, [r1, #0]
 80036ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80036d2:	6881      	ldr	r1, [r0, #8]
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	f000 f9e9 	bl	8003aac <_vfiprintf_r>
 80036da:	b003      	add	sp, #12
 80036dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80036e0:	b004      	add	sp, #16
 80036e2:	4770      	bx	lr
 80036e4:	20000018 	.word	0x20000018

080036e8 <__sread>:
 80036e8:	b510      	push	{r4, lr}
 80036ea:	460c      	mov	r4, r1
 80036ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f0:	f000 f868 	bl	80037c4 <_read_r>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	bfab      	itete	ge
 80036f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036fa:	89a3      	ldrhlt	r3, [r4, #12]
 80036fc:	181b      	addge	r3, r3, r0
 80036fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003702:	bfac      	ite	ge
 8003704:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003706:	81a3      	strhlt	r3, [r4, #12]
 8003708:	bd10      	pop	{r4, pc}

0800370a <__swrite>:
 800370a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370e:	461f      	mov	r7, r3
 8003710:	898b      	ldrh	r3, [r1, #12]
 8003712:	05db      	lsls	r3, r3, #23
 8003714:	4605      	mov	r5, r0
 8003716:	460c      	mov	r4, r1
 8003718:	4616      	mov	r6, r2
 800371a:	d505      	bpl.n	8003728 <__swrite+0x1e>
 800371c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003720:	2302      	movs	r3, #2
 8003722:	2200      	movs	r2, #0
 8003724:	f000 f83c 	bl	80037a0 <_lseek_r>
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800372e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	4632      	mov	r2, r6
 8003736:	463b      	mov	r3, r7
 8003738:	4628      	mov	r0, r5
 800373a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800373e:	f000 b853 	b.w	80037e8 <_write_r>

08003742 <__sseek>:
 8003742:	b510      	push	{r4, lr}
 8003744:	460c      	mov	r4, r1
 8003746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800374a:	f000 f829 	bl	80037a0 <_lseek_r>
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	bf15      	itete	ne
 8003754:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003756:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800375a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800375e:	81a3      	strheq	r3, [r4, #12]
 8003760:	bf18      	it	ne
 8003762:	81a3      	strhne	r3, [r4, #12]
 8003764:	bd10      	pop	{r4, pc}

08003766 <__sclose>:
 8003766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376a:	f000 b809 	b.w	8003780 <_close_r>

0800376e <memset>:
 800376e:	4402      	add	r2, r0
 8003770:	4603      	mov	r3, r0
 8003772:	4293      	cmp	r3, r2
 8003774:	d100      	bne.n	8003778 <memset+0xa>
 8003776:	4770      	bx	lr
 8003778:	f803 1b01 	strb.w	r1, [r3], #1
 800377c:	e7f9      	b.n	8003772 <memset+0x4>
	...

08003780 <_close_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d06      	ldr	r5, [pc, #24]	@ (800379c <_close_r+0x1c>)
 8003784:	2300      	movs	r3, #0
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fd fa4f 	bl	8000c2e <_close>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_close_r+0x1a>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_close_r+0x1a>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	200002a0 	.word	0x200002a0

080037a0 <_lseek_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4d07      	ldr	r5, [pc, #28]	@ (80037c0 <_lseek_r+0x20>)
 80037a4:	4604      	mov	r4, r0
 80037a6:	4608      	mov	r0, r1
 80037a8:	4611      	mov	r1, r2
 80037aa:	2200      	movs	r2, #0
 80037ac:	602a      	str	r2, [r5, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f7fd fa64 	bl	8000c7c <_lseek>
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d102      	bne.n	80037be <_lseek_r+0x1e>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	b103      	cbz	r3, 80037be <_lseek_r+0x1e>
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	bd38      	pop	{r3, r4, r5, pc}
 80037c0:	200002a0 	.word	0x200002a0

080037c4 <_read_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4d07      	ldr	r5, [pc, #28]	@ (80037e4 <_read_r+0x20>)
 80037c8:	4604      	mov	r4, r0
 80037ca:	4608      	mov	r0, r1
 80037cc:	4611      	mov	r1, r2
 80037ce:	2200      	movs	r2, #0
 80037d0:	602a      	str	r2, [r5, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	f7fd f9f2 	bl	8000bbc <_read>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d102      	bne.n	80037e2 <_read_r+0x1e>
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	b103      	cbz	r3, 80037e2 <_read_r+0x1e>
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	200002a0 	.word	0x200002a0

080037e8 <_write_r>:
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	4d07      	ldr	r5, [pc, #28]	@ (8003808 <_write_r+0x20>)
 80037ec:	4604      	mov	r4, r0
 80037ee:	4608      	mov	r0, r1
 80037f0:	4611      	mov	r1, r2
 80037f2:	2200      	movs	r2, #0
 80037f4:	602a      	str	r2, [r5, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f7fd f9fd 	bl	8000bf6 <_write>
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	d102      	bne.n	8003806 <_write_r+0x1e>
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	b103      	cbz	r3, 8003806 <_write_r+0x1e>
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	bd38      	pop	{r3, r4, r5, pc}
 8003808:	200002a0 	.word	0x200002a0

0800380c <__errno>:
 800380c:	4b01      	ldr	r3, [pc, #4]	@ (8003814 <__errno+0x8>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000018 	.word	0x20000018

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	4d0d      	ldr	r5, [pc, #52]	@ (8003850 <__libc_init_array+0x38>)
 800381c:	4c0d      	ldr	r4, [pc, #52]	@ (8003854 <__libc_init_array+0x3c>)
 800381e:	1b64      	subs	r4, r4, r5
 8003820:	10a4      	asrs	r4, r4, #2
 8003822:	2600      	movs	r6, #0
 8003824:	42a6      	cmp	r6, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	4d0b      	ldr	r5, [pc, #44]	@ (8003858 <__libc_init_array+0x40>)
 800382a:	4c0c      	ldr	r4, [pc, #48]	@ (800385c <__libc_init_array+0x44>)
 800382c:	f000 fdb8 	bl	80043a0 <_init>
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	2600      	movs	r6, #0
 8003836:	42a6      	cmp	r6, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003840:	4798      	blx	r3
 8003842:	3601      	adds	r6, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f855 3b04 	ldr.w	r3, [r5], #4
 800384a:	4798      	blx	r3
 800384c:	3601      	adds	r6, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	08004460 	.word	0x08004460
 8003854:	08004460 	.word	0x08004460
 8003858:	08004460 	.word	0x08004460
 800385c:	08004464 	.word	0x08004464

08003860 <__retarget_lock_init_recursive>:
 8003860:	4770      	bx	lr

08003862 <__retarget_lock_acquire_recursive>:
 8003862:	4770      	bx	lr

08003864 <__retarget_lock_release_recursive>:
 8003864:	4770      	bx	lr
	...

08003868 <_free_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4605      	mov	r5, r0
 800386c:	2900      	cmp	r1, #0
 800386e:	d041      	beq.n	80038f4 <_free_r+0x8c>
 8003870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003874:	1f0c      	subs	r4, r1, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	bfb8      	it	lt
 800387a:	18e4      	addlt	r4, r4, r3
 800387c:	f000 f8e0 	bl	8003a40 <__malloc_lock>
 8003880:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <_free_r+0x90>)
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	b933      	cbnz	r3, 8003894 <_free_r+0x2c>
 8003886:	6063      	str	r3, [r4, #4]
 8003888:	6014      	str	r4, [r2, #0]
 800388a:	4628      	mov	r0, r5
 800388c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003890:	f000 b8dc 	b.w	8003a4c <__malloc_unlock>
 8003894:	42a3      	cmp	r3, r4
 8003896:	d908      	bls.n	80038aa <_free_r+0x42>
 8003898:	6820      	ldr	r0, [r4, #0]
 800389a:	1821      	adds	r1, r4, r0
 800389c:	428b      	cmp	r3, r1
 800389e:	bf01      	itttt	eq
 80038a0:	6819      	ldreq	r1, [r3, #0]
 80038a2:	685b      	ldreq	r3, [r3, #4]
 80038a4:	1809      	addeq	r1, r1, r0
 80038a6:	6021      	streq	r1, [r4, #0]
 80038a8:	e7ed      	b.n	8003886 <_free_r+0x1e>
 80038aa:	461a      	mov	r2, r3
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	b10b      	cbz	r3, 80038b4 <_free_r+0x4c>
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	d9fa      	bls.n	80038aa <_free_r+0x42>
 80038b4:	6811      	ldr	r1, [r2, #0]
 80038b6:	1850      	adds	r0, r2, r1
 80038b8:	42a0      	cmp	r0, r4
 80038ba:	d10b      	bne.n	80038d4 <_free_r+0x6c>
 80038bc:	6820      	ldr	r0, [r4, #0]
 80038be:	4401      	add	r1, r0
 80038c0:	1850      	adds	r0, r2, r1
 80038c2:	4283      	cmp	r3, r0
 80038c4:	6011      	str	r1, [r2, #0]
 80038c6:	d1e0      	bne.n	800388a <_free_r+0x22>
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	6053      	str	r3, [r2, #4]
 80038ce:	4408      	add	r0, r1
 80038d0:	6010      	str	r0, [r2, #0]
 80038d2:	e7da      	b.n	800388a <_free_r+0x22>
 80038d4:	d902      	bls.n	80038dc <_free_r+0x74>
 80038d6:	230c      	movs	r3, #12
 80038d8:	602b      	str	r3, [r5, #0]
 80038da:	e7d6      	b.n	800388a <_free_r+0x22>
 80038dc:	6820      	ldr	r0, [r4, #0]
 80038de:	1821      	adds	r1, r4, r0
 80038e0:	428b      	cmp	r3, r1
 80038e2:	bf04      	itt	eq
 80038e4:	6819      	ldreq	r1, [r3, #0]
 80038e6:	685b      	ldreq	r3, [r3, #4]
 80038e8:	6063      	str	r3, [r4, #4]
 80038ea:	bf04      	itt	eq
 80038ec:	1809      	addeq	r1, r1, r0
 80038ee:	6021      	streq	r1, [r4, #0]
 80038f0:	6054      	str	r4, [r2, #4]
 80038f2:	e7ca      	b.n	800388a <_free_r+0x22>
 80038f4:	bd38      	pop	{r3, r4, r5, pc}
 80038f6:	bf00      	nop
 80038f8:	200002ac 	.word	0x200002ac

080038fc <sbrk_aligned>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4e0f      	ldr	r6, [pc, #60]	@ (800393c <sbrk_aligned+0x40>)
 8003900:	460c      	mov	r4, r1
 8003902:	6831      	ldr	r1, [r6, #0]
 8003904:	4605      	mov	r5, r0
 8003906:	b911      	cbnz	r1, 800390e <sbrk_aligned+0x12>
 8003908:	f000 fcb6 	bl	8004278 <_sbrk_r>
 800390c:	6030      	str	r0, [r6, #0]
 800390e:	4621      	mov	r1, r4
 8003910:	4628      	mov	r0, r5
 8003912:	f000 fcb1 	bl	8004278 <_sbrk_r>
 8003916:	1c43      	adds	r3, r0, #1
 8003918:	d103      	bne.n	8003922 <sbrk_aligned+0x26>
 800391a:	f04f 34ff 	mov.w	r4, #4294967295
 800391e:	4620      	mov	r0, r4
 8003920:	bd70      	pop	{r4, r5, r6, pc}
 8003922:	1cc4      	adds	r4, r0, #3
 8003924:	f024 0403 	bic.w	r4, r4, #3
 8003928:	42a0      	cmp	r0, r4
 800392a:	d0f8      	beq.n	800391e <sbrk_aligned+0x22>
 800392c:	1a21      	subs	r1, r4, r0
 800392e:	4628      	mov	r0, r5
 8003930:	f000 fca2 	bl	8004278 <_sbrk_r>
 8003934:	3001      	adds	r0, #1
 8003936:	d1f2      	bne.n	800391e <sbrk_aligned+0x22>
 8003938:	e7ef      	b.n	800391a <sbrk_aligned+0x1e>
 800393a:	bf00      	nop
 800393c:	200002a8 	.word	0x200002a8

08003940 <_malloc_r>:
 8003940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003944:	1ccd      	adds	r5, r1, #3
 8003946:	f025 0503 	bic.w	r5, r5, #3
 800394a:	3508      	adds	r5, #8
 800394c:	2d0c      	cmp	r5, #12
 800394e:	bf38      	it	cc
 8003950:	250c      	movcc	r5, #12
 8003952:	2d00      	cmp	r5, #0
 8003954:	4606      	mov	r6, r0
 8003956:	db01      	blt.n	800395c <_malloc_r+0x1c>
 8003958:	42a9      	cmp	r1, r5
 800395a:	d904      	bls.n	8003966 <_malloc_r+0x26>
 800395c:	230c      	movs	r3, #12
 800395e:	6033      	str	r3, [r6, #0]
 8003960:	2000      	movs	r0, #0
 8003962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a3c <_malloc_r+0xfc>
 800396a:	f000 f869 	bl	8003a40 <__malloc_lock>
 800396e:	f8d8 3000 	ldr.w	r3, [r8]
 8003972:	461c      	mov	r4, r3
 8003974:	bb44      	cbnz	r4, 80039c8 <_malloc_r+0x88>
 8003976:	4629      	mov	r1, r5
 8003978:	4630      	mov	r0, r6
 800397a:	f7ff ffbf 	bl	80038fc <sbrk_aligned>
 800397e:	1c43      	adds	r3, r0, #1
 8003980:	4604      	mov	r4, r0
 8003982:	d158      	bne.n	8003a36 <_malloc_r+0xf6>
 8003984:	f8d8 4000 	ldr.w	r4, [r8]
 8003988:	4627      	mov	r7, r4
 800398a:	2f00      	cmp	r7, #0
 800398c:	d143      	bne.n	8003a16 <_malloc_r+0xd6>
 800398e:	2c00      	cmp	r4, #0
 8003990:	d04b      	beq.n	8003a2a <_malloc_r+0xea>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	4639      	mov	r1, r7
 8003996:	4630      	mov	r0, r6
 8003998:	eb04 0903 	add.w	r9, r4, r3
 800399c:	f000 fc6c 	bl	8004278 <_sbrk_r>
 80039a0:	4581      	cmp	r9, r0
 80039a2:	d142      	bne.n	8003a2a <_malloc_r+0xea>
 80039a4:	6821      	ldr	r1, [r4, #0]
 80039a6:	1a6d      	subs	r5, r5, r1
 80039a8:	4629      	mov	r1, r5
 80039aa:	4630      	mov	r0, r6
 80039ac:	f7ff ffa6 	bl	80038fc <sbrk_aligned>
 80039b0:	3001      	adds	r0, #1
 80039b2:	d03a      	beq.n	8003a2a <_malloc_r+0xea>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	442b      	add	r3, r5
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	f8d8 3000 	ldr.w	r3, [r8]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	bb62      	cbnz	r2, 8003a1c <_malloc_r+0xdc>
 80039c2:	f8c8 7000 	str.w	r7, [r8]
 80039c6:	e00f      	b.n	80039e8 <_malloc_r+0xa8>
 80039c8:	6822      	ldr	r2, [r4, #0]
 80039ca:	1b52      	subs	r2, r2, r5
 80039cc:	d420      	bmi.n	8003a10 <_malloc_r+0xd0>
 80039ce:	2a0b      	cmp	r2, #11
 80039d0:	d917      	bls.n	8003a02 <_malloc_r+0xc2>
 80039d2:	1961      	adds	r1, r4, r5
 80039d4:	42a3      	cmp	r3, r4
 80039d6:	6025      	str	r5, [r4, #0]
 80039d8:	bf18      	it	ne
 80039da:	6059      	strne	r1, [r3, #4]
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	bf08      	it	eq
 80039e0:	f8c8 1000 	streq.w	r1, [r8]
 80039e4:	5162      	str	r2, [r4, r5]
 80039e6:	604b      	str	r3, [r1, #4]
 80039e8:	4630      	mov	r0, r6
 80039ea:	f000 f82f 	bl	8003a4c <__malloc_unlock>
 80039ee:	f104 000b 	add.w	r0, r4, #11
 80039f2:	1d23      	adds	r3, r4, #4
 80039f4:	f020 0007 	bic.w	r0, r0, #7
 80039f8:	1ac2      	subs	r2, r0, r3
 80039fa:	bf1c      	itt	ne
 80039fc:	1a1b      	subne	r3, r3, r0
 80039fe:	50a3      	strne	r3, [r4, r2]
 8003a00:	e7af      	b.n	8003962 <_malloc_r+0x22>
 8003a02:	6862      	ldr	r2, [r4, #4]
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	bf0c      	ite	eq
 8003a08:	f8c8 2000 	streq.w	r2, [r8]
 8003a0c:	605a      	strne	r2, [r3, #4]
 8003a0e:	e7eb      	b.n	80039e8 <_malloc_r+0xa8>
 8003a10:	4623      	mov	r3, r4
 8003a12:	6864      	ldr	r4, [r4, #4]
 8003a14:	e7ae      	b.n	8003974 <_malloc_r+0x34>
 8003a16:	463c      	mov	r4, r7
 8003a18:	687f      	ldr	r7, [r7, #4]
 8003a1a:	e7b6      	b.n	800398a <_malloc_r+0x4a>
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	42a3      	cmp	r3, r4
 8003a22:	d1fb      	bne.n	8003a1c <_malloc_r+0xdc>
 8003a24:	2300      	movs	r3, #0
 8003a26:	6053      	str	r3, [r2, #4]
 8003a28:	e7de      	b.n	80039e8 <_malloc_r+0xa8>
 8003a2a:	230c      	movs	r3, #12
 8003a2c:	6033      	str	r3, [r6, #0]
 8003a2e:	4630      	mov	r0, r6
 8003a30:	f000 f80c 	bl	8003a4c <__malloc_unlock>
 8003a34:	e794      	b.n	8003960 <_malloc_r+0x20>
 8003a36:	6005      	str	r5, [r0, #0]
 8003a38:	e7d6      	b.n	80039e8 <_malloc_r+0xa8>
 8003a3a:	bf00      	nop
 8003a3c:	200002ac 	.word	0x200002ac

08003a40 <__malloc_lock>:
 8003a40:	4801      	ldr	r0, [pc, #4]	@ (8003a48 <__malloc_lock+0x8>)
 8003a42:	f7ff bf0e 	b.w	8003862 <__retarget_lock_acquire_recursive>
 8003a46:	bf00      	nop
 8003a48:	200002a4 	.word	0x200002a4

08003a4c <__malloc_unlock>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	@ (8003a54 <__malloc_unlock+0x8>)
 8003a4e:	f7ff bf09 	b.w	8003864 <__retarget_lock_release_recursive>
 8003a52:	bf00      	nop
 8003a54:	200002a4 	.word	0x200002a4

08003a58 <__sfputc_r>:
 8003a58:	6893      	ldr	r3, [r2, #8]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	b410      	push	{r4}
 8003a60:	6093      	str	r3, [r2, #8]
 8003a62:	da08      	bge.n	8003a76 <__sfputc_r+0x1e>
 8003a64:	6994      	ldr	r4, [r2, #24]
 8003a66:	42a3      	cmp	r3, r4
 8003a68:	db01      	blt.n	8003a6e <__sfputc_r+0x16>
 8003a6a:	290a      	cmp	r1, #10
 8003a6c:	d103      	bne.n	8003a76 <__sfputc_r+0x1e>
 8003a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a72:	f000 bb6d 	b.w	8004150 <__swbuf_r>
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	1c58      	adds	r0, r3, #1
 8003a7a:	6010      	str	r0, [r2, #0]
 8003a7c:	7019      	strb	r1, [r3, #0]
 8003a7e:	4608      	mov	r0, r1
 8003a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <__sfputs_r>:
 8003a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a88:	4606      	mov	r6, r0
 8003a8a:	460f      	mov	r7, r1
 8003a8c:	4614      	mov	r4, r2
 8003a8e:	18d5      	adds	r5, r2, r3
 8003a90:	42ac      	cmp	r4, r5
 8003a92:	d101      	bne.n	8003a98 <__sfputs_r+0x12>
 8003a94:	2000      	movs	r0, #0
 8003a96:	e007      	b.n	8003aa8 <__sfputs_r+0x22>
 8003a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a9c:	463a      	mov	r2, r7
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f7ff ffda 	bl	8003a58 <__sfputc_r>
 8003aa4:	1c43      	adds	r3, r0, #1
 8003aa6:	d1f3      	bne.n	8003a90 <__sfputs_r+0xa>
 8003aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003aac <_vfiprintf_r>:
 8003aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab0:	460d      	mov	r5, r1
 8003ab2:	b09d      	sub	sp, #116	@ 0x74
 8003ab4:	4614      	mov	r4, r2
 8003ab6:	4698      	mov	r8, r3
 8003ab8:	4606      	mov	r6, r0
 8003aba:	b118      	cbz	r0, 8003ac4 <_vfiprintf_r+0x18>
 8003abc:	6a03      	ldr	r3, [r0, #32]
 8003abe:	b90b      	cbnz	r3, 8003ac4 <_vfiprintf_r+0x18>
 8003ac0:	f7ff fdca 	bl	8003658 <__sinit>
 8003ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ac6:	07d9      	lsls	r1, r3, #31
 8003ac8:	d405      	bmi.n	8003ad6 <_vfiprintf_r+0x2a>
 8003aca:	89ab      	ldrh	r3, [r5, #12]
 8003acc:	059a      	lsls	r2, r3, #22
 8003ace:	d402      	bmi.n	8003ad6 <_vfiprintf_r+0x2a>
 8003ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ad2:	f7ff fec6 	bl	8003862 <__retarget_lock_acquire_recursive>
 8003ad6:	89ab      	ldrh	r3, [r5, #12]
 8003ad8:	071b      	lsls	r3, r3, #28
 8003ada:	d501      	bpl.n	8003ae0 <_vfiprintf_r+0x34>
 8003adc:	692b      	ldr	r3, [r5, #16]
 8003ade:	b99b      	cbnz	r3, 8003b08 <_vfiprintf_r+0x5c>
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f000 fb72 	bl	80041cc <__swsetup_r>
 8003ae8:	b170      	cbz	r0, 8003b08 <_vfiprintf_r+0x5c>
 8003aea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003aec:	07dc      	lsls	r4, r3, #31
 8003aee:	d504      	bpl.n	8003afa <_vfiprintf_r+0x4e>
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	b01d      	add	sp, #116	@ 0x74
 8003af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003afa:	89ab      	ldrh	r3, [r5, #12]
 8003afc:	0598      	lsls	r0, r3, #22
 8003afe:	d4f7      	bmi.n	8003af0 <_vfiprintf_r+0x44>
 8003b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b02:	f7ff feaf 	bl	8003864 <__retarget_lock_release_recursive>
 8003b06:	e7f3      	b.n	8003af0 <_vfiprintf_r+0x44>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b16:	2330      	movs	r3, #48	@ 0x30
 8003b18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003cc8 <_vfiprintf_r+0x21c>
 8003b1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b20:	f04f 0901 	mov.w	r9, #1
 8003b24:	4623      	mov	r3, r4
 8003b26:	469a      	mov	sl, r3
 8003b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b2c:	b10a      	cbz	r2, 8003b32 <_vfiprintf_r+0x86>
 8003b2e:	2a25      	cmp	r2, #37	@ 0x25
 8003b30:	d1f9      	bne.n	8003b26 <_vfiprintf_r+0x7a>
 8003b32:	ebba 0b04 	subs.w	fp, sl, r4
 8003b36:	d00b      	beq.n	8003b50 <_vfiprintf_r+0xa4>
 8003b38:	465b      	mov	r3, fp
 8003b3a:	4622      	mov	r2, r4
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f7ff ffa1 	bl	8003a86 <__sfputs_r>
 8003b44:	3001      	adds	r0, #1
 8003b46:	f000 80a7 	beq.w	8003c98 <_vfiprintf_r+0x1ec>
 8003b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b4c:	445a      	add	r2, fp
 8003b4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b50:	f89a 3000 	ldrb.w	r3, [sl]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 809f 	beq.w	8003c98 <_vfiprintf_r+0x1ec>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b64:	f10a 0a01 	add.w	sl, sl, #1
 8003b68:	9304      	str	r3, [sp, #16]
 8003b6a:	9307      	str	r3, [sp, #28]
 8003b6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b70:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b72:	4654      	mov	r4, sl
 8003b74:	2205      	movs	r2, #5
 8003b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b7a:	4853      	ldr	r0, [pc, #332]	@ (8003cc8 <_vfiprintf_r+0x21c>)
 8003b7c:	f7fc fb30 	bl	80001e0 <memchr>
 8003b80:	9a04      	ldr	r2, [sp, #16]
 8003b82:	b9d8      	cbnz	r0, 8003bbc <_vfiprintf_r+0x110>
 8003b84:	06d1      	lsls	r1, r2, #27
 8003b86:	bf44      	itt	mi
 8003b88:	2320      	movmi	r3, #32
 8003b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b8e:	0713      	lsls	r3, r2, #28
 8003b90:	bf44      	itt	mi
 8003b92:	232b      	movmi	r3, #43	@ 0x2b
 8003b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b98:	f89a 3000 	ldrb.w	r3, [sl]
 8003b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b9e:	d015      	beq.n	8003bcc <_vfiprintf_r+0x120>
 8003ba0:	9a07      	ldr	r2, [sp, #28]
 8003ba2:	4654      	mov	r4, sl
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f04f 0c0a 	mov.w	ip, #10
 8003baa:	4621      	mov	r1, r4
 8003bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb0:	3b30      	subs	r3, #48	@ 0x30
 8003bb2:	2b09      	cmp	r3, #9
 8003bb4:	d94b      	bls.n	8003c4e <_vfiprintf_r+0x1a2>
 8003bb6:	b1b0      	cbz	r0, 8003be6 <_vfiprintf_r+0x13a>
 8003bb8:	9207      	str	r2, [sp, #28]
 8003bba:	e014      	b.n	8003be6 <_vfiprintf_r+0x13a>
 8003bbc:	eba0 0308 	sub.w	r3, r0, r8
 8003bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	9304      	str	r3, [sp, #16]
 8003bc8:	46a2      	mov	sl, r4
 8003bca:	e7d2      	b.n	8003b72 <_vfiprintf_r+0xc6>
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	1d19      	adds	r1, r3, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	9103      	str	r1, [sp, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bfbb      	ittet	lt
 8003bd8:	425b      	neglt	r3, r3
 8003bda:	f042 0202 	orrlt.w	r2, r2, #2
 8003bde:	9307      	strge	r3, [sp, #28]
 8003be0:	9307      	strlt	r3, [sp, #28]
 8003be2:	bfb8      	it	lt
 8003be4:	9204      	strlt	r2, [sp, #16]
 8003be6:	7823      	ldrb	r3, [r4, #0]
 8003be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bea:	d10a      	bne.n	8003c02 <_vfiprintf_r+0x156>
 8003bec:	7863      	ldrb	r3, [r4, #1]
 8003bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bf0:	d132      	bne.n	8003c58 <_vfiprintf_r+0x1ac>
 8003bf2:	9b03      	ldr	r3, [sp, #12]
 8003bf4:	1d1a      	adds	r2, r3, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	9203      	str	r2, [sp, #12]
 8003bfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bfe:	3402      	adds	r4, #2
 8003c00:	9305      	str	r3, [sp, #20]
 8003c02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003cd8 <_vfiprintf_r+0x22c>
 8003c06:	7821      	ldrb	r1, [r4, #0]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	4650      	mov	r0, sl
 8003c0c:	f7fc fae8 	bl	80001e0 <memchr>
 8003c10:	b138      	cbz	r0, 8003c22 <_vfiprintf_r+0x176>
 8003c12:	9b04      	ldr	r3, [sp, #16]
 8003c14:	eba0 000a 	sub.w	r0, r0, sl
 8003c18:	2240      	movs	r2, #64	@ 0x40
 8003c1a:	4082      	lsls	r2, r0
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	3401      	adds	r4, #1
 8003c20:	9304      	str	r3, [sp, #16]
 8003c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c26:	4829      	ldr	r0, [pc, #164]	@ (8003ccc <_vfiprintf_r+0x220>)
 8003c28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c2c:	2206      	movs	r2, #6
 8003c2e:	f7fc fad7 	bl	80001e0 <memchr>
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d03f      	beq.n	8003cb6 <_vfiprintf_r+0x20a>
 8003c36:	4b26      	ldr	r3, [pc, #152]	@ (8003cd0 <_vfiprintf_r+0x224>)
 8003c38:	bb1b      	cbnz	r3, 8003c82 <_vfiprintf_r+0x1d6>
 8003c3a:	9b03      	ldr	r3, [sp, #12]
 8003c3c:	3307      	adds	r3, #7
 8003c3e:	f023 0307 	bic.w	r3, r3, #7
 8003c42:	3308      	adds	r3, #8
 8003c44:	9303      	str	r3, [sp, #12]
 8003c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c48:	443b      	add	r3, r7
 8003c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c4c:	e76a      	b.n	8003b24 <_vfiprintf_r+0x78>
 8003c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c52:	460c      	mov	r4, r1
 8003c54:	2001      	movs	r0, #1
 8003c56:	e7a8      	b.n	8003baa <_vfiprintf_r+0xfe>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	3401      	adds	r4, #1
 8003c5c:	9305      	str	r3, [sp, #20]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f04f 0c0a 	mov.w	ip, #10
 8003c64:	4620      	mov	r0, r4
 8003c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c6a:	3a30      	subs	r2, #48	@ 0x30
 8003c6c:	2a09      	cmp	r2, #9
 8003c6e:	d903      	bls.n	8003c78 <_vfiprintf_r+0x1cc>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0c6      	beq.n	8003c02 <_vfiprintf_r+0x156>
 8003c74:	9105      	str	r1, [sp, #20]
 8003c76:	e7c4      	b.n	8003c02 <_vfiprintf_r+0x156>
 8003c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e7f0      	b.n	8003c64 <_vfiprintf_r+0x1b8>
 8003c82:	ab03      	add	r3, sp, #12
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	462a      	mov	r2, r5
 8003c88:	4b12      	ldr	r3, [pc, #72]	@ (8003cd4 <_vfiprintf_r+0x228>)
 8003c8a:	a904      	add	r1, sp, #16
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f3af 8000 	nop.w
 8003c92:	4607      	mov	r7, r0
 8003c94:	1c78      	adds	r0, r7, #1
 8003c96:	d1d6      	bne.n	8003c46 <_vfiprintf_r+0x19a>
 8003c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c9a:	07d9      	lsls	r1, r3, #31
 8003c9c:	d405      	bmi.n	8003caa <_vfiprintf_r+0x1fe>
 8003c9e:	89ab      	ldrh	r3, [r5, #12]
 8003ca0:	059a      	lsls	r2, r3, #22
 8003ca2:	d402      	bmi.n	8003caa <_vfiprintf_r+0x1fe>
 8003ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ca6:	f7ff fddd 	bl	8003864 <__retarget_lock_release_recursive>
 8003caa:	89ab      	ldrh	r3, [r5, #12]
 8003cac:	065b      	lsls	r3, r3, #25
 8003cae:	f53f af1f 	bmi.w	8003af0 <_vfiprintf_r+0x44>
 8003cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003cb4:	e71e      	b.n	8003af4 <_vfiprintf_r+0x48>
 8003cb6:	ab03      	add	r3, sp, #12
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	462a      	mov	r2, r5
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <_vfiprintf_r+0x228>)
 8003cbe:	a904      	add	r1, sp, #16
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	f000 f879 	bl	8003db8 <_printf_i>
 8003cc6:	e7e4      	b.n	8003c92 <_vfiprintf_r+0x1e6>
 8003cc8:	08004424 	.word	0x08004424
 8003ccc:	0800442e 	.word	0x0800442e
 8003cd0:	00000000 	.word	0x00000000
 8003cd4:	08003a87 	.word	0x08003a87
 8003cd8:	0800442a 	.word	0x0800442a

08003cdc <_printf_common>:
 8003cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce0:	4616      	mov	r6, r2
 8003ce2:	4698      	mov	r8, r3
 8003ce4:	688a      	ldr	r2, [r1, #8]
 8003ce6:	690b      	ldr	r3, [r1, #16]
 8003ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cec:	4293      	cmp	r3, r2
 8003cee:	bfb8      	it	lt
 8003cf0:	4613      	movlt	r3, r2
 8003cf2:	6033      	str	r3, [r6, #0]
 8003cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	b10a      	cbz	r2, 8003d02 <_printf_common+0x26>
 8003cfe:	3301      	adds	r3, #1
 8003d00:	6033      	str	r3, [r6, #0]
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	0699      	lsls	r1, r3, #26
 8003d06:	bf42      	ittt	mi
 8003d08:	6833      	ldrmi	r3, [r6, #0]
 8003d0a:	3302      	addmi	r3, #2
 8003d0c:	6033      	strmi	r3, [r6, #0]
 8003d0e:	6825      	ldr	r5, [r4, #0]
 8003d10:	f015 0506 	ands.w	r5, r5, #6
 8003d14:	d106      	bne.n	8003d24 <_printf_common+0x48>
 8003d16:	f104 0a19 	add.w	sl, r4, #25
 8003d1a:	68e3      	ldr	r3, [r4, #12]
 8003d1c:	6832      	ldr	r2, [r6, #0]
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	42ab      	cmp	r3, r5
 8003d22:	dc26      	bgt.n	8003d72 <_printf_common+0x96>
 8003d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d28:	6822      	ldr	r2, [r4, #0]
 8003d2a:	3b00      	subs	r3, #0
 8003d2c:	bf18      	it	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	0692      	lsls	r2, r2, #26
 8003d32:	d42b      	bmi.n	8003d8c <_printf_common+0xb0>
 8003d34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d38:	4641      	mov	r1, r8
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	47c8      	blx	r9
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d01e      	beq.n	8003d80 <_printf_common+0xa4>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	6922      	ldr	r2, [r4, #16]
 8003d46:	f003 0306 	and.w	r3, r3, #6
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	bf02      	ittt	eq
 8003d4e:	68e5      	ldreq	r5, [r4, #12]
 8003d50:	6833      	ldreq	r3, [r6, #0]
 8003d52:	1aed      	subeq	r5, r5, r3
 8003d54:	68a3      	ldr	r3, [r4, #8]
 8003d56:	bf0c      	ite	eq
 8003d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d5c:	2500      	movne	r5, #0
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	bfc4      	itt	gt
 8003d62:	1a9b      	subgt	r3, r3, r2
 8003d64:	18ed      	addgt	r5, r5, r3
 8003d66:	2600      	movs	r6, #0
 8003d68:	341a      	adds	r4, #26
 8003d6a:	42b5      	cmp	r5, r6
 8003d6c:	d11a      	bne.n	8003da4 <_printf_common+0xc8>
 8003d6e:	2000      	movs	r0, #0
 8003d70:	e008      	b.n	8003d84 <_printf_common+0xa8>
 8003d72:	2301      	movs	r3, #1
 8003d74:	4652      	mov	r2, sl
 8003d76:	4641      	mov	r1, r8
 8003d78:	4638      	mov	r0, r7
 8003d7a:	47c8      	blx	r9
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d103      	bne.n	8003d88 <_printf_common+0xac>
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d88:	3501      	adds	r5, #1
 8003d8a:	e7c6      	b.n	8003d1a <_printf_common+0x3e>
 8003d8c:	18e1      	adds	r1, r4, r3
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	2030      	movs	r0, #48	@ 0x30
 8003d92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d96:	4422      	add	r2, r4
 8003d98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003da0:	3302      	adds	r3, #2
 8003da2:	e7c7      	b.n	8003d34 <_printf_common+0x58>
 8003da4:	2301      	movs	r3, #1
 8003da6:	4622      	mov	r2, r4
 8003da8:	4641      	mov	r1, r8
 8003daa:	4638      	mov	r0, r7
 8003dac:	47c8      	blx	r9
 8003dae:	3001      	adds	r0, #1
 8003db0:	d0e6      	beq.n	8003d80 <_printf_common+0xa4>
 8003db2:	3601      	adds	r6, #1
 8003db4:	e7d9      	b.n	8003d6a <_printf_common+0x8e>
	...

08003db8 <_printf_i>:
 8003db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	7e0f      	ldrb	r7, [r1, #24]
 8003dbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dc0:	2f78      	cmp	r7, #120	@ 0x78
 8003dc2:	4691      	mov	r9, r2
 8003dc4:	4680      	mov	r8, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	469a      	mov	sl, r3
 8003dca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dce:	d807      	bhi.n	8003de0 <_printf_i+0x28>
 8003dd0:	2f62      	cmp	r7, #98	@ 0x62
 8003dd2:	d80a      	bhi.n	8003dea <_printf_i+0x32>
 8003dd4:	2f00      	cmp	r7, #0
 8003dd6:	f000 80d2 	beq.w	8003f7e <_printf_i+0x1c6>
 8003dda:	2f58      	cmp	r7, #88	@ 0x58
 8003ddc:	f000 80b9 	beq.w	8003f52 <_printf_i+0x19a>
 8003de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003de4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003de8:	e03a      	b.n	8003e60 <_printf_i+0xa8>
 8003dea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dee:	2b15      	cmp	r3, #21
 8003df0:	d8f6      	bhi.n	8003de0 <_printf_i+0x28>
 8003df2:	a101      	add	r1, pc, #4	@ (adr r1, 8003df8 <_printf_i+0x40>)
 8003df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003df8:	08003e51 	.word	0x08003e51
 8003dfc:	08003e65 	.word	0x08003e65
 8003e00:	08003de1 	.word	0x08003de1
 8003e04:	08003de1 	.word	0x08003de1
 8003e08:	08003de1 	.word	0x08003de1
 8003e0c:	08003de1 	.word	0x08003de1
 8003e10:	08003e65 	.word	0x08003e65
 8003e14:	08003de1 	.word	0x08003de1
 8003e18:	08003de1 	.word	0x08003de1
 8003e1c:	08003de1 	.word	0x08003de1
 8003e20:	08003de1 	.word	0x08003de1
 8003e24:	08003f65 	.word	0x08003f65
 8003e28:	08003e8f 	.word	0x08003e8f
 8003e2c:	08003f1f 	.word	0x08003f1f
 8003e30:	08003de1 	.word	0x08003de1
 8003e34:	08003de1 	.word	0x08003de1
 8003e38:	08003f87 	.word	0x08003f87
 8003e3c:	08003de1 	.word	0x08003de1
 8003e40:	08003e8f 	.word	0x08003e8f
 8003e44:	08003de1 	.word	0x08003de1
 8003e48:	08003de1 	.word	0x08003de1
 8003e4c:	08003f27 	.word	0x08003f27
 8003e50:	6833      	ldr	r3, [r6, #0]
 8003e52:	1d1a      	adds	r2, r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6032      	str	r2, [r6, #0]
 8003e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e60:	2301      	movs	r3, #1
 8003e62:	e09d      	b.n	8003fa0 <_printf_i+0x1e8>
 8003e64:	6833      	ldr	r3, [r6, #0]
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	1d19      	adds	r1, r3, #4
 8003e6a:	6031      	str	r1, [r6, #0]
 8003e6c:	0606      	lsls	r6, r0, #24
 8003e6e:	d501      	bpl.n	8003e74 <_printf_i+0xbc>
 8003e70:	681d      	ldr	r5, [r3, #0]
 8003e72:	e003      	b.n	8003e7c <_printf_i+0xc4>
 8003e74:	0645      	lsls	r5, r0, #25
 8003e76:	d5fb      	bpl.n	8003e70 <_printf_i+0xb8>
 8003e78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e7c:	2d00      	cmp	r5, #0
 8003e7e:	da03      	bge.n	8003e88 <_printf_i+0xd0>
 8003e80:	232d      	movs	r3, #45	@ 0x2d
 8003e82:	426d      	negs	r5, r5
 8003e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e88:	4859      	ldr	r0, [pc, #356]	@ (8003ff0 <_printf_i+0x238>)
 8003e8a:	230a      	movs	r3, #10
 8003e8c:	e011      	b.n	8003eb2 <_printf_i+0xfa>
 8003e8e:	6821      	ldr	r1, [r4, #0]
 8003e90:	6833      	ldr	r3, [r6, #0]
 8003e92:	0608      	lsls	r0, r1, #24
 8003e94:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e98:	d402      	bmi.n	8003ea0 <_printf_i+0xe8>
 8003e9a:	0649      	lsls	r1, r1, #25
 8003e9c:	bf48      	it	mi
 8003e9e:	b2ad      	uxthmi	r5, r5
 8003ea0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ea2:	4853      	ldr	r0, [pc, #332]	@ (8003ff0 <_printf_i+0x238>)
 8003ea4:	6033      	str	r3, [r6, #0]
 8003ea6:	bf14      	ite	ne
 8003ea8:	230a      	movne	r3, #10
 8003eaa:	2308      	moveq	r3, #8
 8003eac:	2100      	movs	r1, #0
 8003eae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003eb2:	6866      	ldr	r6, [r4, #4]
 8003eb4:	60a6      	str	r6, [r4, #8]
 8003eb6:	2e00      	cmp	r6, #0
 8003eb8:	bfa2      	ittt	ge
 8003eba:	6821      	ldrge	r1, [r4, #0]
 8003ebc:	f021 0104 	bicge.w	r1, r1, #4
 8003ec0:	6021      	strge	r1, [r4, #0]
 8003ec2:	b90d      	cbnz	r5, 8003ec8 <_printf_i+0x110>
 8003ec4:	2e00      	cmp	r6, #0
 8003ec6:	d04b      	beq.n	8003f60 <_printf_i+0x1a8>
 8003ec8:	4616      	mov	r6, r2
 8003eca:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ece:	fb03 5711 	mls	r7, r3, r1, r5
 8003ed2:	5dc7      	ldrb	r7, [r0, r7]
 8003ed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ed8:	462f      	mov	r7, r5
 8003eda:	42bb      	cmp	r3, r7
 8003edc:	460d      	mov	r5, r1
 8003ede:	d9f4      	bls.n	8003eca <_printf_i+0x112>
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d10b      	bne.n	8003efc <_printf_i+0x144>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	07df      	lsls	r7, r3, #31
 8003ee8:	d508      	bpl.n	8003efc <_printf_i+0x144>
 8003eea:	6923      	ldr	r3, [r4, #16]
 8003eec:	6861      	ldr	r1, [r4, #4]
 8003eee:	4299      	cmp	r1, r3
 8003ef0:	bfde      	ittt	le
 8003ef2:	2330      	movle	r3, #48	@ 0x30
 8003ef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003efc:	1b92      	subs	r2, r2, r6
 8003efe:	6122      	str	r2, [r4, #16]
 8003f00:	f8cd a000 	str.w	sl, [sp]
 8003f04:	464b      	mov	r3, r9
 8003f06:	aa03      	add	r2, sp, #12
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	f7ff fee6 	bl	8003cdc <_printf_common>
 8003f10:	3001      	adds	r0, #1
 8003f12:	d14a      	bne.n	8003faa <_printf_i+0x1f2>
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	b004      	add	sp, #16
 8003f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	f043 0320 	orr.w	r3, r3, #32
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	4833      	ldr	r0, [pc, #204]	@ (8003ff4 <_printf_i+0x23c>)
 8003f28:	2778      	movs	r7, #120	@ 0x78
 8003f2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	6831      	ldr	r1, [r6, #0]
 8003f32:	061f      	lsls	r7, r3, #24
 8003f34:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f38:	d402      	bmi.n	8003f40 <_printf_i+0x188>
 8003f3a:	065f      	lsls	r7, r3, #25
 8003f3c:	bf48      	it	mi
 8003f3e:	b2ad      	uxthmi	r5, r5
 8003f40:	6031      	str	r1, [r6, #0]
 8003f42:	07d9      	lsls	r1, r3, #31
 8003f44:	bf44      	itt	mi
 8003f46:	f043 0320 	orrmi.w	r3, r3, #32
 8003f4a:	6023      	strmi	r3, [r4, #0]
 8003f4c:	b11d      	cbz	r5, 8003f56 <_printf_i+0x19e>
 8003f4e:	2310      	movs	r3, #16
 8003f50:	e7ac      	b.n	8003eac <_printf_i+0xf4>
 8003f52:	4827      	ldr	r0, [pc, #156]	@ (8003ff0 <_printf_i+0x238>)
 8003f54:	e7e9      	b.n	8003f2a <_printf_i+0x172>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	f023 0320 	bic.w	r3, r3, #32
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	e7f6      	b.n	8003f4e <_printf_i+0x196>
 8003f60:	4616      	mov	r6, r2
 8003f62:	e7bd      	b.n	8003ee0 <_printf_i+0x128>
 8003f64:	6833      	ldr	r3, [r6, #0]
 8003f66:	6825      	ldr	r5, [r4, #0]
 8003f68:	6961      	ldr	r1, [r4, #20]
 8003f6a:	1d18      	adds	r0, r3, #4
 8003f6c:	6030      	str	r0, [r6, #0]
 8003f6e:	062e      	lsls	r6, r5, #24
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	d501      	bpl.n	8003f78 <_printf_i+0x1c0>
 8003f74:	6019      	str	r1, [r3, #0]
 8003f76:	e002      	b.n	8003f7e <_printf_i+0x1c6>
 8003f78:	0668      	lsls	r0, r5, #25
 8003f7a:	d5fb      	bpl.n	8003f74 <_printf_i+0x1bc>
 8003f7c:	8019      	strh	r1, [r3, #0]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6123      	str	r3, [r4, #16]
 8003f82:	4616      	mov	r6, r2
 8003f84:	e7bc      	b.n	8003f00 <_printf_i+0x148>
 8003f86:	6833      	ldr	r3, [r6, #0]
 8003f88:	1d1a      	adds	r2, r3, #4
 8003f8a:	6032      	str	r2, [r6, #0]
 8003f8c:	681e      	ldr	r6, [r3, #0]
 8003f8e:	6862      	ldr	r2, [r4, #4]
 8003f90:	2100      	movs	r1, #0
 8003f92:	4630      	mov	r0, r6
 8003f94:	f7fc f924 	bl	80001e0 <memchr>
 8003f98:	b108      	cbz	r0, 8003f9e <_printf_i+0x1e6>
 8003f9a:	1b80      	subs	r0, r0, r6
 8003f9c:	6060      	str	r0, [r4, #4]
 8003f9e:	6863      	ldr	r3, [r4, #4]
 8003fa0:	6123      	str	r3, [r4, #16]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fa8:	e7aa      	b.n	8003f00 <_printf_i+0x148>
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	4632      	mov	r2, r6
 8003fae:	4649      	mov	r1, r9
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	47d0      	blx	sl
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	d0ad      	beq.n	8003f14 <_printf_i+0x15c>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	079b      	lsls	r3, r3, #30
 8003fbc:	d413      	bmi.n	8003fe6 <_printf_i+0x22e>
 8003fbe:	68e0      	ldr	r0, [r4, #12]
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	4298      	cmp	r0, r3
 8003fc4:	bfb8      	it	lt
 8003fc6:	4618      	movlt	r0, r3
 8003fc8:	e7a6      	b.n	8003f18 <_printf_i+0x160>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4632      	mov	r2, r6
 8003fce:	4649      	mov	r1, r9
 8003fd0:	4640      	mov	r0, r8
 8003fd2:	47d0      	blx	sl
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d09d      	beq.n	8003f14 <_printf_i+0x15c>
 8003fd8:	3501      	adds	r5, #1
 8003fda:	68e3      	ldr	r3, [r4, #12]
 8003fdc:	9903      	ldr	r1, [sp, #12]
 8003fde:	1a5b      	subs	r3, r3, r1
 8003fe0:	42ab      	cmp	r3, r5
 8003fe2:	dcf2      	bgt.n	8003fca <_printf_i+0x212>
 8003fe4:	e7eb      	b.n	8003fbe <_printf_i+0x206>
 8003fe6:	2500      	movs	r5, #0
 8003fe8:	f104 0619 	add.w	r6, r4, #25
 8003fec:	e7f5      	b.n	8003fda <_printf_i+0x222>
 8003fee:	bf00      	nop
 8003ff0:	08004435 	.word	0x08004435
 8003ff4:	08004446 	.word	0x08004446

08003ff8 <__sflush_r>:
 8003ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004000:	0716      	lsls	r6, r2, #28
 8004002:	4605      	mov	r5, r0
 8004004:	460c      	mov	r4, r1
 8004006:	d454      	bmi.n	80040b2 <__sflush_r+0xba>
 8004008:	684b      	ldr	r3, [r1, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	dc02      	bgt.n	8004014 <__sflush_r+0x1c>
 800400e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	dd48      	ble.n	80040a6 <__sflush_r+0xae>
 8004014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004016:	2e00      	cmp	r6, #0
 8004018:	d045      	beq.n	80040a6 <__sflush_r+0xae>
 800401a:	2300      	movs	r3, #0
 800401c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004020:	682f      	ldr	r7, [r5, #0]
 8004022:	6a21      	ldr	r1, [r4, #32]
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	d030      	beq.n	800408a <__sflush_r+0x92>
 8004028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800402a:	89a3      	ldrh	r3, [r4, #12]
 800402c:	0759      	lsls	r1, r3, #29
 800402e:	d505      	bpl.n	800403c <__sflush_r+0x44>
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	1ad2      	subs	r2, r2, r3
 8004034:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004036:	b10b      	cbz	r3, 800403c <__sflush_r+0x44>
 8004038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800403a:	1ad2      	subs	r2, r2, r3
 800403c:	2300      	movs	r3, #0
 800403e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004040:	6a21      	ldr	r1, [r4, #32]
 8004042:	4628      	mov	r0, r5
 8004044:	47b0      	blx	r6
 8004046:	1c43      	adds	r3, r0, #1
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	d106      	bne.n	800405a <__sflush_r+0x62>
 800404c:	6829      	ldr	r1, [r5, #0]
 800404e:	291d      	cmp	r1, #29
 8004050:	d82b      	bhi.n	80040aa <__sflush_r+0xb2>
 8004052:	4a2a      	ldr	r2, [pc, #168]	@ (80040fc <__sflush_r+0x104>)
 8004054:	410a      	asrs	r2, r1
 8004056:	07d6      	lsls	r6, r2, #31
 8004058:	d427      	bmi.n	80040aa <__sflush_r+0xb2>
 800405a:	2200      	movs	r2, #0
 800405c:	6062      	str	r2, [r4, #4]
 800405e:	04d9      	lsls	r1, r3, #19
 8004060:	6922      	ldr	r2, [r4, #16]
 8004062:	6022      	str	r2, [r4, #0]
 8004064:	d504      	bpl.n	8004070 <__sflush_r+0x78>
 8004066:	1c42      	adds	r2, r0, #1
 8004068:	d101      	bne.n	800406e <__sflush_r+0x76>
 800406a:	682b      	ldr	r3, [r5, #0]
 800406c:	b903      	cbnz	r3, 8004070 <__sflush_r+0x78>
 800406e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004072:	602f      	str	r7, [r5, #0]
 8004074:	b1b9      	cbz	r1, 80040a6 <__sflush_r+0xae>
 8004076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800407a:	4299      	cmp	r1, r3
 800407c:	d002      	beq.n	8004084 <__sflush_r+0x8c>
 800407e:	4628      	mov	r0, r5
 8004080:	f7ff fbf2 	bl	8003868 <_free_r>
 8004084:	2300      	movs	r3, #0
 8004086:	6363      	str	r3, [r4, #52]	@ 0x34
 8004088:	e00d      	b.n	80040a6 <__sflush_r+0xae>
 800408a:	2301      	movs	r3, #1
 800408c:	4628      	mov	r0, r5
 800408e:	47b0      	blx	r6
 8004090:	4602      	mov	r2, r0
 8004092:	1c50      	adds	r0, r2, #1
 8004094:	d1c9      	bne.n	800402a <__sflush_r+0x32>
 8004096:	682b      	ldr	r3, [r5, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0c6      	beq.n	800402a <__sflush_r+0x32>
 800409c:	2b1d      	cmp	r3, #29
 800409e:	d001      	beq.n	80040a4 <__sflush_r+0xac>
 80040a0:	2b16      	cmp	r3, #22
 80040a2:	d11e      	bne.n	80040e2 <__sflush_r+0xea>
 80040a4:	602f      	str	r7, [r5, #0]
 80040a6:	2000      	movs	r0, #0
 80040a8:	e022      	b.n	80040f0 <__sflush_r+0xf8>
 80040aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ae:	b21b      	sxth	r3, r3
 80040b0:	e01b      	b.n	80040ea <__sflush_r+0xf2>
 80040b2:	690f      	ldr	r7, [r1, #16]
 80040b4:	2f00      	cmp	r7, #0
 80040b6:	d0f6      	beq.n	80040a6 <__sflush_r+0xae>
 80040b8:	0793      	lsls	r3, r2, #30
 80040ba:	680e      	ldr	r6, [r1, #0]
 80040bc:	bf08      	it	eq
 80040be:	694b      	ldreq	r3, [r1, #20]
 80040c0:	600f      	str	r7, [r1, #0]
 80040c2:	bf18      	it	ne
 80040c4:	2300      	movne	r3, #0
 80040c6:	eba6 0807 	sub.w	r8, r6, r7
 80040ca:	608b      	str	r3, [r1, #8]
 80040cc:	f1b8 0f00 	cmp.w	r8, #0
 80040d0:	dde9      	ble.n	80040a6 <__sflush_r+0xae>
 80040d2:	6a21      	ldr	r1, [r4, #32]
 80040d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80040d6:	4643      	mov	r3, r8
 80040d8:	463a      	mov	r2, r7
 80040da:	4628      	mov	r0, r5
 80040dc:	47b0      	blx	r6
 80040de:	2800      	cmp	r0, #0
 80040e0:	dc08      	bgt.n	80040f4 <__sflush_r+0xfc>
 80040e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ea:	81a3      	strh	r3, [r4, #12]
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f4:	4407      	add	r7, r0
 80040f6:	eba8 0800 	sub.w	r8, r8, r0
 80040fa:	e7e7      	b.n	80040cc <__sflush_r+0xd4>
 80040fc:	dfbffffe 	.word	0xdfbffffe

08004100 <_fflush_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	690b      	ldr	r3, [r1, #16]
 8004104:	4605      	mov	r5, r0
 8004106:	460c      	mov	r4, r1
 8004108:	b913      	cbnz	r3, 8004110 <_fflush_r+0x10>
 800410a:	2500      	movs	r5, #0
 800410c:	4628      	mov	r0, r5
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	b118      	cbz	r0, 800411a <_fflush_r+0x1a>
 8004112:	6a03      	ldr	r3, [r0, #32]
 8004114:	b90b      	cbnz	r3, 800411a <_fflush_r+0x1a>
 8004116:	f7ff fa9f 	bl	8003658 <__sinit>
 800411a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f3      	beq.n	800410a <_fflush_r+0xa>
 8004122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004124:	07d0      	lsls	r0, r2, #31
 8004126:	d404      	bmi.n	8004132 <_fflush_r+0x32>
 8004128:	0599      	lsls	r1, r3, #22
 800412a:	d402      	bmi.n	8004132 <_fflush_r+0x32>
 800412c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800412e:	f7ff fb98 	bl	8003862 <__retarget_lock_acquire_recursive>
 8004132:	4628      	mov	r0, r5
 8004134:	4621      	mov	r1, r4
 8004136:	f7ff ff5f 	bl	8003ff8 <__sflush_r>
 800413a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800413c:	07da      	lsls	r2, r3, #31
 800413e:	4605      	mov	r5, r0
 8004140:	d4e4      	bmi.n	800410c <_fflush_r+0xc>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	059b      	lsls	r3, r3, #22
 8004146:	d4e1      	bmi.n	800410c <_fflush_r+0xc>
 8004148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800414a:	f7ff fb8b 	bl	8003864 <__retarget_lock_release_recursive>
 800414e:	e7dd      	b.n	800410c <_fflush_r+0xc>

08004150 <__swbuf_r>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	460e      	mov	r6, r1
 8004154:	4614      	mov	r4, r2
 8004156:	4605      	mov	r5, r0
 8004158:	b118      	cbz	r0, 8004162 <__swbuf_r+0x12>
 800415a:	6a03      	ldr	r3, [r0, #32]
 800415c:	b90b      	cbnz	r3, 8004162 <__swbuf_r+0x12>
 800415e:	f7ff fa7b 	bl	8003658 <__sinit>
 8004162:	69a3      	ldr	r3, [r4, #24]
 8004164:	60a3      	str	r3, [r4, #8]
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	071a      	lsls	r2, r3, #28
 800416a:	d501      	bpl.n	8004170 <__swbuf_r+0x20>
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	b943      	cbnz	r3, 8004182 <__swbuf_r+0x32>
 8004170:	4621      	mov	r1, r4
 8004172:	4628      	mov	r0, r5
 8004174:	f000 f82a 	bl	80041cc <__swsetup_r>
 8004178:	b118      	cbz	r0, 8004182 <__swbuf_r+0x32>
 800417a:	f04f 37ff 	mov.w	r7, #4294967295
 800417e:	4638      	mov	r0, r7
 8004180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	6922      	ldr	r2, [r4, #16]
 8004186:	1a98      	subs	r0, r3, r2
 8004188:	6963      	ldr	r3, [r4, #20]
 800418a:	b2f6      	uxtb	r6, r6
 800418c:	4283      	cmp	r3, r0
 800418e:	4637      	mov	r7, r6
 8004190:	dc05      	bgt.n	800419e <__swbuf_r+0x4e>
 8004192:	4621      	mov	r1, r4
 8004194:	4628      	mov	r0, r5
 8004196:	f7ff ffb3 	bl	8004100 <_fflush_r>
 800419a:	2800      	cmp	r0, #0
 800419c:	d1ed      	bne.n	800417a <__swbuf_r+0x2a>
 800419e:	68a3      	ldr	r3, [r4, #8]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	60a3      	str	r3, [r4, #8]
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	6022      	str	r2, [r4, #0]
 80041aa:	701e      	strb	r6, [r3, #0]
 80041ac:	6962      	ldr	r2, [r4, #20]
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d004      	beq.n	80041be <__swbuf_r+0x6e>
 80041b4:	89a3      	ldrh	r3, [r4, #12]
 80041b6:	07db      	lsls	r3, r3, #31
 80041b8:	d5e1      	bpl.n	800417e <__swbuf_r+0x2e>
 80041ba:	2e0a      	cmp	r6, #10
 80041bc:	d1df      	bne.n	800417e <__swbuf_r+0x2e>
 80041be:	4621      	mov	r1, r4
 80041c0:	4628      	mov	r0, r5
 80041c2:	f7ff ff9d 	bl	8004100 <_fflush_r>
 80041c6:	2800      	cmp	r0, #0
 80041c8:	d0d9      	beq.n	800417e <__swbuf_r+0x2e>
 80041ca:	e7d6      	b.n	800417a <__swbuf_r+0x2a>

080041cc <__swsetup_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4b29      	ldr	r3, [pc, #164]	@ (8004274 <__swsetup_r+0xa8>)
 80041d0:	4605      	mov	r5, r0
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	460c      	mov	r4, r1
 80041d6:	b118      	cbz	r0, 80041e0 <__swsetup_r+0x14>
 80041d8:	6a03      	ldr	r3, [r0, #32]
 80041da:	b90b      	cbnz	r3, 80041e0 <__swsetup_r+0x14>
 80041dc:	f7ff fa3c 	bl	8003658 <__sinit>
 80041e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e4:	0719      	lsls	r1, r3, #28
 80041e6:	d422      	bmi.n	800422e <__swsetup_r+0x62>
 80041e8:	06da      	lsls	r2, r3, #27
 80041ea:	d407      	bmi.n	80041fc <__swsetup_r+0x30>
 80041ec:	2209      	movs	r2, #9
 80041ee:	602a      	str	r2, [r5, #0]
 80041f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041f4:	81a3      	strh	r3, [r4, #12]
 80041f6:	f04f 30ff 	mov.w	r0, #4294967295
 80041fa:	e033      	b.n	8004264 <__swsetup_r+0x98>
 80041fc:	0758      	lsls	r0, r3, #29
 80041fe:	d512      	bpl.n	8004226 <__swsetup_r+0x5a>
 8004200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004202:	b141      	cbz	r1, 8004216 <__swsetup_r+0x4a>
 8004204:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004208:	4299      	cmp	r1, r3
 800420a:	d002      	beq.n	8004212 <__swsetup_r+0x46>
 800420c:	4628      	mov	r0, r5
 800420e:	f7ff fb2b 	bl	8003868 <_free_r>
 8004212:	2300      	movs	r3, #0
 8004214:	6363      	str	r3, [r4, #52]	@ 0x34
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	2300      	movs	r3, #0
 8004220:	6063      	str	r3, [r4, #4]
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	6923      	ldr	r3, [r4, #16]
 8004230:	b94b      	cbnz	r3, 8004246 <__swsetup_r+0x7a>
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800423c:	d003      	beq.n	8004246 <__swsetup_r+0x7a>
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f000 f84f 	bl	80042e4 <__smakebuf_r>
 8004246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800424a:	f013 0201 	ands.w	r2, r3, #1
 800424e:	d00a      	beq.n	8004266 <__swsetup_r+0x9a>
 8004250:	2200      	movs	r2, #0
 8004252:	60a2      	str	r2, [r4, #8]
 8004254:	6962      	ldr	r2, [r4, #20]
 8004256:	4252      	negs	r2, r2
 8004258:	61a2      	str	r2, [r4, #24]
 800425a:	6922      	ldr	r2, [r4, #16]
 800425c:	b942      	cbnz	r2, 8004270 <__swsetup_r+0xa4>
 800425e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004262:	d1c5      	bne.n	80041f0 <__swsetup_r+0x24>
 8004264:	bd38      	pop	{r3, r4, r5, pc}
 8004266:	0799      	lsls	r1, r3, #30
 8004268:	bf58      	it	pl
 800426a:	6962      	ldrpl	r2, [r4, #20]
 800426c:	60a2      	str	r2, [r4, #8]
 800426e:	e7f4      	b.n	800425a <__swsetup_r+0x8e>
 8004270:	2000      	movs	r0, #0
 8004272:	e7f7      	b.n	8004264 <__swsetup_r+0x98>
 8004274:	20000018 	.word	0x20000018

08004278 <_sbrk_r>:
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	4d06      	ldr	r5, [pc, #24]	@ (8004294 <_sbrk_r+0x1c>)
 800427c:	2300      	movs	r3, #0
 800427e:	4604      	mov	r4, r0
 8004280:	4608      	mov	r0, r1
 8004282:	602b      	str	r3, [r5, #0]
 8004284:	f7fc fd08 	bl	8000c98 <_sbrk>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d102      	bne.n	8004292 <_sbrk_r+0x1a>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	b103      	cbz	r3, 8004292 <_sbrk_r+0x1a>
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	200002a0 	.word	0x200002a0

08004298 <__swhatbuf_r>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	460c      	mov	r4, r1
 800429c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042a0:	2900      	cmp	r1, #0
 80042a2:	b096      	sub	sp, #88	@ 0x58
 80042a4:	4615      	mov	r5, r2
 80042a6:	461e      	mov	r6, r3
 80042a8:	da0d      	bge.n	80042c6 <__swhatbuf_r+0x2e>
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	bf14      	ite	ne
 80042b6:	2340      	movne	r3, #64	@ 0x40
 80042b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80042bc:	2000      	movs	r0, #0
 80042be:	6031      	str	r1, [r6, #0]
 80042c0:	602b      	str	r3, [r5, #0]
 80042c2:	b016      	add	sp, #88	@ 0x58
 80042c4:	bd70      	pop	{r4, r5, r6, pc}
 80042c6:	466a      	mov	r2, sp
 80042c8:	f000 f848 	bl	800435c <_fstat_r>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	dbec      	blt.n	80042aa <__swhatbuf_r+0x12>
 80042d0:	9901      	ldr	r1, [sp, #4]
 80042d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80042d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80042da:	4259      	negs	r1, r3
 80042dc:	4159      	adcs	r1, r3
 80042de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042e2:	e7eb      	b.n	80042bc <__swhatbuf_r+0x24>

080042e4 <__smakebuf_r>:
 80042e4:	898b      	ldrh	r3, [r1, #12]
 80042e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042e8:	079d      	lsls	r5, r3, #30
 80042ea:	4606      	mov	r6, r0
 80042ec:	460c      	mov	r4, r1
 80042ee:	d507      	bpl.n	8004300 <__smakebuf_r+0x1c>
 80042f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	2301      	movs	r3, #1
 80042fa:	6163      	str	r3, [r4, #20]
 80042fc:	b003      	add	sp, #12
 80042fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004300:	ab01      	add	r3, sp, #4
 8004302:	466a      	mov	r2, sp
 8004304:	f7ff ffc8 	bl	8004298 <__swhatbuf_r>
 8004308:	9f00      	ldr	r7, [sp, #0]
 800430a:	4605      	mov	r5, r0
 800430c:	4639      	mov	r1, r7
 800430e:	4630      	mov	r0, r6
 8004310:	f7ff fb16 	bl	8003940 <_malloc_r>
 8004314:	b948      	cbnz	r0, 800432a <__smakebuf_r+0x46>
 8004316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800431a:	059a      	lsls	r2, r3, #22
 800431c:	d4ee      	bmi.n	80042fc <__smakebuf_r+0x18>
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	f043 0302 	orr.w	r3, r3, #2
 8004326:	81a3      	strh	r3, [r4, #12]
 8004328:	e7e2      	b.n	80042f0 <__smakebuf_r+0xc>
 800432a:	89a3      	ldrh	r3, [r4, #12]
 800432c:	6020      	str	r0, [r4, #0]
 800432e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004332:	81a3      	strh	r3, [r4, #12]
 8004334:	9b01      	ldr	r3, [sp, #4]
 8004336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800433a:	b15b      	cbz	r3, 8004354 <__smakebuf_r+0x70>
 800433c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004340:	4630      	mov	r0, r6
 8004342:	f000 f81d 	bl	8004380 <_isatty_r>
 8004346:	b128      	cbz	r0, 8004354 <__smakebuf_r+0x70>
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	81a3      	strh	r3, [r4, #12]
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	431d      	orrs	r5, r3
 8004358:	81a5      	strh	r5, [r4, #12]
 800435a:	e7cf      	b.n	80042fc <__smakebuf_r+0x18>

0800435c <_fstat_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4d07      	ldr	r5, [pc, #28]	@ (800437c <_fstat_r+0x20>)
 8004360:	2300      	movs	r3, #0
 8004362:	4604      	mov	r4, r0
 8004364:	4608      	mov	r0, r1
 8004366:	4611      	mov	r1, r2
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	f7fc fc6c 	bl	8000c46 <_fstat>
 800436e:	1c43      	adds	r3, r0, #1
 8004370:	d102      	bne.n	8004378 <_fstat_r+0x1c>
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	b103      	cbz	r3, 8004378 <_fstat_r+0x1c>
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	bd38      	pop	{r3, r4, r5, pc}
 800437a:	bf00      	nop
 800437c:	200002a0 	.word	0x200002a0

08004380 <_isatty_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d06      	ldr	r5, [pc, #24]	@ (800439c <_isatty_r+0x1c>)
 8004384:	2300      	movs	r3, #0
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	f7fc fc6b 	bl	8000c66 <_isatty>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d102      	bne.n	800439a <_isatty_r+0x1a>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	b103      	cbz	r3, 800439a <_isatty_r+0x1a>
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	200002a0 	.word	0x200002a0

080043a0 <_init>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	bf00      	nop
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr

080043ac <_fini>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	bf00      	nop
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr
