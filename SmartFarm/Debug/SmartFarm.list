
SmartFarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08007bf8  08007bf8  00008bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008080  08008080  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008080  08008080  00009080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008088  08008088  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008088  08008088  00009088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800808c  0800808c  0000908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008090  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001d4  08008264  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08008264  0000a500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f061  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e1  00000000  00000000  00019265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  0001b648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b09  00000000  00000000  0001c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a9d  00000000  00000000  0001cf71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bff  00000000  00000000  00035a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd4e  00000000  00000000  0004660d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e235b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b40  00000000  00000000  000e23a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e6ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bdc 	.word	0x08007bdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007bdc 	.word	0x08007bdc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	4a13      	ldr	r2, [pc, #76]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f56:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f62:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000f82:	bf00      	nop
     __ASM volatile ("NOP");
 8000f84:	bf00      	nop
  __ASM volatile ("NOP");
 8000f86:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000f90:	2300      	movs	r3, #0
 8000f92:	e000      	b.n	8000f96 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000f94:	2301      	movs	r3, #1
  }
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000edf0 	.word	0xe000edf0
 8000fa4:	e0001000 	.word	0xe0001000

08000fa8 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <delay+0x40>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fb6:	f002 fcd5 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <delay+0x44>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	0c9b      	lsrs	r3, r3, #18
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000fcc:	bf00      	nop
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <delay+0x40>)
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad2      	subs	r2, r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3f8      	bcc.n	8000fce <delay+0x26>
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e0001000 	.word	0xe0001000
 8000fec:	431bde83 	.word	0x431bde83

08000ff0 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f001 fe86 	bl	8002d30 <HAL_GPIO_Init>
}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f001 fe68 	bl	8002d30 <HAL_GPIO_Init>
}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <DHT_Start>:


void DHT_Start (void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 800106c:	f7ff ff6c 	bl	8000f48 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001070:	2102      	movs	r1, #2
 8001072:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <DHT_Start+0x40>)
 8001074:	f7ff ffbc 	bl	8000ff0 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001078:	2200      	movs	r2, #0
 800107a:	2102      	movs	r1, #2
 800107c:	480a      	ldr	r0, [pc, #40]	@ (80010a8 <DHT_Start+0x40>)
 800107e:	f001 fff3 	bl	8003068 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8001082:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001086:	f7ff ff8f 	bl	8000fa8 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800108a:	2201      	movs	r2, #1
 800108c:	2102      	movs	r1, #2
 800108e:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <DHT_Start+0x40>)
 8001090:	f001 ffea 	bl	8003068 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001094:	2014      	movs	r0, #20
 8001096:	f7ff ff87 	bl	8000fa8 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800109a:	2102      	movs	r1, #2
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <DHT_Start+0x40>)
 800109e:	f7ff ffc5 	bl	800102c <Set_Pin_Input>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020000 	.word	0x40020000

080010ac <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80010b6:	2028      	movs	r0, #40	@ 0x28
 80010b8:	f7ff ff76 	bl	8000fa8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80010bc:	2102      	movs	r1, #2
 80010be:	4811      	ldr	r0, [pc, #68]	@ (8001104 <DHT_Check_Response+0x58>)
 80010c0:	f001 ffba 	bl	8003038 <HAL_GPIO_ReadPin>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10e      	bne.n	80010e8 <DHT_Check_Response+0x3c>
	{
		delay (80);
 80010ca:	2050      	movs	r0, #80	@ 0x50
 80010cc:	f7ff ff6c 	bl	8000fa8 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80010d0:	2102      	movs	r1, #2
 80010d2:	480c      	ldr	r0, [pc, #48]	@ (8001104 <DHT_Check_Response+0x58>)
 80010d4:	f001 ffb0 	bl	8003038 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <DHT_Check_Response+0x38>
 80010de:	2301      	movs	r3, #1
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	e001      	b.n	80010e8 <DHT_Check_Response+0x3c>
		else Response = -1;
 80010e4:	23ff      	movs	r3, #255	@ 0xff
 80010e6:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80010e8:	bf00      	nop
 80010ea:	2102      	movs	r1, #2
 80010ec:	4805      	ldr	r0, [pc, #20]	@ (8001104 <DHT_Check_Response+0x58>)
 80010ee:	f001 ffa3 	bl	8003038 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f8      	bne.n	80010ea <DHT_Check_Response+0x3e>

	return Response;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020000 	.word	0x40020000

08001108 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800110e:	2300      	movs	r3, #0
 8001110:	71bb      	strb	r3, [r7, #6]
 8001112:	e037      	b.n	8001184 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001114:	bf00      	nop
 8001116:	2102      	movs	r1, #2
 8001118:	481e      	ldr	r0, [pc, #120]	@ (8001194 <DHT_Read+0x8c>)
 800111a:	f001 ff8d 	bl	8003038 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f8      	beq.n	8001116 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001124:	2028      	movs	r0, #40	@ 0x28
 8001126:	f7ff ff3f 	bl	8000fa8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800112a:	2102      	movs	r1, #2
 800112c:	4819      	ldr	r0, [pc, #100]	@ (8001194 <DHT_Read+0x8c>)
 800112e:	f001 ff83 	bl	8003038 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10e      	bne.n	8001156 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2201      	movs	r2, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	b25b      	sxtb	r3, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	b25a      	sxtb	r2, r3
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	4013      	ands	r3, r2
 8001150:	b25b      	sxtb	r3, r3
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	e00b      	b.n	800116e <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	f1c3 0307 	rsb	r3, r3, #7
 800115c:	2201      	movs	r2, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	b25a      	sxtb	r2, r3
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4313      	orrs	r3, r2
 800116a:	b25b      	sxtb	r3, r3
 800116c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 800116e:	bf00      	nop
 8001170:	2102      	movs	r1, #2
 8001172:	4808      	ldr	r0, [pc, #32]	@ (8001194 <DHT_Read+0x8c>)
 8001174:	f001 ff60 	bl	8003038 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f8      	bne.n	8001170 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	3301      	adds	r3, #1
 8001182:	71bb      	strb	r3, [r7, #6]
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	2b07      	cmp	r3, #7
 8001188:	d9c4      	bls.n	8001114 <DHT_Read+0xc>
	}
	return i;
 800118a:	79fb      	ldrb	r3, [r7, #7]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020000 	.word	0x40020000

08001198 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 80011a0:	f7ff ff62 	bl	8001068 <DHT_Start>
	Presence = DHT_Check_Response ();
 80011a4:	f7ff ff82 	bl	80010ac <DHT_Check_Response>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <DHT_GetData+0xa4>)
 80011ae:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80011b0:	f7ff ffaa 	bl	8001108 <DHT_Read>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <DHT_GetData+0xa8>)
 80011ba:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80011bc:	f7ff ffa4 	bl	8001108 <DHT_Read>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <DHT_GetData+0xac>)
 80011c6:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80011c8:	f7ff ff9e 	bl	8001108 <DHT_Read>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <DHT_GetData+0xb0>)
 80011d2:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80011d4:	f7ff ff98 	bl	8001108 <DHT_Read>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <DHT_GetData+0xb4>)
 80011de:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80011e0:	f7ff ff92 	bl	8001108 <DHT_Read>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <DHT_GetData+0xb8>)
 80011ea:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <DHT_GetData+0xb8>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <DHT_GetData+0xa8>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <DHT_GetData+0xac>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <DHT_GetData+0xb0>)
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a11      	ldr	r2, [pc, #68]	@ (800124c <DHT_GetData+0xb4>)
 8001206:	7812      	ldrb	r2, [r2, #0]
 8001208:	4413      	add	r3, r2
 800120a:	4299      	cmp	r1, r3
 800120c:	d111      	bne.n	8001232 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <DHT_GetData+0xb0>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <DHT_GetData+0xa8>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200001f6 	.word	0x200001f6
 8001240:	200001f0 	.word	0x200001f0
 8001244:	200001f1 	.word	0x200001f1
 8001248:	200001f2 	.word	0x200001f2
 800124c:	200001f3 	.word	0x200001f3
 8001250:	200001f4 	.word	0x200001f4
 8001254:	00000000 	.word	0x00000000

08001258 <Illuminance>:
/*
volatile int lux;  // Set lux as global variable
char dum[40];	//dum for sprintf
*/
int Illuminance(uint32_t LDR_Val)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    // Convert analog value to voltage
    float Vout = LDR_Val * 5.0 / 4095.0; // 12-bit ADC, Ref 5V Vin
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff f957 	bl	8000514 <__aeabi_ui2d>
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b29      	ldr	r3, [pc, #164]	@ (8001310 <Illuminance+0xb8>)
 800126c:	f7ff f9cc 	bl	8000608 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	a321      	add	r3, pc, #132	@ (adr r3, 8001300 <Illuminance+0xa8>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff faed 	bl	800085c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fc95 	bl	8000bb8 <__aeabi_d2f>
 800128e:	4603      	mov	r3, r0
 8001290:	617b      	str	r3, [r7, #20]
    // Convert voltage to resistance of LDR
    float RLDR = 10000.0 * Vout / (5.0 - Vout); // Rref = 10k, Vin = 5V
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff f960 	bl	8000558 <__aeabi_f2d>
 8001298:	a31b      	add	r3, pc, #108	@ (adr r3, 8001308 <Illuminance+0xb0>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff f9b3 	bl	8000608 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4614      	mov	r4, r2
 80012a8:	461d      	mov	r5, r3
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff f954 	bl	8000558 <__aeabi_f2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	f04f 0000 	mov.w	r0, #0
 80012b8:	4915      	ldr	r1, [pc, #84]	@ (8001310 <Illuminance+0xb8>)
 80012ba:	f7fe ffed 	bl	8000298 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7ff fac9 	bl	800085c <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fc71 	bl	8000bb8 <__aeabi_d2f>
 80012d6:	4603      	mov	r3, r0
 80012d8:	613b      	str	r3, [r7, #16]
    // Convert resistance to illuminance (lux)
    int LightValue = 3000000 / RLDR;
 80012da:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001314 <Illuminance+0xbc>
 80012de:	ed97 7a04 	vldr	s14, [r7, #16]
 80012e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ea:	ee17 3a90 	vmov	r3, s15
 80012ee:	60fb      	str	r3, [r7, #12]
    return LightValue; // Return the calculated illuminance value
 80012f0:	68fb      	ldr	r3, [r7, #12]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	00000000 	.word	0x00000000
 8001304:	40affe00 	.word	0x40affe00
 8001308:	00000000 	.word	0x00000000
 800130c:	40c38800 	.word	0x40c38800
 8001310:	40140000 	.word	0x40140000
 8001314:	4a371b00 	.word	0x4a371b00

08001318 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a1a      	ldr	r2, [pc, #104]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d12d      	bne.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		soil_moisture_value = GetAdcValue();
 8001328:	f000 fcd2 	bl	8001cd0 <GetAdcValue>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001332:	601a      	str	r2, [r3, #0]
		light_intensity_value = GetAdcValue();
 8001334:	f000 fccc 	bl	8001cd0 <GetAdcValue>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800133e:	601a      	str	r2, [r3, #0]
	    //printf("soil_moisture_value : %d\r\n", soil_moisture_value);
	    //printf("light_intensity_value : %d\r\n", light_intensity_value);

		/* Process the LDR value */
		lux = Illuminance(light_intensity_value); // Update the global variable
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff87 	bl	8001258 <Illuminance>
 800134a:	4603      	mov	r3, r0
 800134c:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800134e:	6013      	str	r3, [r2, #0]

		/* Print lux with UART */
		//sprintf(dum, "Light value : %d Lux \n\r", lux);
		HAL_UART_Transmit(&huart2, (uint8_t *)dum, strlen(dum), 1000);
 8001350:	4812      	ldr	r0, [pc, #72]	@ (800139c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001352:	f7fe ff95 	bl	8000280 <strlen>
 8001356:	4603      	mov	r3, r0
 8001358:	b29a      	uxth	r2, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135e:	490f      	ldr	r1, [pc, #60]	@ (800139c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001360:	480f      	ldr	r0, [pc, #60]	@ (80013a0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001362:	f003 fb8d 	bl	8004a80 <HAL_UART_Transmit>

		/* Using lux for LED control */
		if(lux <= 50) HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b32      	cmp	r3, #50	@ 0x32
 800136c:	dc05      	bgt.n	800137a <HAL_TIM_PeriodElapsedCallback+0x62>
 800136e:	2201      	movs	r2, #1
 8001370:	2180      	movs	r1, #128	@ 0x80
 8001372:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001374:	f001 fe78 	bl	8003068 <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}

};
 8001378:	e004      	b.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x6c>
		else HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2180      	movs	r1, #128	@ 0x80
 800137e:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001380:	f001 fe72 	bl	8003068 <HAL_GPIO_WritePin>
};
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000288 	.word	0x20000288
 8001390:	20000360 	.word	0x20000360
 8001394:	20000364 	.word	0x20000364
 8001398:	20000390 	.word	0x20000390
 800139c:	20000368 	.word	0x20000368
 80013a0:	20000318 	.word	0x20000318
 80013a4:	40020800 	.word	0x40020800

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ac:	f000 ff5a 	bl	8002264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b0:	f000 f944 	bl	800163c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b4:	f000 fba6 	bl	8001b04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013b8:	f000 fb7a 	bl	8001ab0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80013bc:	f000 f9a6 	bl	800170c <MX_ADC1_Init>
  MX_TIM3_Init();
 80013c0:	f000 fab2 	bl	8001928 <MX_TIM3_Init>
  MX_TIM1_Init();
 80013c4:	f000 fa04 	bl	80017d0 <MX_TIM1_Init>
  MX_TIM4_Init();
 80013c8:	f000 fafc 	bl	80019c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart();
 80013cc:	f000 fc4c 	bl	8001c68 <ProgramStart>

  HAL_TIM_Base_Start_IT(&htim3);// timer interrupt start
 80013d0:	4883      	ldr	r0, [pc, #524]	@ (80015e0 <main+0x238>)
 80013d2:	f002 fb4b 	bl	8003a6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);// timer interrupt start
 80013d6:	4883      	ldr	r0, [pc, #524]	@ (80015e4 <main+0x23c>)
 80013d8:	f002 fb48 	bl	8003a6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013dc:	2104      	movs	r1, #4
 80013de:	4882      	ldr	r0, [pc, #520]	@ (80015e8 <main+0x240>)
 80013e0:	f002 fc00 	bl	8003be4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013e4:	2108      	movs	r1, #8
 80013e6:	4880      	ldr	r0, [pc, #512]	@ (80015e8 <main+0x240>)
 80013e8:	f002 fbfc 	bl	8003be4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80013ec:	2100      	movs	r1, #0
 80013ee:	487d      	ldr	r0, [pc, #500]	@ (80015e4 <main+0x23c>)
 80013f0:	f002 fbf8 	bl	8003be4 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013fa:	487c      	ldr	r0, [pc, #496]	@ (80015ec <main+0x244>)
 80013fc:	f001 fe34 	bl	8003068 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001406:	487a      	ldr	r0, [pc, #488]	@ (80015f0 <main+0x248>)
 8001408:	f001 fe2e 	bl	8003068 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 800140c:	2201      	movs	r2, #1
 800140e:	2120      	movs	r1, #32
 8001410:	4876      	ldr	r0, [pc, #472]	@ (80015ec <main+0x244>)
 8001412:	f001 fe29 	bl	8003068 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2110      	movs	r1, #16
 800141a:	4874      	ldr	r0, [pc, #464]	@ (80015ec <main+0x244>)
 800141c:	f001 fe24 	bl	8003068 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  DHT_GetData(&DHT11_Data);
 8001420:	4874      	ldr	r0, [pc, #464]	@ (80015f4 <main+0x24c>)
 8001422:	f7ff feb9 	bl	8001198 <DHT_GetData>
	  Temperature = DHT11_Data.Temperature;
 8001426:	4b73      	ldr	r3, [pc, #460]	@ (80015f4 <main+0x24c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a73      	ldr	r2, [pc, #460]	@ (80015f8 <main+0x250>)
 800142c:	6013      	str	r3, [r2, #0]
	  Humidity = DHT11_Data.Humidity;
 800142e:	4b71      	ldr	r3, [pc, #452]	@ (80015f4 <main+0x24c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a72      	ldr	r2, [pc, #456]	@ (80015fc <main+0x254>)
 8001434:	6013      	str	r3, [r2, #0]
	  if(Temperature != 0 && Humidity != 0)
 8001436:	4b70      	ldr	r3, [pc, #448]	@ (80015f8 <main+0x250>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001444:	d01b      	beq.n	800147e <main+0xd6>
 8001446:	4b6d      	ldr	r3, [pc, #436]	@ (80015fc <main+0x254>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	d013      	beq.n	800147e <main+0xd6>
   	  {
	 	  printf("Temperature : %f ", Temperature);
 8001456:	4b68      	ldr	r3, [pc, #416]	@ (80015f8 <main+0x250>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f87c 	bl	8000558 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4866      	ldr	r0, [pc, #408]	@ (8001600 <main+0x258>)
 8001466:	f004 fbe1 	bl	8005c2c <iprintf>
	 	  printf("Humidity : %f ", Humidity);
 800146a:	4b64      	ldr	r3, [pc, #400]	@ (80015fc <main+0x254>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f872 	bl	8000558 <__aeabi_f2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4862      	ldr	r0, [pc, #392]	@ (8001604 <main+0x25c>)
 800147a:	f004 fbd7 	bl	8005c2c <iprintf>
	  }

	  if(Temperature > 25) {
 800147e:	4b5e      	ldr	r3, [pc, #376]	@ (80015f8 <main+0x250>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001490:	dd05      	ble.n	800149e <main+0xf6>
		  htim1.Instance->CCR3 = 50000;
 8001492:	4b55      	ldr	r3, [pc, #340]	@ (80015e8 <main+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800149a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800149c:	e003      	b.n	80014a6 <main+0xfe>
	  }
	  else{
		  htim1.Instance->CCR3 = 0;
 800149e:	4b52      	ldr	r3, [pc, #328]	@ (80015e8 <main+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	  }

	  if(Humidity > 40)
 80014a6:	4b55      	ldr	r3, [pc, #340]	@ (80015fc <main+0x254>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001608 <main+0x260>
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	dd12      	ble.n	80014e0 <main+0x138>
	  {
		  //1ms Pwm - Servo motor arm rotates to 0 degree
		  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 350);
 80014ba:	4b4a      	ldr	r3, [pc, #296]	@ (80015e4 <main+0x23c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80014c2:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_Delay(1500);
 80014c4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80014c8:	f000 ff3e 	bl	8002348 <HAL_Delay>
		  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 850);
 80014cc:	4b45      	ldr	r3, [pc, #276]	@ (80015e4 <main+0x23c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f240 3252 	movw	r2, #850	@ 0x352
 80014d4:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_Delay(1500);
 80014d6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80014da:	f000 ff35 	bl	8002348 <HAL_Delay>
 80014de:	e011      	b.n	8001504 <main+0x15c>
	  }
	  else
	  {

		  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 1250);
 80014e0:	4b40      	ldr	r3, [pc, #256]	@ (80015e4 <main+0x23c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80014e8:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_Delay(1000); // 1000ms
 80014ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ee:	f000 ff2b 	bl	8002348 <HAL_Delay>

		  //2ms Pwm - Servo motor arm rotates to 180 degree
		   __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 750);
 80014f2:	4b3c      	ldr	r3, [pc, #240]	@ (80015e4 <main+0x23c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80014fa:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_Delay(1000); // 1000ms
 80014fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001500:	f000 ff22 	bl	8002348 <HAL_Delay>
	  }

	  ground_humid = ((float)soil_moisture_value - 3000) * 100 / (4095 - 3000);
 8001504:	4b41      	ldr	r3, [pc, #260]	@ (800160c <main+0x264>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001510:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001610 <main+0x268>
 8001514:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001518:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001614 <main+0x26c>
 800151c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001520:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001618 <main+0x270>
 8001524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001528:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <main+0x274>)
 800152a:	edc3 7a00 	vstr	s15, [r3]
	  //(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	  //ground_humid = map(soil_moisture_value, 4095, 3000, 0, 100);

	  printf("ground_humid = %f \r\n", ground_humid);
 800152e:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <main+0x274>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f810 	bl	8000558 <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4838      	ldr	r0, [pc, #224]	@ (8001620 <main+0x278>)
 800153e:	f004 fb75 	bl	8005c2c <iprintf>

	  if(ground_humid > 70)
 8001542:	4b36      	ldr	r3, [pc, #216]	@ (800161c <main+0x274>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001624 <main+0x27c>
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	dd0d      	ble.n	8001572 <main+0x1ca>
	  {
		  htim1.Instance->CCR2 = 35000;
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <main+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 800155e:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_Delay(3000);
 8001560:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001564:	f000 fef0 	bl	8002348 <HAL_Delay>
		  htim1.Instance->CCR2 = 0;
 8001568:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <main+0x240>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2200      	movs	r2, #0
 800156e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001570:	e003      	b.n	800157a <main+0x1d2>
	  }
	  else {
		  htim1.Instance->CCR2 = 0;
 8001572:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <main+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	639a      	str	r2, [r3, #56]	@ 0x38
	  }

	  i++;
 800157a:	4b2b      	ldr	r3, [pc, #172]	@ (8001628 <main+0x280>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <main+0x280>)
 8001582:	6013      	str	r3, [r2, #0]
	  printf("%d회 측정!\r\n",i);
 8001584:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <main+0x280>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	4828      	ldr	r0, [pc, #160]	@ (800162c <main+0x284>)
 800158c:	f004 fb4e 	bl	8005c2c <iprintf>
	  printf("----- 온도 : %0.2f'C ----- \r\n", (float)Temperature);
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <main+0x250>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffdf 	bl	8000558 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4824      	ldr	r0, [pc, #144]	@ (8001630 <main+0x288>)
 80015a0:	f004 fb44 	bl	8005c2c <iprintf>
	  printf("----- 습도 : %0.2f%%  ----- \r\n\r\n", (float)Humidity);
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <main+0x254>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffd5 	bl	8000558 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4820      	ldr	r0, [pc, #128]	@ (8001634 <main+0x28c>)
 80015b4:	f004 fb3a 	bl	8005c2c <iprintf>
	  HAL_Delay(3000);
 80015b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015bc:	f000 fec4 	bl	8002348 <HAL_Delay>

	  if(i >= 30)
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <main+0x280>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b1d      	cmp	r3, #29
 80015c6:	f77f af2b 	ble.w	8001420 <main+0x78>
	  {
		  printf("%d회 측정 초과로 횟수 초기화. \r\n", i);
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <main+0x280>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4819      	ldr	r0, [pc, #100]	@ (8001638 <main+0x290>)
 80015d2:	f004 fb2b 	bl	8005c2c <iprintf>
		  i = 0;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <main+0x280>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
  {
 80015dc:	e720      	b.n	8001420 <main+0x78>
 80015de:	bf00      	nop
 80015e0:	20000288 	.word	0x20000288
 80015e4:	200002d0 	.word	0x200002d0
 80015e8:	20000240 	.word	0x20000240
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020000 	.word	0x40020000
 80015f4:	20000394 	.word	0x20000394
 80015f8:	2000039c 	.word	0x2000039c
 80015fc:	200003a0 	.word	0x200003a0
 8001600:	08007bf8 	.word	0x08007bf8
 8001604:	08007c0c 	.word	0x08007c0c
 8001608:	42200000 	.word	0x42200000
 800160c:	20000360 	.word	0x20000360
 8001610:	453b8000 	.word	0x453b8000
 8001614:	42c80000 	.word	0x42c80000
 8001618:	4488e000 	.word	0x4488e000
 800161c:	200003a8 	.word	0x200003a8
 8001620:	08007c1c 	.word	0x08007c1c
 8001624:	428c0000 	.word	0x428c0000
 8001628:	200003a4 	.word	0x200003a4
 800162c:	08007c34 	.word	0x08007c34
 8001630:	08007c44 	.word	0x08007c44
 8001634:	08007c64 	.word	0x08007c64
 8001638:	08007c88 	.word	0x08007c88

0800163c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b094      	sub	sp, #80	@ 0x50
 8001640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 0320 	add.w	r3, r7, #32
 8001646:	2230      	movs	r2, #48	@ 0x30
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f004 fc36 	bl	8005ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <SystemClock_Config+0xc8>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <SystemClock_Config+0xc8>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <SystemClock_Config+0xc8>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <SystemClock_Config+0xcc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a20      	ldr	r2, [pc, #128]	@ (8001708 <SystemClock_Config+0xcc>)
 8001686:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <SystemClock_Config+0xcc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001698:	2302      	movs	r3, #2
 800169a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169c:	2301      	movs	r3, #1
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a0:	2310      	movs	r3, #16
 80016a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a4:	2302      	movs	r3, #2
 80016a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016ac:	2308      	movs	r3, #8
 80016ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016b0:	2348      	movs	r3, #72	@ 0x48
 80016b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b8:	2304      	movs	r3, #4
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 0320 	add.w	r3, r7, #32
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fceb 	bl	800309c <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016cc:	f000 fab4 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d4:	2302      	movs	r3, #2
 80016d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80016dc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	2102      	movs	r1, #2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 ff4d 	bl	800358c <HAL_RCC_ClockConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016f8:	f000 fa9e 	bl	8001c38 <Error_Handler>
  }
}
 80016fc:	bf00      	nop
 80016fe:	3750      	adds	r7, #80	@ 0x50
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40007000 	.word	0x40007000

0800170c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001712:	463b      	mov	r3, r7
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800171e:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 8001720:	4a29      	ldr	r2, [pc, #164]	@ (80017c8 <MX_ADC1_Init+0xbc>)
 8001722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001730:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 8001732:	2201      	movs	r2, #1
 8001734:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 8001738:	2200      	movs	r2, #0
 800173a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001744:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 8001746:	2201      	movs	r2, #1
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800174a:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 800174c:	2200      	movs	r2, #0
 800174e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001750:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 8001752:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <MX_ADC1_Init+0xc0>)
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001756:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 800175e:	2202      	movs	r2, #2
 8001760:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001762:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 800176c:	2201      	movs	r2, #1
 800176e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001770:	4814      	ldr	r0, [pc, #80]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 8001772:	f000 fe0d 	bl	8002390 <HAL_ADC_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800177c:	f000 fa5c 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001784:	2301      	movs	r3, #1
 8001786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	480c      	ldr	r0, [pc, #48]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 8001792:	f000 ff8d 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800179c:	f000 fa4c 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017a0:	2304      	movs	r3, #4
 80017a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_ADC1_Init+0xb8>)
 80017ae:	f000 ff7f 	bl	80026b0 <HAL_ADC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80017b8:	f000 fa3e 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200001f8 	.word	0x200001f8
 80017c8:	40012000 	.word	0x40012000
 80017cc:	0f000001 	.word	0x0f000001

080017d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b096      	sub	sp, #88	@ 0x58
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2220      	movs	r2, #32
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fb57 	bl	8005ebc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800180e:	4b44      	ldr	r3, [pc, #272]	@ (8001920 <MX_TIM1_Init+0x150>)
 8001810:	4a44      	ldr	r2, [pc, #272]	@ (8001924 <MX_TIM1_Init+0x154>)
 8001812:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001814:	4b42      	ldr	r3, [pc, #264]	@ (8001920 <MX_TIM1_Init+0x150>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <MX_TIM1_Init+0x150>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001820:	4b3f      	ldr	r3, [pc, #252]	@ (8001920 <MX_TIM1_Init+0x150>)
 8001822:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001826:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <MX_TIM1_Init+0x150>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800182e:	4b3c      	ldr	r3, [pc, #240]	@ (8001920 <MX_TIM1_Init+0x150>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b3a      	ldr	r3, [pc, #232]	@ (8001920 <MX_TIM1_Init+0x150>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800183a:	4839      	ldr	r0, [pc, #228]	@ (8001920 <MX_TIM1_Init+0x150>)
 800183c:	f002 f8c6 	bl	80039cc <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001846:	f000 f9f7 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001850:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001854:	4619      	mov	r1, r3
 8001856:	4832      	ldr	r0, [pc, #200]	@ (8001920 <MX_TIM1_Init+0x150>)
 8001858:	f002 fc26 	bl	80040a8 <HAL_TIM_ConfigClockSource>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001862:	f000 f9e9 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001866:	482e      	ldr	r0, [pc, #184]	@ (8001920 <MX_TIM1_Init+0x150>)
 8001868:	f002 f962 	bl	8003b30 <HAL_TIM_PWM_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001872:	f000 f9e1 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800187e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001882:	4619      	mov	r1, r3
 8001884:	4826      	ldr	r0, [pc, #152]	@ (8001920 <MX_TIM1_Init+0x150>)
 8001886:	f002 ffd7 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001890:	f000 f9d2 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001894:	2360      	movs	r3, #96	@ 0x60
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b4:	2204      	movs	r2, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4819      	ldr	r0, [pc, #100]	@ (8001920 <MX_TIM1_Init+0x150>)
 80018ba:	f002 fb33 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018c4:	f000 f9b8 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018cc:	2208      	movs	r2, #8
 80018ce:	4619      	mov	r1, r3
 80018d0:	4813      	ldr	r0, [pc, #76]	@ (8001920 <MX_TIM1_Init+0x150>)
 80018d2:	f002 fb27 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80018dc:	f000 f9ac 	bl	8001c38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4807      	ldr	r0, [pc, #28]	@ (8001920 <MX_TIM1_Init+0x150>)
 8001904:	f003 f806 	bl	8004914 <HAL_TIMEx_ConfigBreakDeadTime>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800190e:	f000 f993 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001912:	4803      	ldr	r0, [pc, #12]	@ (8001920 <MX_TIM1_Init+0x150>)
 8001914:	f000 fab6 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 8001918:	bf00      	nop
 800191a:	3758      	adds	r7, #88	@ 0x58
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000240 	.word	0x20000240
 8001924:	40010000 	.word	0x40010000

08001928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	463b      	mov	r3, r7
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001944:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <MX_TIM3_Init+0x94>)
 8001946:	4a1e      	ldr	r2, [pc, #120]	@ (80019c0 <MX_TIM3_Init+0x98>)
 8001948:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_TIM3_Init+0x94>)
 800194c:	224f      	movs	r2, #79	@ 0x4f
 800194e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <MX_TIM3_Init+0x94>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <MX_TIM3_Init+0x94>)
 8001958:	f242 720f 	movw	r2, #9999	@ 0x270f
 800195c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <MX_TIM3_Init+0x94>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <MX_TIM3_Init+0x94>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800196a:	4814      	ldr	r0, [pc, #80]	@ (80019bc <MX_TIM3_Init+0x94>)
 800196c:	f002 f82e 	bl	80039cc <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001976:	f000 f95f 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001980:	f107 0308 	add.w	r3, r7, #8
 8001984:	4619      	mov	r1, r3
 8001986:	480d      	ldr	r0, [pc, #52]	@ (80019bc <MX_TIM3_Init+0x94>)
 8001988:	f002 fb8e 	bl	80040a8 <HAL_TIM_ConfigClockSource>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001992:	f000 f951 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	@ (80019bc <MX_TIM3_Init+0x94>)
 80019a4:	f002 ff48 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019ae:	f000 f943 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000288 	.word	0x20000288
 80019c0:	40000400 	.word	0x40000400

080019c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	@ 0x38
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d8:	f107 0320 	add.w	r3, r7, #32
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	615a      	str	r2, [r3, #20]
 80019f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 80019f6:	4a2d      	ldr	r2, [pc, #180]	@ (8001aac <MX_TIM4_Init+0xe8>)
 80019f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 80019fa:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 80019fc:	2211      	movs	r2, #17
 80019fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a00:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001a06:	4b28      	ldr	r3, [pc, #160]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 8001a08:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a1a:	4823      	ldr	r0, [pc, #140]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 8001a1c:	f001 ffd6 	bl	80039cc <HAL_TIM_Base_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a26:	f000 f907 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a34:	4619      	mov	r1, r3
 8001a36:	481c      	ldr	r0, [pc, #112]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 8001a38:	f002 fb36 	bl	80040a8 <HAL_TIM_ConfigClockSource>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a42:	f000 f8f9 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a46:	4818      	ldr	r0, [pc, #96]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 8001a48:	f002 f872 	bl	8003b30 <HAL_TIM_PWM_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a52:	f000 f8f1 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a5e:	f107 0320 	add.w	r3, r7, #32
 8001a62:	4619      	mov	r1, r3
 8001a64:	4810      	ldr	r0, [pc, #64]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 8001a66:	f002 fee7 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001a70:	f000 f8e2 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a74:	2360      	movs	r3, #96	@ 0x60
 8001a76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4807      	ldr	r0, [pc, #28]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 8001a8c:	f002 fa4a 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001a96:	f000 f8cf 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a9a:	4803      	ldr	r0, [pc, #12]	@ (8001aa8 <MX_TIM4_Init+0xe4>)
 8001a9c:	f000 f9f2 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 8001aa0:	bf00      	nop
 8001aa2:	3738      	adds	r7, #56	@ 0x38
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200002d0 	.word	0x200002d0
 8001aac:	40000800 	.word	0x40000800

08001ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <MX_USART2_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae8:	f002 ff7a 	bl	80049e0 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f000 f8a1 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000318 	.word	0x20000318
 8001b00:	40004400 	.word	0x40004400

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b42      	ldr	r3, [pc, #264]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a41      	ldr	r2, [pc, #260]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b34      	ldr	r3, [pc, #208]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a33      	ldr	r2, [pc, #204]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b31      	ldr	r3, [pc, #196]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a2c      	ldr	r2, [pc, #176]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <MX_GPIO_Init+0x124>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|D7_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001b90:	4826      	ldr	r0, [pc, #152]	@ (8001c2c <MX_GPIO_Init+0x128>)
 8001b92:	f001 fa69 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8001b9c:	4824      	ldr	r0, [pc, #144]	@ (8001c30 <MX_GPIO_Init+0x12c>)
 8001b9e:	f001 fa63 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2180      	movs	r1, #128	@ 0x80
 8001ba6:	4823      	ldr	r0, [pc, #140]	@ (8001c34 <MX_GPIO_Init+0x130>)
 8001ba8:	f001 fa5e 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bb2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	481c      	ldr	r0, [pc, #112]	@ (8001c34 <MX_GPIO_Init+0x130>)
 8001bc4:	f001 f8b4 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin D7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|D7_Pin;
 8001bc8:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <MX_GPIO_Init+0x128>)
 8001be2:	f001 f8a5 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8001be6:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8001bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480c      	ldr	r0, [pc, #48]	@ (8001c30 <MX_GPIO_Init+0x12c>)
 8001c00:	f001 f896 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4806      	ldr	r0, [pc, #24]	@ (8001c34 <MX_GPIO_Init+0x130>)
 8001c1c:	f001 f888 	bl	8002d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	@ 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020800 	.word	0x40020800

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <Error_Handler+0x8>

08001c44 <__io_putchar>:
extern ADC_HandleTypeDef hadc1;
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim3;

int __io_putchar(int ch)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8001c4c:	1d39      	adds	r1, r7, #4
 8001c4e:	230a      	movs	r3, #10
 8001c50:	2201      	movs	r2, #1
 8001c52:	4804      	ldr	r0, [pc, #16]	@ (8001c64 <__io_putchar+0x20>)
 8001c54:	f002 ff14 	bl	8004a80 <HAL_UART_Transmit>
   return ch;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000318 	.word	0x20000318

08001c68 <ProgramStart>:
{

   while(*s) (*s != '\r') ? __io_putchar(*s++) : (__io_putchar(*s++), __io_putchar('\n'));         //enable Enter key
}

void ProgramStart(){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
   printf("\033[2J");   // screen clear
 8001c6c:	4808      	ldr	r0, [pc, #32]	@ (8001c90 <ProgramStart+0x28>)
 8001c6e:	f003 ffdd 	bl	8005c2c <iprintf>
   printf("\033[1;1H");   // Move cursor pos to (1,1)
 8001c72:	4808      	ldr	r0, [pc, #32]	@ (8001c94 <ProgramStart+0x2c>)
 8001c74:	f003 ffda 	bl	8005c2c <iprintf>
   printf("Program Started ");
 8001c78:	4807      	ldr	r0, [pc, #28]	@ (8001c98 <ProgramStart+0x30>)
 8001c7a:	f003 ffd7 	bl	8005c2c <iprintf>
   Wait(1);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f000 f80c 	bl	8001c9c <Wait>
   printf("\033[2J");   // screen clear
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <ProgramStart+0x28>)
 8001c86:	f003 ffd1 	bl	8005c2c <iprintf>
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	08007cb4 	.word	0x08007cb4
 8001c94:	08007cbc 	.word	0x08007cbc
 8001c98:	08007cc4 	.word	0x08007cc4

08001c9c <Wait>:

void Wait(int o)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	   printf("Press Blue button to continue\r\n");
 8001ca4:	4808      	ldr	r0, [pc, #32]	@ (8001cc8 <Wait+0x2c>)
 8001ca6:	f004 f829 	bl	8005cfc <puts>
	   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 8001caa:	bf00      	nop
 8001cac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cb0:	4806      	ldr	r0, [pc, #24]	@ (8001ccc <Wait+0x30>)
 8001cb2:	f001 f9c1 	bl	8003038 <HAL_GPIO_ReadPin>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f7      	bne.n	8001cac <Wait+0x10>

}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08007cd8 	.word	0x08007cd8
 8001ccc:	40020800 	.word	0x40020800

08001cd0 <GetAdcValue>:

    return 1; // 데이터 읽기 성공
}
*/
int GetAdcValue()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
   HAL_ADC_Start(&hadc1);
 8001cd4:	4806      	ldr	r0, [pc, #24]	@ (8001cf0 <GetAdcValue+0x20>)
 8001cd6:	f000 fb9f 	bl	8002418 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc1, 10);
 8001cda:	210a      	movs	r1, #10
 8001cdc:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <GetAdcValue+0x20>)
 8001cde:	f000 fc4f 	bl	8002580 <HAL_ADC_PollForConversion>
   return HAL_ADC_GetValue(&hadc1);
 8001ce2:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <GetAdcValue+0x20>)
 8001ce4:	f000 fcd7 	bl	8002696 <HAL_ADC_GetValue>
 8001ce8:	4603      	mov	r3, r0

}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200001f8 	.word	0x200001f8

08001cf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a0f      	ldr	r2, [pc, #60]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	4a08      	ldr	r2, [pc, #32]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d32:	2007      	movs	r0, #7
 8001d34:	f000 ffba 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	@ 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a17      	ldr	r2, [pc, #92]	@ (8001dc0 <HAL_ADC_MspInit+0x7c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d127      	bne.n	8001db6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <HAL_ADC_MspInit+0x80>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	4a15      	ldr	r2, [pc, #84]	@ (8001dc4 <HAL_ADC_MspInit+0x80>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d76:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <HAL_ADC_MspInit+0x80>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <HAL_ADC_MspInit+0x80>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc4 <HAL_ADC_MspInit+0x80>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <HAL_ADC_MspInit+0x80>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001d9e:	2311      	movs	r3, #17
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da2:	2303      	movs	r3, #3
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <HAL_ADC_MspInit+0x84>)
 8001db2:	f000 ffbd 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	@ 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40012000 	.word	0x40012000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000

08001dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a26      	ldr	r2, [pc, #152]	@ (8001e74 <HAL_TIM_Base_MspInit+0xa8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	4b25      	ldr	r3, [pc, #148]	@ (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	4a24      	ldr	r2, [pc, #144]	@ (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	4b22      	ldr	r3, [pc, #136]	@ (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dfa:	e036      	b.n	8001e6a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1e      	ldr	r2, [pc, #120]	@ (8001e7c <HAL_TIM_Base_MspInit+0xb0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d116      	bne.n	8001e34 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	201d      	movs	r0, #29
 8001e28:	f000 ff4b 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e2c:	201d      	movs	r0, #29
 8001e2e:	f000 ff64 	bl	8002cfa <HAL_NVIC_EnableIRQ>
}
 8001e32:	e01a      	b.n	8001e6a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <HAL_TIM_Base_MspInit+0xb4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d115      	bne.n	8001e6a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a0c      	ldr	r2, [pc, #48]	@ (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	201e      	movs	r0, #30
 8001e60:	f000 ff2f 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e64:	201e      	movs	r0, #30
 8001e66:	f000 ff48 	bl	8002cfa <HAL_NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800

08001e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	@ 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a24      	ldr	r2, [pc, #144]	@ (8001f34 <HAL_TIM_MspPostInit+0xb0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d11f      	bne.n	8001ee6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a22      	ldr	r2, [pc, #136]	@ (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ec2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	4817      	ldr	r0, [pc, #92]	@ (8001f3c <HAL_TIM_MspPostInit+0xb8>)
 8001ee0:	f000 ff26 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ee4:	e022      	b.n	8001f2c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a15      	ldr	r2, [pc, #84]	@ (8001f40 <HAL_TIM_MspPostInit+0xbc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d11d      	bne.n	8001f2c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f00:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f0c:	2340      	movs	r3, #64	@ 0x40
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4807      	ldr	r0, [pc, #28]	@ (8001f44 <HAL_TIM_MspPostInit+0xc0>)
 8001f28:	f000 ff02 	bl	8002d30 <HAL_GPIO_Init>
}
 8001f2c:	bf00      	nop
 8001f2e:	3728      	adds	r7, #40	@ 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40000800 	.word	0x40000800
 8001f44:	40020400 	.word	0x40020400

08001f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a19      	ldr	r2, [pc, #100]	@ (8001fcc <HAL_UART_MspInit+0x84>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d12b      	bne.n	8001fc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <HAL_UART_MspInit+0x88>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	4a17      	ldr	r2, [pc, #92]	@ (8001fd0 <HAL_UART_MspInit+0x88>)
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <HAL_UART_MspInit+0x88>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <HAL_UART_MspInit+0x88>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a10      	ldr	r2, [pc, #64]	@ (8001fd0 <HAL_UART_MspInit+0x88>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <HAL_UART_MspInit+0x88>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fb2:	2307      	movs	r3, #7
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	@ (8001fd4 <HAL_UART_MspInit+0x8c>)
 8001fbe:	f000 feb7 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	@ 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40004400 	.word	0x40004400
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <NMI_Handler+0x4>

08001fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <HardFault_Handler+0x4>

08001fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <MemManage_Handler+0x4>

08001ff0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <UsageFault_Handler+0x4>

08002000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202e:	f000 f96b 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <TIM3_IRQHandler+0x10>)
 800203e:	f001 fe81 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000288 	.word	0x20000288

0800204c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <TIM4_IRQHandler+0x10>)
 8002052:	f001 fe77 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200002d0 	.word	0x200002d0

08002060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return 1;
 8002064:	2301      	movs	r3, #1
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_kill>:

int _kill(int pid, int sig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800207a:	f003 ff71 	bl	8005f60 <__errno>
 800207e:	4603      	mov	r3, r0
 8002080:	2216      	movs	r2, #22
 8002082:	601a      	str	r2, [r3, #0]
  return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_exit>:

void _exit (int status)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ffe7 	bl	8002070 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020a2:	bf00      	nop
 80020a4:	e7fd      	b.n	80020a2 <_exit+0x12>

080020a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e00a      	b.n	80020ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b8:	f3af 8000 	nop.w
 80020bc:	4601      	mov	r1, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	60ba      	str	r2, [r7, #8]
 80020c4:	b2ca      	uxtb	r2, r1
 80020c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbf0      	blt.n	80020b8 <_read+0x12>
  }

  return len;
 80020d6:	687b      	ldr	r3, [r7, #4]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e009      	b.n	8002106 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fda2 	bl	8001c44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	dbf1      	blt.n	80020f2 <_write+0x12>
  }
  return len;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_close>:

int _close(int file)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002140:	605a      	str	r2, [r3, #4]
  return 0;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_isatty>:

int _isatty(int file)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002188:	4a14      	ldr	r2, [pc, #80]	@ (80021dc <_sbrk+0x5c>)
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <_sbrk+0x60>)
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002194:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <_sbrk+0x64>)
 800219e:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <_sbrk+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d207      	bcs.n	80021c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b0:	f003 fed6 	bl	8005f60 <__errno>
 80021b4:	4603      	mov	r3, r0
 80021b6:	220c      	movs	r2, #12
 80021b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	e009      	b.n	80021d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c6:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <_sbrk+0x64>)
 80021d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20020000 	.word	0x20020000
 80021e0:	00000400 	.word	0x00000400
 80021e4:	200003ac 	.word	0x200003ac
 80021e8:	20000500 	.word	0x20000500

080021ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <SystemInit+0x20>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f6:	4a05      	ldr	r2, [pc, #20]	@ (800220c <SystemInit+0x20>)
 80021f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002210:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002248 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002214:	f7ff ffea 	bl	80021ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002218:	480c      	ldr	r0, [pc, #48]	@ (800224c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800221a:	490d      	ldr	r1, [pc, #52]	@ (8002250 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002230:	4c0a      	ldr	r4, [pc, #40]	@ (800225c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800223e:	f003 fe95 	bl	8005f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002242:	f7ff f8b1 	bl	80013a8 <main>
  bx  lr    
 8002246:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002248:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002254:	08008090 	.word	0x08008090
  ldr r2, =_sbss
 8002258:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800225c:	20000500 	.word	0x20000500

08002260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC_IRQHandler>
	...

08002264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002268:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <HAL_Init+0x40>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0d      	ldr	r2, [pc, #52]	@ (80022a4 <HAL_Init+0x40>)
 800226e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_Init+0x40>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <HAL_Init+0x40>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800227e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a07      	ldr	r2, [pc, #28]	@ (80022a4 <HAL_Init+0x40>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228c:	2003      	movs	r0, #3
 800228e:	f000 fd0d 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002292:	2000      	movs	r0, #0
 8002294:	f000 f808 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002298:	f7ff fd2c 	bl	8001cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_InitTick+0x54>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_InitTick+0x58>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fd25 	bl	8002d16 <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f000 fced 	bl	8002cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	@ (8002304 <HAL_InitTick+0x5c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000008 	.word	0x20000008
 8002304:	20000004 	.word	0x20000004

08002308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	@ (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000008 	.word	0x20000008
 800232c:	200003b0 	.word	0x200003b0

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	200003b0 	.word	0x200003b0

08002348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff ffee 	bl	8002330 <HAL_GetTick>
 8002354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d005      	beq.n	800236e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002362:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <HAL_Delay+0x44>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800236e:	bf00      	nop
 8002370:	f7ff ffde 	bl	8002330 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	429a      	cmp	r2, r3
 800237e:	d8f7      	bhi.n	8002370 <HAL_Delay+0x28>
  {
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000008 	.word	0x20000008

08002390 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e033      	b.n	800240e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fcc8 	bl	8001d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023d6:	f023 0302 	bic.w	r3, r3, #2
 80023da:	f043 0202 	orr.w	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fa96 	bl	8002914 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f023 0303 	bic.w	r3, r3, #3
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80023fe:	e001      	b.n	8002404 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Start+0x1a>
 800242e:	2302      	movs	r3, #2
 8002430:	e097      	b.n	8002562 <HAL_ADC_Start+0x14a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d018      	beq.n	800247a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002458:	4b45      	ldr	r3, [pc, #276]	@ (8002570 <HAL_ADC_Start+0x158>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a45      	ldr	r2, [pc, #276]	@ (8002574 <HAL_ADC_Start+0x15c>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	0c9a      	lsrs	r2, r3, #18
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800246c:	e002      	b.n	8002474 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3b01      	subs	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f9      	bne.n	800246e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d15f      	bne.n	8002548 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c6:	d106      	bne.n	80024d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024cc:	f023 0206 	bic.w	r2, r3, #6
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80024d4:	e002      	b.n	80024dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e4:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <HAL_ADC_Start+0x160>)
 80024e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024f0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d129      	bne.n	8002560 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	e020      	b.n	8002560 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a16      	ldr	r2, [pc, #88]	@ (800257c <HAL_ADC_Start+0x164>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d11b      	bne.n	8002560 <HAL_ADC_Start+0x148>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d114      	bne.n	8002560 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	e00b      	b.n	8002560 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	f043 0210 	orr.w	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000000 	.word	0x20000000
 8002574:	431bde83 	.word	0x431bde83
 8002578:	40012300 	.word	0x40012300
 800257c:	40012000 	.word	0x40012000

08002580 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800259c:	d113      	bne.n	80025c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025ac:	d10b      	bne.n	80025c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f043 0220 	orr.w	r2, r3, #32
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e063      	b.n	800268e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c6:	f7ff feb3 	bl	8002330 <HAL_GetTick>
 80025ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025cc:	e021      	b.n	8002612 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d01d      	beq.n	8002612 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_ADC_PollForConversion+0x6c>
 80025dc:	f7ff fea8 	bl	8002330 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d212      	bcs.n	8002612 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d00b      	beq.n	8002612 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	f043 0204 	orr.w	r2, r3, #4
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e03d      	b.n	800268e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b02      	cmp	r3, #2
 800261e:	d1d6      	bne.n	80025ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0212 	mvn.w	r2, #18
 8002628:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d123      	bne.n	800268c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11f      	bne.n	800268c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002652:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002664:	2b00      	cmp	r3, #0
 8002666:	d111      	bne.n	800268c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1c>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e113      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x244>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b09      	cmp	r3, #9
 80026da:	d925      	bls.n	8002728 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68d9      	ldr	r1, [r3, #12]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	2207      	movs	r2, #7
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68d9      	ldr	r1, [r3, #12]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	4618      	mov	r0, r3
 8002714:	4603      	mov	r3, r0
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4403      	add	r3, r0
 800271a:	3b1e      	subs	r3, #30
 800271c:	409a      	lsls	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	e022      	b.n	800276e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6919      	ldr	r1, [r3, #16]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	2207      	movs	r2, #7
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	400a      	ands	r2, r1
 800274a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6919      	ldr	r1, [r3, #16]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	4603      	mov	r3, r0
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4403      	add	r3, r0
 8002764:	409a      	lsls	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d824      	bhi.n	80027c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b05      	subs	r3, #5
 8002788:	221f      	movs	r2, #31
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	400a      	ands	r2, r1
 8002796:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b05      	subs	r3, #5
 80027b2:	fa00 f203 	lsl.w	r2, r0, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80027be:	e04c      	b.n	800285a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d824      	bhi.n	8002812 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b23      	subs	r3, #35	@ 0x23
 80027da:	221f      	movs	r2, #31
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	400a      	ands	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b23      	subs	r3, #35	@ 0x23
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002810:	e023      	b.n	800285a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b41      	subs	r3, #65	@ 0x41
 8002824:	221f      	movs	r2, #31
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	400a      	ands	r2, r1
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b41      	subs	r3, #65	@ 0x41
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800285a:	4b29      	ldr	r3, [pc, #164]	@ (8002900 <HAL_ADC_ConfigChannel+0x250>)
 800285c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a28      	ldr	r2, [pc, #160]	@ (8002904 <HAL_ADC_ConfigChannel+0x254>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d10f      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1d8>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b12      	cmp	r3, #18
 800286e:	d10b      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <HAL_ADC_ConfigChannel+0x254>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d12b      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x23a>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1c      	ldr	r2, [pc, #112]	@ (8002908 <HAL_ADC_ConfigChannel+0x258>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d003      	beq.n	80028a4 <HAL_ADC_ConfigChannel+0x1f4>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b11      	cmp	r3, #17
 80028a2:	d122      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <HAL_ADC_ConfigChannel+0x258>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d111      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028c6:	4b11      	ldr	r3, [pc, #68]	@ (800290c <HAL_ADC_ConfigChannel+0x25c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a11      	ldr	r2, [pc, #68]	@ (8002910 <HAL_ADC_ConfigChannel+0x260>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	0c9a      	lsrs	r2, r3, #18
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028dc:	e002      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f9      	bne.n	80028de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40012300 	.word	0x40012300
 8002904:	40012000 	.word	0x40012000
 8002908:	10000012 	.word	0x10000012
 800290c:	20000000 	.word	0x20000000
 8002910:	431bde83 	.word	0x431bde83

08002914 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800291c:	4b79      	ldr	r3, [pc, #484]	@ (8002b04 <ADC_Init+0x1f0>)
 800291e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	021a      	lsls	r2, r3, #8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800296c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800298e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6899      	ldr	r1, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a6:	4a58      	ldr	r2, [pc, #352]	@ (8002b08 <ADC_Init+0x1f4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6899      	ldr	r1, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	e00f      	b.n	8002a12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a10:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0202 	bic.w	r2, r2, #2
 8002a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6899      	ldr	r1, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7e1b      	ldrb	r3, [r3, #24]
 8002a2c:	005a      	lsls	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01b      	beq.n	8002a78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	035a      	lsls	r2, r3, #13
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	e007      	b.n	8002a88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	051a      	lsls	r2, r3, #20
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aca:	025a      	lsls	r2, r3, #9
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6899      	ldr	r1, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	029a      	lsls	r2, r3, #10
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40012300 	.word	0x40012300
 8002b08:	0f000001 	.word	0x0f000001

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	@ (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	@ (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	@ (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	@ (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	@ 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	@ 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff29 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff3e 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ff8e 	bl	8002c00 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff5d 	bl	8002bac <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff31 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffa2 	bl	8002c68 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	@ 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e159      	b.n	8003000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 8148 	bne.w	8002ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d130      	bne.n	8002de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db8:	2201      	movs	r2, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0201 	and.w	r2, r3, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d017      	beq.n	8002e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d123      	bne.n	8002e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a2 	beq.w	8002ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b57      	ldr	r3, [pc, #348]	@ (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	4a56      	ldr	r2, [pc, #344]	@ (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec6:	4b54      	ldr	r3, [pc, #336]	@ (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed2:	4a52      	ldr	r2, [pc, #328]	@ (800301c <HAL_GPIO_Init+0x2ec>)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a49      	ldr	r2, [pc, #292]	@ (8003020 <HAL_GPIO_Init+0x2f0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_Init+0x202>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a48      	ldr	r2, [pc, #288]	@ (8003024 <HAL_GPIO_Init+0x2f4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x1fe>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a47      	ldr	r2, [pc, #284]	@ (8003028 <HAL_GPIO_Init+0x2f8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x1fa>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a46      	ldr	r2, [pc, #280]	@ (800302c <HAL_GPIO_Init+0x2fc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x1f6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a45      	ldr	r2, [pc, #276]	@ (8003030 <HAL_GPIO_Init+0x300>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x1f2>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f22:	2307      	movs	r3, #7
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f32:	2300      	movs	r3, #0
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f44:	4935      	ldr	r1, [pc, #212]	@ (800301c <HAL_GPIO_Init+0x2ec>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f52:	4b38      	ldr	r3, [pc, #224]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f76:	4a2f      	ldr	r2, [pc, #188]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa0:	4a24      	ldr	r2, [pc, #144]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa6:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fca:	4a1a      	ldr	r2, [pc, #104]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f aea2 	bls.w	8002d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40013800 	.word	0x40013800
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400
 8003028:	40020800 	.word	0x40020800
 800302c:	40020c00 	.word	0x40020c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40013c00 	.word	0x40013c00

08003038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	e001      	b.n	800305a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
 8003074:	4613      	mov	r3, r2
 8003076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003078:	787b      	ldrb	r3, [r7, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003084:	e003      	b.n	800308e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	041a      	lsls	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e267      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d075      	beq.n	80031a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	4b88      	ldr	r3, [pc, #544]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d00c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4b85      	ldr	r3, [pc, #532]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d112      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d2:	4b82      	ldr	r3, [pc, #520]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030de:	d10b      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	4b7e      	ldr	r3, [pc, #504]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d05b      	beq.n	80031a4 <HAL_RCC_OscConfig+0x108>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d157      	bne.n	80031a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e242      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003100:	d106      	bne.n	8003110 <HAL_RCC_OscConfig+0x74>
 8003102:	4b76      	ldr	r3, [pc, #472]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e01d      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b70      	ldr	r3, [pc, #448]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6f      	ldr	r2, [pc, #444]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b6d      	ldr	r3, [pc, #436]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6c      	ldr	r2, [pc, #432]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003134:	4b69      	ldr	r3, [pc, #420]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a68      	ldr	r2, [pc, #416]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b66      	ldr	r3, [pc, #408]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800314a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7ff f8ec 	bl	8002330 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800315c:	f7ff f8e8 	bl	8002330 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	@ 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e207      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b5b      	ldr	r3, [pc, #364]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xc0>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7ff f8d8 	bl	8002330 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7ff f8d4 	bl	8002330 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1f3      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	4b51      	ldr	r3, [pc, #324]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0xe8>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	4b4a      	ldr	r3, [pc, #296]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b47      	ldr	r3, [pc, #284]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11c      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ca:	4b44      	ldr	r3, [pc, #272]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	4b41      	ldr	r3, [pc, #260]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1c7      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b3b      	ldr	r3, [pc, #236]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4937      	ldr	r1, [pc, #220]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	e03a      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b34      	ldr	r3, [pc, #208]	@ (80032e0 <HAL_RCC_OscConfig+0x244>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7ff f88d 	bl	8002330 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321a:	f7ff f889 	bl	8002330 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e1a8      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	4b2b      	ldr	r3, [pc, #172]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4925      	ldr	r1, [pc, #148]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e015      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_RCC_OscConfig+0x244>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7ff f86c 	bl	8002330 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325c:	f7ff f868 	bl	8002330 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e187      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	4b1b      	ldr	r3, [pc, #108]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d036      	beq.n	80032f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328e:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <HAL_RCC_OscConfig+0x248>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7ff f84c 	bl	8002330 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7ff f848 	bl	8002330 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e167      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x200>
 80032ba:	e01b      	b.n	80032f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032bc:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <HAL_RCC_OscConfig+0x248>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7ff f835 	bl	8002330 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	e00e      	b.n	80032e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ca:	f7ff f831 	bl	8002330 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d907      	bls.n	80032e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e150      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	42470000 	.word	0x42470000
 80032e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b88      	ldr	r3, [pc, #544]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ea      	bne.n	80032ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8097 	beq.w	8003430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003306:	4b81      	ldr	r3, [pc, #516]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b7d      	ldr	r3, [pc, #500]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	4a7c      	ldr	r2, [pc, #496]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	@ 0x40
 8003322:	4b7a      	ldr	r3, [pc, #488]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b77      	ldr	r3, [pc, #476]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b74      	ldr	r3, [pc, #464]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a73      	ldr	r2, [pc, #460]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fe fff1 	bl	8002330 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fe ffed 	bl	8002330 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e10c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b6a      	ldr	r3, [pc, #424]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x2ea>
 8003378:	4b64      	ldr	r3, [pc, #400]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337c:	4a63      	ldr	r2, [pc, #396]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	@ 0x70
 8003384:	e01c      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x30c>
 800338e:	4b5f      	ldr	r3, [pc, #380]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	4a5e      	ldr	r2, [pc, #376]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6713      	str	r3, [r2, #112]	@ 0x70
 800339a:	4b5c      	ldr	r3, [pc, #368]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339e:	4a5b      	ldr	r2, [pc, #364]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 80033a8:	4b58      	ldr	r3, [pc, #352]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ac:	4a57      	ldr	r2, [pc, #348]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b4:	4b55      	ldr	r3, [pc, #340]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	4a54      	ldr	r2, [pc, #336]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe ffb2 	bl	8002330 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7fe ffae 	bl	8002330 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0cb      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	4b49      	ldr	r3, [pc, #292]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ee      	beq.n	80033d0 <HAL_RCC_OscConfig+0x334>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7fe ff9c 	bl	8002330 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7fe ff98 	bl	8002330 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0b5      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	4b3e      	ldr	r3, [pc, #248]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ee      	bne.n	80033fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b39      	ldr	r3, [pc, #228]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	4a38      	ldr	r2, [pc, #224]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800342e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a1 	beq.w	800357c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343a:	4b34      	ldr	r3, [pc, #208]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b08      	cmp	r3, #8
 8003444:	d05c      	beq.n	8003500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d141      	bne.n	80034d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b31      	ldr	r3, [pc, #196]	@ (8003514 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe ff6c 	bl	8002330 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe ff68 	bl	8002330 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e087      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b27      	ldr	r3, [pc, #156]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	019b      	lsls	r3, r3, #6
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	491b      	ldr	r1, [pc, #108]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003514 <HAL_RCC_OscConfig+0x478>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fe ff41 	bl	8002330 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fe ff3d 	bl	8002330 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e05c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	4b11      	ldr	r3, [pc, #68]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x416>
 80034d0:	e054      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <HAL_RCC_OscConfig+0x478>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe ff2a 	bl	8002330 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fe ff26 	bl	8002330 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e045      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x444>
 80034fe:	e03d      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e038      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003518:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <HAL_RCC_OscConfig+0x4ec>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d028      	beq.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d121      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d11a      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800354e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	4293      	cmp	r3, r2
 8003552:	d111      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0cc      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b68      	ldr	r3, [pc, #416]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d90c      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b65      	ldr	r3, [pc, #404]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a58      	ldr	r2, [pc, #352]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a52      	ldr	r2, [pc, #328]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d044      	beq.n	80036ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d119      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d003      	beq.n	800364a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003646:	2b03      	cmp	r3, #3
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364a:	4b3f      	ldr	r3, [pc, #252]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	4b3b      	ldr	r3, [pc, #236]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e067      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b37      	ldr	r3, [pc, #220]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4934      	ldr	r1, [pc, #208]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800367c:	f7fe fe58 	bl	8002330 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fe fe54 	bl	8002330 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e04f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b2b      	ldr	r3, [pc, #172]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d20c      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b22      	ldr	r3, [pc, #136]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe fdb8 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023c00 	.word	0x40023c00
 8003748:	40023800 	.word	0x40023800
 800374c:	08007cf8 	.word	0x08007cf8
 8003750:	20000000 	.word	0x20000000
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800375c:	b094      	sub	sp, #80	@ 0x50
 800375e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	647b      	str	r3, [r7, #68]	@ 0x44
 8003764:	2300      	movs	r3, #0
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003768:	2300      	movs	r3, #0
 800376a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003770:	4b79      	ldr	r3, [pc, #484]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d00d      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x40>
 800377c:	2b08      	cmp	r3, #8
 800377e:	f200 80e1 	bhi.w	8003944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x34>
 8003786:	2b04      	cmp	r3, #4
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x3a>
 800378a:	e0db      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b73      	ldr	r3, [pc, #460]	@ (800395c <HAL_RCC_GetSysClockFreq+0x204>)
 800378e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003790:	e0db      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003792:	4b73      	ldr	r3, [pc, #460]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x208>)
 8003794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003796:	e0d8      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003798:	4b6f      	ldr	r3, [pc, #444]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d063      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037c2:	2300      	movs	r3, #0
 80037c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	0159      	lsls	r1, r3, #5
 80037d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037dc:	0150      	lsls	r0, r2, #5
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4621      	mov	r1, r4
 80037e4:	1a51      	subs	r1, r2, r1
 80037e6:	6139      	str	r1, [r7, #16]
 80037e8:	4629      	mov	r1, r5
 80037ea:	eb63 0301 	sbc.w	r3, r3, r1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037fc:	4659      	mov	r1, fp
 80037fe:	018b      	lsls	r3, r1, #6
 8003800:	4651      	mov	r1, sl
 8003802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003806:	4651      	mov	r1, sl
 8003808:	018a      	lsls	r2, r1, #6
 800380a:	4651      	mov	r1, sl
 800380c:	ebb2 0801 	subs.w	r8, r2, r1
 8003810:	4659      	mov	r1, fp
 8003812:	eb63 0901 	sbc.w	r9, r3, r1
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800382a:	4690      	mov	r8, r2
 800382c:	4699      	mov	r9, r3
 800382e:	4623      	mov	r3, r4
 8003830:	eb18 0303 	adds.w	r3, r8, r3
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	462b      	mov	r3, r5
 8003838:	eb49 0303 	adc.w	r3, r9, r3
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800384a:	4629      	mov	r1, r5
 800384c:	024b      	lsls	r3, r1, #9
 800384e:	4621      	mov	r1, r4
 8003850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003854:	4621      	mov	r1, r4
 8003856:	024a      	lsls	r2, r1, #9
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800385e:	2200      	movs	r2, #0
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003868:	f7fd f9f6 	bl	8000c58 <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4613      	mov	r3, r2
 8003872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003874:	e058      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003876:	4b38      	ldr	r3, [pc, #224]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	2200      	movs	r2, #0
 800387e:	4618      	mov	r0, r3
 8003880:	4611      	mov	r1, r2
 8003882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	2300      	movs	r3, #0
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
 800388c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	f04f 0000 	mov.w	r0, #0
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	0159      	lsls	r1, r3, #5
 800389e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a2:	0150      	lsls	r0, r2, #5
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4641      	mov	r1, r8
 80038aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ae:	4649      	mov	r1, r9
 80038b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038c8:	ebb2 040a 	subs.w	r4, r2, sl
 80038cc:	eb63 050b 	sbc.w	r5, r3, fp
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	00eb      	lsls	r3, r5, #3
 80038da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038de:	00e2      	lsls	r2, r4, #3
 80038e0:	4614      	mov	r4, r2
 80038e2:	461d      	mov	r5, r3
 80038e4:	4643      	mov	r3, r8
 80038e6:	18e3      	adds	r3, r4, r3
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	464b      	mov	r3, r9
 80038ec:	eb45 0303 	adc.w	r3, r5, r3
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038fe:	4629      	mov	r1, r5
 8003900:	028b      	lsls	r3, r1, #10
 8003902:	4621      	mov	r1, r4
 8003904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003908:	4621      	mov	r1, r4
 800390a:	028a      	lsls	r2, r1, #10
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003912:	2200      	movs	r2, #0
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	61fa      	str	r2, [r7, #28]
 8003918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800391c:	f7fd f99c 	bl	8000c58 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4613      	mov	r3, r2
 8003926:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	3301      	adds	r3, #1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800393a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003942:	e002      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCC_GetSysClockFreq+0x204>)
 8003946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800394a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800394c:	4618      	mov	r0, r3
 800394e:	3750      	adds	r7, #80	@ 0x50
 8003950:	46bd      	mov	sp, r7
 8003952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200

08003964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000000 	.word	0x20000000

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003980:	f7ff fff0 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0a9b      	lsrs	r3, r3, #10
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	@ (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	08007d08 	.word	0x08007d08

080039a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a8:	f7ff ffdc 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0b5b      	lsrs	r3, r3, #13
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	@ (80039c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	08007d08 	.word	0x08007d08

080039cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e041      	b.n	8003a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fe f9ea 	bl	8001dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f000 fc3c 	bl	8004288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d001      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e044      	b.n	8003b0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b1c <HAL_TIM_Base_Start_IT+0xb0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d018      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aae:	d013      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b20 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00e      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a19      	ldr	r2, [pc, #100]	@ (8003b24 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d009      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a17      	ldr	r2, [pc, #92]	@ (8003b28 <HAL_TIM_Base_Start_IT+0xbc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	@ (8003b2c <HAL_TIM_Base_Start_IT+0xc0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d111      	bne.n	8003afc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d010      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afa:	e007      	b.n	8003b0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40014000 	.word	0x40014000

08003b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e041      	b.n	8003bc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f839 	bl	8003bce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f000 fb8a 	bl	8004288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d109      	bne.n	8003c08 <HAL_TIM_PWM_Start+0x24>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e022      	b.n	8003c4e <HAL_TIM_PWM_Start+0x6a>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d109      	bne.n	8003c22 <HAL_TIM_PWM_Start+0x3e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	bf14      	ite	ne
 8003c1a:	2301      	movne	r3, #1
 8003c1c:	2300      	moveq	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	e015      	b.n	8003c4e <HAL_TIM_PWM_Start+0x6a>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d109      	bne.n	8003c3c <HAL_TIM_PWM_Start+0x58>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e008      	b.n	8003c4e <HAL_TIM_PWM_Start+0x6a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	bf14      	ite	ne
 8003c48:	2301      	movne	r3, #1
 8003c4a:	2300      	moveq	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e068      	b.n	8003d28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <HAL_TIM_PWM_Start+0x82>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c64:	e013      	b.n	8003c8e <HAL_TIM_PWM_Start+0xaa>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d104      	bne.n	8003c76 <HAL_TIM_PWM_Start+0x92>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c74:	e00b      	b.n	8003c8e <HAL_TIM_PWM_Start+0xaa>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d104      	bne.n	8003c86 <HAL_TIM_PWM_Start+0xa2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c84:	e003      	b.n	8003c8e <HAL_TIM_PWM_Start+0xaa>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2201      	movs	r2, #1
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fda8 	bl	80047ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a23      	ldr	r2, [pc, #140]	@ (8003d30 <HAL_TIM_PWM_Start+0x14c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d107      	bne.n	8003cb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <HAL_TIM_PWM_Start+0x14c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0x10e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc8:	d013      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0x10e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a19      	ldr	r2, [pc, #100]	@ (8003d34 <HAL_TIM_PWM_Start+0x150>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0x10e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <HAL_TIM_PWM_Start+0x154>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0x10e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <HAL_TIM_PWM_Start+0x158>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0x10e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a14      	ldr	r2, [pc, #80]	@ (8003d40 <HAL_TIM_PWM_Start+0x15c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d111      	bne.n	8003d16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b06      	cmp	r3, #6
 8003d02:	d010      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	e007      	b.n	8003d26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40014000 	.word	0x40014000

08003d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d020      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01b      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0202 	mvn.w	r2, #2
 8003d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fa5b 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003d94:	e005      	b.n	8003da2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fa4d 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fa5e 	bl	800425e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d020      	beq.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01b      	beq.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0204 	mvn.w	r2, #4
 8003dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fa35 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003de0:	e005      	b.n	8003dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fa27 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fa38 	bl	800425e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d020      	beq.n	8003e40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01b      	beq.n	8003e40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0208 	mvn.w	r2, #8
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2204      	movs	r2, #4
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa0f 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa01 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa12 	bl	800425e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d020      	beq.n	8003e8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01b      	beq.n	8003e8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0210 	mvn.w	r2, #16
 8003e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2208      	movs	r2, #8
 8003e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f9e9 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8003e78:	e005      	b.n	8003e86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9db 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f9ec 	bl	800425e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00c      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0201 	mvn.w	r2, #1
 8003ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd fa34 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00c      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d007      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fd7c 	bl	80049cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9bd 	bl	8004272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0220 	mvn.w	r2, #32
 8003f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fd4e 	bl	80049b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e0ae      	b.n	80040a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b0c      	cmp	r3, #12
 8003f4e:	f200 809f 	bhi.w	8004090 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f52:	a201      	add	r2, pc, #4	@ (adr r2, 8003f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08004091 	.word	0x08004091
 8003f60:	08004091 	.word	0x08004091
 8003f64:	08004091 	.word	0x08004091
 8003f68:	08003fcd 	.word	0x08003fcd
 8003f6c:	08004091 	.word	0x08004091
 8003f70:	08004091 	.word	0x08004091
 8003f74:	08004091 	.word	0x08004091
 8003f78:	0800400f 	.word	0x0800400f
 8003f7c:	08004091 	.word	0x08004091
 8003f80:	08004091 	.word	0x08004091
 8003f84:	08004091 	.word	0x08004091
 8003f88:	0800404f 	.word	0x0800404f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fa04 	bl	80043a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0204 	bic.w	r2, r2, #4
 8003fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6999      	ldr	r1, [r3, #24]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	619a      	str	r2, [r3, #24]
      break;
 8003fca:	e064      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fa4a 	bl	800446c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6999      	ldr	r1, [r3, #24]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	021a      	lsls	r2, r3, #8
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	619a      	str	r2, [r3, #24]
      break;
 800400c:	e043      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fa95 	bl	8004544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0208 	orr.w	r2, r2, #8
 8004028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0204 	bic.w	r2, r2, #4
 8004038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69d9      	ldr	r1, [r3, #28]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	61da      	str	r2, [r3, #28]
      break;
 800404c:	e023      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fadf 	bl	8004618 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69d9      	ldr	r1, [r3, #28]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	021a      	lsls	r2, r3, #8
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	61da      	str	r2, [r3, #28]
      break;
 800408e:	e002      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	75fb      	strb	r3, [r7, #23]
      break;
 8004094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_TIM_ConfigClockSource+0x1c>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e0b4      	b.n	800422e <HAL_TIM_ConfigClockSource+0x186>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040fc:	d03e      	beq.n	800417c <HAL_TIM_ConfigClockSource+0xd4>
 80040fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004102:	f200 8087 	bhi.w	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 8004106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800410a:	f000 8086 	beq.w	800421a <HAL_TIM_ConfigClockSource+0x172>
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004112:	d87f      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b70      	cmp	r3, #112	@ 0x70
 8004116:	d01a      	beq.n	800414e <HAL_TIM_ConfigClockSource+0xa6>
 8004118:	2b70      	cmp	r3, #112	@ 0x70
 800411a:	d87b      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b60      	cmp	r3, #96	@ 0x60
 800411e:	d050      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004120:	2b60      	cmp	r3, #96	@ 0x60
 8004122:	d877      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b50      	cmp	r3, #80	@ 0x50
 8004126:	d03c      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004128:	2b50      	cmp	r3, #80	@ 0x50
 800412a:	d873      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 800412c:	2b40      	cmp	r3, #64	@ 0x40
 800412e:	d058      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004130:	2b40      	cmp	r3, #64	@ 0x40
 8004132:	d86f      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 8004134:	2b30      	cmp	r3, #48	@ 0x30
 8004136:	d064      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15a>
 8004138:	2b30      	cmp	r3, #48	@ 0x30
 800413a:	d86b      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 800413c:	2b20      	cmp	r3, #32
 800413e:	d060      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15a>
 8004140:	2b20      	cmp	r3, #32
 8004142:	d867      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 8004144:	2b00      	cmp	r3, #0
 8004146:	d05c      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15a>
 8004148:	2b10      	cmp	r3, #16
 800414a:	d05a      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15a>
 800414c:	e062      	b.n	8004214 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800415e:	f000 fb25 	bl	80047ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	609a      	str	r2, [r3, #8]
      break;
 800417a:	e04f      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800418c:	f000 fb0e 	bl	80047ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800419e:	609a      	str	r2, [r3, #8]
      break;
 80041a0:	e03c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ae:	461a      	mov	r2, r3
 80041b0:	f000 fa82 	bl	80046b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2150      	movs	r1, #80	@ 0x50
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fadb 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 80041c0:	e02c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 faa1 	bl	8004716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2160      	movs	r1, #96	@ 0x60
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 facb 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 80041e0:	e01c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ee:	461a      	mov	r2, r3
 80041f0:	f000 fa62 	bl	80046b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2140      	movs	r1, #64	@ 0x40
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fabb 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 8004200:	e00c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f000 fab2 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 8004212:	e003      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e000      	b.n	800421c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800421a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a3a      	ldr	r2, [pc, #232]	@ (8004384 <TIM_Base_SetConfig+0xfc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00f      	beq.n	80042c0 <TIM_Base_SetConfig+0x38>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a6:	d00b      	beq.n	80042c0 <TIM_Base_SetConfig+0x38>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a37      	ldr	r2, [pc, #220]	@ (8004388 <TIM_Base_SetConfig+0x100>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_Base_SetConfig+0x38>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a36      	ldr	r2, [pc, #216]	@ (800438c <TIM_Base_SetConfig+0x104>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0x38>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a35      	ldr	r2, [pc, #212]	@ (8004390 <TIM_Base_SetConfig+0x108>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d108      	bne.n	80042d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004384 <TIM_Base_SetConfig+0xfc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01b      	beq.n	8004312 <TIM_Base_SetConfig+0x8a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e0:	d017      	beq.n	8004312 <TIM_Base_SetConfig+0x8a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a28      	ldr	r2, [pc, #160]	@ (8004388 <TIM_Base_SetConfig+0x100>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <TIM_Base_SetConfig+0x8a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a27      	ldr	r2, [pc, #156]	@ (800438c <TIM_Base_SetConfig+0x104>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00f      	beq.n	8004312 <TIM_Base_SetConfig+0x8a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a26      	ldr	r2, [pc, #152]	@ (8004390 <TIM_Base_SetConfig+0x108>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_Base_SetConfig+0x8a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a25      	ldr	r2, [pc, #148]	@ (8004394 <TIM_Base_SetConfig+0x10c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <TIM_Base_SetConfig+0x8a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a24      	ldr	r2, [pc, #144]	@ (8004398 <TIM_Base_SetConfig+0x110>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_Base_SetConfig+0x8a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a23      	ldr	r2, [pc, #140]	@ (800439c <TIM_Base_SetConfig+0x114>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d108      	bne.n	8004324 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a0e      	ldr	r2, [pc, #56]	@ (8004384 <TIM_Base_SetConfig+0xfc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d103      	bne.n	8004358 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d105      	bne.n	8004376 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f023 0201 	bic.w	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	611a      	str	r2, [r3, #16]
  }
}
 8004376:	bf00      	nop
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40014000 	.word	0x40014000
 8004398:	40014400 	.word	0x40014400
 800439c:	40014800 	.word	0x40014800

080043a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	f023 0201 	bic.w	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0303 	bic.w	r3, r3, #3
 80043d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 0302 	bic.w	r3, r3, #2
 80043e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004468 <TIM_OC1_SetConfig+0xc8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d10c      	bne.n	8004416 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f023 0308 	bic.w	r3, r3, #8
 8004402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a13      	ldr	r2, [pc, #76]	@ (8004468 <TIM_OC1_SetConfig+0xc8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d111      	bne.n	8004442 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800442c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	621a      	str	r2, [r3, #32]
}
 800445c:	bf00      	nop
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40010000 	.word	0x40010000

0800446c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f023 0210 	bic.w	r2, r3, #16
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800449a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f023 0320 	bic.w	r3, r3, #32
 80044b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004540 <TIM_OC2_SetConfig+0xd4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d10d      	bne.n	80044e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a15      	ldr	r2, [pc, #84]	@ (8004540 <TIM_OC2_SetConfig+0xd4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d113      	bne.n	8004518 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40010000 	.word	0x40010000

08004544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800458c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <TIM_OC3_SetConfig+0xd0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10d      	bne.n	80045be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a14      	ldr	r2, [pc, #80]	@ (8004614 <TIM_OC3_SetConfig+0xd0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d113      	bne.n	80045ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	621a      	str	r2, [r3, #32]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40010000 	.word	0x40010000

08004618 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	031b      	lsls	r3, r3, #12
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a10      	ldr	r2, [pc, #64]	@ (80046b4 <TIM_OC4_SetConfig+0x9c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d109      	bne.n	800468c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800467e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	019b      	lsls	r3, r3, #6
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000

080046b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0201 	bic.w	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 030a 	bic.w	r3, r3, #10
 80046f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004716:	b480      	push	{r7}
 8004718:	b087      	sub	sp, #28
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f023 0210 	bic.w	r2, r3, #16
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	031b      	lsls	r3, r3, #12
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004752:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	f043 0307 	orr.w	r3, r3, #7
 8004798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	609a      	str	r2, [r3, #8]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	021a      	lsls	r2, r3, #8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2201      	movs	r2, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1a      	ldr	r2, [r3, #32]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	43db      	mvns	r3, r3
 800480e:	401a      	ands	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1a      	ldr	r2, [r3, #32]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	431a      	orrs	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800484c:	2302      	movs	r3, #2
 800484e:	e050      	b.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1c      	ldr	r2, [pc, #112]	@ (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d018      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800489c:	d013      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a18      	ldr	r2, [pc, #96]	@ (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a16      	ldr	r2, [pc, #88]	@ (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a15      	ldr	r2, [pc, #84]	@ (800490c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a13      	ldr	r2, [pc, #76]	@ (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d10c      	bne.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40014000 	.word	0x40014000

08004914 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800492c:	2302      	movs	r3, #2
 800492e:	e03d      	b.n	80049ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e042      	b.n	8004a78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fd fa9e 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2224      	movs	r2, #36	@ 0x24
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f973 	bl	8004d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	@ 0x28
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d175      	bne.n	8004b8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_Transmit+0x2c>
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e06e      	b.n	8004b8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2221      	movs	r2, #33	@ 0x21
 8004aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004abe:	f7fd fc37 	bl	8002330 <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	88fa      	ldrh	r2, [r7, #6]
 8004ace:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad8:	d108      	bne.n	8004aec <HAL_UART_Transmit+0x6c>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	e003      	b.n	8004af4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004af4:	e02e      	b.n	8004b54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2200      	movs	r2, #0
 8004afe:	2180      	movs	r1, #128	@ 0x80
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f848 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e03a      	b.n	8004b8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	3302      	adds	r3, #2
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	e007      	b.n	8004b46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	781a      	ldrb	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3301      	adds	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1cb      	bne.n	8004af6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2140      	movs	r1, #64	@ 0x40
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f814 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e006      	b.n	8004b8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b086      	sub	sp, #24
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba6:	e03b      	b.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bae:	d037      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb0:	f7fd fbbe 	bl	8002330 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	6a3a      	ldr	r2, [r7, #32]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d302      	bcc.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e03a      	b.n	8004c40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d023      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b80      	cmp	r3, #128	@ 0x80
 8004bdc:	d020      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b40      	cmp	r3, #64	@ 0x40
 8004be2:	d01d      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d116      	bne.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f81d 	bl	8004c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2208      	movs	r2, #8
 8004c12:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e00f      	b.n	8004c40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d0b4      	beq.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b095      	sub	sp, #84	@ 0x54
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c70:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3314      	adds	r3, #20
 8004c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3314      	adds	r3, #20
 8004ca2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ca4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e5      	bne.n	8004c84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d119      	bne.n	8004cf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f023 0310 	bic.w	r3, r3, #16
 8004cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ce0:	61ba      	str	r2, [r7, #24]
 8004ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6979      	ldr	r1, [r7, #20]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	613b      	str	r3, [r7, #16]
   return(result);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d02:	bf00      	nop
 8004d04:	3754      	adds	r7, #84	@ 0x54
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d14:	b0c0      	sub	sp, #256	@ 0x100
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	68d9      	ldr	r1, [r3, #12]
 8004d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	ea40 0301 	orr.w	r3, r0, r1
 8004d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d68:	f021 010c 	bic.w	r1, r1, #12
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d76:	430b      	orrs	r3, r1
 8004d78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	6999      	ldr	r1, [r3, #24]
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	ea40 0301 	orr.w	r3, r0, r1
 8004d96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b8f      	ldr	r3, [pc, #572]	@ (8004fdc <UART_SetConfig+0x2cc>)
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d005      	beq.n	8004db0 <UART_SetConfig+0xa0>
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4b8d      	ldr	r3, [pc, #564]	@ (8004fe0 <UART_SetConfig+0x2d0>)
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d104      	bne.n	8004dba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004db0:	f7fe fdf8 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8004db4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004db8:	e003      	b.n	8004dc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dba:	f7fe fddf 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8004dbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dcc:	f040 810c 	bne.w	8004fe8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004dde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004de2:	4622      	mov	r2, r4
 8004de4:	462b      	mov	r3, r5
 8004de6:	1891      	adds	r1, r2, r2
 8004de8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004dea:	415b      	adcs	r3, r3
 8004dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004df2:	4621      	mov	r1, r4
 8004df4:	eb12 0801 	adds.w	r8, r2, r1
 8004df8:	4629      	mov	r1, r5
 8004dfa:	eb43 0901 	adc.w	r9, r3, r1
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e12:	4690      	mov	r8, r2
 8004e14:	4699      	mov	r9, r3
 8004e16:	4623      	mov	r3, r4
 8004e18:	eb18 0303 	adds.w	r3, r8, r3
 8004e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e20:	462b      	mov	r3, r5
 8004e22:	eb49 0303 	adc.w	r3, r9, r3
 8004e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e3e:	460b      	mov	r3, r1
 8004e40:	18db      	adds	r3, r3, r3
 8004e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e44:	4613      	mov	r3, r2
 8004e46:	eb42 0303 	adc.w	r3, r2, r3
 8004e4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e54:	f7fb ff00 	bl	8000c58 <__aeabi_uldivmod>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4b61      	ldr	r3, [pc, #388]	@ (8004fe4 <UART_SetConfig+0x2d4>)
 8004e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	011c      	lsls	r4, r3, #4
 8004e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e78:	4642      	mov	r2, r8
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	1891      	adds	r1, r2, r2
 8004e7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e80:	415b      	adcs	r3, r3
 8004e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e88:	4641      	mov	r1, r8
 8004e8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e8e:	4649      	mov	r1, r9
 8004e90:	eb43 0b01 	adc.w	fp, r3, r1
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ea0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ea8:	4692      	mov	sl, r2
 8004eaa:	469b      	mov	fp, r3
 8004eac:	4643      	mov	r3, r8
 8004eae:	eb1a 0303 	adds.w	r3, sl, r3
 8004eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8004ebc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ecc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ed0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	18db      	adds	r3, r3, r3
 8004ed8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eda:	4613      	mov	r3, r2
 8004edc:	eb42 0303 	adc.w	r3, r2, r3
 8004ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ee6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004eea:	f7fb feb5 	bl	8000c58 <__aeabi_uldivmod>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe4 <UART_SetConfig+0x2d4>)
 8004ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	2264      	movs	r2, #100	@ 0x64
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	1acb      	subs	r3, r1, r3
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f0a:	4b36      	ldr	r3, [pc, #216]	@ (8004fe4 <UART_SetConfig+0x2d4>)
 8004f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f18:	441c      	add	r4, r3
 8004f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	1891      	adds	r1, r2, r2
 8004f32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f34:	415b      	adcs	r3, r3
 8004f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	1851      	adds	r1, r2, r1
 8004f40:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f42:	4649      	mov	r1, r9
 8004f44:	414b      	adcs	r3, r1
 8004f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f54:	4659      	mov	r1, fp
 8004f56:	00cb      	lsls	r3, r1, #3
 8004f58:	4651      	mov	r1, sl
 8004f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f5e:	4651      	mov	r1, sl
 8004f60:	00ca      	lsls	r2, r1, #3
 8004f62:	4610      	mov	r0, r2
 8004f64:	4619      	mov	r1, r3
 8004f66:	4603      	mov	r3, r0
 8004f68:	4642      	mov	r2, r8
 8004f6a:	189b      	adds	r3, r3, r2
 8004f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f70:	464b      	mov	r3, r9
 8004f72:	460a      	mov	r2, r1
 8004f74:	eb42 0303 	adc.w	r3, r2, r3
 8004f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f90:	460b      	mov	r3, r1
 8004f92:	18db      	adds	r3, r3, r3
 8004f94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f96:	4613      	mov	r3, r2
 8004f98:	eb42 0303 	adc.w	r3, r2, r3
 8004f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fa6:	f7fb fe57 	bl	8000c58 <__aeabi_uldivmod>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <UART_SetConfig+0x2d4>)
 8004fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	2164      	movs	r1, #100	@ 0x64
 8004fb8:	fb01 f303 	mul.w	r3, r1, r3
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	3332      	adds	r3, #50	@ 0x32
 8004fc2:	4a08      	ldr	r2, [pc, #32]	@ (8004fe4 <UART_SetConfig+0x2d4>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	f003 0207 	and.w	r2, r3, #7
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4422      	add	r2, r4
 8004fd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fd8:	e106      	b.n	80051e8 <UART_SetConfig+0x4d8>
 8004fda:	bf00      	nop
 8004fdc:	40011000 	.word	0x40011000
 8004fe0:	40011400 	.word	0x40011400
 8004fe4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ff2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ff6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ffa:	4642      	mov	r2, r8
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	1891      	adds	r1, r2, r2
 8005000:	6239      	str	r1, [r7, #32]
 8005002:	415b      	adcs	r3, r3
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24
 8005006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800500a:	4641      	mov	r1, r8
 800500c:	1854      	adds	r4, r2, r1
 800500e:	4649      	mov	r1, r9
 8005010:	eb43 0501 	adc.w	r5, r3, r1
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	00eb      	lsls	r3, r5, #3
 800501e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005022:	00e2      	lsls	r2, r4, #3
 8005024:	4614      	mov	r4, r2
 8005026:	461d      	mov	r5, r3
 8005028:	4643      	mov	r3, r8
 800502a:	18e3      	adds	r3, r4, r3
 800502c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005030:	464b      	mov	r3, r9
 8005032:	eb45 0303 	adc.w	r3, r5, r3
 8005036:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800503a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005046:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005056:	4629      	mov	r1, r5
 8005058:	008b      	lsls	r3, r1, #2
 800505a:	4621      	mov	r1, r4
 800505c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005060:	4621      	mov	r1, r4
 8005062:	008a      	lsls	r2, r1, #2
 8005064:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005068:	f7fb fdf6 	bl	8000c58 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4b60      	ldr	r3, [pc, #384]	@ (80051f4 <UART_SetConfig+0x4e4>)
 8005072:	fba3 2302 	umull	r2, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	011c      	lsls	r4, r3, #4
 800507a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800507e:	2200      	movs	r2, #0
 8005080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005084:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005088:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	1891      	adds	r1, r2, r2
 8005092:	61b9      	str	r1, [r7, #24]
 8005094:	415b      	adcs	r3, r3
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800509c:	4641      	mov	r1, r8
 800509e:	1851      	adds	r1, r2, r1
 80050a0:	6139      	str	r1, [r7, #16]
 80050a2:	4649      	mov	r1, r9
 80050a4:	414b      	adcs	r3, r1
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050b4:	4659      	mov	r1, fp
 80050b6:	00cb      	lsls	r3, r1, #3
 80050b8:	4651      	mov	r1, sl
 80050ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050be:	4651      	mov	r1, sl
 80050c0:	00ca      	lsls	r2, r1, #3
 80050c2:	4610      	mov	r0, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	4642      	mov	r2, r8
 80050ca:	189b      	adds	r3, r3, r2
 80050cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050d0:	464b      	mov	r3, r9
 80050d2:	460a      	mov	r2, r1
 80050d4:	eb42 0303 	adc.w	r3, r2, r3
 80050d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80050f4:	4649      	mov	r1, r9
 80050f6:	008b      	lsls	r3, r1, #2
 80050f8:	4641      	mov	r1, r8
 80050fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050fe:	4641      	mov	r1, r8
 8005100:	008a      	lsls	r2, r1, #2
 8005102:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005106:	f7fb fda7 	bl	8000c58 <__aeabi_uldivmod>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4611      	mov	r1, r2
 8005110:	4b38      	ldr	r3, [pc, #224]	@ (80051f4 <UART_SetConfig+0x4e4>)
 8005112:	fba3 2301 	umull	r2, r3, r3, r1
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	2264      	movs	r2, #100	@ 0x64
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	1acb      	subs	r3, r1, r3
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	3332      	adds	r3, #50	@ 0x32
 8005124:	4a33      	ldr	r2, [pc, #204]	@ (80051f4 <UART_SetConfig+0x4e4>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005130:	441c      	add	r4, r3
 8005132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005136:	2200      	movs	r2, #0
 8005138:	673b      	str	r3, [r7, #112]	@ 0x70
 800513a:	677a      	str	r2, [r7, #116]	@ 0x74
 800513c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	1891      	adds	r1, r2, r2
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	415b      	adcs	r3, r3
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005150:	4641      	mov	r1, r8
 8005152:	1851      	adds	r1, r2, r1
 8005154:	6039      	str	r1, [r7, #0]
 8005156:	4649      	mov	r1, r9
 8005158:	414b      	adcs	r3, r1
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005168:	4659      	mov	r1, fp
 800516a:	00cb      	lsls	r3, r1, #3
 800516c:	4651      	mov	r1, sl
 800516e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005172:	4651      	mov	r1, sl
 8005174:	00ca      	lsls	r2, r1, #3
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	4603      	mov	r3, r0
 800517c:	4642      	mov	r2, r8
 800517e:	189b      	adds	r3, r3, r2
 8005180:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005182:	464b      	mov	r3, r9
 8005184:	460a      	mov	r2, r1
 8005186:	eb42 0303 	adc.w	r3, r2, r3
 800518a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	663b      	str	r3, [r7, #96]	@ 0x60
 8005196:	667a      	str	r2, [r7, #100]	@ 0x64
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051a4:	4649      	mov	r1, r9
 80051a6:	008b      	lsls	r3, r1, #2
 80051a8:	4641      	mov	r1, r8
 80051aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ae:	4641      	mov	r1, r8
 80051b0:	008a      	lsls	r2, r1, #2
 80051b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051b6:	f7fb fd4f 	bl	8000c58 <__aeabi_uldivmod>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <UART_SetConfig+0x4e4>)
 80051c0:	fba3 1302 	umull	r1, r3, r3, r2
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	2164      	movs	r1, #100	@ 0x64
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	3332      	adds	r3, #50	@ 0x32
 80051d2:	4a08      	ldr	r2, [pc, #32]	@ (80051f4 <UART_SetConfig+0x4e4>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	f003 020f 	and.w	r2, r3, #15
 80051de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4422      	add	r2, r4
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80051ee:	46bd      	mov	sp, r7
 80051f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051f4:	51eb851f 	.word	0x51eb851f

080051f8 <__cvt>:
 80051f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051fc:	ec57 6b10 	vmov	r6, r7, d0
 8005200:	2f00      	cmp	r7, #0
 8005202:	460c      	mov	r4, r1
 8005204:	4619      	mov	r1, r3
 8005206:	463b      	mov	r3, r7
 8005208:	bfbb      	ittet	lt
 800520a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800520e:	461f      	movlt	r7, r3
 8005210:	2300      	movge	r3, #0
 8005212:	232d      	movlt	r3, #45	@ 0x2d
 8005214:	700b      	strb	r3, [r1, #0]
 8005216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005218:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800521c:	4691      	mov	r9, r2
 800521e:	f023 0820 	bic.w	r8, r3, #32
 8005222:	bfbc      	itt	lt
 8005224:	4632      	movlt	r2, r6
 8005226:	4616      	movlt	r6, r2
 8005228:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800522c:	d005      	beq.n	800523a <__cvt+0x42>
 800522e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005232:	d100      	bne.n	8005236 <__cvt+0x3e>
 8005234:	3401      	adds	r4, #1
 8005236:	2102      	movs	r1, #2
 8005238:	e000      	b.n	800523c <__cvt+0x44>
 800523a:	2103      	movs	r1, #3
 800523c:	ab03      	add	r3, sp, #12
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	ab02      	add	r3, sp, #8
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	ec47 6b10 	vmov	d0, r6, r7
 8005248:	4653      	mov	r3, sl
 800524a:	4622      	mov	r2, r4
 800524c:	f000 ff40 	bl	80060d0 <_dtoa_r>
 8005250:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005254:	4605      	mov	r5, r0
 8005256:	d119      	bne.n	800528c <__cvt+0x94>
 8005258:	f019 0f01 	tst.w	r9, #1
 800525c:	d00e      	beq.n	800527c <__cvt+0x84>
 800525e:	eb00 0904 	add.w	r9, r0, r4
 8005262:	2200      	movs	r2, #0
 8005264:	2300      	movs	r3, #0
 8005266:	4630      	mov	r0, r6
 8005268:	4639      	mov	r1, r7
 800526a:	f7fb fc35 	bl	8000ad8 <__aeabi_dcmpeq>
 800526e:	b108      	cbz	r0, 8005274 <__cvt+0x7c>
 8005270:	f8cd 900c 	str.w	r9, [sp, #12]
 8005274:	2230      	movs	r2, #48	@ 0x30
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	454b      	cmp	r3, r9
 800527a:	d31e      	bcc.n	80052ba <__cvt+0xc2>
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005280:	1b5b      	subs	r3, r3, r5
 8005282:	4628      	mov	r0, r5
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	b004      	add	sp, #16
 8005288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800528c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005290:	eb00 0904 	add.w	r9, r0, r4
 8005294:	d1e5      	bne.n	8005262 <__cvt+0x6a>
 8005296:	7803      	ldrb	r3, [r0, #0]
 8005298:	2b30      	cmp	r3, #48	@ 0x30
 800529a:	d10a      	bne.n	80052b2 <__cvt+0xba>
 800529c:	2200      	movs	r2, #0
 800529e:	2300      	movs	r3, #0
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb fc18 	bl	8000ad8 <__aeabi_dcmpeq>
 80052a8:	b918      	cbnz	r0, 80052b2 <__cvt+0xba>
 80052aa:	f1c4 0401 	rsb	r4, r4, #1
 80052ae:	f8ca 4000 	str.w	r4, [sl]
 80052b2:	f8da 3000 	ldr.w	r3, [sl]
 80052b6:	4499      	add	r9, r3
 80052b8:	e7d3      	b.n	8005262 <__cvt+0x6a>
 80052ba:	1c59      	adds	r1, r3, #1
 80052bc:	9103      	str	r1, [sp, #12]
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e7d9      	b.n	8005276 <__cvt+0x7e>

080052c2 <__exponent>:
 80052c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052c4:	2900      	cmp	r1, #0
 80052c6:	bfba      	itte	lt
 80052c8:	4249      	neglt	r1, r1
 80052ca:	232d      	movlt	r3, #45	@ 0x2d
 80052cc:	232b      	movge	r3, #43	@ 0x2b
 80052ce:	2909      	cmp	r1, #9
 80052d0:	7002      	strb	r2, [r0, #0]
 80052d2:	7043      	strb	r3, [r0, #1]
 80052d4:	dd29      	ble.n	800532a <__exponent+0x68>
 80052d6:	f10d 0307 	add.w	r3, sp, #7
 80052da:	461d      	mov	r5, r3
 80052dc:	270a      	movs	r7, #10
 80052de:	461a      	mov	r2, r3
 80052e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80052e4:	fb07 1416 	mls	r4, r7, r6, r1
 80052e8:	3430      	adds	r4, #48	@ 0x30
 80052ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80052ee:	460c      	mov	r4, r1
 80052f0:	2c63      	cmp	r4, #99	@ 0x63
 80052f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80052f6:	4631      	mov	r1, r6
 80052f8:	dcf1      	bgt.n	80052de <__exponent+0x1c>
 80052fa:	3130      	adds	r1, #48	@ 0x30
 80052fc:	1e94      	subs	r4, r2, #2
 80052fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005302:	1c41      	adds	r1, r0, #1
 8005304:	4623      	mov	r3, r4
 8005306:	42ab      	cmp	r3, r5
 8005308:	d30a      	bcc.n	8005320 <__exponent+0x5e>
 800530a:	f10d 0309 	add.w	r3, sp, #9
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	42ac      	cmp	r4, r5
 8005312:	bf88      	it	hi
 8005314:	2300      	movhi	r3, #0
 8005316:	3302      	adds	r3, #2
 8005318:	4403      	add	r3, r0
 800531a:	1a18      	subs	r0, r3, r0
 800531c:	b003      	add	sp, #12
 800531e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005320:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005324:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005328:	e7ed      	b.n	8005306 <__exponent+0x44>
 800532a:	2330      	movs	r3, #48	@ 0x30
 800532c:	3130      	adds	r1, #48	@ 0x30
 800532e:	7083      	strb	r3, [r0, #2]
 8005330:	70c1      	strb	r1, [r0, #3]
 8005332:	1d03      	adds	r3, r0, #4
 8005334:	e7f1      	b.n	800531a <__exponent+0x58>
	...

08005338 <_printf_float>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	b08d      	sub	sp, #52	@ 0x34
 800533e:	460c      	mov	r4, r1
 8005340:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005344:	4616      	mov	r6, r2
 8005346:	461f      	mov	r7, r3
 8005348:	4605      	mov	r5, r0
 800534a:	f000 fdbf 	bl	8005ecc <_localeconv_r>
 800534e:	6803      	ldr	r3, [r0, #0]
 8005350:	9304      	str	r3, [sp, #16]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fa ff94 	bl	8000280 <strlen>
 8005358:	2300      	movs	r3, #0
 800535a:	930a      	str	r3, [sp, #40]	@ 0x28
 800535c:	f8d8 3000 	ldr.w	r3, [r8]
 8005360:	9005      	str	r0, [sp, #20]
 8005362:	3307      	adds	r3, #7
 8005364:	f023 0307 	bic.w	r3, r3, #7
 8005368:	f103 0208 	add.w	r2, r3, #8
 800536c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005370:	f8d4 b000 	ldr.w	fp, [r4]
 8005374:	f8c8 2000 	str.w	r2, [r8]
 8005378:	e9d3 8900 	ldrd	r8, r9, [r3]
 800537c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005380:	9307      	str	r3, [sp, #28]
 8005382:	f8cd 8018 	str.w	r8, [sp, #24]
 8005386:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800538a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800538e:	4b9c      	ldr	r3, [pc, #624]	@ (8005600 <_printf_float+0x2c8>)
 8005390:	f04f 32ff 	mov.w	r2, #4294967295
 8005394:	f7fb fbd2 	bl	8000b3c <__aeabi_dcmpun>
 8005398:	bb70      	cbnz	r0, 80053f8 <_printf_float+0xc0>
 800539a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800539e:	4b98      	ldr	r3, [pc, #608]	@ (8005600 <_printf_float+0x2c8>)
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	f7fb fbac 	bl	8000b00 <__aeabi_dcmple>
 80053a8:	bb30      	cbnz	r0, 80053f8 <_printf_float+0xc0>
 80053aa:	2200      	movs	r2, #0
 80053ac:	2300      	movs	r3, #0
 80053ae:	4640      	mov	r0, r8
 80053b0:	4649      	mov	r1, r9
 80053b2:	f7fb fb9b 	bl	8000aec <__aeabi_dcmplt>
 80053b6:	b110      	cbz	r0, 80053be <_printf_float+0x86>
 80053b8:	232d      	movs	r3, #45	@ 0x2d
 80053ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053be:	4a91      	ldr	r2, [pc, #580]	@ (8005604 <_printf_float+0x2cc>)
 80053c0:	4b91      	ldr	r3, [pc, #580]	@ (8005608 <_printf_float+0x2d0>)
 80053c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80053c6:	bf94      	ite	ls
 80053c8:	4690      	movls	r8, r2
 80053ca:	4698      	movhi	r8, r3
 80053cc:	2303      	movs	r3, #3
 80053ce:	6123      	str	r3, [r4, #16]
 80053d0:	f02b 0304 	bic.w	r3, fp, #4
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	f04f 0900 	mov.w	r9, #0
 80053da:	9700      	str	r7, [sp, #0]
 80053dc:	4633      	mov	r3, r6
 80053de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80053e0:	4621      	mov	r1, r4
 80053e2:	4628      	mov	r0, r5
 80053e4:	f000 f9d2 	bl	800578c <_printf_common>
 80053e8:	3001      	adds	r0, #1
 80053ea:	f040 808d 	bne.w	8005508 <_printf_float+0x1d0>
 80053ee:	f04f 30ff 	mov.w	r0, #4294967295
 80053f2:	b00d      	add	sp, #52	@ 0x34
 80053f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	4640      	mov	r0, r8
 80053fe:	4649      	mov	r1, r9
 8005400:	f7fb fb9c 	bl	8000b3c <__aeabi_dcmpun>
 8005404:	b140      	cbz	r0, 8005418 <_printf_float+0xe0>
 8005406:	464b      	mov	r3, r9
 8005408:	2b00      	cmp	r3, #0
 800540a:	bfbc      	itt	lt
 800540c:	232d      	movlt	r3, #45	@ 0x2d
 800540e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005412:	4a7e      	ldr	r2, [pc, #504]	@ (800560c <_printf_float+0x2d4>)
 8005414:	4b7e      	ldr	r3, [pc, #504]	@ (8005610 <_printf_float+0x2d8>)
 8005416:	e7d4      	b.n	80053c2 <_printf_float+0x8a>
 8005418:	6863      	ldr	r3, [r4, #4]
 800541a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800541e:	9206      	str	r2, [sp, #24]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	d13b      	bne.n	800549c <_printf_float+0x164>
 8005424:	2306      	movs	r3, #6
 8005426:	6063      	str	r3, [r4, #4]
 8005428:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800542c:	2300      	movs	r3, #0
 800542e:	6022      	str	r2, [r4, #0]
 8005430:	9303      	str	r3, [sp, #12]
 8005432:	ab0a      	add	r3, sp, #40	@ 0x28
 8005434:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005438:	ab09      	add	r3, sp, #36	@ 0x24
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	6861      	ldr	r1, [r4, #4]
 800543e:	ec49 8b10 	vmov	d0, r8, r9
 8005442:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005446:	4628      	mov	r0, r5
 8005448:	f7ff fed6 	bl	80051f8 <__cvt>
 800544c:	9b06      	ldr	r3, [sp, #24]
 800544e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005450:	2b47      	cmp	r3, #71	@ 0x47
 8005452:	4680      	mov	r8, r0
 8005454:	d129      	bne.n	80054aa <_printf_float+0x172>
 8005456:	1cc8      	adds	r0, r1, #3
 8005458:	db02      	blt.n	8005460 <_printf_float+0x128>
 800545a:	6863      	ldr	r3, [r4, #4]
 800545c:	4299      	cmp	r1, r3
 800545e:	dd41      	ble.n	80054e4 <_printf_float+0x1ac>
 8005460:	f1aa 0a02 	sub.w	sl, sl, #2
 8005464:	fa5f fa8a 	uxtb.w	sl, sl
 8005468:	3901      	subs	r1, #1
 800546a:	4652      	mov	r2, sl
 800546c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005470:	9109      	str	r1, [sp, #36]	@ 0x24
 8005472:	f7ff ff26 	bl	80052c2 <__exponent>
 8005476:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005478:	1813      	adds	r3, r2, r0
 800547a:	2a01      	cmp	r2, #1
 800547c:	4681      	mov	r9, r0
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	dc02      	bgt.n	8005488 <_printf_float+0x150>
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	07d2      	lsls	r2, r2, #31
 8005486:	d501      	bpl.n	800548c <_printf_float+0x154>
 8005488:	3301      	adds	r3, #1
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0a2      	beq.n	80053da <_printf_float+0xa2>
 8005494:	232d      	movs	r3, #45	@ 0x2d
 8005496:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800549a:	e79e      	b.n	80053da <_printf_float+0xa2>
 800549c:	9a06      	ldr	r2, [sp, #24]
 800549e:	2a47      	cmp	r2, #71	@ 0x47
 80054a0:	d1c2      	bne.n	8005428 <_printf_float+0xf0>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1c0      	bne.n	8005428 <_printf_float+0xf0>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e7bd      	b.n	8005426 <_printf_float+0xee>
 80054aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054ae:	d9db      	bls.n	8005468 <_printf_float+0x130>
 80054b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80054b4:	d118      	bne.n	80054e8 <_printf_float+0x1b0>
 80054b6:	2900      	cmp	r1, #0
 80054b8:	6863      	ldr	r3, [r4, #4]
 80054ba:	dd0b      	ble.n	80054d4 <_printf_float+0x19c>
 80054bc:	6121      	str	r1, [r4, #16]
 80054be:	b913      	cbnz	r3, 80054c6 <_printf_float+0x18e>
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	07d0      	lsls	r0, r2, #31
 80054c4:	d502      	bpl.n	80054cc <_printf_float+0x194>
 80054c6:	3301      	adds	r3, #1
 80054c8:	440b      	add	r3, r1
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80054ce:	f04f 0900 	mov.w	r9, #0
 80054d2:	e7db      	b.n	800548c <_printf_float+0x154>
 80054d4:	b913      	cbnz	r3, 80054dc <_printf_float+0x1a4>
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	07d2      	lsls	r2, r2, #31
 80054da:	d501      	bpl.n	80054e0 <_printf_float+0x1a8>
 80054dc:	3302      	adds	r3, #2
 80054de:	e7f4      	b.n	80054ca <_printf_float+0x192>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e7f2      	b.n	80054ca <_printf_float+0x192>
 80054e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80054e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054ea:	4299      	cmp	r1, r3
 80054ec:	db05      	blt.n	80054fa <_printf_float+0x1c2>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	6121      	str	r1, [r4, #16]
 80054f2:	07d8      	lsls	r0, r3, #31
 80054f4:	d5ea      	bpl.n	80054cc <_printf_float+0x194>
 80054f6:	1c4b      	adds	r3, r1, #1
 80054f8:	e7e7      	b.n	80054ca <_printf_float+0x192>
 80054fa:	2900      	cmp	r1, #0
 80054fc:	bfd4      	ite	le
 80054fe:	f1c1 0202 	rsble	r2, r1, #2
 8005502:	2201      	movgt	r2, #1
 8005504:	4413      	add	r3, r2
 8005506:	e7e0      	b.n	80054ca <_printf_float+0x192>
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	055a      	lsls	r2, r3, #21
 800550c:	d407      	bmi.n	800551e <_printf_float+0x1e6>
 800550e:	6923      	ldr	r3, [r4, #16]
 8005510:	4642      	mov	r2, r8
 8005512:	4631      	mov	r1, r6
 8005514:	4628      	mov	r0, r5
 8005516:	47b8      	blx	r7
 8005518:	3001      	adds	r0, #1
 800551a:	d12b      	bne.n	8005574 <_printf_float+0x23c>
 800551c:	e767      	b.n	80053ee <_printf_float+0xb6>
 800551e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005522:	f240 80dd 	bls.w	80056e0 <_printf_float+0x3a8>
 8005526:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800552a:	2200      	movs	r2, #0
 800552c:	2300      	movs	r3, #0
 800552e:	f7fb fad3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005532:	2800      	cmp	r0, #0
 8005534:	d033      	beq.n	800559e <_printf_float+0x266>
 8005536:	4a37      	ldr	r2, [pc, #220]	@ (8005614 <_printf_float+0x2dc>)
 8005538:	2301      	movs	r3, #1
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	f43f af54 	beq.w	80053ee <_printf_float+0xb6>
 8005546:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800554a:	4543      	cmp	r3, r8
 800554c:	db02      	blt.n	8005554 <_printf_float+0x21c>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	07d8      	lsls	r0, r3, #31
 8005552:	d50f      	bpl.n	8005574 <_printf_float+0x23c>
 8005554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005558:	4631      	mov	r1, r6
 800555a:	4628      	mov	r0, r5
 800555c:	47b8      	blx	r7
 800555e:	3001      	adds	r0, #1
 8005560:	f43f af45 	beq.w	80053ee <_printf_float+0xb6>
 8005564:	f04f 0900 	mov.w	r9, #0
 8005568:	f108 38ff 	add.w	r8, r8, #4294967295
 800556c:	f104 0a1a 	add.w	sl, r4, #26
 8005570:	45c8      	cmp	r8, r9
 8005572:	dc09      	bgt.n	8005588 <_printf_float+0x250>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	079b      	lsls	r3, r3, #30
 8005578:	f100 8103 	bmi.w	8005782 <_printf_float+0x44a>
 800557c:	68e0      	ldr	r0, [r4, #12]
 800557e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005580:	4298      	cmp	r0, r3
 8005582:	bfb8      	it	lt
 8005584:	4618      	movlt	r0, r3
 8005586:	e734      	b.n	80053f2 <_printf_float+0xba>
 8005588:	2301      	movs	r3, #1
 800558a:	4652      	mov	r2, sl
 800558c:	4631      	mov	r1, r6
 800558e:	4628      	mov	r0, r5
 8005590:	47b8      	blx	r7
 8005592:	3001      	adds	r0, #1
 8005594:	f43f af2b 	beq.w	80053ee <_printf_float+0xb6>
 8005598:	f109 0901 	add.w	r9, r9, #1
 800559c:	e7e8      	b.n	8005570 <_printf_float+0x238>
 800559e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	dc39      	bgt.n	8005618 <_printf_float+0x2e0>
 80055a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005614 <_printf_float+0x2dc>)
 80055a6:	2301      	movs	r3, #1
 80055a8:	4631      	mov	r1, r6
 80055aa:	4628      	mov	r0, r5
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	f43f af1d 	beq.w	80053ee <_printf_float+0xb6>
 80055b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80055b8:	ea59 0303 	orrs.w	r3, r9, r3
 80055bc:	d102      	bne.n	80055c4 <_printf_float+0x28c>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	07d9      	lsls	r1, r3, #31
 80055c2:	d5d7      	bpl.n	8005574 <_printf_float+0x23c>
 80055c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055c8:	4631      	mov	r1, r6
 80055ca:	4628      	mov	r0, r5
 80055cc:	47b8      	blx	r7
 80055ce:	3001      	adds	r0, #1
 80055d0:	f43f af0d 	beq.w	80053ee <_printf_float+0xb6>
 80055d4:	f04f 0a00 	mov.w	sl, #0
 80055d8:	f104 0b1a 	add.w	fp, r4, #26
 80055dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055de:	425b      	negs	r3, r3
 80055e0:	4553      	cmp	r3, sl
 80055e2:	dc01      	bgt.n	80055e8 <_printf_float+0x2b0>
 80055e4:	464b      	mov	r3, r9
 80055e6:	e793      	b.n	8005510 <_printf_float+0x1d8>
 80055e8:	2301      	movs	r3, #1
 80055ea:	465a      	mov	r2, fp
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	f43f aefb 	beq.w	80053ee <_printf_float+0xb6>
 80055f8:	f10a 0a01 	add.w	sl, sl, #1
 80055fc:	e7ee      	b.n	80055dc <_printf_float+0x2a4>
 80055fe:	bf00      	nop
 8005600:	7fefffff 	.word	0x7fefffff
 8005604:	08007d10 	.word	0x08007d10
 8005608:	08007d14 	.word	0x08007d14
 800560c:	08007d18 	.word	0x08007d18
 8005610:	08007d1c 	.word	0x08007d1c
 8005614:	08007d20 	.word	0x08007d20
 8005618:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800561a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800561e:	4553      	cmp	r3, sl
 8005620:	bfa8      	it	ge
 8005622:	4653      	movge	r3, sl
 8005624:	2b00      	cmp	r3, #0
 8005626:	4699      	mov	r9, r3
 8005628:	dc36      	bgt.n	8005698 <_printf_float+0x360>
 800562a:	f04f 0b00 	mov.w	fp, #0
 800562e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005632:	f104 021a 	add.w	r2, r4, #26
 8005636:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005638:	9306      	str	r3, [sp, #24]
 800563a:	eba3 0309 	sub.w	r3, r3, r9
 800563e:	455b      	cmp	r3, fp
 8005640:	dc31      	bgt.n	80056a6 <_printf_float+0x36e>
 8005642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005644:	459a      	cmp	sl, r3
 8005646:	dc3a      	bgt.n	80056be <_printf_float+0x386>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	07da      	lsls	r2, r3, #31
 800564c:	d437      	bmi.n	80056be <_printf_float+0x386>
 800564e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005650:	ebaa 0903 	sub.w	r9, sl, r3
 8005654:	9b06      	ldr	r3, [sp, #24]
 8005656:	ebaa 0303 	sub.w	r3, sl, r3
 800565a:	4599      	cmp	r9, r3
 800565c:	bfa8      	it	ge
 800565e:	4699      	movge	r9, r3
 8005660:	f1b9 0f00 	cmp.w	r9, #0
 8005664:	dc33      	bgt.n	80056ce <_printf_float+0x396>
 8005666:	f04f 0800 	mov.w	r8, #0
 800566a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800566e:	f104 0b1a 	add.w	fp, r4, #26
 8005672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005674:	ebaa 0303 	sub.w	r3, sl, r3
 8005678:	eba3 0309 	sub.w	r3, r3, r9
 800567c:	4543      	cmp	r3, r8
 800567e:	f77f af79 	ble.w	8005574 <_printf_float+0x23c>
 8005682:	2301      	movs	r3, #1
 8005684:	465a      	mov	r2, fp
 8005686:	4631      	mov	r1, r6
 8005688:	4628      	mov	r0, r5
 800568a:	47b8      	blx	r7
 800568c:	3001      	adds	r0, #1
 800568e:	f43f aeae 	beq.w	80053ee <_printf_float+0xb6>
 8005692:	f108 0801 	add.w	r8, r8, #1
 8005696:	e7ec      	b.n	8005672 <_printf_float+0x33a>
 8005698:	4642      	mov	r2, r8
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	d1c2      	bne.n	800562a <_printf_float+0x2f2>
 80056a4:	e6a3      	b.n	80053ee <_printf_float+0xb6>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	9206      	str	r2, [sp, #24]
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	f43f ae9c 	beq.w	80053ee <_printf_float+0xb6>
 80056b6:	9a06      	ldr	r2, [sp, #24]
 80056b8:	f10b 0b01 	add.w	fp, fp, #1
 80056bc:	e7bb      	b.n	8005636 <_printf_float+0x2fe>
 80056be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	d1c0      	bne.n	800564e <_printf_float+0x316>
 80056cc:	e68f      	b.n	80053ee <_printf_float+0xb6>
 80056ce:	9a06      	ldr	r2, [sp, #24]
 80056d0:	464b      	mov	r3, r9
 80056d2:	4442      	add	r2, r8
 80056d4:	4631      	mov	r1, r6
 80056d6:	4628      	mov	r0, r5
 80056d8:	47b8      	blx	r7
 80056da:	3001      	adds	r0, #1
 80056dc:	d1c3      	bne.n	8005666 <_printf_float+0x32e>
 80056de:	e686      	b.n	80053ee <_printf_float+0xb6>
 80056e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056e4:	f1ba 0f01 	cmp.w	sl, #1
 80056e8:	dc01      	bgt.n	80056ee <_printf_float+0x3b6>
 80056ea:	07db      	lsls	r3, r3, #31
 80056ec:	d536      	bpl.n	800575c <_printf_float+0x424>
 80056ee:	2301      	movs	r3, #1
 80056f0:	4642      	mov	r2, r8
 80056f2:	4631      	mov	r1, r6
 80056f4:	4628      	mov	r0, r5
 80056f6:	47b8      	blx	r7
 80056f8:	3001      	adds	r0, #1
 80056fa:	f43f ae78 	beq.w	80053ee <_printf_float+0xb6>
 80056fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	f43f ae70 	beq.w	80053ee <_printf_float+0xb6>
 800570e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005712:	2200      	movs	r2, #0
 8005714:	2300      	movs	r3, #0
 8005716:	f10a 3aff 	add.w	sl, sl, #4294967295
 800571a:	f7fb f9dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800571e:	b9c0      	cbnz	r0, 8005752 <_printf_float+0x41a>
 8005720:	4653      	mov	r3, sl
 8005722:	f108 0201 	add.w	r2, r8, #1
 8005726:	4631      	mov	r1, r6
 8005728:	4628      	mov	r0, r5
 800572a:	47b8      	blx	r7
 800572c:	3001      	adds	r0, #1
 800572e:	d10c      	bne.n	800574a <_printf_float+0x412>
 8005730:	e65d      	b.n	80053ee <_printf_float+0xb6>
 8005732:	2301      	movs	r3, #1
 8005734:	465a      	mov	r2, fp
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	47b8      	blx	r7
 800573c:	3001      	adds	r0, #1
 800573e:	f43f ae56 	beq.w	80053ee <_printf_float+0xb6>
 8005742:	f108 0801 	add.w	r8, r8, #1
 8005746:	45d0      	cmp	r8, sl
 8005748:	dbf3      	blt.n	8005732 <_printf_float+0x3fa>
 800574a:	464b      	mov	r3, r9
 800574c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005750:	e6df      	b.n	8005512 <_printf_float+0x1da>
 8005752:	f04f 0800 	mov.w	r8, #0
 8005756:	f104 0b1a 	add.w	fp, r4, #26
 800575a:	e7f4      	b.n	8005746 <_printf_float+0x40e>
 800575c:	2301      	movs	r3, #1
 800575e:	4642      	mov	r2, r8
 8005760:	e7e1      	b.n	8005726 <_printf_float+0x3ee>
 8005762:	2301      	movs	r3, #1
 8005764:	464a      	mov	r2, r9
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	f43f ae3e 	beq.w	80053ee <_printf_float+0xb6>
 8005772:	f108 0801 	add.w	r8, r8, #1
 8005776:	68e3      	ldr	r3, [r4, #12]
 8005778:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800577a:	1a5b      	subs	r3, r3, r1
 800577c:	4543      	cmp	r3, r8
 800577e:	dcf0      	bgt.n	8005762 <_printf_float+0x42a>
 8005780:	e6fc      	b.n	800557c <_printf_float+0x244>
 8005782:	f04f 0800 	mov.w	r8, #0
 8005786:	f104 0919 	add.w	r9, r4, #25
 800578a:	e7f4      	b.n	8005776 <_printf_float+0x43e>

0800578c <_printf_common>:
 800578c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	4616      	mov	r6, r2
 8005792:	4698      	mov	r8, r3
 8005794:	688a      	ldr	r2, [r1, #8]
 8005796:	690b      	ldr	r3, [r1, #16]
 8005798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800579c:	4293      	cmp	r3, r2
 800579e:	bfb8      	it	lt
 80057a0:	4613      	movlt	r3, r2
 80057a2:	6033      	str	r3, [r6, #0]
 80057a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057a8:	4607      	mov	r7, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	b10a      	cbz	r2, 80057b2 <_printf_common+0x26>
 80057ae:	3301      	adds	r3, #1
 80057b0:	6033      	str	r3, [r6, #0]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	0699      	lsls	r1, r3, #26
 80057b6:	bf42      	ittt	mi
 80057b8:	6833      	ldrmi	r3, [r6, #0]
 80057ba:	3302      	addmi	r3, #2
 80057bc:	6033      	strmi	r3, [r6, #0]
 80057be:	6825      	ldr	r5, [r4, #0]
 80057c0:	f015 0506 	ands.w	r5, r5, #6
 80057c4:	d106      	bne.n	80057d4 <_printf_common+0x48>
 80057c6:	f104 0a19 	add.w	sl, r4, #25
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	6832      	ldr	r2, [r6, #0]
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	dc26      	bgt.n	8005822 <_printf_common+0x96>
 80057d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057d8:	6822      	ldr	r2, [r4, #0]
 80057da:	3b00      	subs	r3, #0
 80057dc:	bf18      	it	ne
 80057de:	2301      	movne	r3, #1
 80057e0:	0692      	lsls	r2, r2, #26
 80057e2:	d42b      	bmi.n	800583c <_printf_common+0xb0>
 80057e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057e8:	4641      	mov	r1, r8
 80057ea:	4638      	mov	r0, r7
 80057ec:	47c8      	blx	r9
 80057ee:	3001      	adds	r0, #1
 80057f0:	d01e      	beq.n	8005830 <_printf_common+0xa4>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	6922      	ldr	r2, [r4, #16]
 80057f6:	f003 0306 	and.w	r3, r3, #6
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	bf02      	ittt	eq
 80057fe:	68e5      	ldreq	r5, [r4, #12]
 8005800:	6833      	ldreq	r3, [r6, #0]
 8005802:	1aed      	subeq	r5, r5, r3
 8005804:	68a3      	ldr	r3, [r4, #8]
 8005806:	bf0c      	ite	eq
 8005808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800580c:	2500      	movne	r5, #0
 800580e:	4293      	cmp	r3, r2
 8005810:	bfc4      	itt	gt
 8005812:	1a9b      	subgt	r3, r3, r2
 8005814:	18ed      	addgt	r5, r5, r3
 8005816:	2600      	movs	r6, #0
 8005818:	341a      	adds	r4, #26
 800581a:	42b5      	cmp	r5, r6
 800581c:	d11a      	bne.n	8005854 <_printf_common+0xc8>
 800581e:	2000      	movs	r0, #0
 8005820:	e008      	b.n	8005834 <_printf_common+0xa8>
 8005822:	2301      	movs	r3, #1
 8005824:	4652      	mov	r2, sl
 8005826:	4641      	mov	r1, r8
 8005828:	4638      	mov	r0, r7
 800582a:	47c8      	blx	r9
 800582c:	3001      	adds	r0, #1
 800582e:	d103      	bne.n	8005838 <_printf_common+0xac>
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005838:	3501      	adds	r5, #1
 800583a:	e7c6      	b.n	80057ca <_printf_common+0x3e>
 800583c:	18e1      	adds	r1, r4, r3
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	2030      	movs	r0, #48	@ 0x30
 8005842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005846:	4422      	add	r2, r4
 8005848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800584c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005850:	3302      	adds	r3, #2
 8005852:	e7c7      	b.n	80057e4 <_printf_common+0x58>
 8005854:	2301      	movs	r3, #1
 8005856:	4622      	mov	r2, r4
 8005858:	4641      	mov	r1, r8
 800585a:	4638      	mov	r0, r7
 800585c:	47c8      	blx	r9
 800585e:	3001      	adds	r0, #1
 8005860:	d0e6      	beq.n	8005830 <_printf_common+0xa4>
 8005862:	3601      	adds	r6, #1
 8005864:	e7d9      	b.n	800581a <_printf_common+0x8e>
	...

08005868 <_printf_i>:
 8005868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	7e0f      	ldrb	r7, [r1, #24]
 800586e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005870:	2f78      	cmp	r7, #120	@ 0x78
 8005872:	4691      	mov	r9, r2
 8005874:	4680      	mov	r8, r0
 8005876:	460c      	mov	r4, r1
 8005878:	469a      	mov	sl, r3
 800587a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800587e:	d807      	bhi.n	8005890 <_printf_i+0x28>
 8005880:	2f62      	cmp	r7, #98	@ 0x62
 8005882:	d80a      	bhi.n	800589a <_printf_i+0x32>
 8005884:	2f00      	cmp	r7, #0
 8005886:	f000 80d2 	beq.w	8005a2e <_printf_i+0x1c6>
 800588a:	2f58      	cmp	r7, #88	@ 0x58
 800588c:	f000 80b9 	beq.w	8005a02 <_printf_i+0x19a>
 8005890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005898:	e03a      	b.n	8005910 <_printf_i+0xa8>
 800589a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800589e:	2b15      	cmp	r3, #21
 80058a0:	d8f6      	bhi.n	8005890 <_printf_i+0x28>
 80058a2:	a101      	add	r1, pc, #4	@ (adr r1, 80058a8 <_printf_i+0x40>)
 80058a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058a8:	08005901 	.word	0x08005901
 80058ac:	08005915 	.word	0x08005915
 80058b0:	08005891 	.word	0x08005891
 80058b4:	08005891 	.word	0x08005891
 80058b8:	08005891 	.word	0x08005891
 80058bc:	08005891 	.word	0x08005891
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005891 	.word	0x08005891
 80058c8:	08005891 	.word	0x08005891
 80058cc:	08005891 	.word	0x08005891
 80058d0:	08005891 	.word	0x08005891
 80058d4:	08005a15 	.word	0x08005a15
 80058d8:	0800593f 	.word	0x0800593f
 80058dc:	080059cf 	.word	0x080059cf
 80058e0:	08005891 	.word	0x08005891
 80058e4:	08005891 	.word	0x08005891
 80058e8:	08005a37 	.word	0x08005a37
 80058ec:	08005891 	.word	0x08005891
 80058f0:	0800593f 	.word	0x0800593f
 80058f4:	08005891 	.word	0x08005891
 80058f8:	08005891 	.word	0x08005891
 80058fc:	080059d7 	.word	0x080059d7
 8005900:	6833      	ldr	r3, [r6, #0]
 8005902:	1d1a      	adds	r2, r3, #4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6032      	str	r2, [r6, #0]
 8005908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800590c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005910:	2301      	movs	r3, #1
 8005912:	e09d      	b.n	8005a50 <_printf_i+0x1e8>
 8005914:	6833      	ldr	r3, [r6, #0]
 8005916:	6820      	ldr	r0, [r4, #0]
 8005918:	1d19      	adds	r1, r3, #4
 800591a:	6031      	str	r1, [r6, #0]
 800591c:	0606      	lsls	r6, r0, #24
 800591e:	d501      	bpl.n	8005924 <_printf_i+0xbc>
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	e003      	b.n	800592c <_printf_i+0xc4>
 8005924:	0645      	lsls	r5, r0, #25
 8005926:	d5fb      	bpl.n	8005920 <_printf_i+0xb8>
 8005928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800592c:	2d00      	cmp	r5, #0
 800592e:	da03      	bge.n	8005938 <_printf_i+0xd0>
 8005930:	232d      	movs	r3, #45	@ 0x2d
 8005932:	426d      	negs	r5, r5
 8005934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005938:	4859      	ldr	r0, [pc, #356]	@ (8005aa0 <_printf_i+0x238>)
 800593a:	230a      	movs	r3, #10
 800593c:	e011      	b.n	8005962 <_printf_i+0xfa>
 800593e:	6821      	ldr	r1, [r4, #0]
 8005940:	6833      	ldr	r3, [r6, #0]
 8005942:	0608      	lsls	r0, r1, #24
 8005944:	f853 5b04 	ldr.w	r5, [r3], #4
 8005948:	d402      	bmi.n	8005950 <_printf_i+0xe8>
 800594a:	0649      	lsls	r1, r1, #25
 800594c:	bf48      	it	mi
 800594e:	b2ad      	uxthmi	r5, r5
 8005950:	2f6f      	cmp	r7, #111	@ 0x6f
 8005952:	4853      	ldr	r0, [pc, #332]	@ (8005aa0 <_printf_i+0x238>)
 8005954:	6033      	str	r3, [r6, #0]
 8005956:	bf14      	ite	ne
 8005958:	230a      	movne	r3, #10
 800595a:	2308      	moveq	r3, #8
 800595c:	2100      	movs	r1, #0
 800595e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005962:	6866      	ldr	r6, [r4, #4]
 8005964:	60a6      	str	r6, [r4, #8]
 8005966:	2e00      	cmp	r6, #0
 8005968:	bfa2      	ittt	ge
 800596a:	6821      	ldrge	r1, [r4, #0]
 800596c:	f021 0104 	bicge.w	r1, r1, #4
 8005970:	6021      	strge	r1, [r4, #0]
 8005972:	b90d      	cbnz	r5, 8005978 <_printf_i+0x110>
 8005974:	2e00      	cmp	r6, #0
 8005976:	d04b      	beq.n	8005a10 <_printf_i+0x1a8>
 8005978:	4616      	mov	r6, r2
 800597a:	fbb5 f1f3 	udiv	r1, r5, r3
 800597e:	fb03 5711 	mls	r7, r3, r1, r5
 8005982:	5dc7      	ldrb	r7, [r0, r7]
 8005984:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005988:	462f      	mov	r7, r5
 800598a:	42bb      	cmp	r3, r7
 800598c:	460d      	mov	r5, r1
 800598e:	d9f4      	bls.n	800597a <_printf_i+0x112>
 8005990:	2b08      	cmp	r3, #8
 8005992:	d10b      	bne.n	80059ac <_printf_i+0x144>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	07df      	lsls	r7, r3, #31
 8005998:	d508      	bpl.n	80059ac <_printf_i+0x144>
 800599a:	6923      	ldr	r3, [r4, #16]
 800599c:	6861      	ldr	r1, [r4, #4]
 800599e:	4299      	cmp	r1, r3
 80059a0:	bfde      	ittt	le
 80059a2:	2330      	movle	r3, #48	@ 0x30
 80059a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059ac:	1b92      	subs	r2, r2, r6
 80059ae:	6122      	str	r2, [r4, #16]
 80059b0:	f8cd a000 	str.w	sl, [sp]
 80059b4:	464b      	mov	r3, r9
 80059b6:	aa03      	add	r2, sp, #12
 80059b8:	4621      	mov	r1, r4
 80059ba:	4640      	mov	r0, r8
 80059bc:	f7ff fee6 	bl	800578c <_printf_common>
 80059c0:	3001      	adds	r0, #1
 80059c2:	d14a      	bne.n	8005a5a <_printf_i+0x1f2>
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	b004      	add	sp, #16
 80059ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	f043 0320 	orr.w	r3, r3, #32
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	4833      	ldr	r0, [pc, #204]	@ (8005aa4 <_printf_i+0x23c>)
 80059d8:	2778      	movs	r7, #120	@ 0x78
 80059da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	6831      	ldr	r1, [r6, #0]
 80059e2:	061f      	lsls	r7, r3, #24
 80059e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80059e8:	d402      	bmi.n	80059f0 <_printf_i+0x188>
 80059ea:	065f      	lsls	r7, r3, #25
 80059ec:	bf48      	it	mi
 80059ee:	b2ad      	uxthmi	r5, r5
 80059f0:	6031      	str	r1, [r6, #0]
 80059f2:	07d9      	lsls	r1, r3, #31
 80059f4:	bf44      	itt	mi
 80059f6:	f043 0320 	orrmi.w	r3, r3, #32
 80059fa:	6023      	strmi	r3, [r4, #0]
 80059fc:	b11d      	cbz	r5, 8005a06 <_printf_i+0x19e>
 80059fe:	2310      	movs	r3, #16
 8005a00:	e7ac      	b.n	800595c <_printf_i+0xf4>
 8005a02:	4827      	ldr	r0, [pc, #156]	@ (8005aa0 <_printf_i+0x238>)
 8005a04:	e7e9      	b.n	80059da <_printf_i+0x172>
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	f023 0320 	bic.w	r3, r3, #32
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	e7f6      	b.n	80059fe <_printf_i+0x196>
 8005a10:	4616      	mov	r6, r2
 8005a12:	e7bd      	b.n	8005990 <_printf_i+0x128>
 8005a14:	6833      	ldr	r3, [r6, #0]
 8005a16:	6825      	ldr	r5, [r4, #0]
 8005a18:	6961      	ldr	r1, [r4, #20]
 8005a1a:	1d18      	adds	r0, r3, #4
 8005a1c:	6030      	str	r0, [r6, #0]
 8005a1e:	062e      	lsls	r6, r5, #24
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	d501      	bpl.n	8005a28 <_printf_i+0x1c0>
 8005a24:	6019      	str	r1, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <_printf_i+0x1c6>
 8005a28:	0668      	lsls	r0, r5, #25
 8005a2a:	d5fb      	bpl.n	8005a24 <_printf_i+0x1bc>
 8005a2c:	8019      	strh	r1, [r3, #0]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	6123      	str	r3, [r4, #16]
 8005a32:	4616      	mov	r6, r2
 8005a34:	e7bc      	b.n	80059b0 <_printf_i+0x148>
 8005a36:	6833      	ldr	r3, [r6, #0]
 8005a38:	1d1a      	adds	r2, r3, #4
 8005a3a:	6032      	str	r2, [r6, #0]
 8005a3c:	681e      	ldr	r6, [r3, #0]
 8005a3e:	6862      	ldr	r2, [r4, #4]
 8005a40:	2100      	movs	r1, #0
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7fa fbcc 	bl	80001e0 <memchr>
 8005a48:	b108      	cbz	r0, 8005a4e <_printf_i+0x1e6>
 8005a4a:	1b80      	subs	r0, r0, r6
 8005a4c:	6060      	str	r0, [r4, #4]
 8005a4e:	6863      	ldr	r3, [r4, #4]
 8005a50:	6123      	str	r3, [r4, #16]
 8005a52:	2300      	movs	r3, #0
 8005a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a58:	e7aa      	b.n	80059b0 <_printf_i+0x148>
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4640      	mov	r0, r8
 8005a62:	47d0      	blx	sl
 8005a64:	3001      	adds	r0, #1
 8005a66:	d0ad      	beq.n	80059c4 <_printf_i+0x15c>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	079b      	lsls	r3, r3, #30
 8005a6c:	d413      	bmi.n	8005a96 <_printf_i+0x22e>
 8005a6e:	68e0      	ldr	r0, [r4, #12]
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	4298      	cmp	r0, r3
 8005a74:	bfb8      	it	lt
 8005a76:	4618      	movlt	r0, r3
 8005a78:	e7a6      	b.n	80059c8 <_printf_i+0x160>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4632      	mov	r2, r6
 8005a7e:	4649      	mov	r1, r9
 8005a80:	4640      	mov	r0, r8
 8005a82:	47d0      	blx	sl
 8005a84:	3001      	adds	r0, #1
 8005a86:	d09d      	beq.n	80059c4 <_printf_i+0x15c>
 8005a88:	3501      	adds	r5, #1
 8005a8a:	68e3      	ldr	r3, [r4, #12]
 8005a8c:	9903      	ldr	r1, [sp, #12]
 8005a8e:	1a5b      	subs	r3, r3, r1
 8005a90:	42ab      	cmp	r3, r5
 8005a92:	dcf2      	bgt.n	8005a7a <_printf_i+0x212>
 8005a94:	e7eb      	b.n	8005a6e <_printf_i+0x206>
 8005a96:	2500      	movs	r5, #0
 8005a98:	f104 0619 	add.w	r6, r4, #25
 8005a9c:	e7f5      	b.n	8005a8a <_printf_i+0x222>
 8005a9e:	bf00      	nop
 8005aa0:	08007d22 	.word	0x08007d22
 8005aa4:	08007d33 	.word	0x08007d33

08005aa8 <std>:
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	b510      	push	{r4, lr}
 8005aac:	4604      	mov	r4, r0
 8005aae:	e9c0 3300 	strd	r3, r3, [r0]
 8005ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ab6:	6083      	str	r3, [r0, #8]
 8005ab8:	8181      	strh	r1, [r0, #12]
 8005aba:	6643      	str	r3, [r0, #100]	@ 0x64
 8005abc:	81c2      	strh	r2, [r0, #14]
 8005abe:	6183      	str	r3, [r0, #24]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	2208      	movs	r2, #8
 8005ac4:	305c      	adds	r0, #92	@ 0x5c
 8005ac6:	f000 f9f9 	bl	8005ebc <memset>
 8005aca:	4b0d      	ldr	r3, [pc, #52]	@ (8005b00 <std+0x58>)
 8005acc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ace:	4b0d      	ldr	r3, [pc, #52]	@ (8005b04 <std+0x5c>)
 8005ad0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b08 <std+0x60>)
 8005ad4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b0c <std+0x64>)
 8005ad8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ada:	4b0d      	ldr	r3, [pc, #52]	@ (8005b10 <std+0x68>)
 8005adc:	6224      	str	r4, [r4, #32]
 8005ade:	429c      	cmp	r4, r3
 8005ae0:	d006      	beq.n	8005af0 <std+0x48>
 8005ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ae6:	4294      	cmp	r4, r2
 8005ae8:	d002      	beq.n	8005af0 <std+0x48>
 8005aea:	33d0      	adds	r3, #208	@ 0xd0
 8005aec:	429c      	cmp	r4, r3
 8005aee:	d105      	bne.n	8005afc <std+0x54>
 8005af0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af8:	f000 ba5c 	b.w	8005fb4 <__retarget_lock_init_recursive>
 8005afc:	bd10      	pop	{r4, pc}
 8005afe:	bf00      	nop
 8005b00:	08005d0d 	.word	0x08005d0d
 8005b04:	08005d2f 	.word	0x08005d2f
 8005b08:	08005d67 	.word	0x08005d67
 8005b0c:	08005d8b 	.word	0x08005d8b
 8005b10:	200003b4 	.word	0x200003b4

08005b14 <stdio_exit_handler>:
 8005b14:	4a02      	ldr	r2, [pc, #8]	@ (8005b20 <stdio_exit_handler+0xc>)
 8005b16:	4903      	ldr	r1, [pc, #12]	@ (8005b24 <stdio_exit_handler+0x10>)
 8005b18:	4803      	ldr	r0, [pc, #12]	@ (8005b28 <stdio_exit_handler+0x14>)
 8005b1a:	f000 b869 	b.w	8005bf0 <_fwalk_sglue>
 8005b1e:	bf00      	nop
 8005b20:	2000000c 	.word	0x2000000c
 8005b24:	080078e9 	.word	0x080078e9
 8005b28:	2000001c 	.word	0x2000001c

08005b2c <cleanup_stdio>:
 8005b2c:	6841      	ldr	r1, [r0, #4]
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <cleanup_stdio+0x34>)
 8005b30:	4299      	cmp	r1, r3
 8005b32:	b510      	push	{r4, lr}
 8005b34:	4604      	mov	r4, r0
 8005b36:	d001      	beq.n	8005b3c <cleanup_stdio+0x10>
 8005b38:	f001 fed6 	bl	80078e8 <_fflush_r>
 8005b3c:	68a1      	ldr	r1, [r4, #8]
 8005b3e:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <cleanup_stdio+0x38>)
 8005b40:	4299      	cmp	r1, r3
 8005b42:	d002      	beq.n	8005b4a <cleanup_stdio+0x1e>
 8005b44:	4620      	mov	r0, r4
 8005b46:	f001 fecf 	bl	80078e8 <_fflush_r>
 8005b4a:	68e1      	ldr	r1, [r4, #12]
 8005b4c:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <cleanup_stdio+0x3c>)
 8005b4e:	4299      	cmp	r1, r3
 8005b50:	d004      	beq.n	8005b5c <cleanup_stdio+0x30>
 8005b52:	4620      	mov	r0, r4
 8005b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b58:	f001 bec6 	b.w	80078e8 <_fflush_r>
 8005b5c:	bd10      	pop	{r4, pc}
 8005b5e:	bf00      	nop
 8005b60:	200003b4 	.word	0x200003b4
 8005b64:	2000041c 	.word	0x2000041c
 8005b68:	20000484 	.word	0x20000484

08005b6c <global_stdio_init.part.0>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b9c <global_stdio_init.part.0+0x30>)
 8005b70:	4c0b      	ldr	r4, [pc, #44]	@ (8005ba0 <global_stdio_init.part.0+0x34>)
 8005b72:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba4 <global_stdio_init.part.0+0x38>)
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	4620      	mov	r0, r4
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2104      	movs	r1, #4
 8005b7c:	f7ff ff94 	bl	8005aa8 <std>
 8005b80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b84:	2201      	movs	r2, #1
 8005b86:	2109      	movs	r1, #9
 8005b88:	f7ff ff8e 	bl	8005aa8 <std>
 8005b8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b90:	2202      	movs	r2, #2
 8005b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b96:	2112      	movs	r1, #18
 8005b98:	f7ff bf86 	b.w	8005aa8 <std>
 8005b9c:	200004ec 	.word	0x200004ec
 8005ba0:	200003b4 	.word	0x200003b4
 8005ba4:	08005b15 	.word	0x08005b15

08005ba8 <__sfp_lock_acquire>:
 8005ba8:	4801      	ldr	r0, [pc, #4]	@ (8005bb0 <__sfp_lock_acquire+0x8>)
 8005baa:	f000 ba04 	b.w	8005fb6 <__retarget_lock_acquire_recursive>
 8005bae:	bf00      	nop
 8005bb0:	200004f5 	.word	0x200004f5

08005bb4 <__sfp_lock_release>:
 8005bb4:	4801      	ldr	r0, [pc, #4]	@ (8005bbc <__sfp_lock_release+0x8>)
 8005bb6:	f000 b9ff 	b.w	8005fb8 <__retarget_lock_release_recursive>
 8005bba:	bf00      	nop
 8005bbc:	200004f5 	.word	0x200004f5

08005bc0 <__sinit>:
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	f7ff fff0 	bl	8005ba8 <__sfp_lock_acquire>
 8005bc8:	6a23      	ldr	r3, [r4, #32]
 8005bca:	b11b      	cbz	r3, 8005bd4 <__sinit+0x14>
 8005bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd0:	f7ff bff0 	b.w	8005bb4 <__sfp_lock_release>
 8005bd4:	4b04      	ldr	r3, [pc, #16]	@ (8005be8 <__sinit+0x28>)
 8005bd6:	6223      	str	r3, [r4, #32]
 8005bd8:	4b04      	ldr	r3, [pc, #16]	@ (8005bec <__sinit+0x2c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f5      	bne.n	8005bcc <__sinit+0xc>
 8005be0:	f7ff ffc4 	bl	8005b6c <global_stdio_init.part.0>
 8005be4:	e7f2      	b.n	8005bcc <__sinit+0xc>
 8005be6:	bf00      	nop
 8005be8:	08005b2d 	.word	0x08005b2d
 8005bec:	200004ec 	.word	0x200004ec

08005bf0 <_fwalk_sglue>:
 8005bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf4:	4607      	mov	r7, r0
 8005bf6:	4688      	mov	r8, r1
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c00:	f1b9 0901 	subs.w	r9, r9, #1
 8005c04:	d505      	bpl.n	8005c12 <_fwalk_sglue+0x22>
 8005c06:	6824      	ldr	r4, [r4, #0]
 8005c08:	2c00      	cmp	r4, #0
 8005c0a:	d1f7      	bne.n	8005bfc <_fwalk_sglue+0xc>
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c12:	89ab      	ldrh	r3, [r5, #12]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d907      	bls.n	8005c28 <_fwalk_sglue+0x38>
 8005c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	d003      	beq.n	8005c28 <_fwalk_sglue+0x38>
 8005c20:	4629      	mov	r1, r5
 8005c22:	4638      	mov	r0, r7
 8005c24:	47c0      	blx	r8
 8005c26:	4306      	orrs	r6, r0
 8005c28:	3568      	adds	r5, #104	@ 0x68
 8005c2a:	e7e9      	b.n	8005c00 <_fwalk_sglue+0x10>

08005c2c <iprintf>:
 8005c2c:	b40f      	push	{r0, r1, r2, r3}
 8005c2e:	b507      	push	{r0, r1, r2, lr}
 8005c30:	4906      	ldr	r1, [pc, #24]	@ (8005c4c <iprintf+0x20>)
 8005c32:	ab04      	add	r3, sp, #16
 8005c34:	6808      	ldr	r0, [r1, #0]
 8005c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c3a:	6881      	ldr	r1, [r0, #8]
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	f001 fcb7 	bl	80075b0 <_vfiprintf_r>
 8005c42:	b003      	add	sp, #12
 8005c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c48:	b004      	add	sp, #16
 8005c4a:	4770      	bx	lr
 8005c4c:	20000018 	.word	0x20000018

08005c50 <_puts_r>:
 8005c50:	6a03      	ldr	r3, [r0, #32]
 8005c52:	b570      	push	{r4, r5, r6, lr}
 8005c54:	6884      	ldr	r4, [r0, #8]
 8005c56:	4605      	mov	r5, r0
 8005c58:	460e      	mov	r6, r1
 8005c5a:	b90b      	cbnz	r3, 8005c60 <_puts_r+0x10>
 8005c5c:	f7ff ffb0 	bl	8005bc0 <__sinit>
 8005c60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c62:	07db      	lsls	r3, r3, #31
 8005c64:	d405      	bmi.n	8005c72 <_puts_r+0x22>
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	0598      	lsls	r0, r3, #22
 8005c6a:	d402      	bmi.n	8005c72 <_puts_r+0x22>
 8005c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c6e:	f000 f9a2 	bl	8005fb6 <__retarget_lock_acquire_recursive>
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	0719      	lsls	r1, r3, #28
 8005c76:	d502      	bpl.n	8005c7e <_puts_r+0x2e>
 8005c78:	6923      	ldr	r3, [r4, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d135      	bne.n	8005cea <_puts_r+0x9a>
 8005c7e:	4621      	mov	r1, r4
 8005c80:	4628      	mov	r0, r5
 8005c82:	f000 f8c5 	bl	8005e10 <__swsetup_r>
 8005c86:	b380      	cbz	r0, 8005cea <_puts_r+0x9a>
 8005c88:	f04f 35ff 	mov.w	r5, #4294967295
 8005c8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c8e:	07da      	lsls	r2, r3, #31
 8005c90:	d405      	bmi.n	8005c9e <_puts_r+0x4e>
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	059b      	lsls	r3, r3, #22
 8005c96:	d402      	bmi.n	8005c9e <_puts_r+0x4e>
 8005c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c9a:	f000 f98d 	bl	8005fb8 <__retarget_lock_release_recursive>
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	bd70      	pop	{r4, r5, r6, pc}
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da04      	bge.n	8005cb0 <_puts_r+0x60>
 8005ca6:	69a2      	ldr	r2, [r4, #24]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	dc17      	bgt.n	8005cdc <_puts_r+0x8c>
 8005cac:	290a      	cmp	r1, #10
 8005cae:	d015      	beq.n	8005cdc <_puts_r+0x8c>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	6022      	str	r2, [r4, #0]
 8005cb6:	7019      	strb	r1, [r3, #0]
 8005cb8:	68a3      	ldr	r3, [r4, #8]
 8005cba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	60a3      	str	r3, [r4, #8]
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	d1ed      	bne.n	8005ca2 <_puts_r+0x52>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	da11      	bge.n	8005cee <_puts_r+0x9e>
 8005cca:	4622      	mov	r2, r4
 8005ccc:	210a      	movs	r1, #10
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 f85f 	bl	8005d92 <__swbuf_r>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d0d7      	beq.n	8005c88 <_puts_r+0x38>
 8005cd8:	250a      	movs	r5, #10
 8005cda:	e7d7      	b.n	8005c8c <_puts_r+0x3c>
 8005cdc:	4622      	mov	r2, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 f857 	bl	8005d92 <__swbuf_r>
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d1e7      	bne.n	8005cb8 <_puts_r+0x68>
 8005ce8:	e7ce      	b.n	8005c88 <_puts_r+0x38>
 8005cea:	3e01      	subs	r6, #1
 8005cec:	e7e4      	b.n	8005cb8 <_puts_r+0x68>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	6022      	str	r2, [r4, #0]
 8005cf4:	220a      	movs	r2, #10
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	e7ee      	b.n	8005cd8 <_puts_r+0x88>
	...

08005cfc <puts>:
 8005cfc:	4b02      	ldr	r3, [pc, #8]	@ (8005d08 <puts+0xc>)
 8005cfe:	4601      	mov	r1, r0
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	f7ff bfa5 	b.w	8005c50 <_puts_r>
 8005d06:	bf00      	nop
 8005d08:	20000018 	.word	0x20000018

08005d0c <__sread>:
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	460c      	mov	r4, r1
 8005d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d14:	f000 f900 	bl	8005f18 <_read_r>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	bfab      	itete	ge
 8005d1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d20:	181b      	addge	r3, r3, r0
 8005d22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d26:	bfac      	ite	ge
 8005d28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d2a:	81a3      	strhlt	r3, [r4, #12]
 8005d2c:	bd10      	pop	{r4, pc}

08005d2e <__swrite>:
 8005d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d32:	461f      	mov	r7, r3
 8005d34:	898b      	ldrh	r3, [r1, #12]
 8005d36:	05db      	lsls	r3, r3, #23
 8005d38:	4605      	mov	r5, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	d505      	bpl.n	8005d4c <__swrite+0x1e>
 8005d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d44:	2302      	movs	r3, #2
 8005d46:	2200      	movs	r2, #0
 8005d48:	f000 f8d4 	bl	8005ef4 <_lseek_r>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	4632      	mov	r2, r6
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d62:	f000 b8eb 	b.w	8005f3c <_write_r>

08005d66 <__sseek>:
 8005d66:	b510      	push	{r4, lr}
 8005d68:	460c      	mov	r4, r1
 8005d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d6e:	f000 f8c1 	bl	8005ef4 <_lseek_r>
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	bf15      	itete	ne
 8005d78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d82:	81a3      	strheq	r3, [r4, #12]
 8005d84:	bf18      	it	ne
 8005d86:	81a3      	strhne	r3, [r4, #12]
 8005d88:	bd10      	pop	{r4, pc}

08005d8a <__sclose>:
 8005d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8e:	f000 b8a1 	b.w	8005ed4 <_close_r>

08005d92 <__swbuf_r>:
 8005d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d94:	460e      	mov	r6, r1
 8005d96:	4614      	mov	r4, r2
 8005d98:	4605      	mov	r5, r0
 8005d9a:	b118      	cbz	r0, 8005da4 <__swbuf_r+0x12>
 8005d9c:	6a03      	ldr	r3, [r0, #32]
 8005d9e:	b90b      	cbnz	r3, 8005da4 <__swbuf_r+0x12>
 8005da0:	f7ff ff0e 	bl	8005bc0 <__sinit>
 8005da4:	69a3      	ldr	r3, [r4, #24]
 8005da6:	60a3      	str	r3, [r4, #8]
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	071a      	lsls	r2, r3, #28
 8005dac:	d501      	bpl.n	8005db2 <__swbuf_r+0x20>
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	b943      	cbnz	r3, 8005dc4 <__swbuf_r+0x32>
 8005db2:	4621      	mov	r1, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 f82b 	bl	8005e10 <__swsetup_r>
 8005dba:	b118      	cbz	r0, 8005dc4 <__swbuf_r+0x32>
 8005dbc:	f04f 37ff 	mov.w	r7, #4294967295
 8005dc0:	4638      	mov	r0, r7
 8005dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	6922      	ldr	r2, [r4, #16]
 8005dc8:	1a98      	subs	r0, r3, r2
 8005dca:	6963      	ldr	r3, [r4, #20]
 8005dcc:	b2f6      	uxtb	r6, r6
 8005dce:	4283      	cmp	r3, r0
 8005dd0:	4637      	mov	r7, r6
 8005dd2:	dc05      	bgt.n	8005de0 <__swbuf_r+0x4e>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f001 fd86 	bl	80078e8 <_fflush_r>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d1ed      	bne.n	8005dbc <__swbuf_r+0x2a>
 8005de0:	68a3      	ldr	r3, [r4, #8]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	60a3      	str	r3, [r4, #8]
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	6022      	str	r2, [r4, #0]
 8005dec:	701e      	strb	r6, [r3, #0]
 8005dee:	6962      	ldr	r2, [r4, #20]
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d004      	beq.n	8005e00 <__swbuf_r+0x6e>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	07db      	lsls	r3, r3, #31
 8005dfa:	d5e1      	bpl.n	8005dc0 <__swbuf_r+0x2e>
 8005dfc:	2e0a      	cmp	r6, #10
 8005dfe:	d1df      	bne.n	8005dc0 <__swbuf_r+0x2e>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4628      	mov	r0, r5
 8005e04:	f001 fd70 	bl	80078e8 <_fflush_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d0d9      	beq.n	8005dc0 <__swbuf_r+0x2e>
 8005e0c:	e7d6      	b.n	8005dbc <__swbuf_r+0x2a>
	...

08005e10 <__swsetup_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4b29      	ldr	r3, [pc, #164]	@ (8005eb8 <__swsetup_r+0xa8>)
 8005e14:	4605      	mov	r5, r0
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	460c      	mov	r4, r1
 8005e1a:	b118      	cbz	r0, 8005e24 <__swsetup_r+0x14>
 8005e1c:	6a03      	ldr	r3, [r0, #32]
 8005e1e:	b90b      	cbnz	r3, 8005e24 <__swsetup_r+0x14>
 8005e20:	f7ff fece 	bl	8005bc0 <__sinit>
 8005e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e28:	0719      	lsls	r1, r3, #28
 8005e2a:	d422      	bmi.n	8005e72 <__swsetup_r+0x62>
 8005e2c:	06da      	lsls	r2, r3, #27
 8005e2e:	d407      	bmi.n	8005e40 <__swsetup_r+0x30>
 8005e30:	2209      	movs	r2, #9
 8005e32:	602a      	str	r2, [r5, #0]
 8005e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3e:	e033      	b.n	8005ea8 <__swsetup_r+0x98>
 8005e40:	0758      	lsls	r0, r3, #29
 8005e42:	d512      	bpl.n	8005e6a <__swsetup_r+0x5a>
 8005e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e46:	b141      	cbz	r1, 8005e5a <__swsetup_r+0x4a>
 8005e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d002      	beq.n	8005e56 <__swsetup_r+0x46>
 8005e50:	4628      	mov	r0, r5
 8005e52:	f000 ff01 	bl	8006c58 <_free_r>
 8005e56:	2300      	movs	r3, #0
 8005e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	2300      	movs	r3, #0
 8005e64:	6063      	str	r3, [r4, #4]
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	f043 0308 	orr.w	r3, r3, #8
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	b94b      	cbnz	r3, 8005e8a <__swsetup_r+0x7a>
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e80:	d003      	beq.n	8005e8a <__swsetup_r+0x7a>
 8005e82:	4621      	mov	r1, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	f001 fd7d 	bl	8007984 <__smakebuf_r>
 8005e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8e:	f013 0201 	ands.w	r2, r3, #1
 8005e92:	d00a      	beq.n	8005eaa <__swsetup_r+0x9a>
 8005e94:	2200      	movs	r2, #0
 8005e96:	60a2      	str	r2, [r4, #8]
 8005e98:	6962      	ldr	r2, [r4, #20]
 8005e9a:	4252      	negs	r2, r2
 8005e9c:	61a2      	str	r2, [r4, #24]
 8005e9e:	6922      	ldr	r2, [r4, #16]
 8005ea0:	b942      	cbnz	r2, 8005eb4 <__swsetup_r+0xa4>
 8005ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ea6:	d1c5      	bne.n	8005e34 <__swsetup_r+0x24>
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
 8005eaa:	0799      	lsls	r1, r3, #30
 8005eac:	bf58      	it	pl
 8005eae:	6962      	ldrpl	r2, [r4, #20]
 8005eb0:	60a2      	str	r2, [r4, #8]
 8005eb2:	e7f4      	b.n	8005e9e <__swsetup_r+0x8e>
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	e7f7      	b.n	8005ea8 <__swsetup_r+0x98>
 8005eb8:	20000018 	.word	0x20000018

08005ebc <memset>:
 8005ebc:	4402      	add	r2, r0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d100      	bne.n	8005ec6 <memset+0xa>
 8005ec4:	4770      	bx	lr
 8005ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eca:	e7f9      	b.n	8005ec0 <memset+0x4>

08005ecc <_localeconv_r>:
 8005ecc:	4800      	ldr	r0, [pc, #0]	@ (8005ed0 <_localeconv_r+0x4>)
 8005ece:	4770      	bx	lr
 8005ed0:	20000158 	.word	0x20000158

08005ed4 <_close_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4d06      	ldr	r5, [pc, #24]	@ (8005ef0 <_close_r+0x1c>)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	f7fc f91a 	bl	8002118 <_close>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_close_r+0x1a>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_close_r+0x1a>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	200004f0 	.word	0x200004f0

08005ef4 <_lseek_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4d07      	ldr	r5, [pc, #28]	@ (8005f14 <_lseek_r+0x20>)
 8005ef8:	4604      	mov	r4, r0
 8005efa:	4608      	mov	r0, r1
 8005efc:	4611      	mov	r1, r2
 8005efe:	2200      	movs	r2, #0
 8005f00:	602a      	str	r2, [r5, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f7fc f92f 	bl	8002166 <_lseek>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_lseek_r+0x1e>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_lseek_r+0x1e>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	200004f0 	.word	0x200004f0

08005f18 <_read_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d07      	ldr	r5, [pc, #28]	@ (8005f38 <_read_r+0x20>)
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	4608      	mov	r0, r1
 8005f20:	4611      	mov	r1, r2
 8005f22:	2200      	movs	r2, #0
 8005f24:	602a      	str	r2, [r5, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7fc f8bd 	bl	80020a6 <_read>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_read_r+0x1e>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_read_r+0x1e>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	200004f0 	.word	0x200004f0

08005f3c <_write_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	@ (8005f5c <_write_r+0x20>)
 8005f40:	4604      	mov	r4, r0
 8005f42:	4608      	mov	r0, r1
 8005f44:	4611      	mov	r1, r2
 8005f46:	2200      	movs	r2, #0
 8005f48:	602a      	str	r2, [r5, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f7fc f8c8 	bl	80020e0 <_write>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_write_r+0x1e>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_write_r+0x1e>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	200004f0 	.word	0x200004f0

08005f60 <__errno>:
 8005f60:	4b01      	ldr	r3, [pc, #4]	@ (8005f68 <__errno+0x8>)
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000018 	.word	0x20000018

08005f6c <__libc_init_array>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005fa4 <__libc_init_array+0x38>)
 8005f70:	4c0d      	ldr	r4, [pc, #52]	@ (8005fa8 <__libc_init_array+0x3c>)
 8005f72:	1b64      	subs	r4, r4, r5
 8005f74:	10a4      	asrs	r4, r4, #2
 8005f76:	2600      	movs	r6, #0
 8005f78:	42a6      	cmp	r6, r4
 8005f7a:	d109      	bne.n	8005f90 <__libc_init_array+0x24>
 8005f7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005fac <__libc_init_array+0x40>)
 8005f7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005fb0 <__libc_init_array+0x44>)
 8005f80:	f001 fe2c 	bl	8007bdc <_init>
 8005f84:	1b64      	subs	r4, r4, r5
 8005f86:	10a4      	asrs	r4, r4, #2
 8005f88:	2600      	movs	r6, #0
 8005f8a:	42a6      	cmp	r6, r4
 8005f8c:	d105      	bne.n	8005f9a <__libc_init_array+0x2e>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f94:	4798      	blx	r3
 8005f96:	3601      	adds	r6, #1
 8005f98:	e7ee      	b.n	8005f78 <__libc_init_array+0xc>
 8005f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9e:	4798      	blx	r3
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	e7f2      	b.n	8005f8a <__libc_init_array+0x1e>
 8005fa4:	08008088 	.word	0x08008088
 8005fa8:	08008088 	.word	0x08008088
 8005fac:	08008088 	.word	0x08008088
 8005fb0:	0800808c 	.word	0x0800808c

08005fb4 <__retarget_lock_init_recursive>:
 8005fb4:	4770      	bx	lr

08005fb6 <__retarget_lock_acquire_recursive>:
 8005fb6:	4770      	bx	lr

08005fb8 <__retarget_lock_release_recursive>:
 8005fb8:	4770      	bx	lr

08005fba <quorem>:
 8005fba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbe:	6903      	ldr	r3, [r0, #16]
 8005fc0:	690c      	ldr	r4, [r1, #16]
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	db7e      	blt.n	80060c6 <quorem+0x10c>
 8005fc8:	3c01      	subs	r4, #1
 8005fca:	f101 0814 	add.w	r8, r1, #20
 8005fce:	00a3      	lsls	r3, r4, #2
 8005fd0:	f100 0514 	add.w	r5, r0, #20
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fec:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ff0:	d32e      	bcc.n	8006050 <quorem+0x96>
 8005ff2:	f04f 0a00 	mov.w	sl, #0
 8005ff6:	46c4      	mov	ip, r8
 8005ff8:	46ae      	mov	lr, r5
 8005ffa:	46d3      	mov	fp, sl
 8005ffc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006000:	b298      	uxth	r0, r3
 8006002:	fb06 a000 	mla	r0, r6, r0, sl
 8006006:	0c02      	lsrs	r2, r0, #16
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	fb06 2303 	mla	r3, r6, r3, r2
 800600e:	f8de 2000 	ldr.w	r2, [lr]
 8006012:	b280      	uxth	r0, r0
 8006014:	b292      	uxth	r2, r2
 8006016:	1a12      	subs	r2, r2, r0
 8006018:	445a      	add	r2, fp
 800601a:	f8de 0000 	ldr.w	r0, [lr]
 800601e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006022:	b29b      	uxth	r3, r3
 8006024:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006028:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800602c:	b292      	uxth	r2, r2
 800602e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006032:	45e1      	cmp	r9, ip
 8006034:	f84e 2b04 	str.w	r2, [lr], #4
 8006038:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800603c:	d2de      	bcs.n	8005ffc <quorem+0x42>
 800603e:	9b00      	ldr	r3, [sp, #0]
 8006040:	58eb      	ldr	r3, [r5, r3]
 8006042:	b92b      	cbnz	r3, 8006050 <quorem+0x96>
 8006044:	9b01      	ldr	r3, [sp, #4]
 8006046:	3b04      	subs	r3, #4
 8006048:	429d      	cmp	r5, r3
 800604a:	461a      	mov	r2, r3
 800604c:	d32f      	bcc.n	80060ae <quorem+0xf4>
 800604e:	613c      	str	r4, [r7, #16]
 8006050:	4638      	mov	r0, r7
 8006052:	f001 f97b 	bl	800734c <__mcmp>
 8006056:	2800      	cmp	r0, #0
 8006058:	db25      	blt.n	80060a6 <quorem+0xec>
 800605a:	4629      	mov	r1, r5
 800605c:	2000      	movs	r0, #0
 800605e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006062:	f8d1 c000 	ldr.w	ip, [r1]
 8006066:	fa1f fe82 	uxth.w	lr, r2
 800606a:	fa1f f38c 	uxth.w	r3, ip
 800606e:	eba3 030e 	sub.w	r3, r3, lr
 8006072:	4403      	add	r3, r0
 8006074:	0c12      	lsrs	r2, r2, #16
 8006076:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800607a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800607e:	b29b      	uxth	r3, r3
 8006080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006084:	45c1      	cmp	r9, r8
 8006086:	f841 3b04 	str.w	r3, [r1], #4
 800608a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800608e:	d2e6      	bcs.n	800605e <quorem+0xa4>
 8006090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006094:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006098:	b922      	cbnz	r2, 80060a4 <quorem+0xea>
 800609a:	3b04      	subs	r3, #4
 800609c:	429d      	cmp	r5, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	d30b      	bcc.n	80060ba <quorem+0x100>
 80060a2:	613c      	str	r4, [r7, #16]
 80060a4:	3601      	adds	r6, #1
 80060a6:	4630      	mov	r0, r6
 80060a8:	b003      	add	sp, #12
 80060aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	3b04      	subs	r3, #4
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	d1cb      	bne.n	800604e <quorem+0x94>
 80060b6:	3c01      	subs	r4, #1
 80060b8:	e7c6      	b.n	8006048 <quorem+0x8e>
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	3b04      	subs	r3, #4
 80060be:	2a00      	cmp	r2, #0
 80060c0:	d1ef      	bne.n	80060a2 <quorem+0xe8>
 80060c2:	3c01      	subs	r4, #1
 80060c4:	e7ea      	b.n	800609c <quorem+0xe2>
 80060c6:	2000      	movs	r0, #0
 80060c8:	e7ee      	b.n	80060a8 <quorem+0xee>
 80060ca:	0000      	movs	r0, r0
 80060cc:	0000      	movs	r0, r0
	...

080060d0 <_dtoa_r>:
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	69c7      	ldr	r7, [r0, #28]
 80060d6:	b099      	sub	sp, #100	@ 0x64
 80060d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80060dc:	ec55 4b10 	vmov	r4, r5, d0
 80060e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80060e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80060e4:	4683      	mov	fp, r0
 80060e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80060e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060ea:	b97f      	cbnz	r7, 800610c <_dtoa_r+0x3c>
 80060ec:	2010      	movs	r0, #16
 80060ee:	f000 fdfd 	bl	8006cec <malloc>
 80060f2:	4602      	mov	r2, r0
 80060f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80060f8:	b920      	cbnz	r0, 8006104 <_dtoa_r+0x34>
 80060fa:	4ba7      	ldr	r3, [pc, #668]	@ (8006398 <_dtoa_r+0x2c8>)
 80060fc:	21ef      	movs	r1, #239	@ 0xef
 80060fe:	48a7      	ldr	r0, [pc, #668]	@ (800639c <_dtoa_r+0x2cc>)
 8006100:	f001 fcbc 	bl	8007a7c <__assert_func>
 8006104:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006108:	6007      	str	r7, [r0, #0]
 800610a:	60c7      	str	r7, [r0, #12]
 800610c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006110:	6819      	ldr	r1, [r3, #0]
 8006112:	b159      	cbz	r1, 800612c <_dtoa_r+0x5c>
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	604a      	str	r2, [r1, #4]
 8006118:	2301      	movs	r3, #1
 800611a:	4093      	lsls	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
 800611e:	4658      	mov	r0, fp
 8006120:	f000 feda 	bl	8006ed8 <_Bfree>
 8006124:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	1e2b      	subs	r3, r5, #0
 800612e:	bfb9      	ittee	lt
 8006130:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006134:	9303      	strlt	r3, [sp, #12]
 8006136:	2300      	movge	r3, #0
 8006138:	6033      	strge	r3, [r6, #0]
 800613a:	9f03      	ldr	r7, [sp, #12]
 800613c:	4b98      	ldr	r3, [pc, #608]	@ (80063a0 <_dtoa_r+0x2d0>)
 800613e:	bfbc      	itt	lt
 8006140:	2201      	movlt	r2, #1
 8006142:	6032      	strlt	r2, [r6, #0]
 8006144:	43bb      	bics	r3, r7
 8006146:	d112      	bne.n	800616e <_dtoa_r+0x9e>
 8006148:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800614a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006154:	4323      	orrs	r3, r4
 8006156:	f000 854d 	beq.w	8006bf4 <_dtoa_r+0xb24>
 800615a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800615c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80063b4 <_dtoa_r+0x2e4>
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 854f 	beq.w	8006c04 <_dtoa_r+0xb34>
 8006166:	f10a 0303 	add.w	r3, sl, #3
 800616a:	f000 bd49 	b.w	8006c00 <_dtoa_r+0xb30>
 800616e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006172:	2200      	movs	r2, #0
 8006174:	ec51 0b17 	vmov	r0, r1, d7
 8006178:	2300      	movs	r3, #0
 800617a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800617e:	f7fa fcab 	bl	8000ad8 <__aeabi_dcmpeq>
 8006182:	4680      	mov	r8, r0
 8006184:	b158      	cbz	r0, 800619e <_dtoa_r+0xce>
 8006186:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006188:	2301      	movs	r3, #1
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800618e:	b113      	cbz	r3, 8006196 <_dtoa_r+0xc6>
 8006190:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006192:	4b84      	ldr	r3, [pc, #528]	@ (80063a4 <_dtoa_r+0x2d4>)
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80063b8 <_dtoa_r+0x2e8>
 800619a:	f000 bd33 	b.w	8006c04 <_dtoa_r+0xb34>
 800619e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80061a2:	aa16      	add	r2, sp, #88	@ 0x58
 80061a4:	a917      	add	r1, sp, #92	@ 0x5c
 80061a6:	4658      	mov	r0, fp
 80061a8:	f001 f980 	bl	80074ac <__d2b>
 80061ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80061b0:	4681      	mov	r9, r0
 80061b2:	2e00      	cmp	r6, #0
 80061b4:	d077      	beq.n	80062a6 <_dtoa_r+0x1d6>
 80061b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80061bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80061c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80061cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80061d0:	4619      	mov	r1, r3
 80061d2:	2200      	movs	r2, #0
 80061d4:	4b74      	ldr	r3, [pc, #464]	@ (80063a8 <_dtoa_r+0x2d8>)
 80061d6:	f7fa f85f 	bl	8000298 <__aeabi_dsub>
 80061da:	a369      	add	r3, pc, #420	@ (adr r3, 8006380 <_dtoa_r+0x2b0>)
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f7fa fa12 	bl	8000608 <__aeabi_dmul>
 80061e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006388 <_dtoa_r+0x2b8>)
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f7fa f857 	bl	800029c <__adddf3>
 80061ee:	4604      	mov	r4, r0
 80061f0:	4630      	mov	r0, r6
 80061f2:	460d      	mov	r5, r1
 80061f4:	f7fa f99e 	bl	8000534 <__aeabi_i2d>
 80061f8:	a365      	add	r3, pc, #404	@ (adr r3, 8006390 <_dtoa_r+0x2c0>)
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f7fa fa03 	bl	8000608 <__aeabi_dmul>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4620      	mov	r0, r4
 8006208:	4629      	mov	r1, r5
 800620a:	f7fa f847 	bl	800029c <__adddf3>
 800620e:	4604      	mov	r4, r0
 8006210:	460d      	mov	r5, r1
 8006212:	f7fa fca9 	bl	8000b68 <__aeabi_d2iz>
 8006216:	2200      	movs	r2, #0
 8006218:	4607      	mov	r7, r0
 800621a:	2300      	movs	r3, #0
 800621c:	4620      	mov	r0, r4
 800621e:	4629      	mov	r1, r5
 8006220:	f7fa fc64 	bl	8000aec <__aeabi_dcmplt>
 8006224:	b140      	cbz	r0, 8006238 <_dtoa_r+0x168>
 8006226:	4638      	mov	r0, r7
 8006228:	f7fa f984 	bl	8000534 <__aeabi_i2d>
 800622c:	4622      	mov	r2, r4
 800622e:	462b      	mov	r3, r5
 8006230:	f7fa fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8006234:	b900      	cbnz	r0, 8006238 <_dtoa_r+0x168>
 8006236:	3f01      	subs	r7, #1
 8006238:	2f16      	cmp	r7, #22
 800623a:	d851      	bhi.n	80062e0 <_dtoa_r+0x210>
 800623c:	4b5b      	ldr	r3, [pc, #364]	@ (80063ac <_dtoa_r+0x2dc>)
 800623e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800624a:	f7fa fc4f 	bl	8000aec <__aeabi_dcmplt>
 800624e:	2800      	cmp	r0, #0
 8006250:	d048      	beq.n	80062e4 <_dtoa_r+0x214>
 8006252:	3f01      	subs	r7, #1
 8006254:	2300      	movs	r3, #0
 8006256:	9312      	str	r3, [sp, #72]	@ 0x48
 8006258:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800625a:	1b9b      	subs	r3, r3, r6
 800625c:	1e5a      	subs	r2, r3, #1
 800625e:	bf44      	itt	mi
 8006260:	f1c3 0801 	rsbmi	r8, r3, #1
 8006264:	2300      	movmi	r3, #0
 8006266:	9208      	str	r2, [sp, #32]
 8006268:	bf54      	ite	pl
 800626a:	f04f 0800 	movpl.w	r8, #0
 800626e:	9308      	strmi	r3, [sp, #32]
 8006270:	2f00      	cmp	r7, #0
 8006272:	db39      	blt.n	80062e8 <_dtoa_r+0x218>
 8006274:	9b08      	ldr	r3, [sp, #32]
 8006276:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006278:	443b      	add	r3, r7
 800627a:	9308      	str	r3, [sp, #32]
 800627c:	2300      	movs	r3, #0
 800627e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006282:	2b09      	cmp	r3, #9
 8006284:	d864      	bhi.n	8006350 <_dtoa_r+0x280>
 8006286:	2b05      	cmp	r3, #5
 8006288:	bfc4      	itt	gt
 800628a:	3b04      	subgt	r3, #4
 800628c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800628e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006290:	f1a3 0302 	sub.w	r3, r3, #2
 8006294:	bfcc      	ite	gt
 8006296:	2400      	movgt	r4, #0
 8006298:	2401      	movle	r4, #1
 800629a:	2b03      	cmp	r3, #3
 800629c:	d863      	bhi.n	8006366 <_dtoa_r+0x296>
 800629e:	e8df f003 	tbb	[pc, r3]
 80062a2:	372a      	.short	0x372a
 80062a4:	5535      	.short	0x5535
 80062a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80062aa:	441e      	add	r6, r3
 80062ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	bfc1      	itttt	gt
 80062b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80062b8:	409f      	lslgt	r7, r3
 80062ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80062be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80062c2:	bfd6      	itet	le
 80062c4:	f1c3 0320 	rsble	r3, r3, #32
 80062c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80062cc:	fa04 f003 	lslle.w	r0, r4, r3
 80062d0:	f7fa f920 	bl	8000514 <__aeabi_ui2d>
 80062d4:	2201      	movs	r2, #1
 80062d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80062da:	3e01      	subs	r6, #1
 80062dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80062de:	e777      	b.n	80061d0 <_dtoa_r+0x100>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e7b8      	b.n	8006256 <_dtoa_r+0x186>
 80062e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80062e6:	e7b7      	b.n	8006258 <_dtoa_r+0x188>
 80062e8:	427b      	negs	r3, r7
 80062ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80062ec:	2300      	movs	r3, #0
 80062ee:	eba8 0807 	sub.w	r8, r8, r7
 80062f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80062f4:	e7c4      	b.n	8006280 <_dtoa_r+0x1b0>
 80062f6:	2300      	movs	r3, #0
 80062f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	dc35      	bgt.n	800636c <_dtoa_r+0x29c>
 8006300:	2301      	movs	r3, #1
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	9307      	str	r3, [sp, #28]
 8006306:	461a      	mov	r2, r3
 8006308:	920e      	str	r2, [sp, #56]	@ 0x38
 800630a:	e00b      	b.n	8006324 <_dtoa_r+0x254>
 800630c:	2301      	movs	r3, #1
 800630e:	e7f3      	b.n	80062f8 <_dtoa_r+0x228>
 8006310:	2300      	movs	r3, #0
 8006312:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006316:	18fb      	adds	r3, r7, r3
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	3301      	adds	r3, #1
 800631c:	2b01      	cmp	r3, #1
 800631e:	9307      	str	r3, [sp, #28]
 8006320:	bfb8      	it	lt
 8006322:	2301      	movlt	r3, #1
 8006324:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006328:	2100      	movs	r1, #0
 800632a:	2204      	movs	r2, #4
 800632c:	f102 0514 	add.w	r5, r2, #20
 8006330:	429d      	cmp	r5, r3
 8006332:	d91f      	bls.n	8006374 <_dtoa_r+0x2a4>
 8006334:	6041      	str	r1, [r0, #4]
 8006336:	4658      	mov	r0, fp
 8006338:	f000 fd8e 	bl	8006e58 <_Balloc>
 800633c:	4682      	mov	sl, r0
 800633e:	2800      	cmp	r0, #0
 8006340:	d13c      	bne.n	80063bc <_dtoa_r+0x2ec>
 8006342:	4b1b      	ldr	r3, [pc, #108]	@ (80063b0 <_dtoa_r+0x2e0>)
 8006344:	4602      	mov	r2, r0
 8006346:	f240 11af 	movw	r1, #431	@ 0x1af
 800634a:	e6d8      	b.n	80060fe <_dtoa_r+0x2e>
 800634c:	2301      	movs	r3, #1
 800634e:	e7e0      	b.n	8006312 <_dtoa_r+0x242>
 8006350:	2401      	movs	r4, #1
 8006352:	2300      	movs	r3, #0
 8006354:	9309      	str	r3, [sp, #36]	@ 0x24
 8006356:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006358:	f04f 33ff 	mov.w	r3, #4294967295
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	9307      	str	r3, [sp, #28]
 8006360:	2200      	movs	r2, #0
 8006362:	2312      	movs	r3, #18
 8006364:	e7d0      	b.n	8006308 <_dtoa_r+0x238>
 8006366:	2301      	movs	r3, #1
 8006368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800636a:	e7f5      	b.n	8006358 <_dtoa_r+0x288>
 800636c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	9307      	str	r3, [sp, #28]
 8006372:	e7d7      	b.n	8006324 <_dtoa_r+0x254>
 8006374:	3101      	adds	r1, #1
 8006376:	0052      	lsls	r2, r2, #1
 8006378:	e7d8      	b.n	800632c <_dtoa_r+0x25c>
 800637a:	bf00      	nop
 800637c:	f3af 8000 	nop.w
 8006380:	636f4361 	.word	0x636f4361
 8006384:	3fd287a7 	.word	0x3fd287a7
 8006388:	8b60c8b3 	.word	0x8b60c8b3
 800638c:	3fc68a28 	.word	0x3fc68a28
 8006390:	509f79fb 	.word	0x509f79fb
 8006394:	3fd34413 	.word	0x3fd34413
 8006398:	08007d51 	.word	0x08007d51
 800639c:	08007d68 	.word	0x08007d68
 80063a0:	7ff00000 	.word	0x7ff00000
 80063a4:	08007d21 	.word	0x08007d21
 80063a8:	3ff80000 	.word	0x3ff80000
 80063ac:	08007e60 	.word	0x08007e60
 80063b0:	08007dc0 	.word	0x08007dc0
 80063b4:	08007d4d 	.word	0x08007d4d
 80063b8:	08007d20 	.word	0x08007d20
 80063bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063c0:	6018      	str	r0, [r3, #0]
 80063c2:	9b07      	ldr	r3, [sp, #28]
 80063c4:	2b0e      	cmp	r3, #14
 80063c6:	f200 80a4 	bhi.w	8006512 <_dtoa_r+0x442>
 80063ca:	2c00      	cmp	r4, #0
 80063cc:	f000 80a1 	beq.w	8006512 <_dtoa_r+0x442>
 80063d0:	2f00      	cmp	r7, #0
 80063d2:	dd33      	ble.n	800643c <_dtoa_r+0x36c>
 80063d4:	4bad      	ldr	r3, [pc, #692]	@ (800668c <_dtoa_r+0x5bc>)
 80063d6:	f007 020f 	and.w	r2, r7, #15
 80063da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063de:	ed93 7b00 	vldr	d7, [r3]
 80063e2:	05f8      	lsls	r0, r7, #23
 80063e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80063e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80063ec:	d516      	bpl.n	800641c <_dtoa_r+0x34c>
 80063ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006690 <_dtoa_r+0x5c0>)
 80063f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063f8:	f7fa fa30 	bl	800085c <__aeabi_ddiv>
 80063fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006400:	f004 040f 	and.w	r4, r4, #15
 8006404:	2603      	movs	r6, #3
 8006406:	4da2      	ldr	r5, [pc, #648]	@ (8006690 <_dtoa_r+0x5c0>)
 8006408:	b954      	cbnz	r4, 8006420 <_dtoa_r+0x350>
 800640a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800640e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006412:	f7fa fa23 	bl	800085c <__aeabi_ddiv>
 8006416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800641a:	e028      	b.n	800646e <_dtoa_r+0x39e>
 800641c:	2602      	movs	r6, #2
 800641e:	e7f2      	b.n	8006406 <_dtoa_r+0x336>
 8006420:	07e1      	lsls	r1, r4, #31
 8006422:	d508      	bpl.n	8006436 <_dtoa_r+0x366>
 8006424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006428:	e9d5 2300 	ldrd	r2, r3, [r5]
 800642c:	f7fa f8ec 	bl	8000608 <__aeabi_dmul>
 8006430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006434:	3601      	adds	r6, #1
 8006436:	1064      	asrs	r4, r4, #1
 8006438:	3508      	adds	r5, #8
 800643a:	e7e5      	b.n	8006408 <_dtoa_r+0x338>
 800643c:	f000 80d2 	beq.w	80065e4 <_dtoa_r+0x514>
 8006440:	427c      	negs	r4, r7
 8006442:	4b92      	ldr	r3, [pc, #584]	@ (800668c <_dtoa_r+0x5bc>)
 8006444:	4d92      	ldr	r5, [pc, #584]	@ (8006690 <_dtoa_r+0x5c0>)
 8006446:	f004 020f 	and.w	r2, r4, #15
 800644a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006456:	f7fa f8d7 	bl	8000608 <__aeabi_dmul>
 800645a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800645e:	1124      	asrs	r4, r4, #4
 8006460:	2300      	movs	r3, #0
 8006462:	2602      	movs	r6, #2
 8006464:	2c00      	cmp	r4, #0
 8006466:	f040 80b2 	bne.w	80065ce <_dtoa_r+0x4fe>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1d3      	bne.n	8006416 <_dtoa_r+0x346>
 800646e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006470:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80b7 	beq.w	80065e8 <_dtoa_r+0x518>
 800647a:	4b86      	ldr	r3, [pc, #536]	@ (8006694 <_dtoa_r+0x5c4>)
 800647c:	2200      	movs	r2, #0
 800647e:	4620      	mov	r0, r4
 8006480:	4629      	mov	r1, r5
 8006482:	f7fa fb33 	bl	8000aec <__aeabi_dcmplt>
 8006486:	2800      	cmp	r0, #0
 8006488:	f000 80ae 	beq.w	80065e8 <_dtoa_r+0x518>
 800648c:	9b07      	ldr	r3, [sp, #28]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80aa 	beq.w	80065e8 <_dtoa_r+0x518>
 8006494:	9b00      	ldr	r3, [sp, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	dd37      	ble.n	800650a <_dtoa_r+0x43a>
 800649a:	1e7b      	subs	r3, r7, #1
 800649c:	9304      	str	r3, [sp, #16]
 800649e:	4620      	mov	r0, r4
 80064a0:	4b7d      	ldr	r3, [pc, #500]	@ (8006698 <_dtoa_r+0x5c8>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	4629      	mov	r1, r5
 80064a6:	f7fa f8af 	bl	8000608 <__aeabi_dmul>
 80064aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ae:	9c00      	ldr	r4, [sp, #0]
 80064b0:	3601      	adds	r6, #1
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7fa f83e 	bl	8000534 <__aeabi_i2d>
 80064b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064bc:	f7fa f8a4 	bl	8000608 <__aeabi_dmul>
 80064c0:	4b76      	ldr	r3, [pc, #472]	@ (800669c <_dtoa_r+0x5cc>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	f7f9 feea 	bl	800029c <__adddf3>
 80064c8:	4605      	mov	r5, r0
 80064ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80064ce:	2c00      	cmp	r4, #0
 80064d0:	f040 808d 	bne.w	80065ee <_dtoa_r+0x51e>
 80064d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d8:	4b71      	ldr	r3, [pc, #452]	@ (80066a0 <_dtoa_r+0x5d0>)
 80064da:	2200      	movs	r2, #0
 80064dc:	f7f9 fedc 	bl	8000298 <__aeabi_dsub>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064e8:	462a      	mov	r2, r5
 80064ea:	4633      	mov	r3, r6
 80064ec:	f7fa fb1c 	bl	8000b28 <__aeabi_dcmpgt>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f040 828b 	bne.w	8006a0c <_dtoa_r+0x93c>
 80064f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064fa:	462a      	mov	r2, r5
 80064fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006500:	f7fa faf4 	bl	8000aec <__aeabi_dcmplt>
 8006504:	2800      	cmp	r0, #0
 8006506:	f040 8128 	bne.w	800675a <_dtoa_r+0x68a>
 800650a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800650e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006512:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006514:	2b00      	cmp	r3, #0
 8006516:	f2c0 815a 	blt.w	80067ce <_dtoa_r+0x6fe>
 800651a:	2f0e      	cmp	r7, #14
 800651c:	f300 8157 	bgt.w	80067ce <_dtoa_r+0x6fe>
 8006520:	4b5a      	ldr	r3, [pc, #360]	@ (800668c <_dtoa_r+0x5bc>)
 8006522:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006526:	ed93 7b00 	vldr	d7, [r3]
 800652a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800652c:	2b00      	cmp	r3, #0
 800652e:	ed8d 7b00 	vstr	d7, [sp]
 8006532:	da03      	bge.n	800653c <_dtoa_r+0x46c>
 8006534:	9b07      	ldr	r3, [sp, #28]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f340 8101 	ble.w	800673e <_dtoa_r+0x66e>
 800653c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006540:	4656      	mov	r6, sl
 8006542:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006546:	4620      	mov	r0, r4
 8006548:	4629      	mov	r1, r5
 800654a:	f7fa f987 	bl	800085c <__aeabi_ddiv>
 800654e:	f7fa fb0b 	bl	8000b68 <__aeabi_d2iz>
 8006552:	4680      	mov	r8, r0
 8006554:	f7f9 ffee 	bl	8000534 <__aeabi_i2d>
 8006558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800655c:	f7fa f854 	bl	8000608 <__aeabi_dmul>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4620      	mov	r0, r4
 8006566:	4629      	mov	r1, r5
 8006568:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800656c:	f7f9 fe94 	bl	8000298 <__aeabi_dsub>
 8006570:	f806 4b01 	strb.w	r4, [r6], #1
 8006574:	9d07      	ldr	r5, [sp, #28]
 8006576:	eba6 040a 	sub.w	r4, r6, sl
 800657a:	42a5      	cmp	r5, r4
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	f040 8117 	bne.w	80067b2 <_dtoa_r+0x6e2>
 8006584:	f7f9 fe8a 	bl	800029c <__adddf3>
 8006588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800658c:	4604      	mov	r4, r0
 800658e:	460d      	mov	r5, r1
 8006590:	f7fa faca 	bl	8000b28 <__aeabi_dcmpgt>
 8006594:	2800      	cmp	r0, #0
 8006596:	f040 80f9 	bne.w	800678c <_dtoa_r+0x6bc>
 800659a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa fa99 	bl	8000ad8 <__aeabi_dcmpeq>
 80065a6:	b118      	cbz	r0, 80065b0 <_dtoa_r+0x4e0>
 80065a8:	f018 0f01 	tst.w	r8, #1
 80065ac:	f040 80ee 	bne.w	800678c <_dtoa_r+0x6bc>
 80065b0:	4649      	mov	r1, r9
 80065b2:	4658      	mov	r0, fp
 80065b4:	f000 fc90 	bl	8006ed8 <_Bfree>
 80065b8:	2300      	movs	r3, #0
 80065ba:	7033      	strb	r3, [r6, #0]
 80065bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065be:	3701      	adds	r7, #1
 80065c0:	601f      	str	r7, [r3, #0]
 80065c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 831d 	beq.w	8006c04 <_dtoa_r+0xb34>
 80065ca:	601e      	str	r6, [r3, #0]
 80065cc:	e31a      	b.n	8006c04 <_dtoa_r+0xb34>
 80065ce:	07e2      	lsls	r2, r4, #31
 80065d0:	d505      	bpl.n	80065de <_dtoa_r+0x50e>
 80065d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065d6:	f7fa f817 	bl	8000608 <__aeabi_dmul>
 80065da:	3601      	adds	r6, #1
 80065dc:	2301      	movs	r3, #1
 80065de:	1064      	asrs	r4, r4, #1
 80065e0:	3508      	adds	r5, #8
 80065e2:	e73f      	b.n	8006464 <_dtoa_r+0x394>
 80065e4:	2602      	movs	r6, #2
 80065e6:	e742      	b.n	800646e <_dtoa_r+0x39e>
 80065e8:	9c07      	ldr	r4, [sp, #28]
 80065ea:	9704      	str	r7, [sp, #16]
 80065ec:	e761      	b.n	80064b2 <_dtoa_r+0x3e2>
 80065ee:	4b27      	ldr	r3, [pc, #156]	@ (800668c <_dtoa_r+0x5bc>)
 80065f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065fa:	4454      	add	r4, sl
 80065fc:	2900      	cmp	r1, #0
 80065fe:	d053      	beq.n	80066a8 <_dtoa_r+0x5d8>
 8006600:	4928      	ldr	r1, [pc, #160]	@ (80066a4 <_dtoa_r+0x5d4>)
 8006602:	2000      	movs	r0, #0
 8006604:	f7fa f92a 	bl	800085c <__aeabi_ddiv>
 8006608:	4633      	mov	r3, r6
 800660a:	462a      	mov	r2, r5
 800660c:	f7f9 fe44 	bl	8000298 <__aeabi_dsub>
 8006610:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006614:	4656      	mov	r6, sl
 8006616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800661a:	f7fa faa5 	bl	8000b68 <__aeabi_d2iz>
 800661e:	4605      	mov	r5, r0
 8006620:	f7f9 ff88 	bl	8000534 <__aeabi_i2d>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800662c:	f7f9 fe34 	bl	8000298 <__aeabi_dsub>
 8006630:	3530      	adds	r5, #48	@ 0x30
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800663a:	f806 5b01 	strb.w	r5, [r6], #1
 800663e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006642:	f7fa fa53 	bl	8000aec <__aeabi_dcmplt>
 8006646:	2800      	cmp	r0, #0
 8006648:	d171      	bne.n	800672e <_dtoa_r+0x65e>
 800664a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800664e:	4911      	ldr	r1, [pc, #68]	@ (8006694 <_dtoa_r+0x5c4>)
 8006650:	2000      	movs	r0, #0
 8006652:	f7f9 fe21 	bl	8000298 <__aeabi_dsub>
 8006656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800665a:	f7fa fa47 	bl	8000aec <__aeabi_dcmplt>
 800665e:	2800      	cmp	r0, #0
 8006660:	f040 8095 	bne.w	800678e <_dtoa_r+0x6be>
 8006664:	42a6      	cmp	r6, r4
 8006666:	f43f af50 	beq.w	800650a <_dtoa_r+0x43a>
 800666a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800666e:	4b0a      	ldr	r3, [pc, #40]	@ (8006698 <_dtoa_r+0x5c8>)
 8006670:	2200      	movs	r2, #0
 8006672:	f7f9 ffc9 	bl	8000608 <__aeabi_dmul>
 8006676:	4b08      	ldr	r3, [pc, #32]	@ (8006698 <_dtoa_r+0x5c8>)
 8006678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800667c:	2200      	movs	r2, #0
 800667e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006682:	f7f9 ffc1 	bl	8000608 <__aeabi_dmul>
 8006686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800668a:	e7c4      	b.n	8006616 <_dtoa_r+0x546>
 800668c:	08007e60 	.word	0x08007e60
 8006690:	08007e38 	.word	0x08007e38
 8006694:	3ff00000 	.word	0x3ff00000
 8006698:	40240000 	.word	0x40240000
 800669c:	401c0000 	.word	0x401c0000
 80066a0:	40140000 	.word	0x40140000
 80066a4:	3fe00000 	.word	0x3fe00000
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7f9 ffac 	bl	8000608 <__aeabi_dmul>
 80066b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80066b6:	4656      	mov	r6, sl
 80066b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066bc:	f7fa fa54 	bl	8000b68 <__aeabi_d2iz>
 80066c0:	4605      	mov	r5, r0
 80066c2:	f7f9 ff37 	bl	8000534 <__aeabi_i2d>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ce:	f7f9 fde3 	bl	8000298 <__aeabi_dsub>
 80066d2:	3530      	adds	r5, #48	@ 0x30
 80066d4:	f806 5b01 	strb.w	r5, [r6], #1
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	42a6      	cmp	r6, r4
 80066de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	d124      	bne.n	8006732 <_dtoa_r+0x662>
 80066e8:	4bac      	ldr	r3, [pc, #688]	@ (800699c <_dtoa_r+0x8cc>)
 80066ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066ee:	f7f9 fdd5 	bl	800029c <__adddf3>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066fa:	f7fa fa15 	bl	8000b28 <__aeabi_dcmpgt>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d145      	bne.n	800678e <_dtoa_r+0x6be>
 8006702:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006706:	49a5      	ldr	r1, [pc, #660]	@ (800699c <_dtoa_r+0x8cc>)
 8006708:	2000      	movs	r0, #0
 800670a:	f7f9 fdc5 	bl	8000298 <__aeabi_dsub>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006716:	f7fa f9e9 	bl	8000aec <__aeabi_dcmplt>
 800671a:	2800      	cmp	r0, #0
 800671c:	f43f aef5 	beq.w	800650a <_dtoa_r+0x43a>
 8006720:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006722:	1e73      	subs	r3, r6, #1
 8006724:	9315      	str	r3, [sp, #84]	@ 0x54
 8006726:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800672a:	2b30      	cmp	r3, #48	@ 0x30
 800672c:	d0f8      	beq.n	8006720 <_dtoa_r+0x650>
 800672e:	9f04      	ldr	r7, [sp, #16]
 8006730:	e73e      	b.n	80065b0 <_dtoa_r+0x4e0>
 8006732:	4b9b      	ldr	r3, [pc, #620]	@ (80069a0 <_dtoa_r+0x8d0>)
 8006734:	f7f9 ff68 	bl	8000608 <__aeabi_dmul>
 8006738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800673c:	e7bc      	b.n	80066b8 <_dtoa_r+0x5e8>
 800673e:	d10c      	bne.n	800675a <_dtoa_r+0x68a>
 8006740:	4b98      	ldr	r3, [pc, #608]	@ (80069a4 <_dtoa_r+0x8d4>)
 8006742:	2200      	movs	r2, #0
 8006744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006748:	f7f9 ff5e 	bl	8000608 <__aeabi_dmul>
 800674c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006750:	f7fa f9e0 	bl	8000b14 <__aeabi_dcmpge>
 8006754:	2800      	cmp	r0, #0
 8006756:	f000 8157 	beq.w	8006a08 <_dtoa_r+0x938>
 800675a:	2400      	movs	r4, #0
 800675c:	4625      	mov	r5, r4
 800675e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006760:	43db      	mvns	r3, r3
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	4656      	mov	r6, sl
 8006766:	2700      	movs	r7, #0
 8006768:	4621      	mov	r1, r4
 800676a:	4658      	mov	r0, fp
 800676c:	f000 fbb4 	bl	8006ed8 <_Bfree>
 8006770:	2d00      	cmp	r5, #0
 8006772:	d0dc      	beq.n	800672e <_dtoa_r+0x65e>
 8006774:	b12f      	cbz	r7, 8006782 <_dtoa_r+0x6b2>
 8006776:	42af      	cmp	r7, r5
 8006778:	d003      	beq.n	8006782 <_dtoa_r+0x6b2>
 800677a:	4639      	mov	r1, r7
 800677c:	4658      	mov	r0, fp
 800677e:	f000 fbab 	bl	8006ed8 <_Bfree>
 8006782:	4629      	mov	r1, r5
 8006784:	4658      	mov	r0, fp
 8006786:	f000 fba7 	bl	8006ed8 <_Bfree>
 800678a:	e7d0      	b.n	800672e <_dtoa_r+0x65e>
 800678c:	9704      	str	r7, [sp, #16]
 800678e:	4633      	mov	r3, r6
 8006790:	461e      	mov	r6, r3
 8006792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006796:	2a39      	cmp	r2, #57	@ 0x39
 8006798:	d107      	bne.n	80067aa <_dtoa_r+0x6da>
 800679a:	459a      	cmp	sl, r3
 800679c:	d1f8      	bne.n	8006790 <_dtoa_r+0x6c0>
 800679e:	9a04      	ldr	r2, [sp, #16]
 80067a0:	3201      	adds	r2, #1
 80067a2:	9204      	str	r2, [sp, #16]
 80067a4:	2230      	movs	r2, #48	@ 0x30
 80067a6:	f88a 2000 	strb.w	r2, [sl]
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	3201      	adds	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	e7bd      	b.n	800672e <_dtoa_r+0x65e>
 80067b2:	4b7b      	ldr	r3, [pc, #492]	@ (80069a0 <_dtoa_r+0x8d0>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	f7f9 ff27 	bl	8000608 <__aeabi_dmul>
 80067ba:	2200      	movs	r2, #0
 80067bc:	2300      	movs	r3, #0
 80067be:	4604      	mov	r4, r0
 80067c0:	460d      	mov	r5, r1
 80067c2:	f7fa f989 	bl	8000ad8 <__aeabi_dcmpeq>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f43f aebb 	beq.w	8006542 <_dtoa_r+0x472>
 80067cc:	e6f0      	b.n	80065b0 <_dtoa_r+0x4e0>
 80067ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067d0:	2a00      	cmp	r2, #0
 80067d2:	f000 80db 	beq.w	800698c <_dtoa_r+0x8bc>
 80067d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067d8:	2a01      	cmp	r2, #1
 80067da:	f300 80bf 	bgt.w	800695c <_dtoa_r+0x88c>
 80067de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80067e0:	2a00      	cmp	r2, #0
 80067e2:	f000 80b7 	beq.w	8006954 <_dtoa_r+0x884>
 80067e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80067ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067ec:	4646      	mov	r6, r8
 80067ee:	9a08      	ldr	r2, [sp, #32]
 80067f0:	2101      	movs	r1, #1
 80067f2:	441a      	add	r2, r3
 80067f4:	4658      	mov	r0, fp
 80067f6:	4498      	add	r8, r3
 80067f8:	9208      	str	r2, [sp, #32]
 80067fa:	f000 fc21 	bl	8007040 <__i2b>
 80067fe:	4605      	mov	r5, r0
 8006800:	b15e      	cbz	r6, 800681a <_dtoa_r+0x74a>
 8006802:	9b08      	ldr	r3, [sp, #32]
 8006804:	2b00      	cmp	r3, #0
 8006806:	dd08      	ble.n	800681a <_dtoa_r+0x74a>
 8006808:	42b3      	cmp	r3, r6
 800680a:	9a08      	ldr	r2, [sp, #32]
 800680c:	bfa8      	it	ge
 800680e:	4633      	movge	r3, r6
 8006810:	eba8 0803 	sub.w	r8, r8, r3
 8006814:	1af6      	subs	r6, r6, r3
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	9308      	str	r3, [sp, #32]
 800681a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800681c:	b1f3      	cbz	r3, 800685c <_dtoa_r+0x78c>
 800681e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80b7 	beq.w	8006994 <_dtoa_r+0x8c4>
 8006826:	b18c      	cbz	r4, 800684c <_dtoa_r+0x77c>
 8006828:	4629      	mov	r1, r5
 800682a:	4622      	mov	r2, r4
 800682c:	4658      	mov	r0, fp
 800682e:	f000 fcc7 	bl	80071c0 <__pow5mult>
 8006832:	464a      	mov	r2, r9
 8006834:	4601      	mov	r1, r0
 8006836:	4605      	mov	r5, r0
 8006838:	4658      	mov	r0, fp
 800683a:	f000 fc17 	bl	800706c <__multiply>
 800683e:	4649      	mov	r1, r9
 8006840:	9004      	str	r0, [sp, #16]
 8006842:	4658      	mov	r0, fp
 8006844:	f000 fb48 	bl	8006ed8 <_Bfree>
 8006848:	9b04      	ldr	r3, [sp, #16]
 800684a:	4699      	mov	r9, r3
 800684c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800684e:	1b1a      	subs	r2, r3, r4
 8006850:	d004      	beq.n	800685c <_dtoa_r+0x78c>
 8006852:	4649      	mov	r1, r9
 8006854:	4658      	mov	r0, fp
 8006856:	f000 fcb3 	bl	80071c0 <__pow5mult>
 800685a:	4681      	mov	r9, r0
 800685c:	2101      	movs	r1, #1
 800685e:	4658      	mov	r0, fp
 8006860:	f000 fbee 	bl	8007040 <__i2b>
 8006864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006866:	4604      	mov	r4, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 81cf 	beq.w	8006c0c <_dtoa_r+0xb3c>
 800686e:	461a      	mov	r2, r3
 8006870:	4601      	mov	r1, r0
 8006872:	4658      	mov	r0, fp
 8006874:	f000 fca4 	bl	80071c0 <__pow5mult>
 8006878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687a:	2b01      	cmp	r3, #1
 800687c:	4604      	mov	r4, r0
 800687e:	f300 8095 	bgt.w	80069ac <_dtoa_r+0x8dc>
 8006882:	9b02      	ldr	r3, [sp, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f040 8087 	bne.w	8006998 <_dtoa_r+0x8c8>
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006890:	2b00      	cmp	r3, #0
 8006892:	f040 8089 	bne.w	80069a8 <_dtoa_r+0x8d8>
 8006896:	9b03      	ldr	r3, [sp, #12]
 8006898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800689c:	0d1b      	lsrs	r3, r3, #20
 800689e:	051b      	lsls	r3, r3, #20
 80068a0:	b12b      	cbz	r3, 80068ae <_dtoa_r+0x7de>
 80068a2:	9b08      	ldr	r3, [sp, #32]
 80068a4:	3301      	adds	r3, #1
 80068a6:	9308      	str	r3, [sp, #32]
 80068a8:	f108 0801 	add.w	r8, r8, #1
 80068ac:	2301      	movs	r3, #1
 80068ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80068b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 81b0 	beq.w	8006c18 <_dtoa_r+0xb48>
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068be:	6918      	ldr	r0, [r3, #16]
 80068c0:	f000 fb72 	bl	8006fa8 <__hi0bits>
 80068c4:	f1c0 0020 	rsb	r0, r0, #32
 80068c8:	9b08      	ldr	r3, [sp, #32]
 80068ca:	4418      	add	r0, r3
 80068cc:	f010 001f 	ands.w	r0, r0, #31
 80068d0:	d077      	beq.n	80069c2 <_dtoa_r+0x8f2>
 80068d2:	f1c0 0320 	rsb	r3, r0, #32
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	dd6b      	ble.n	80069b2 <_dtoa_r+0x8e2>
 80068da:	9b08      	ldr	r3, [sp, #32]
 80068dc:	f1c0 001c 	rsb	r0, r0, #28
 80068e0:	4403      	add	r3, r0
 80068e2:	4480      	add	r8, r0
 80068e4:	4406      	add	r6, r0
 80068e6:	9308      	str	r3, [sp, #32]
 80068e8:	f1b8 0f00 	cmp.w	r8, #0
 80068ec:	dd05      	ble.n	80068fa <_dtoa_r+0x82a>
 80068ee:	4649      	mov	r1, r9
 80068f0:	4642      	mov	r2, r8
 80068f2:	4658      	mov	r0, fp
 80068f4:	f000 fcbe 	bl	8007274 <__lshift>
 80068f8:	4681      	mov	r9, r0
 80068fa:	9b08      	ldr	r3, [sp, #32]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dd05      	ble.n	800690c <_dtoa_r+0x83c>
 8006900:	4621      	mov	r1, r4
 8006902:	461a      	mov	r2, r3
 8006904:	4658      	mov	r0, fp
 8006906:	f000 fcb5 	bl	8007274 <__lshift>
 800690a:	4604      	mov	r4, r0
 800690c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800690e:	2b00      	cmp	r3, #0
 8006910:	d059      	beq.n	80069c6 <_dtoa_r+0x8f6>
 8006912:	4621      	mov	r1, r4
 8006914:	4648      	mov	r0, r9
 8006916:	f000 fd19 	bl	800734c <__mcmp>
 800691a:	2800      	cmp	r0, #0
 800691c:	da53      	bge.n	80069c6 <_dtoa_r+0x8f6>
 800691e:	1e7b      	subs	r3, r7, #1
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	4649      	mov	r1, r9
 8006924:	2300      	movs	r3, #0
 8006926:	220a      	movs	r2, #10
 8006928:	4658      	mov	r0, fp
 800692a:	f000 faf7 	bl	8006f1c <__multadd>
 800692e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006930:	4681      	mov	r9, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 8172 	beq.w	8006c1c <_dtoa_r+0xb4c>
 8006938:	2300      	movs	r3, #0
 800693a:	4629      	mov	r1, r5
 800693c:	220a      	movs	r2, #10
 800693e:	4658      	mov	r0, fp
 8006940:	f000 faec 	bl	8006f1c <__multadd>
 8006944:	9b00      	ldr	r3, [sp, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	4605      	mov	r5, r0
 800694a:	dc67      	bgt.n	8006a1c <_dtoa_r+0x94c>
 800694c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694e:	2b02      	cmp	r3, #2
 8006950:	dc41      	bgt.n	80069d6 <_dtoa_r+0x906>
 8006952:	e063      	b.n	8006a1c <_dtoa_r+0x94c>
 8006954:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006956:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800695a:	e746      	b.n	80067ea <_dtoa_r+0x71a>
 800695c:	9b07      	ldr	r3, [sp, #28]
 800695e:	1e5c      	subs	r4, r3, #1
 8006960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006962:	42a3      	cmp	r3, r4
 8006964:	bfbf      	itttt	lt
 8006966:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006968:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800696a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800696c:	1ae3      	sublt	r3, r4, r3
 800696e:	bfb4      	ite	lt
 8006970:	18d2      	addlt	r2, r2, r3
 8006972:	1b1c      	subge	r4, r3, r4
 8006974:	9b07      	ldr	r3, [sp, #28]
 8006976:	bfbc      	itt	lt
 8006978:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800697a:	2400      	movlt	r4, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfb5      	itete	lt
 8006980:	eba8 0603 	sublt.w	r6, r8, r3
 8006984:	9b07      	ldrge	r3, [sp, #28]
 8006986:	2300      	movlt	r3, #0
 8006988:	4646      	movge	r6, r8
 800698a:	e730      	b.n	80067ee <_dtoa_r+0x71e>
 800698c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800698e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006990:	4646      	mov	r6, r8
 8006992:	e735      	b.n	8006800 <_dtoa_r+0x730>
 8006994:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006996:	e75c      	b.n	8006852 <_dtoa_r+0x782>
 8006998:	2300      	movs	r3, #0
 800699a:	e788      	b.n	80068ae <_dtoa_r+0x7de>
 800699c:	3fe00000 	.word	0x3fe00000
 80069a0:	40240000 	.word	0x40240000
 80069a4:	40140000 	.word	0x40140000
 80069a8:	9b02      	ldr	r3, [sp, #8]
 80069aa:	e780      	b.n	80068ae <_dtoa_r+0x7de>
 80069ac:	2300      	movs	r3, #0
 80069ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b0:	e782      	b.n	80068b8 <_dtoa_r+0x7e8>
 80069b2:	d099      	beq.n	80068e8 <_dtoa_r+0x818>
 80069b4:	9a08      	ldr	r2, [sp, #32]
 80069b6:	331c      	adds	r3, #28
 80069b8:	441a      	add	r2, r3
 80069ba:	4498      	add	r8, r3
 80069bc:	441e      	add	r6, r3
 80069be:	9208      	str	r2, [sp, #32]
 80069c0:	e792      	b.n	80068e8 <_dtoa_r+0x818>
 80069c2:	4603      	mov	r3, r0
 80069c4:	e7f6      	b.n	80069b4 <_dtoa_r+0x8e4>
 80069c6:	9b07      	ldr	r3, [sp, #28]
 80069c8:	9704      	str	r7, [sp, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	dc20      	bgt.n	8006a10 <_dtoa_r+0x940>
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	dd1e      	ble.n	8006a14 <_dtoa_r+0x944>
 80069d6:	9b00      	ldr	r3, [sp, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f47f aec0 	bne.w	800675e <_dtoa_r+0x68e>
 80069de:	4621      	mov	r1, r4
 80069e0:	2205      	movs	r2, #5
 80069e2:	4658      	mov	r0, fp
 80069e4:	f000 fa9a 	bl	8006f1c <__multadd>
 80069e8:	4601      	mov	r1, r0
 80069ea:	4604      	mov	r4, r0
 80069ec:	4648      	mov	r0, r9
 80069ee:	f000 fcad 	bl	800734c <__mcmp>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f77f aeb3 	ble.w	800675e <_dtoa_r+0x68e>
 80069f8:	4656      	mov	r6, sl
 80069fa:	2331      	movs	r3, #49	@ 0x31
 80069fc:	f806 3b01 	strb.w	r3, [r6], #1
 8006a00:	9b04      	ldr	r3, [sp, #16]
 8006a02:	3301      	adds	r3, #1
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	e6ae      	b.n	8006766 <_dtoa_r+0x696>
 8006a08:	9c07      	ldr	r4, [sp, #28]
 8006a0a:	9704      	str	r7, [sp, #16]
 8006a0c:	4625      	mov	r5, r4
 8006a0e:	e7f3      	b.n	80069f8 <_dtoa_r+0x928>
 8006a10:	9b07      	ldr	r3, [sp, #28]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8104 	beq.w	8006c24 <_dtoa_r+0xb54>
 8006a1c:	2e00      	cmp	r6, #0
 8006a1e:	dd05      	ble.n	8006a2c <_dtoa_r+0x95c>
 8006a20:	4629      	mov	r1, r5
 8006a22:	4632      	mov	r2, r6
 8006a24:	4658      	mov	r0, fp
 8006a26:	f000 fc25 	bl	8007274 <__lshift>
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d05a      	beq.n	8006ae8 <_dtoa_r+0xa18>
 8006a32:	6869      	ldr	r1, [r5, #4]
 8006a34:	4658      	mov	r0, fp
 8006a36:	f000 fa0f 	bl	8006e58 <_Balloc>
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	b928      	cbnz	r0, 8006a4a <_dtoa_r+0x97a>
 8006a3e:	4b84      	ldr	r3, [pc, #528]	@ (8006c50 <_dtoa_r+0xb80>)
 8006a40:	4602      	mov	r2, r0
 8006a42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a46:	f7ff bb5a 	b.w	80060fe <_dtoa_r+0x2e>
 8006a4a:	692a      	ldr	r2, [r5, #16]
 8006a4c:	3202      	adds	r2, #2
 8006a4e:	0092      	lsls	r2, r2, #2
 8006a50:	f105 010c 	add.w	r1, r5, #12
 8006a54:	300c      	adds	r0, #12
 8006a56:	f001 f803 	bl	8007a60 <memcpy>
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4658      	mov	r0, fp
 8006a60:	f000 fc08 	bl	8007274 <__lshift>
 8006a64:	f10a 0301 	add.w	r3, sl, #1
 8006a68:	9307      	str	r3, [sp, #28]
 8006a6a:	9b00      	ldr	r3, [sp, #0]
 8006a6c:	4453      	add	r3, sl
 8006a6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a70:	9b02      	ldr	r3, [sp, #8]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	462f      	mov	r7, r5
 8006a78:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	4621      	mov	r1, r4
 8006a80:	3b01      	subs	r3, #1
 8006a82:	4648      	mov	r0, r9
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	f7ff fa98 	bl	8005fba <quorem>
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	9002      	str	r0, [sp, #8]
 8006a8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a92:	4648      	mov	r0, r9
 8006a94:	f000 fc5a 	bl	800734c <__mcmp>
 8006a98:	462a      	mov	r2, r5
 8006a9a:	9008      	str	r0, [sp, #32]
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4658      	mov	r0, fp
 8006aa0:	f000 fc70 	bl	8007384 <__mdiff>
 8006aa4:	68c2      	ldr	r2, [r0, #12]
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	bb02      	cbnz	r2, 8006aec <_dtoa_r+0xa1c>
 8006aaa:	4601      	mov	r1, r0
 8006aac:	4648      	mov	r0, r9
 8006aae:	f000 fc4d 	bl	800734c <__mcmp>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4658      	mov	r0, fp
 8006ab8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006aba:	f000 fa0d 	bl	8006ed8 <_Bfree>
 8006abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ac0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ac2:	9e07      	ldr	r6, [sp, #28]
 8006ac4:	ea43 0102 	orr.w	r1, r3, r2
 8006ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aca:	4319      	orrs	r1, r3
 8006acc:	d110      	bne.n	8006af0 <_dtoa_r+0xa20>
 8006ace:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ad2:	d029      	beq.n	8006b28 <_dtoa_r+0xa58>
 8006ad4:	9b08      	ldr	r3, [sp, #32]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dd02      	ble.n	8006ae0 <_dtoa_r+0xa10>
 8006ada:	9b02      	ldr	r3, [sp, #8]
 8006adc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006ae0:	9b00      	ldr	r3, [sp, #0]
 8006ae2:	f883 8000 	strb.w	r8, [r3]
 8006ae6:	e63f      	b.n	8006768 <_dtoa_r+0x698>
 8006ae8:	4628      	mov	r0, r5
 8006aea:	e7bb      	b.n	8006a64 <_dtoa_r+0x994>
 8006aec:	2201      	movs	r2, #1
 8006aee:	e7e1      	b.n	8006ab4 <_dtoa_r+0x9e4>
 8006af0:	9b08      	ldr	r3, [sp, #32]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	db04      	blt.n	8006b00 <_dtoa_r+0xa30>
 8006af6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006af8:	430b      	orrs	r3, r1
 8006afa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006afc:	430b      	orrs	r3, r1
 8006afe:	d120      	bne.n	8006b42 <_dtoa_r+0xa72>
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	dded      	ble.n	8006ae0 <_dtoa_r+0xa10>
 8006b04:	4649      	mov	r1, r9
 8006b06:	2201      	movs	r2, #1
 8006b08:	4658      	mov	r0, fp
 8006b0a:	f000 fbb3 	bl	8007274 <__lshift>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4681      	mov	r9, r0
 8006b12:	f000 fc1b 	bl	800734c <__mcmp>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	dc03      	bgt.n	8006b22 <_dtoa_r+0xa52>
 8006b1a:	d1e1      	bne.n	8006ae0 <_dtoa_r+0xa10>
 8006b1c:	f018 0f01 	tst.w	r8, #1
 8006b20:	d0de      	beq.n	8006ae0 <_dtoa_r+0xa10>
 8006b22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b26:	d1d8      	bne.n	8006ada <_dtoa_r+0xa0a>
 8006b28:	9a00      	ldr	r2, [sp, #0]
 8006b2a:	2339      	movs	r3, #57	@ 0x39
 8006b2c:	7013      	strb	r3, [r2, #0]
 8006b2e:	4633      	mov	r3, r6
 8006b30:	461e      	mov	r6, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b38:	2a39      	cmp	r2, #57	@ 0x39
 8006b3a:	d052      	beq.n	8006be2 <_dtoa_r+0xb12>
 8006b3c:	3201      	adds	r2, #1
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	e612      	b.n	8006768 <_dtoa_r+0x698>
 8006b42:	2a00      	cmp	r2, #0
 8006b44:	dd07      	ble.n	8006b56 <_dtoa_r+0xa86>
 8006b46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b4a:	d0ed      	beq.n	8006b28 <_dtoa_r+0xa58>
 8006b4c:	9a00      	ldr	r2, [sp, #0]
 8006b4e:	f108 0301 	add.w	r3, r8, #1
 8006b52:	7013      	strb	r3, [r2, #0]
 8006b54:	e608      	b.n	8006768 <_dtoa_r+0x698>
 8006b56:	9b07      	ldr	r3, [sp, #28]
 8006b58:	9a07      	ldr	r2, [sp, #28]
 8006b5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d028      	beq.n	8006bb6 <_dtoa_r+0xae6>
 8006b64:	4649      	mov	r1, r9
 8006b66:	2300      	movs	r3, #0
 8006b68:	220a      	movs	r2, #10
 8006b6a:	4658      	mov	r0, fp
 8006b6c:	f000 f9d6 	bl	8006f1c <__multadd>
 8006b70:	42af      	cmp	r7, r5
 8006b72:	4681      	mov	r9, r0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	f04f 020a 	mov.w	r2, #10
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4658      	mov	r0, fp
 8006b80:	d107      	bne.n	8006b92 <_dtoa_r+0xac2>
 8006b82:	f000 f9cb 	bl	8006f1c <__multadd>
 8006b86:	4607      	mov	r7, r0
 8006b88:	4605      	mov	r5, r0
 8006b8a:	9b07      	ldr	r3, [sp, #28]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	9307      	str	r3, [sp, #28]
 8006b90:	e774      	b.n	8006a7c <_dtoa_r+0x9ac>
 8006b92:	f000 f9c3 	bl	8006f1c <__multadd>
 8006b96:	4629      	mov	r1, r5
 8006b98:	4607      	mov	r7, r0
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	220a      	movs	r2, #10
 8006b9e:	4658      	mov	r0, fp
 8006ba0:	f000 f9bc 	bl	8006f1c <__multadd>
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	e7f0      	b.n	8006b8a <_dtoa_r+0xaba>
 8006ba8:	9b00      	ldr	r3, [sp, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bfcc      	ite	gt
 8006bae:	461e      	movgt	r6, r3
 8006bb0:	2601      	movle	r6, #1
 8006bb2:	4456      	add	r6, sl
 8006bb4:	2700      	movs	r7, #0
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	2201      	movs	r2, #1
 8006bba:	4658      	mov	r0, fp
 8006bbc:	f000 fb5a 	bl	8007274 <__lshift>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4681      	mov	r9, r0
 8006bc4:	f000 fbc2 	bl	800734c <__mcmp>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	dcb0      	bgt.n	8006b2e <_dtoa_r+0xa5e>
 8006bcc:	d102      	bne.n	8006bd4 <_dtoa_r+0xb04>
 8006bce:	f018 0f01 	tst.w	r8, #1
 8006bd2:	d1ac      	bne.n	8006b2e <_dtoa_r+0xa5e>
 8006bd4:	4633      	mov	r3, r6
 8006bd6:	461e      	mov	r6, r3
 8006bd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bdc:	2a30      	cmp	r2, #48	@ 0x30
 8006bde:	d0fa      	beq.n	8006bd6 <_dtoa_r+0xb06>
 8006be0:	e5c2      	b.n	8006768 <_dtoa_r+0x698>
 8006be2:	459a      	cmp	sl, r3
 8006be4:	d1a4      	bne.n	8006b30 <_dtoa_r+0xa60>
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	3301      	adds	r3, #1
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	2331      	movs	r3, #49	@ 0x31
 8006bee:	f88a 3000 	strb.w	r3, [sl]
 8006bf2:	e5b9      	b.n	8006768 <_dtoa_r+0x698>
 8006bf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006bf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006c54 <_dtoa_r+0xb84>
 8006bfa:	b11b      	cbz	r3, 8006c04 <_dtoa_r+0xb34>
 8006bfc:	f10a 0308 	add.w	r3, sl, #8
 8006c00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	4650      	mov	r0, sl
 8006c06:	b019      	add	sp, #100	@ 0x64
 8006c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	f77f ae37 	ble.w	8006882 <_dtoa_r+0x7b2>
 8006c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c18:	2001      	movs	r0, #1
 8006c1a:	e655      	b.n	80068c8 <_dtoa_r+0x7f8>
 8006c1c:	9b00      	ldr	r3, [sp, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f77f aed6 	ble.w	80069d0 <_dtoa_r+0x900>
 8006c24:	4656      	mov	r6, sl
 8006c26:	4621      	mov	r1, r4
 8006c28:	4648      	mov	r0, r9
 8006c2a:	f7ff f9c6 	bl	8005fba <quorem>
 8006c2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c32:	f806 8b01 	strb.w	r8, [r6], #1
 8006c36:	9b00      	ldr	r3, [sp, #0]
 8006c38:	eba6 020a 	sub.w	r2, r6, sl
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	ddb3      	ble.n	8006ba8 <_dtoa_r+0xad8>
 8006c40:	4649      	mov	r1, r9
 8006c42:	2300      	movs	r3, #0
 8006c44:	220a      	movs	r2, #10
 8006c46:	4658      	mov	r0, fp
 8006c48:	f000 f968 	bl	8006f1c <__multadd>
 8006c4c:	4681      	mov	r9, r0
 8006c4e:	e7ea      	b.n	8006c26 <_dtoa_r+0xb56>
 8006c50:	08007dc0 	.word	0x08007dc0
 8006c54:	08007d44 	.word	0x08007d44

08006c58 <_free_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	d041      	beq.n	8006ce4 <_free_r+0x8c>
 8006c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c64:	1f0c      	subs	r4, r1, #4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	bfb8      	it	lt
 8006c6a:	18e4      	addlt	r4, r4, r3
 8006c6c:	f000 f8e8 	bl	8006e40 <__malloc_lock>
 8006c70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce8 <_free_r+0x90>)
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	b933      	cbnz	r3, 8006c84 <_free_r+0x2c>
 8006c76:	6063      	str	r3, [r4, #4]
 8006c78:	6014      	str	r4, [r2, #0]
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c80:	f000 b8e4 	b.w	8006e4c <__malloc_unlock>
 8006c84:	42a3      	cmp	r3, r4
 8006c86:	d908      	bls.n	8006c9a <_free_r+0x42>
 8006c88:	6820      	ldr	r0, [r4, #0]
 8006c8a:	1821      	adds	r1, r4, r0
 8006c8c:	428b      	cmp	r3, r1
 8006c8e:	bf01      	itttt	eq
 8006c90:	6819      	ldreq	r1, [r3, #0]
 8006c92:	685b      	ldreq	r3, [r3, #4]
 8006c94:	1809      	addeq	r1, r1, r0
 8006c96:	6021      	streq	r1, [r4, #0]
 8006c98:	e7ed      	b.n	8006c76 <_free_r+0x1e>
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	b10b      	cbz	r3, 8006ca4 <_free_r+0x4c>
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	d9fa      	bls.n	8006c9a <_free_r+0x42>
 8006ca4:	6811      	ldr	r1, [r2, #0]
 8006ca6:	1850      	adds	r0, r2, r1
 8006ca8:	42a0      	cmp	r0, r4
 8006caa:	d10b      	bne.n	8006cc4 <_free_r+0x6c>
 8006cac:	6820      	ldr	r0, [r4, #0]
 8006cae:	4401      	add	r1, r0
 8006cb0:	1850      	adds	r0, r2, r1
 8006cb2:	4283      	cmp	r3, r0
 8006cb4:	6011      	str	r1, [r2, #0]
 8006cb6:	d1e0      	bne.n	8006c7a <_free_r+0x22>
 8006cb8:	6818      	ldr	r0, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	6053      	str	r3, [r2, #4]
 8006cbe:	4408      	add	r0, r1
 8006cc0:	6010      	str	r0, [r2, #0]
 8006cc2:	e7da      	b.n	8006c7a <_free_r+0x22>
 8006cc4:	d902      	bls.n	8006ccc <_free_r+0x74>
 8006cc6:	230c      	movs	r3, #12
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	e7d6      	b.n	8006c7a <_free_r+0x22>
 8006ccc:	6820      	ldr	r0, [r4, #0]
 8006cce:	1821      	adds	r1, r4, r0
 8006cd0:	428b      	cmp	r3, r1
 8006cd2:	bf04      	itt	eq
 8006cd4:	6819      	ldreq	r1, [r3, #0]
 8006cd6:	685b      	ldreq	r3, [r3, #4]
 8006cd8:	6063      	str	r3, [r4, #4]
 8006cda:	bf04      	itt	eq
 8006cdc:	1809      	addeq	r1, r1, r0
 8006cde:	6021      	streq	r1, [r4, #0]
 8006ce0:	6054      	str	r4, [r2, #4]
 8006ce2:	e7ca      	b.n	8006c7a <_free_r+0x22>
 8006ce4:	bd38      	pop	{r3, r4, r5, pc}
 8006ce6:	bf00      	nop
 8006ce8:	200004fc 	.word	0x200004fc

08006cec <malloc>:
 8006cec:	4b02      	ldr	r3, [pc, #8]	@ (8006cf8 <malloc+0xc>)
 8006cee:	4601      	mov	r1, r0
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	f000 b825 	b.w	8006d40 <_malloc_r>
 8006cf6:	bf00      	nop
 8006cf8:	20000018 	.word	0x20000018

08006cfc <sbrk_aligned>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8006d3c <sbrk_aligned+0x40>)
 8006d00:	460c      	mov	r4, r1
 8006d02:	6831      	ldr	r1, [r6, #0]
 8006d04:	4605      	mov	r5, r0
 8006d06:	b911      	cbnz	r1, 8006d0e <sbrk_aligned+0x12>
 8006d08:	f000 fe9a 	bl	8007a40 <_sbrk_r>
 8006d0c:	6030      	str	r0, [r6, #0]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 fe95 	bl	8007a40 <_sbrk_r>
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	d103      	bne.n	8006d22 <sbrk_aligned+0x26>
 8006d1a:	f04f 34ff 	mov.w	r4, #4294967295
 8006d1e:	4620      	mov	r0, r4
 8006d20:	bd70      	pop	{r4, r5, r6, pc}
 8006d22:	1cc4      	adds	r4, r0, #3
 8006d24:	f024 0403 	bic.w	r4, r4, #3
 8006d28:	42a0      	cmp	r0, r4
 8006d2a:	d0f8      	beq.n	8006d1e <sbrk_aligned+0x22>
 8006d2c:	1a21      	subs	r1, r4, r0
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 fe86 	bl	8007a40 <_sbrk_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d1f2      	bne.n	8006d1e <sbrk_aligned+0x22>
 8006d38:	e7ef      	b.n	8006d1a <sbrk_aligned+0x1e>
 8006d3a:	bf00      	nop
 8006d3c:	200004f8 	.word	0x200004f8

08006d40 <_malloc_r>:
 8006d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d44:	1ccd      	adds	r5, r1, #3
 8006d46:	f025 0503 	bic.w	r5, r5, #3
 8006d4a:	3508      	adds	r5, #8
 8006d4c:	2d0c      	cmp	r5, #12
 8006d4e:	bf38      	it	cc
 8006d50:	250c      	movcc	r5, #12
 8006d52:	2d00      	cmp	r5, #0
 8006d54:	4606      	mov	r6, r0
 8006d56:	db01      	blt.n	8006d5c <_malloc_r+0x1c>
 8006d58:	42a9      	cmp	r1, r5
 8006d5a:	d904      	bls.n	8006d66 <_malloc_r+0x26>
 8006d5c:	230c      	movs	r3, #12
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	2000      	movs	r0, #0
 8006d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e3c <_malloc_r+0xfc>
 8006d6a:	f000 f869 	bl	8006e40 <__malloc_lock>
 8006d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d72:	461c      	mov	r4, r3
 8006d74:	bb44      	cbnz	r4, 8006dc8 <_malloc_r+0x88>
 8006d76:	4629      	mov	r1, r5
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7ff ffbf 	bl	8006cfc <sbrk_aligned>
 8006d7e:	1c43      	adds	r3, r0, #1
 8006d80:	4604      	mov	r4, r0
 8006d82:	d158      	bne.n	8006e36 <_malloc_r+0xf6>
 8006d84:	f8d8 4000 	ldr.w	r4, [r8]
 8006d88:	4627      	mov	r7, r4
 8006d8a:	2f00      	cmp	r7, #0
 8006d8c:	d143      	bne.n	8006e16 <_malloc_r+0xd6>
 8006d8e:	2c00      	cmp	r4, #0
 8006d90:	d04b      	beq.n	8006e2a <_malloc_r+0xea>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	4639      	mov	r1, r7
 8006d96:	4630      	mov	r0, r6
 8006d98:	eb04 0903 	add.w	r9, r4, r3
 8006d9c:	f000 fe50 	bl	8007a40 <_sbrk_r>
 8006da0:	4581      	cmp	r9, r0
 8006da2:	d142      	bne.n	8006e2a <_malloc_r+0xea>
 8006da4:	6821      	ldr	r1, [r4, #0]
 8006da6:	1a6d      	subs	r5, r5, r1
 8006da8:	4629      	mov	r1, r5
 8006daa:	4630      	mov	r0, r6
 8006dac:	f7ff ffa6 	bl	8006cfc <sbrk_aligned>
 8006db0:	3001      	adds	r0, #1
 8006db2:	d03a      	beq.n	8006e2a <_malloc_r+0xea>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	442b      	add	r3, r5
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	f8d8 3000 	ldr.w	r3, [r8]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	bb62      	cbnz	r2, 8006e1c <_malloc_r+0xdc>
 8006dc2:	f8c8 7000 	str.w	r7, [r8]
 8006dc6:	e00f      	b.n	8006de8 <_malloc_r+0xa8>
 8006dc8:	6822      	ldr	r2, [r4, #0]
 8006dca:	1b52      	subs	r2, r2, r5
 8006dcc:	d420      	bmi.n	8006e10 <_malloc_r+0xd0>
 8006dce:	2a0b      	cmp	r2, #11
 8006dd0:	d917      	bls.n	8006e02 <_malloc_r+0xc2>
 8006dd2:	1961      	adds	r1, r4, r5
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	6025      	str	r5, [r4, #0]
 8006dd8:	bf18      	it	ne
 8006dda:	6059      	strne	r1, [r3, #4]
 8006ddc:	6863      	ldr	r3, [r4, #4]
 8006dde:	bf08      	it	eq
 8006de0:	f8c8 1000 	streq.w	r1, [r8]
 8006de4:	5162      	str	r2, [r4, r5]
 8006de6:	604b      	str	r3, [r1, #4]
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 f82f 	bl	8006e4c <__malloc_unlock>
 8006dee:	f104 000b 	add.w	r0, r4, #11
 8006df2:	1d23      	adds	r3, r4, #4
 8006df4:	f020 0007 	bic.w	r0, r0, #7
 8006df8:	1ac2      	subs	r2, r0, r3
 8006dfa:	bf1c      	itt	ne
 8006dfc:	1a1b      	subne	r3, r3, r0
 8006dfe:	50a3      	strne	r3, [r4, r2]
 8006e00:	e7af      	b.n	8006d62 <_malloc_r+0x22>
 8006e02:	6862      	ldr	r2, [r4, #4]
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	bf0c      	ite	eq
 8006e08:	f8c8 2000 	streq.w	r2, [r8]
 8006e0c:	605a      	strne	r2, [r3, #4]
 8006e0e:	e7eb      	b.n	8006de8 <_malloc_r+0xa8>
 8006e10:	4623      	mov	r3, r4
 8006e12:	6864      	ldr	r4, [r4, #4]
 8006e14:	e7ae      	b.n	8006d74 <_malloc_r+0x34>
 8006e16:	463c      	mov	r4, r7
 8006e18:	687f      	ldr	r7, [r7, #4]
 8006e1a:	e7b6      	b.n	8006d8a <_malloc_r+0x4a>
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	d1fb      	bne.n	8006e1c <_malloc_r+0xdc>
 8006e24:	2300      	movs	r3, #0
 8006e26:	6053      	str	r3, [r2, #4]
 8006e28:	e7de      	b.n	8006de8 <_malloc_r+0xa8>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	6033      	str	r3, [r6, #0]
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f000 f80c 	bl	8006e4c <__malloc_unlock>
 8006e34:	e794      	b.n	8006d60 <_malloc_r+0x20>
 8006e36:	6005      	str	r5, [r0, #0]
 8006e38:	e7d6      	b.n	8006de8 <_malloc_r+0xa8>
 8006e3a:	bf00      	nop
 8006e3c:	200004fc 	.word	0x200004fc

08006e40 <__malloc_lock>:
 8006e40:	4801      	ldr	r0, [pc, #4]	@ (8006e48 <__malloc_lock+0x8>)
 8006e42:	f7ff b8b8 	b.w	8005fb6 <__retarget_lock_acquire_recursive>
 8006e46:	bf00      	nop
 8006e48:	200004f4 	.word	0x200004f4

08006e4c <__malloc_unlock>:
 8006e4c:	4801      	ldr	r0, [pc, #4]	@ (8006e54 <__malloc_unlock+0x8>)
 8006e4e:	f7ff b8b3 	b.w	8005fb8 <__retarget_lock_release_recursive>
 8006e52:	bf00      	nop
 8006e54:	200004f4 	.word	0x200004f4

08006e58 <_Balloc>:
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	69c6      	ldr	r6, [r0, #28]
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	460d      	mov	r5, r1
 8006e60:	b976      	cbnz	r6, 8006e80 <_Balloc+0x28>
 8006e62:	2010      	movs	r0, #16
 8006e64:	f7ff ff42 	bl	8006cec <malloc>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	61e0      	str	r0, [r4, #28]
 8006e6c:	b920      	cbnz	r0, 8006e78 <_Balloc+0x20>
 8006e6e:	4b18      	ldr	r3, [pc, #96]	@ (8006ed0 <_Balloc+0x78>)
 8006e70:	4818      	ldr	r0, [pc, #96]	@ (8006ed4 <_Balloc+0x7c>)
 8006e72:	216b      	movs	r1, #107	@ 0x6b
 8006e74:	f000 fe02 	bl	8007a7c <__assert_func>
 8006e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e7c:	6006      	str	r6, [r0, #0]
 8006e7e:	60c6      	str	r6, [r0, #12]
 8006e80:	69e6      	ldr	r6, [r4, #28]
 8006e82:	68f3      	ldr	r3, [r6, #12]
 8006e84:	b183      	cbz	r3, 8006ea8 <_Balloc+0x50>
 8006e86:	69e3      	ldr	r3, [r4, #28]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e8e:	b9b8      	cbnz	r0, 8006ec0 <_Balloc+0x68>
 8006e90:	2101      	movs	r1, #1
 8006e92:	fa01 f605 	lsl.w	r6, r1, r5
 8006e96:	1d72      	adds	r2, r6, #5
 8006e98:	0092      	lsls	r2, r2, #2
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f000 fe0c 	bl	8007ab8 <_calloc_r>
 8006ea0:	b160      	cbz	r0, 8006ebc <_Balloc+0x64>
 8006ea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ea6:	e00e      	b.n	8006ec6 <_Balloc+0x6e>
 8006ea8:	2221      	movs	r2, #33	@ 0x21
 8006eaa:	2104      	movs	r1, #4
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 fe03 	bl	8007ab8 <_calloc_r>
 8006eb2:	69e3      	ldr	r3, [r4, #28]
 8006eb4:	60f0      	str	r0, [r6, #12]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e4      	bne.n	8006e86 <_Balloc+0x2e>
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	6802      	ldr	r2, [r0, #0]
 8006ec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ecc:	e7f7      	b.n	8006ebe <_Balloc+0x66>
 8006ece:	bf00      	nop
 8006ed0:	08007d51 	.word	0x08007d51
 8006ed4:	08007dd1 	.word	0x08007dd1

08006ed8 <_Bfree>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	69c6      	ldr	r6, [r0, #28]
 8006edc:	4605      	mov	r5, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	b976      	cbnz	r6, 8006f00 <_Bfree+0x28>
 8006ee2:	2010      	movs	r0, #16
 8006ee4:	f7ff ff02 	bl	8006cec <malloc>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	61e8      	str	r0, [r5, #28]
 8006eec:	b920      	cbnz	r0, 8006ef8 <_Bfree+0x20>
 8006eee:	4b09      	ldr	r3, [pc, #36]	@ (8006f14 <_Bfree+0x3c>)
 8006ef0:	4809      	ldr	r0, [pc, #36]	@ (8006f18 <_Bfree+0x40>)
 8006ef2:	218f      	movs	r1, #143	@ 0x8f
 8006ef4:	f000 fdc2 	bl	8007a7c <__assert_func>
 8006ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006efc:	6006      	str	r6, [r0, #0]
 8006efe:	60c6      	str	r6, [r0, #12]
 8006f00:	b13c      	cbz	r4, 8006f12 <_Bfree+0x3a>
 8006f02:	69eb      	ldr	r3, [r5, #28]
 8006f04:	6862      	ldr	r2, [r4, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f0c:	6021      	str	r1, [r4, #0]
 8006f0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	08007d51 	.word	0x08007d51
 8006f18:	08007dd1 	.word	0x08007dd1

08006f1c <__multadd>:
 8006f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f20:	690d      	ldr	r5, [r1, #16]
 8006f22:	4607      	mov	r7, r0
 8006f24:	460c      	mov	r4, r1
 8006f26:	461e      	mov	r6, r3
 8006f28:	f101 0c14 	add.w	ip, r1, #20
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8006f32:	b299      	uxth	r1, r3
 8006f34:	fb02 6101 	mla	r1, r2, r1, r6
 8006f38:	0c1e      	lsrs	r6, r3, #16
 8006f3a:	0c0b      	lsrs	r3, r1, #16
 8006f3c:	fb02 3306 	mla	r3, r2, r6, r3
 8006f40:	b289      	uxth	r1, r1
 8006f42:	3001      	adds	r0, #1
 8006f44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f48:	4285      	cmp	r5, r0
 8006f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8006f4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f52:	dcec      	bgt.n	8006f2e <__multadd+0x12>
 8006f54:	b30e      	cbz	r6, 8006f9a <__multadd+0x7e>
 8006f56:	68a3      	ldr	r3, [r4, #8]
 8006f58:	42ab      	cmp	r3, r5
 8006f5a:	dc19      	bgt.n	8006f90 <__multadd+0x74>
 8006f5c:	6861      	ldr	r1, [r4, #4]
 8006f5e:	4638      	mov	r0, r7
 8006f60:	3101      	adds	r1, #1
 8006f62:	f7ff ff79 	bl	8006e58 <_Balloc>
 8006f66:	4680      	mov	r8, r0
 8006f68:	b928      	cbnz	r0, 8006f76 <__multadd+0x5a>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa0 <__multadd+0x84>)
 8006f6e:	480d      	ldr	r0, [pc, #52]	@ (8006fa4 <__multadd+0x88>)
 8006f70:	21ba      	movs	r1, #186	@ 0xba
 8006f72:	f000 fd83 	bl	8007a7c <__assert_func>
 8006f76:	6922      	ldr	r2, [r4, #16]
 8006f78:	3202      	adds	r2, #2
 8006f7a:	f104 010c 	add.w	r1, r4, #12
 8006f7e:	0092      	lsls	r2, r2, #2
 8006f80:	300c      	adds	r0, #12
 8006f82:	f000 fd6d 	bl	8007a60 <memcpy>
 8006f86:	4621      	mov	r1, r4
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f7ff ffa5 	bl	8006ed8 <_Bfree>
 8006f8e:	4644      	mov	r4, r8
 8006f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f94:	3501      	adds	r5, #1
 8006f96:	615e      	str	r6, [r3, #20]
 8006f98:	6125      	str	r5, [r4, #16]
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa0:	08007dc0 	.word	0x08007dc0
 8006fa4:	08007dd1 	.word	0x08007dd1

08006fa8 <__hi0bits>:
 8006fa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006fac:	4603      	mov	r3, r0
 8006fae:	bf36      	itet	cc
 8006fb0:	0403      	lslcc	r3, r0, #16
 8006fb2:	2000      	movcs	r0, #0
 8006fb4:	2010      	movcc	r0, #16
 8006fb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fba:	bf3c      	itt	cc
 8006fbc:	021b      	lslcc	r3, r3, #8
 8006fbe:	3008      	addcc	r0, #8
 8006fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fc4:	bf3c      	itt	cc
 8006fc6:	011b      	lslcc	r3, r3, #4
 8006fc8:	3004      	addcc	r0, #4
 8006fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fce:	bf3c      	itt	cc
 8006fd0:	009b      	lslcc	r3, r3, #2
 8006fd2:	3002      	addcc	r0, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	db05      	blt.n	8006fe4 <__hi0bits+0x3c>
 8006fd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006fdc:	f100 0001 	add.w	r0, r0, #1
 8006fe0:	bf08      	it	eq
 8006fe2:	2020      	moveq	r0, #32
 8006fe4:	4770      	bx	lr

08006fe6 <__lo0bits>:
 8006fe6:	6803      	ldr	r3, [r0, #0]
 8006fe8:	4602      	mov	r2, r0
 8006fea:	f013 0007 	ands.w	r0, r3, #7
 8006fee:	d00b      	beq.n	8007008 <__lo0bits+0x22>
 8006ff0:	07d9      	lsls	r1, r3, #31
 8006ff2:	d421      	bmi.n	8007038 <__lo0bits+0x52>
 8006ff4:	0798      	lsls	r0, r3, #30
 8006ff6:	bf49      	itett	mi
 8006ff8:	085b      	lsrmi	r3, r3, #1
 8006ffa:	089b      	lsrpl	r3, r3, #2
 8006ffc:	2001      	movmi	r0, #1
 8006ffe:	6013      	strmi	r3, [r2, #0]
 8007000:	bf5c      	itt	pl
 8007002:	6013      	strpl	r3, [r2, #0]
 8007004:	2002      	movpl	r0, #2
 8007006:	4770      	bx	lr
 8007008:	b299      	uxth	r1, r3
 800700a:	b909      	cbnz	r1, 8007010 <__lo0bits+0x2a>
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	2010      	movs	r0, #16
 8007010:	b2d9      	uxtb	r1, r3
 8007012:	b909      	cbnz	r1, 8007018 <__lo0bits+0x32>
 8007014:	3008      	adds	r0, #8
 8007016:	0a1b      	lsrs	r3, r3, #8
 8007018:	0719      	lsls	r1, r3, #28
 800701a:	bf04      	itt	eq
 800701c:	091b      	lsreq	r3, r3, #4
 800701e:	3004      	addeq	r0, #4
 8007020:	0799      	lsls	r1, r3, #30
 8007022:	bf04      	itt	eq
 8007024:	089b      	lsreq	r3, r3, #2
 8007026:	3002      	addeq	r0, #2
 8007028:	07d9      	lsls	r1, r3, #31
 800702a:	d403      	bmi.n	8007034 <__lo0bits+0x4e>
 800702c:	085b      	lsrs	r3, r3, #1
 800702e:	f100 0001 	add.w	r0, r0, #1
 8007032:	d003      	beq.n	800703c <__lo0bits+0x56>
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4770      	bx	lr
 8007038:	2000      	movs	r0, #0
 800703a:	4770      	bx	lr
 800703c:	2020      	movs	r0, #32
 800703e:	4770      	bx	lr

08007040 <__i2b>:
 8007040:	b510      	push	{r4, lr}
 8007042:	460c      	mov	r4, r1
 8007044:	2101      	movs	r1, #1
 8007046:	f7ff ff07 	bl	8006e58 <_Balloc>
 800704a:	4602      	mov	r2, r0
 800704c:	b928      	cbnz	r0, 800705a <__i2b+0x1a>
 800704e:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <__i2b+0x24>)
 8007050:	4805      	ldr	r0, [pc, #20]	@ (8007068 <__i2b+0x28>)
 8007052:	f240 1145 	movw	r1, #325	@ 0x145
 8007056:	f000 fd11 	bl	8007a7c <__assert_func>
 800705a:	2301      	movs	r3, #1
 800705c:	6144      	str	r4, [r0, #20]
 800705e:	6103      	str	r3, [r0, #16]
 8007060:	bd10      	pop	{r4, pc}
 8007062:	bf00      	nop
 8007064:	08007dc0 	.word	0x08007dc0
 8007068:	08007dd1 	.word	0x08007dd1

0800706c <__multiply>:
 800706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	4614      	mov	r4, r2
 8007072:	690a      	ldr	r2, [r1, #16]
 8007074:	6923      	ldr	r3, [r4, #16]
 8007076:	429a      	cmp	r2, r3
 8007078:	bfa8      	it	ge
 800707a:	4623      	movge	r3, r4
 800707c:	460f      	mov	r7, r1
 800707e:	bfa4      	itt	ge
 8007080:	460c      	movge	r4, r1
 8007082:	461f      	movge	r7, r3
 8007084:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007088:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800708c:	68a3      	ldr	r3, [r4, #8]
 800708e:	6861      	ldr	r1, [r4, #4]
 8007090:	eb0a 0609 	add.w	r6, sl, r9
 8007094:	42b3      	cmp	r3, r6
 8007096:	b085      	sub	sp, #20
 8007098:	bfb8      	it	lt
 800709a:	3101      	addlt	r1, #1
 800709c:	f7ff fedc 	bl	8006e58 <_Balloc>
 80070a0:	b930      	cbnz	r0, 80070b0 <__multiply+0x44>
 80070a2:	4602      	mov	r2, r0
 80070a4:	4b44      	ldr	r3, [pc, #272]	@ (80071b8 <__multiply+0x14c>)
 80070a6:	4845      	ldr	r0, [pc, #276]	@ (80071bc <__multiply+0x150>)
 80070a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80070ac:	f000 fce6 	bl	8007a7c <__assert_func>
 80070b0:	f100 0514 	add.w	r5, r0, #20
 80070b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070b8:	462b      	mov	r3, r5
 80070ba:	2200      	movs	r2, #0
 80070bc:	4543      	cmp	r3, r8
 80070be:	d321      	bcc.n	8007104 <__multiply+0x98>
 80070c0:	f107 0114 	add.w	r1, r7, #20
 80070c4:	f104 0214 	add.w	r2, r4, #20
 80070c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80070cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80070d0:	9302      	str	r3, [sp, #8]
 80070d2:	1b13      	subs	r3, r2, r4
 80070d4:	3b15      	subs	r3, #21
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	3304      	adds	r3, #4
 80070dc:	f104 0715 	add.w	r7, r4, #21
 80070e0:	42ba      	cmp	r2, r7
 80070e2:	bf38      	it	cc
 80070e4:	2304      	movcc	r3, #4
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	9b02      	ldr	r3, [sp, #8]
 80070ea:	9103      	str	r1, [sp, #12]
 80070ec:	428b      	cmp	r3, r1
 80070ee:	d80c      	bhi.n	800710a <__multiply+0x9e>
 80070f0:	2e00      	cmp	r6, #0
 80070f2:	dd03      	ble.n	80070fc <__multiply+0x90>
 80070f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d05b      	beq.n	80071b4 <__multiply+0x148>
 80070fc:	6106      	str	r6, [r0, #16]
 80070fe:	b005      	add	sp, #20
 8007100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007104:	f843 2b04 	str.w	r2, [r3], #4
 8007108:	e7d8      	b.n	80070bc <__multiply+0x50>
 800710a:	f8b1 a000 	ldrh.w	sl, [r1]
 800710e:	f1ba 0f00 	cmp.w	sl, #0
 8007112:	d024      	beq.n	800715e <__multiply+0xf2>
 8007114:	f104 0e14 	add.w	lr, r4, #20
 8007118:	46a9      	mov	r9, r5
 800711a:	f04f 0c00 	mov.w	ip, #0
 800711e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007122:	f8d9 3000 	ldr.w	r3, [r9]
 8007126:	fa1f fb87 	uxth.w	fp, r7
 800712a:	b29b      	uxth	r3, r3
 800712c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007130:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007134:	f8d9 7000 	ldr.w	r7, [r9]
 8007138:	4463      	add	r3, ip
 800713a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800713e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007142:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007146:	b29b      	uxth	r3, r3
 8007148:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800714c:	4572      	cmp	r2, lr
 800714e:	f849 3b04 	str.w	r3, [r9], #4
 8007152:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007156:	d8e2      	bhi.n	800711e <__multiply+0xb2>
 8007158:	9b01      	ldr	r3, [sp, #4]
 800715a:	f845 c003 	str.w	ip, [r5, r3]
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007164:	3104      	adds	r1, #4
 8007166:	f1b9 0f00 	cmp.w	r9, #0
 800716a:	d021      	beq.n	80071b0 <__multiply+0x144>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	f104 0c14 	add.w	ip, r4, #20
 8007172:	46ae      	mov	lr, r5
 8007174:	f04f 0a00 	mov.w	sl, #0
 8007178:	f8bc b000 	ldrh.w	fp, [ip]
 800717c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007180:	fb09 770b 	mla	r7, r9, fp, r7
 8007184:	4457      	add	r7, sl
 8007186:	b29b      	uxth	r3, r3
 8007188:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800718c:	f84e 3b04 	str.w	r3, [lr], #4
 8007190:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007194:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007198:	f8be 3000 	ldrh.w	r3, [lr]
 800719c:	fb09 330a 	mla	r3, r9, sl, r3
 80071a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80071a4:	4562      	cmp	r2, ip
 80071a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071aa:	d8e5      	bhi.n	8007178 <__multiply+0x10c>
 80071ac:	9f01      	ldr	r7, [sp, #4]
 80071ae:	51eb      	str	r3, [r5, r7]
 80071b0:	3504      	adds	r5, #4
 80071b2:	e799      	b.n	80070e8 <__multiply+0x7c>
 80071b4:	3e01      	subs	r6, #1
 80071b6:	e79b      	b.n	80070f0 <__multiply+0x84>
 80071b8:	08007dc0 	.word	0x08007dc0
 80071bc:	08007dd1 	.word	0x08007dd1

080071c0 <__pow5mult>:
 80071c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c4:	4615      	mov	r5, r2
 80071c6:	f012 0203 	ands.w	r2, r2, #3
 80071ca:	4607      	mov	r7, r0
 80071cc:	460e      	mov	r6, r1
 80071ce:	d007      	beq.n	80071e0 <__pow5mult+0x20>
 80071d0:	4c25      	ldr	r4, [pc, #148]	@ (8007268 <__pow5mult+0xa8>)
 80071d2:	3a01      	subs	r2, #1
 80071d4:	2300      	movs	r3, #0
 80071d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071da:	f7ff fe9f 	bl	8006f1c <__multadd>
 80071de:	4606      	mov	r6, r0
 80071e0:	10ad      	asrs	r5, r5, #2
 80071e2:	d03d      	beq.n	8007260 <__pow5mult+0xa0>
 80071e4:	69fc      	ldr	r4, [r7, #28]
 80071e6:	b97c      	cbnz	r4, 8007208 <__pow5mult+0x48>
 80071e8:	2010      	movs	r0, #16
 80071ea:	f7ff fd7f 	bl	8006cec <malloc>
 80071ee:	4602      	mov	r2, r0
 80071f0:	61f8      	str	r0, [r7, #28]
 80071f2:	b928      	cbnz	r0, 8007200 <__pow5mult+0x40>
 80071f4:	4b1d      	ldr	r3, [pc, #116]	@ (800726c <__pow5mult+0xac>)
 80071f6:	481e      	ldr	r0, [pc, #120]	@ (8007270 <__pow5mult+0xb0>)
 80071f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80071fc:	f000 fc3e 	bl	8007a7c <__assert_func>
 8007200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007204:	6004      	str	r4, [r0, #0]
 8007206:	60c4      	str	r4, [r0, #12]
 8007208:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800720c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007210:	b94c      	cbnz	r4, 8007226 <__pow5mult+0x66>
 8007212:	f240 2171 	movw	r1, #625	@ 0x271
 8007216:	4638      	mov	r0, r7
 8007218:	f7ff ff12 	bl	8007040 <__i2b>
 800721c:	2300      	movs	r3, #0
 800721e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007222:	4604      	mov	r4, r0
 8007224:	6003      	str	r3, [r0, #0]
 8007226:	f04f 0900 	mov.w	r9, #0
 800722a:	07eb      	lsls	r3, r5, #31
 800722c:	d50a      	bpl.n	8007244 <__pow5mult+0x84>
 800722e:	4631      	mov	r1, r6
 8007230:	4622      	mov	r2, r4
 8007232:	4638      	mov	r0, r7
 8007234:	f7ff ff1a 	bl	800706c <__multiply>
 8007238:	4631      	mov	r1, r6
 800723a:	4680      	mov	r8, r0
 800723c:	4638      	mov	r0, r7
 800723e:	f7ff fe4b 	bl	8006ed8 <_Bfree>
 8007242:	4646      	mov	r6, r8
 8007244:	106d      	asrs	r5, r5, #1
 8007246:	d00b      	beq.n	8007260 <__pow5mult+0xa0>
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	b938      	cbnz	r0, 800725c <__pow5mult+0x9c>
 800724c:	4622      	mov	r2, r4
 800724e:	4621      	mov	r1, r4
 8007250:	4638      	mov	r0, r7
 8007252:	f7ff ff0b 	bl	800706c <__multiply>
 8007256:	6020      	str	r0, [r4, #0]
 8007258:	f8c0 9000 	str.w	r9, [r0]
 800725c:	4604      	mov	r4, r0
 800725e:	e7e4      	b.n	800722a <__pow5mult+0x6a>
 8007260:	4630      	mov	r0, r6
 8007262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007266:	bf00      	nop
 8007268:	08007e2c 	.word	0x08007e2c
 800726c:	08007d51 	.word	0x08007d51
 8007270:	08007dd1 	.word	0x08007dd1

08007274 <__lshift>:
 8007274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	460c      	mov	r4, r1
 800727a:	6849      	ldr	r1, [r1, #4]
 800727c:	6923      	ldr	r3, [r4, #16]
 800727e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007282:	68a3      	ldr	r3, [r4, #8]
 8007284:	4607      	mov	r7, r0
 8007286:	4691      	mov	r9, r2
 8007288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800728c:	f108 0601 	add.w	r6, r8, #1
 8007290:	42b3      	cmp	r3, r6
 8007292:	db0b      	blt.n	80072ac <__lshift+0x38>
 8007294:	4638      	mov	r0, r7
 8007296:	f7ff fddf 	bl	8006e58 <_Balloc>
 800729a:	4605      	mov	r5, r0
 800729c:	b948      	cbnz	r0, 80072b2 <__lshift+0x3e>
 800729e:	4602      	mov	r2, r0
 80072a0:	4b28      	ldr	r3, [pc, #160]	@ (8007344 <__lshift+0xd0>)
 80072a2:	4829      	ldr	r0, [pc, #164]	@ (8007348 <__lshift+0xd4>)
 80072a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80072a8:	f000 fbe8 	bl	8007a7c <__assert_func>
 80072ac:	3101      	adds	r1, #1
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	e7ee      	b.n	8007290 <__lshift+0x1c>
 80072b2:	2300      	movs	r3, #0
 80072b4:	f100 0114 	add.w	r1, r0, #20
 80072b8:	f100 0210 	add.w	r2, r0, #16
 80072bc:	4618      	mov	r0, r3
 80072be:	4553      	cmp	r3, sl
 80072c0:	db33      	blt.n	800732a <__lshift+0xb6>
 80072c2:	6920      	ldr	r0, [r4, #16]
 80072c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072c8:	f104 0314 	add.w	r3, r4, #20
 80072cc:	f019 091f 	ands.w	r9, r9, #31
 80072d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072d8:	d02b      	beq.n	8007332 <__lshift+0xbe>
 80072da:	f1c9 0e20 	rsb	lr, r9, #32
 80072de:	468a      	mov	sl, r1
 80072e0:	2200      	movs	r2, #0
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	fa00 f009 	lsl.w	r0, r0, r9
 80072e8:	4310      	orrs	r0, r2
 80072ea:	f84a 0b04 	str.w	r0, [sl], #4
 80072ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f2:	459c      	cmp	ip, r3
 80072f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80072f8:	d8f3      	bhi.n	80072e2 <__lshift+0x6e>
 80072fa:	ebac 0304 	sub.w	r3, ip, r4
 80072fe:	3b15      	subs	r3, #21
 8007300:	f023 0303 	bic.w	r3, r3, #3
 8007304:	3304      	adds	r3, #4
 8007306:	f104 0015 	add.w	r0, r4, #21
 800730a:	4584      	cmp	ip, r0
 800730c:	bf38      	it	cc
 800730e:	2304      	movcc	r3, #4
 8007310:	50ca      	str	r2, [r1, r3]
 8007312:	b10a      	cbz	r2, 8007318 <__lshift+0xa4>
 8007314:	f108 0602 	add.w	r6, r8, #2
 8007318:	3e01      	subs	r6, #1
 800731a:	4638      	mov	r0, r7
 800731c:	612e      	str	r6, [r5, #16]
 800731e:	4621      	mov	r1, r4
 8007320:	f7ff fdda 	bl	8006ed8 <_Bfree>
 8007324:	4628      	mov	r0, r5
 8007326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732a:	f842 0f04 	str.w	r0, [r2, #4]!
 800732e:	3301      	adds	r3, #1
 8007330:	e7c5      	b.n	80072be <__lshift+0x4a>
 8007332:	3904      	subs	r1, #4
 8007334:	f853 2b04 	ldr.w	r2, [r3], #4
 8007338:	f841 2f04 	str.w	r2, [r1, #4]!
 800733c:	459c      	cmp	ip, r3
 800733e:	d8f9      	bhi.n	8007334 <__lshift+0xc0>
 8007340:	e7ea      	b.n	8007318 <__lshift+0xa4>
 8007342:	bf00      	nop
 8007344:	08007dc0 	.word	0x08007dc0
 8007348:	08007dd1 	.word	0x08007dd1

0800734c <__mcmp>:
 800734c:	690a      	ldr	r2, [r1, #16]
 800734e:	4603      	mov	r3, r0
 8007350:	6900      	ldr	r0, [r0, #16]
 8007352:	1a80      	subs	r0, r0, r2
 8007354:	b530      	push	{r4, r5, lr}
 8007356:	d10e      	bne.n	8007376 <__mcmp+0x2a>
 8007358:	3314      	adds	r3, #20
 800735a:	3114      	adds	r1, #20
 800735c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007360:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007364:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007368:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800736c:	4295      	cmp	r5, r2
 800736e:	d003      	beq.n	8007378 <__mcmp+0x2c>
 8007370:	d205      	bcs.n	800737e <__mcmp+0x32>
 8007372:	f04f 30ff 	mov.w	r0, #4294967295
 8007376:	bd30      	pop	{r4, r5, pc}
 8007378:	42a3      	cmp	r3, r4
 800737a:	d3f3      	bcc.n	8007364 <__mcmp+0x18>
 800737c:	e7fb      	b.n	8007376 <__mcmp+0x2a>
 800737e:	2001      	movs	r0, #1
 8007380:	e7f9      	b.n	8007376 <__mcmp+0x2a>
	...

08007384 <__mdiff>:
 8007384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	4689      	mov	r9, r1
 800738a:	4606      	mov	r6, r0
 800738c:	4611      	mov	r1, r2
 800738e:	4648      	mov	r0, r9
 8007390:	4614      	mov	r4, r2
 8007392:	f7ff ffdb 	bl	800734c <__mcmp>
 8007396:	1e05      	subs	r5, r0, #0
 8007398:	d112      	bne.n	80073c0 <__mdiff+0x3c>
 800739a:	4629      	mov	r1, r5
 800739c:	4630      	mov	r0, r6
 800739e:	f7ff fd5b 	bl	8006e58 <_Balloc>
 80073a2:	4602      	mov	r2, r0
 80073a4:	b928      	cbnz	r0, 80073b2 <__mdiff+0x2e>
 80073a6:	4b3f      	ldr	r3, [pc, #252]	@ (80074a4 <__mdiff+0x120>)
 80073a8:	f240 2137 	movw	r1, #567	@ 0x237
 80073ac:	483e      	ldr	r0, [pc, #248]	@ (80074a8 <__mdiff+0x124>)
 80073ae:	f000 fb65 	bl	8007a7c <__assert_func>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073b8:	4610      	mov	r0, r2
 80073ba:	b003      	add	sp, #12
 80073bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c0:	bfbc      	itt	lt
 80073c2:	464b      	movlt	r3, r9
 80073c4:	46a1      	movlt	r9, r4
 80073c6:	4630      	mov	r0, r6
 80073c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80073cc:	bfba      	itte	lt
 80073ce:	461c      	movlt	r4, r3
 80073d0:	2501      	movlt	r5, #1
 80073d2:	2500      	movge	r5, #0
 80073d4:	f7ff fd40 	bl	8006e58 <_Balloc>
 80073d8:	4602      	mov	r2, r0
 80073da:	b918      	cbnz	r0, 80073e4 <__mdiff+0x60>
 80073dc:	4b31      	ldr	r3, [pc, #196]	@ (80074a4 <__mdiff+0x120>)
 80073de:	f240 2145 	movw	r1, #581	@ 0x245
 80073e2:	e7e3      	b.n	80073ac <__mdiff+0x28>
 80073e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80073e8:	6926      	ldr	r6, [r4, #16]
 80073ea:	60c5      	str	r5, [r0, #12]
 80073ec:	f109 0310 	add.w	r3, r9, #16
 80073f0:	f109 0514 	add.w	r5, r9, #20
 80073f4:	f104 0e14 	add.w	lr, r4, #20
 80073f8:	f100 0b14 	add.w	fp, r0, #20
 80073fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007400:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007404:	9301      	str	r3, [sp, #4]
 8007406:	46d9      	mov	r9, fp
 8007408:	f04f 0c00 	mov.w	ip, #0
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007412:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	fa1f f38a 	uxth.w	r3, sl
 800741c:	4619      	mov	r1, r3
 800741e:	b283      	uxth	r3, r0
 8007420:	1acb      	subs	r3, r1, r3
 8007422:	0c00      	lsrs	r0, r0, #16
 8007424:	4463      	add	r3, ip
 8007426:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800742a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800742e:	b29b      	uxth	r3, r3
 8007430:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007434:	4576      	cmp	r6, lr
 8007436:	f849 3b04 	str.w	r3, [r9], #4
 800743a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800743e:	d8e5      	bhi.n	800740c <__mdiff+0x88>
 8007440:	1b33      	subs	r3, r6, r4
 8007442:	3b15      	subs	r3, #21
 8007444:	f023 0303 	bic.w	r3, r3, #3
 8007448:	3415      	adds	r4, #21
 800744a:	3304      	adds	r3, #4
 800744c:	42a6      	cmp	r6, r4
 800744e:	bf38      	it	cc
 8007450:	2304      	movcc	r3, #4
 8007452:	441d      	add	r5, r3
 8007454:	445b      	add	r3, fp
 8007456:	461e      	mov	r6, r3
 8007458:	462c      	mov	r4, r5
 800745a:	4544      	cmp	r4, r8
 800745c:	d30e      	bcc.n	800747c <__mdiff+0xf8>
 800745e:	f108 0103 	add.w	r1, r8, #3
 8007462:	1b49      	subs	r1, r1, r5
 8007464:	f021 0103 	bic.w	r1, r1, #3
 8007468:	3d03      	subs	r5, #3
 800746a:	45a8      	cmp	r8, r5
 800746c:	bf38      	it	cc
 800746e:	2100      	movcc	r1, #0
 8007470:	440b      	add	r3, r1
 8007472:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007476:	b191      	cbz	r1, 800749e <__mdiff+0x11a>
 8007478:	6117      	str	r7, [r2, #16]
 800747a:	e79d      	b.n	80073b8 <__mdiff+0x34>
 800747c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007480:	46e6      	mov	lr, ip
 8007482:	0c08      	lsrs	r0, r1, #16
 8007484:	fa1c fc81 	uxtah	ip, ip, r1
 8007488:	4471      	add	r1, lr
 800748a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800748e:	b289      	uxth	r1, r1
 8007490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007494:	f846 1b04 	str.w	r1, [r6], #4
 8007498:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800749c:	e7dd      	b.n	800745a <__mdiff+0xd6>
 800749e:	3f01      	subs	r7, #1
 80074a0:	e7e7      	b.n	8007472 <__mdiff+0xee>
 80074a2:	bf00      	nop
 80074a4:	08007dc0 	.word	0x08007dc0
 80074a8:	08007dd1 	.word	0x08007dd1

080074ac <__d2b>:
 80074ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074b0:	460f      	mov	r7, r1
 80074b2:	2101      	movs	r1, #1
 80074b4:	ec59 8b10 	vmov	r8, r9, d0
 80074b8:	4616      	mov	r6, r2
 80074ba:	f7ff fccd 	bl	8006e58 <_Balloc>
 80074be:	4604      	mov	r4, r0
 80074c0:	b930      	cbnz	r0, 80074d0 <__d2b+0x24>
 80074c2:	4602      	mov	r2, r0
 80074c4:	4b23      	ldr	r3, [pc, #140]	@ (8007554 <__d2b+0xa8>)
 80074c6:	4824      	ldr	r0, [pc, #144]	@ (8007558 <__d2b+0xac>)
 80074c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80074cc:	f000 fad6 	bl	8007a7c <__assert_func>
 80074d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80074d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074d8:	b10d      	cbz	r5, 80074de <__d2b+0x32>
 80074da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	f1b8 0300 	subs.w	r3, r8, #0
 80074e4:	d023      	beq.n	800752e <__d2b+0x82>
 80074e6:	4668      	mov	r0, sp
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	f7ff fd7c 	bl	8006fe6 <__lo0bits>
 80074ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80074f2:	b1d0      	cbz	r0, 800752a <__d2b+0x7e>
 80074f4:	f1c0 0320 	rsb	r3, r0, #32
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	430b      	orrs	r3, r1
 80074fe:	40c2      	lsrs	r2, r0
 8007500:	6163      	str	r3, [r4, #20]
 8007502:	9201      	str	r2, [sp, #4]
 8007504:	9b01      	ldr	r3, [sp, #4]
 8007506:	61a3      	str	r3, [r4, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	bf0c      	ite	eq
 800750c:	2201      	moveq	r2, #1
 800750e:	2202      	movne	r2, #2
 8007510:	6122      	str	r2, [r4, #16]
 8007512:	b1a5      	cbz	r5, 800753e <__d2b+0x92>
 8007514:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007518:	4405      	add	r5, r0
 800751a:	603d      	str	r5, [r7, #0]
 800751c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007520:	6030      	str	r0, [r6, #0]
 8007522:	4620      	mov	r0, r4
 8007524:	b003      	add	sp, #12
 8007526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800752a:	6161      	str	r1, [r4, #20]
 800752c:	e7ea      	b.n	8007504 <__d2b+0x58>
 800752e:	a801      	add	r0, sp, #4
 8007530:	f7ff fd59 	bl	8006fe6 <__lo0bits>
 8007534:	9b01      	ldr	r3, [sp, #4]
 8007536:	6163      	str	r3, [r4, #20]
 8007538:	3020      	adds	r0, #32
 800753a:	2201      	movs	r2, #1
 800753c:	e7e8      	b.n	8007510 <__d2b+0x64>
 800753e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007542:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007546:	6038      	str	r0, [r7, #0]
 8007548:	6918      	ldr	r0, [r3, #16]
 800754a:	f7ff fd2d 	bl	8006fa8 <__hi0bits>
 800754e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007552:	e7e5      	b.n	8007520 <__d2b+0x74>
 8007554:	08007dc0 	.word	0x08007dc0
 8007558:	08007dd1 	.word	0x08007dd1

0800755c <__sfputc_r>:
 800755c:	6893      	ldr	r3, [r2, #8]
 800755e:	3b01      	subs	r3, #1
 8007560:	2b00      	cmp	r3, #0
 8007562:	b410      	push	{r4}
 8007564:	6093      	str	r3, [r2, #8]
 8007566:	da08      	bge.n	800757a <__sfputc_r+0x1e>
 8007568:	6994      	ldr	r4, [r2, #24]
 800756a:	42a3      	cmp	r3, r4
 800756c:	db01      	blt.n	8007572 <__sfputc_r+0x16>
 800756e:	290a      	cmp	r1, #10
 8007570:	d103      	bne.n	800757a <__sfputc_r+0x1e>
 8007572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007576:	f7fe bc0c 	b.w	8005d92 <__swbuf_r>
 800757a:	6813      	ldr	r3, [r2, #0]
 800757c:	1c58      	adds	r0, r3, #1
 800757e:	6010      	str	r0, [r2, #0]
 8007580:	7019      	strb	r1, [r3, #0]
 8007582:	4608      	mov	r0, r1
 8007584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007588:	4770      	bx	lr

0800758a <__sfputs_r>:
 800758a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758c:	4606      	mov	r6, r0
 800758e:	460f      	mov	r7, r1
 8007590:	4614      	mov	r4, r2
 8007592:	18d5      	adds	r5, r2, r3
 8007594:	42ac      	cmp	r4, r5
 8007596:	d101      	bne.n	800759c <__sfputs_r+0x12>
 8007598:	2000      	movs	r0, #0
 800759a:	e007      	b.n	80075ac <__sfputs_r+0x22>
 800759c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a0:	463a      	mov	r2, r7
 80075a2:	4630      	mov	r0, r6
 80075a4:	f7ff ffda 	bl	800755c <__sfputc_r>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d1f3      	bne.n	8007594 <__sfputs_r+0xa>
 80075ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075b0 <_vfiprintf_r>:
 80075b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	460d      	mov	r5, r1
 80075b6:	b09d      	sub	sp, #116	@ 0x74
 80075b8:	4614      	mov	r4, r2
 80075ba:	4698      	mov	r8, r3
 80075bc:	4606      	mov	r6, r0
 80075be:	b118      	cbz	r0, 80075c8 <_vfiprintf_r+0x18>
 80075c0:	6a03      	ldr	r3, [r0, #32]
 80075c2:	b90b      	cbnz	r3, 80075c8 <_vfiprintf_r+0x18>
 80075c4:	f7fe fafc 	bl	8005bc0 <__sinit>
 80075c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ca:	07d9      	lsls	r1, r3, #31
 80075cc:	d405      	bmi.n	80075da <_vfiprintf_r+0x2a>
 80075ce:	89ab      	ldrh	r3, [r5, #12]
 80075d0:	059a      	lsls	r2, r3, #22
 80075d2:	d402      	bmi.n	80075da <_vfiprintf_r+0x2a>
 80075d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075d6:	f7fe fcee 	bl	8005fb6 <__retarget_lock_acquire_recursive>
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	071b      	lsls	r3, r3, #28
 80075de:	d501      	bpl.n	80075e4 <_vfiprintf_r+0x34>
 80075e0:	692b      	ldr	r3, [r5, #16]
 80075e2:	b99b      	cbnz	r3, 800760c <_vfiprintf_r+0x5c>
 80075e4:	4629      	mov	r1, r5
 80075e6:	4630      	mov	r0, r6
 80075e8:	f7fe fc12 	bl	8005e10 <__swsetup_r>
 80075ec:	b170      	cbz	r0, 800760c <_vfiprintf_r+0x5c>
 80075ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075f0:	07dc      	lsls	r4, r3, #31
 80075f2:	d504      	bpl.n	80075fe <_vfiprintf_r+0x4e>
 80075f4:	f04f 30ff 	mov.w	r0, #4294967295
 80075f8:	b01d      	add	sp, #116	@ 0x74
 80075fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	0598      	lsls	r0, r3, #22
 8007602:	d4f7      	bmi.n	80075f4 <_vfiprintf_r+0x44>
 8007604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007606:	f7fe fcd7 	bl	8005fb8 <__retarget_lock_release_recursive>
 800760a:	e7f3      	b.n	80075f4 <_vfiprintf_r+0x44>
 800760c:	2300      	movs	r3, #0
 800760e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007610:	2320      	movs	r3, #32
 8007612:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007616:	f8cd 800c 	str.w	r8, [sp, #12]
 800761a:	2330      	movs	r3, #48	@ 0x30
 800761c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80077cc <_vfiprintf_r+0x21c>
 8007620:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007624:	f04f 0901 	mov.w	r9, #1
 8007628:	4623      	mov	r3, r4
 800762a:	469a      	mov	sl, r3
 800762c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007630:	b10a      	cbz	r2, 8007636 <_vfiprintf_r+0x86>
 8007632:	2a25      	cmp	r2, #37	@ 0x25
 8007634:	d1f9      	bne.n	800762a <_vfiprintf_r+0x7a>
 8007636:	ebba 0b04 	subs.w	fp, sl, r4
 800763a:	d00b      	beq.n	8007654 <_vfiprintf_r+0xa4>
 800763c:	465b      	mov	r3, fp
 800763e:	4622      	mov	r2, r4
 8007640:	4629      	mov	r1, r5
 8007642:	4630      	mov	r0, r6
 8007644:	f7ff ffa1 	bl	800758a <__sfputs_r>
 8007648:	3001      	adds	r0, #1
 800764a:	f000 80a7 	beq.w	800779c <_vfiprintf_r+0x1ec>
 800764e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007650:	445a      	add	r2, fp
 8007652:	9209      	str	r2, [sp, #36]	@ 0x24
 8007654:	f89a 3000 	ldrb.w	r3, [sl]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 809f 	beq.w	800779c <_vfiprintf_r+0x1ec>
 800765e:	2300      	movs	r3, #0
 8007660:	f04f 32ff 	mov.w	r2, #4294967295
 8007664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007668:	f10a 0a01 	add.w	sl, sl, #1
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	9307      	str	r3, [sp, #28]
 8007670:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007674:	931a      	str	r3, [sp, #104]	@ 0x68
 8007676:	4654      	mov	r4, sl
 8007678:	2205      	movs	r2, #5
 800767a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767e:	4853      	ldr	r0, [pc, #332]	@ (80077cc <_vfiprintf_r+0x21c>)
 8007680:	f7f8 fdae 	bl	80001e0 <memchr>
 8007684:	9a04      	ldr	r2, [sp, #16]
 8007686:	b9d8      	cbnz	r0, 80076c0 <_vfiprintf_r+0x110>
 8007688:	06d1      	lsls	r1, r2, #27
 800768a:	bf44      	itt	mi
 800768c:	2320      	movmi	r3, #32
 800768e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007692:	0713      	lsls	r3, r2, #28
 8007694:	bf44      	itt	mi
 8007696:	232b      	movmi	r3, #43	@ 0x2b
 8007698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800769c:	f89a 3000 	ldrb.w	r3, [sl]
 80076a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80076a2:	d015      	beq.n	80076d0 <_vfiprintf_r+0x120>
 80076a4:	9a07      	ldr	r2, [sp, #28]
 80076a6:	4654      	mov	r4, sl
 80076a8:	2000      	movs	r0, #0
 80076aa:	f04f 0c0a 	mov.w	ip, #10
 80076ae:	4621      	mov	r1, r4
 80076b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076b4:	3b30      	subs	r3, #48	@ 0x30
 80076b6:	2b09      	cmp	r3, #9
 80076b8:	d94b      	bls.n	8007752 <_vfiprintf_r+0x1a2>
 80076ba:	b1b0      	cbz	r0, 80076ea <_vfiprintf_r+0x13a>
 80076bc:	9207      	str	r2, [sp, #28]
 80076be:	e014      	b.n	80076ea <_vfiprintf_r+0x13a>
 80076c0:	eba0 0308 	sub.w	r3, r0, r8
 80076c4:	fa09 f303 	lsl.w	r3, r9, r3
 80076c8:	4313      	orrs	r3, r2
 80076ca:	9304      	str	r3, [sp, #16]
 80076cc:	46a2      	mov	sl, r4
 80076ce:	e7d2      	b.n	8007676 <_vfiprintf_r+0xc6>
 80076d0:	9b03      	ldr	r3, [sp, #12]
 80076d2:	1d19      	adds	r1, r3, #4
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	9103      	str	r1, [sp, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bfbb      	ittet	lt
 80076dc:	425b      	neglt	r3, r3
 80076de:	f042 0202 	orrlt.w	r2, r2, #2
 80076e2:	9307      	strge	r3, [sp, #28]
 80076e4:	9307      	strlt	r3, [sp, #28]
 80076e6:	bfb8      	it	lt
 80076e8:	9204      	strlt	r2, [sp, #16]
 80076ea:	7823      	ldrb	r3, [r4, #0]
 80076ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80076ee:	d10a      	bne.n	8007706 <_vfiprintf_r+0x156>
 80076f0:	7863      	ldrb	r3, [r4, #1]
 80076f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80076f4:	d132      	bne.n	800775c <_vfiprintf_r+0x1ac>
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	9203      	str	r2, [sp, #12]
 80076fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007702:	3402      	adds	r4, #2
 8007704:	9305      	str	r3, [sp, #20]
 8007706:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80077dc <_vfiprintf_r+0x22c>
 800770a:	7821      	ldrb	r1, [r4, #0]
 800770c:	2203      	movs	r2, #3
 800770e:	4650      	mov	r0, sl
 8007710:	f7f8 fd66 	bl	80001e0 <memchr>
 8007714:	b138      	cbz	r0, 8007726 <_vfiprintf_r+0x176>
 8007716:	9b04      	ldr	r3, [sp, #16]
 8007718:	eba0 000a 	sub.w	r0, r0, sl
 800771c:	2240      	movs	r2, #64	@ 0x40
 800771e:	4082      	lsls	r2, r0
 8007720:	4313      	orrs	r3, r2
 8007722:	3401      	adds	r4, #1
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772a:	4829      	ldr	r0, [pc, #164]	@ (80077d0 <_vfiprintf_r+0x220>)
 800772c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007730:	2206      	movs	r2, #6
 8007732:	f7f8 fd55 	bl	80001e0 <memchr>
 8007736:	2800      	cmp	r0, #0
 8007738:	d03f      	beq.n	80077ba <_vfiprintf_r+0x20a>
 800773a:	4b26      	ldr	r3, [pc, #152]	@ (80077d4 <_vfiprintf_r+0x224>)
 800773c:	bb1b      	cbnz	r3, 8007786 <_vfiprintf_r+0x1d6>
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	3307      	adds	r3, #7
 8007742:	f023 0307 	bic.w	r3, r3, #7
 8007746:	3308      	adds	r3, #8
 8007748:	9303      	str	r3, [sp, #12]
 800774a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774c:	443b      	add	r3, r7
 800774e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007750:	e76a      	b.n	8007628 <_vfiprintf_r+0x78>
 8007752:	fb0c 3202 	mla	r2, ip, r2, r3
 8007756:	460c      	mov	r4, r1
 8007758:	2001      	movs	r0, #1
 800775a:	e7a8      	b.n	80076ae <_vfiprintf_r+0xfe>
 800775c:	2300      	movs	r3, #0
 800775e:	3401      	adds	r4, #1
 8007760:	9305      	str	r3, [sp, #20]
 8007762:	4619      	mov	r1, r3
 8007764:	f04f 0c0a 	mov.w	ip, #10
 8007768:	4620      	mov	r0, r4
 800776a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800776e:	3a30      	subs	r2, #48	@ 0x30
 8007770:	2a09      	cmp	r2, #9
 8007772:	d903      	bls.n	800777c <_vfiprintf_r+0x1cc>
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0c6      	beq.n	8007706 <_vfiprintf_r+0x156>
 8007778:	9105      	str	r1, [sp, #20]
 800777a:	e7c4      	b.n	8007706 <_vfiprintf_r+0x156>
 800777c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007780:	4604      	mov	r4, r0
 8007782:	2301      	movs	r3, #1
 8007784:	e7f0      	b.n	8007768 <_vfiprintf_r+0x1b8>
 8007786:	ab03      	add	r3, sp, #12
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	462a      	mov	r2, r5
 800778c:	4b12      	ldr	r3, [pc, #72]	@ (80077d8 <_vfiprintf_r+0x228>)
 800778e:	a904      	add	r1, sp, #16
 8007790:	4630      	mov	r0, r6
 8007792:	f7fd fdd1 	bl	8005338 <_printf_float>
 8007796:	4607      	mov	r7, r0
 8007798:	1c78      	adds	r0, r7, #1
 800779a:	d1d6      	bne.n	800774a <_vfiprintf_r+0x19a>
 800779c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800779e:	07d9      	lsls	r1, r3, #31
 80077a0:	d405      	bmi.n	80077ae <_vfiprintf_r+0x1fe>
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	059a      	lsls	r2, r3, #22
 80077a6:	d402      	bmi.n	80077ae <_vfiprintf_r+0x1fe>
 80077a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077aa:	f7fe fc05 	bl	8005fb8 <__retarget_lock_release_recursive>
 80077ae:	89ab      	ldrh	r3, [r5, #12]
 80077b0:	065b      	lsls	r3, r3, #25
 80077b2:	f53f af1f 	bmi.w	80075f4 <_vfiprintf_r+0x44>
 80077b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077b8:	e71e      	b.n	80075f8 <_vfiprintf_r+0x48>
 80077ba:	ab03      	add	r3, sp, #12
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	462a      	mov	r2, r5
 80077c0:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <_vfiprintf_r+0x228>)
 80077c2:	a904      	add	r1, sp, #16
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7fe f84f 	bl	8005868 <_printf_i>
 80077ca:	e7e4      	b.n	8007796 <_vfiprintf_r+0x1e6>
 80077cc:	08007f28 	.word	0x08007f28
 80077d0:	08007f32 	.word	0x08007f32
 80077d4:	08005339 	.word	0x08005339
 80077d8:	0800758b 	.word	0x0800758b
 80077dc:	08007f2e 	.word	0x08007f2e

080077e0 <__sflush_r>:
 80077e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e8:	0716      	lsls	r6, r2, #28
 80077ea:	4605      	mov	r5, r0
 80077ec:	460c      	mov	r4, r1
 80077ee:	d454      	bmi.n	800789a <__sflush_r+0xba>
 80077f0:	684b      	ldr	r3, [r1, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	dc02      	bgt.n	80077fc <__sflush_r+0x1c>
 80077f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	dd48      	ble.n	800788e <__sflush_r+0xae>
 80077fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077fe:	2e00      	cmp	r6, #0
 8007800:	d045      	beq.n	800788e <__sflush_r+0xae>
 8007802:	2300      	movs	r3, #0
 8007804:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007808:	682f      	ldr	r7, [r5, #0]
 800780a:	6a21      	ldr	r1, [r4, #32]
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	d030      	beq.n	8007872 <__sflush_r+0x92>
 8007810:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	0759      	lsls	r1, r3, #29
 8007816:	d505      	bpl.n	8007824 <__sflush_r+0x44>
 8007818:	6863      	ldr	r3, [r4, #4]
 800781a:	1ad2      	subs	r2, r2, r3
 800781c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800781e:	b10b      	cbz	r3, 8007824 <__sflush_r+0x44>
 8007820:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007822:	1ad2      	subs	r2, r2, r3
 8007824:	2300      	movs	r3, #0
 8007826:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007828:	6a21      	ldr	r1, [r4, #32]
 800782a:	4628      	mov	r0, r5
 800782c:	47b0      	blx	r6
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	d106      	bne.n	8007842 <__sflush_r+0x62>
 8007834:	6829      	ldr	r1, [r5, #0]
 8007836:	291d      	cmp	r1, #29
 8007838:	d82b      	bhi.n	8007892 <__sflush_r+0xb2>
 800783a:	4a2a      	ldr	r2, [pc, #168]	@ (80078e4 <__sflush_r+0x104>)
 800783c:	410a      	asrs	r2, r1
 800783e:	07d6      	lsls	r6, r2, #31
 8007840:	d427      	bmi.n	8007892 <__sflush_r+0xb2>
 8007842:	2200      	movs	r2, #0
 8007844:	6062      	str	r2, [r4, #4]
 8007846:	04d9      	lsls	r1, r3, #19
 8007848:	6922      	ldr	r2, [r4, #16]
 800784a:	6022      	str	r2, [r4, #0]
 800784c:	d504      	bpl.n	8007858 <__sflush_r+0x78>
 800784e:	1c42      	adds	r2, r0, #1
 8007850:	d101      	bne.n	8007856 <__sflush_r+0x76>
 8007852:	682b      	ldr	r3, [r5, #0]
 8007854:	b903      	cbnz	r3, 8007858 <__sflush_r+0x78>
 8007856:	6560      	str	r0, [r4, #84]	@ 0x54
 8007858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800785a:	602f      	str	r7, [r5, #0]
 800785c:	b1b9      	cbz	r1, 800788e <__sflush_r+0xae>
 800785e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007862:	4299      	cmp	r1, r3
 8007864:	d002      	beq.n	800786c <__sflush_r+0x8c>
 8007866:	4628      	mov	r0, r5
 8007868:	f7ff f9f6 	bl	8006c58 <_free_r>
 800786c:	2300      	movs	r3, #0
 800786e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007870:	e00d      	b.n	800788e <__sflush_r+0xae>
 8007872:	2301      	movs	r3, #1
 8007874:	4628      	mov	r0, r5
 8007876:	47b0      	blx	r6
 8007878:	4602      	mov	r2, r0
 800787a:	1c50      	adds	r0, r2, #1
 800787c:	d1c9      	bne.n	8007812 <__sflush_r+0x32>
 800787e:	682b      	ldr	r3, [r5, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0c6      	beq.n	8007812 <__sflush_r+0x32>
 8007884:	2b1d      	cmp	r3, #29
 8007886:	d001      	beq.n	800788c <__sflush_r+0xac>
 8007888:	2b16      	cmp	r3, #22
 800788a:	d11e      	bne.n	80078ca <__sflush_r+0xea>
 800788c:	602f      	str	r7, [r5, #0]
 800788e:	2000      	movs	r0, #0
 8007890:	e022      	b.n	80078d8 <__sflush_r+0xf8>
 8007892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007896:	b21b      	sxth	r3, r3
 8007898:	e01b      	b.n	80078d2 <__sflush_r+0xf2>
 800789a:	690f      	ldr	r7, [r1, #16]
 800789c:	2f00      	cmp	r7, #0
 800789e:	d0f6      	beq.n	800788e <__sflush_r+0xae>
 80078a0:	0793      	lsls	r3, r2, #30
 80078a2:	680e      	ldr	r6, [r1, #0]
 80078a4:	bf08      	it	eq
 80078a6:	694b      	ldreq	r3, [r1, #20]
 80078a8:	600f      	str	r7, [r1, #0]
 80078aa:	bf18      	it	ne
 80078ac:	2300      	movne	r3, #0
 80078ae:	eba6 0807 	sub.w	r8, r6, r7
 80078b2:	608b      	str	r3, [r1, #8]
 80078b4:	f1b8 0f00 	cmp.w	r8, #0
 80078b8:	dde9      	ble.n	800788e <__sflush_r+0xae>
 80078ba:	6a21      	ldr	r1, [r4, #32]
 80078bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078be:	4643      	mov	r3, r8
 80078c0:	463a      	mov	r2, r7
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b0      	blx	r6
 80078c6:	2800      	cmp	r0, #0
 80078c8:	dc08      	bgt.n	80078dc <__sflush_r+0xfc>
 80078ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078dc:	4407      	add	r7, r0
 80078de:	eba8 0800 	sub.w	r8, r8, r0
 80078e2:	e7e7      	b.n	80078b4 <__sflush_r+0xd4>
 80078e4:	dfbffffe 	.word	0xdfbffffe

080078e8 <_fflush_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	690b      	ldr	r3, [r1, #16]
 80078ec:	4605      	mov	r5, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	b913      	cbnz	r3, 80078f8 <_fflush_r+0x10>
 80078f2:	2500      	movs	r5, #0
 80078f4:	4628      	mov	r0, r5
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	b118      	cbz	r0, 8007902 <_fflush_r+0x1a>
 80078fa:	6a03      	ldr	r3, [r0, #32]
 80078fc:	b90b      	cbnz	r3, 8007902 <_fflush_r+0x1a>
 80078fe:	f7fe f95f 	bl	8005bc0 <__sinit>
 8007902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0f3      	beq.n	80078f2 <_fflush_r+0xa>
 800790a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800790c:	07d0      	lsls	r0, r2, #31
 800790e:	d404      	bmi.n	800791a <_fflush_r+0x32>
 8007910:	0599      	lsls	r1, r3, #22
 8007912:	d402      	bmi.n	800791a <_fflush_r+0x32>
 8007914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007916:	f7fe fb4e 	bl	8005fb6 <__retarget_lock_acquire_recursive>
 800791a:	4628      	mov	r0, r5
 800791c:	4621      	mov	r1, r4
 800791e:	f7ff ff5f 	bl	80077e0 <__sflush_r>
 8007922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007924:	07da      	lsls	r2, r3, #31
 8007926:	4605      	mov	r5, r0
 8007928:	d4e4      	bmi.n	80078f4 <_fflush_r+0xc>
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	059b      	lsls	r3, r3, #22
 800792e:	d4e1      	bmi.n	80078f4 <_fflush_r+0xc>
 8007930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007932:	f7fe fb41 	bl	8005fb8 <__retarget_lock_release_recursive>
 8007936:	e7dd      	b.n	80078f4 <_fflush_r+0xc>

08007938 <__swhatbuf_r>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	460c      	mov	r4, r1
 800793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007940:	2900      	cmp	r1, #0
 8007942:	b096      	sub	sp, #88	@ 0x58
 8007944:	4615      	mov	r5, r2
 8007946:	461e      	mov	r6, r3
 8007948:	da0d      	bge.n	8007966 <__swhatbuf_r+0x2e>
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007950:	f04f 0100 	mov.w	r1, #0
 8007954:	bf14      	ite	ne
 8007956:	2340      	movne	r3, #64	@ 0x40
 8007958:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800795c:	2000      	movs	r0, #0
 800795e:	6031      	str	r1, [r6, #0]
 8007960:	602b      	str	r3, [r5, #0]
 8007962:	b016      	add	sp, #88	@ 0x58
 8007964:	bd70      	pop	{r4, r5, r6, pc}
 8007966:	466a      	mov	r2, sp
 8007968:	f000 f848 	bl	80079fc <_fstat_r>
 800796c:	2800      	cmp	r0, #0
 800796e:	dbec      	blt.n	800794a <__swhatbuf_r+0x12>
 8007970:	9901      	ldr	r1, [sp, #4]
 8007972:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007976:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800797a:	4259      	negs	r1, r3
 800797c:	4159      	adcs	r1, r3
 800797e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007982:	e7eb      	b.n	800795c <__swhatbuf_r+0x24>

08007984 <__smakebuf_r>:
 8007984:	898b      	ldrh	r3, [r1, #12]
 8007986:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007988:	079d      	lsls	r5, r3, #30
 800798a:	4606      	mov	r6, r0
 800798c:	460c      	mov	r4, r1
 800798e:	d507      	bpl.n	80079a0 <__smakebuf_r+0x1c>
 8007990:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	2301      	movs	r3, #1
 800799a:	6163      	str	r3, [r4, #20]
 800799c:	b003      	add	sp, #12
 800799e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a0:	ab01      	add	r3, sp, #4
 80079a2:	466a      	mov	r2, sp
 80079a4:	f7ff ffc8 	bl	8007938 <__swhatbuf_r>
 80079a8:	9f00      	ldr	r7, [sp, #0]
 80079aa:	4605      	mov	r5, r0
 80079ac:	4639      	mov	r1, r7
 80079ae:	4630      	mov	r0, r6
 80079b0:	f7ff f9c6 	bl	8006d40 <_malloc_r>
 80079b4:	b948      	cbnz	r0, 80079ca <__smakebuf_r+0x46>
 80079b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ba:	059a      	lsls	r2, r3, #22
 80079bc:	d4ee      	bmi.n	800799c <__smakebuf_r+0x18>
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	f043 0302 	orr.w	r3, r3, #2
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	e7e2      	b.n	8007990 <__smakebuf_r+0xc>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	6020      	str	r0, [r4, #0]
 80079ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d2:	81a3      	strh	r3, [r4, #12]
 80079d4:	9b01      	ldr	r3, [sp, #4]
 80079d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079da:	b15b      	cbz	r3, 80079f4 <__smakebuf_r+0x70>
 80079dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e0:	4630      	mov	r0, r6
 80079e2:	f000 f81d 	bl	8007a20 <_isatty_r>
 80079e6:	b128      	cbz	r0, 80079f4 <__smakebuf_r+0x70>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	431d      	orrs	r5, r3
 80079f8:	81a5      	strh	r5, [r4, #12]
 80079fa:	e7cf      	b.n	800799c <__smakebuf_r+0x18>

080079fc <_fstat_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4d07      	ldr	r5, [pc, #28]	@ (8007a1c <_fstat_r+0x20>)
 8007a00:	2300      	movs	r3, #0
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	4611      	mov	r1, r2
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	f7fa fb91 	bl	8002130 <_fstat>
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	d102      	bne.n	8007a18 <_fstat_r+0x1c>
 8007a12:	682b      	ldr	r3, [r5, #0]
 8007a14:	b103      	cbz	r3, 8007a18 <_fstat_r+0x1c>
 8007a16:	6023      	str	r3, [r4, #0]
 8007a18:	bd38      	pop	{r3, r4, r5, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200004f0 	.word	0x200004f0

08007a20 <_isatty_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d06      	ldr	r5, [pc, #24]	@ (8007a3c <_isatty_r+0x1c>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7fa fb90 	bl	8002150 <_isatty>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_isatty_r+0x1a>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_isatty_r+0x1a>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	200004f0 	.word	0x200004f0

08007a40 <_sbrk_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d06      	ldr	r5, [pc, #24]	@ (8007a5c <_sbrk_r+0x1c>)
 8007a44:	2300      	movs	r3, #0
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7fa fb98 	bl	8002180 <_sbrk>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_sbrk_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_sbrk_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	200004f0 	.word	0x200004f0

08007a60 <memcpy>:
 8007a60:	440a      	add	r2, r1
 8007a62:	4291      	cmp	r1, r2
 8007a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a68:	d100      	bne.n	8007a6c <memcpy+0xc>
 8007a6a:	4770      	bx	lr
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a76:	4291      	cmp	r1, r2
 8007a78:	d1f9      	bne.n	8007a6e <memcpy+0xe>
 8007a7a:	bd10      	pop	{r4, pc}

08007a7c <__assert_func>:
 8007a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a7e:	4614      	mov	r4, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	4b09      	ldr	r3, [pc, #36]	@ (8007aa8 <__assert_func+0x2c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4605      	mov	r5, r0
 8007a88:	68d8      	ldr	r0, [r3, #12]
 8007a8a:	b954      	cbnz	r4, 8007aa2 <__assert_func+0x26>
 8007a8c:	4b07      	ldr	r3, [pc, #28]	@ (8007aac <__assert_func+0x30>)
 8007a8e:	461c      	mov	r4, r3
 8007a90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a94:	9100      	str	r1, [sp, #0]
 8007a96:	462b      	mov	r3, r5
 8007a98:	4905      	ldr	r1, [pc, #20]	@ (8007ab0 <__assert_func+0x34>)
 8007a9a:	f000 f841 	bl	8007b20 <fiprintf>
 8007a9e:	f000 f851 	bl	8007b44 <abort>
 8007aa2:	4b04      	ldr	r3, [pc, #16]	@ (8007ab4 <__assert_func+0x38>)
 8007aa4:	e7f4      	b.n	8007a90 <__assert_func+0x14>
 8007aa6:	bf00      	nop
 8007aa8:	20000018 	.word	0x20000018
 8007aac:	08007f7e 	.word	0x08007f7e
 8007ab0:	08007f50 	.word	0x08007f50
 8007ab4:	08007f43 	.word	0x08007f43

08007ab8 <_calloc_r>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	fba1 5402 	umull	r5, r4, r1, r2
 8007abe:	b93c      	cbnz	r4, 8007ad0 <_calloc_r+0x18>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	f7ff f93d 	bl	8006d40 <_malloc_r>
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	b928      	cbnz	r0, 8007ad6 <_calloc_r+0x1e>
 8007aca:	2600      	movs	r6, #0
 8007acc:	4630      	mov	r0, r6
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	220c      	movs	r2, #12
 8007ad2:	6002      	str	r2, [r0, #0]
 8007ad4:	e7f9      	b.n	8007aca <_calloc_r+0x12>
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4621      	mov	r1, r4
 8007ada:	f7fe f9ef 	bl	8005ebc <memset>
 8007ade:	e7f5      	b.n	8007acc <_calloc_r+0x14>

08007ae0 <__ascii_mbtowc>:
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	b901      	cbnz	r1, 8007ae6 <__ascii_mbtowc+0x6>
 8007ae4:	a901      	add	r1, sp, #4
 8007ae6:	b142      	cbz	r2, 8007afa <__ascii_mbtowc+0x1a>
 8007ae8:	b14b      	cbz	r3, 8007afe <__ascii_mbtowc+0x1e>
 8007aea:	7813      	ldrb	r3, [r2, #0]
 8007aec:	600b      	str	r3, [r1, #0]
 8007aee:	7812      	ldrb	r2, [r2, #0]
 8007af0:	1e10      	subs	r0, r2, #0
 8007af2:	bf18      	it	ne
 8007af4:	2001      	movne	r0, #1
 8007af6:	b002      	add	sp, #8
 8007af8:	4770      	bx	lr
 8007afa:	4610      	mov	r0, r2
 8007afc:	e7fb      	b.n	8007af6 <__ascii_mbtowc+0x16>
 8007afe:	f06f 0001 	mvn.w	r0, #1
 8007b02:	e7f8      	b.n	8007af6 <__ascii_mbtowc+0x16>

08007b04 <__ascii_wctomb>:
 8007b04:	4603      	mov	r3, r0
 8007b06:	4608      	mov	r0, r1
 8007b08:	b141      	cbz	r1, 8007b1c <__ascii_wctomb+0x18>
 8007b0a:	2aff      	cmp	r2, #255	@ 0xff
 8007b0c:	d904      	bls.n	8007b18 <__ascii_wctomb+0x14>
 8007b0e:	228a      	movs	r2, #138	@ 0x8a
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295
 8007b16:	4770      	bx	lr
 8007b18:	700a      	strb	r2, [r1, #0]
 8007b1a:	2001      	movs	r0, #1
 8007b1c:	4770      	bx	lr
	...

08007b20 <fiprintf>:
 8007b20:	b40e      	push	{r1, r2, r3}
 8007b22:	b503      	push	{r0, r1, lr}
 8007b24:	4601      	mov	r1, r0
 8007b26:	ab03      	add	r3, sp, #12
 8007b28:	4805      	ldr	r0, [pc, #20]	@ (8007b40 <fiprintf+0x20>)
 8007b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b2e:	6800      	ldr	r0, [r0, #0]
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	f7ff fd3d 	bl	80075b0 <_vfiprintf_r>
 8007b36:	b002      	add	sp, #8
 8007b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b3c:	b003      	add	sp, #12
 8007b3e:	4770      	bx	lr
 8007b40:	20000018 	.word	0x20000018

08007b44 <abort>:
 8007b44:	b508      	push	{r3, lr}
 8007b46:	2006      	movs	r0, #6
 8007b48:	f000 f82c 	bl	8007ba4 <raise>
 8007b4c:	2001      	movs	r0, #1
 8007b4e:	f7fa fa9f 	bl	8002090 <_exit>

08007b52 <_raise_r>:
 8007b52:	291f      	cmp	r1, #31
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4605      	mov	r5, r0
 8007b58:	460c      	mov	r4, r1
 8007b5a:	d904      	bls.n	8007b66 <_raise_r+0x14>
 8007b5c:	2316      	movs	r3, #22
 8007b5e:	6003      	str	r3, [r0, #0]
 8007b60:	f04f 30ff 	mov.w	r0, #4294967295
 8007b64:	bd38      	pop	{r3, r4, r5, pc}
 8007b66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b68:	b112      	cbz	r2, 8007b70 <_raise_r+0x1e>
 8007b6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b6e:	b94b      	cbnz	r3, 8007b84 <_raise_r+0x32>
 8007b70:	4628      	mov	r0, r5
 8007b72:	f000 f831 	bl	8007bd8 <_getpid_r>
 8007b76:	4622      	mov	r2, r4
 8007b78:	4601      	mov	r1, r0
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b80:	f000 b818 	b.w	8007bb4 <_kill_r>
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d00a      	beq.n	8007b9e <_raise_r+0x4c>
 8007b88:	1c59      	adds	r1, r3, #1
 8007b8a:	d103      	bne.n	8007b94 <_raise_r+0x42>
 8007b8c:	2316      	movs	r3, #22
 8007b8e:	6003      	str	r3, [r0, #0]
 8007b90:	2001      	movs	r0, #1
 8007b92:	e7e7      	b.n	8007b64 <_raise_r+0x12>
 8007b94:	2100      	movs	r1, #0
 8007b96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4798      	blx	r3
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	e7e0      	b.n	8007b64 <_raise_r+0x12>
	...

08007ba4 <raise>:
 8007ba4:	4b02      	ldr	r3, [pc, #8]	@ (8007bb0 <raise+0xc>)
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	f7ff bfd2 	b.w	8007b52 <_raise_r>
 8007bae:	bf00      	nop
 8007bb0:	20000018 	.word	0x20000018

08007bb4 <_kill_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d07      	ldr	r5, [pc, #28]	@ (8007bd4 <_kill_r+0x20>)
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	602b      	str	r3, [r5, #0]
 8007bc2:	f7fa fa55 	bl	8002070 <_kill>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	d102      	bne.n	8007bd0 <_kill_r+0x1c>
 8007bca:	682b      	ldr	r3, [r5, #0]
 8007bcc:	b103      	cbz	r3, 8007bd0 <_kill_r+0x1c>
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	bd38      	pop	{r3, r4, r5, pc}
 8007bd2:	bf00      	nop
 8007bd4:	200004f0 	.word	0x200004f0

08007bd8 <_getpid_r>:
 8007bd8:	f7fa ba42 	b.w	8002060 <_getpid>

08007bdc <_init>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr

08007be8 <_fini>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	bf00      	nop
 8007bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bee:	bc08      	pop	{r3}
 8007bf0:	469e      	mov	lr, r3
 8007bf2:	4770      	bx	lr
